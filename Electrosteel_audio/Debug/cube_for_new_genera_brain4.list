
cube_for_new_genera_brain4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed34  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007188  0800efd0  0800efd0  0001efd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016158  08016158  00030b78  2**0
                  CONTENTS
  4 .ARM          00000000  08016158  08016158  00030b78  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016158  08016158  00030b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016158  08016158  00026158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801615c  0801615c  0002615c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b78  20000000  08016160  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019188  20000b78  08016cd8  00030b78  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20019d00  08016cd8  00039d00  2**0
                  ALLOC
 11 .RAM_D1       0007eb58  24000000  24000000  00040000  2**5
                  ALLOC
 12 .RAM_D2       000004f4  30000000  30000000  00040000  2**5
                  ALLOC
 13 .SDRAM        02000000  60000000  60000000  00040000  2**5
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00030b78  2**0
                  CONTENTS, READONLY
 15 .debug_info   0007a18b  00000000  00000000  00030ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a40c  00000000  00000000  000aad31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    0004a580  00000000  00000000  000b513d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002cf8  00000000  00000000  000ff6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00009980  00000000  00000000  001023b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003e8b7  00000000  00000000  0010bd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00051602  00000000  00000000  0014a5ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00168fa3  00000000  00000000  0019bbf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000053  00000000  00000000  00304b94  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00009fa0  00000000  00000000  00304be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000b78 	.word	0x20000b78
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800efb4 	.word	0x0800efb4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000b7c 	.word	0x20000b7c
 80002d4:	0800efb4 	.word	0x0800efb4

080002d8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <HAL_InitTick+0x40>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	b90b      	cbnz	r3, 80002e2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80002de:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80002e0:	4770      	bx	lr
{
 80002e2:	b510      	push	{r4, lr}
 80002e4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80002e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ea:	4a0c      	ldr	r2, [pc, #48]	; (800031c <HAL_InitTick+0x44>)
 80002ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80002f0:	6810      	ldr	r0, [r2, #0]
 80002f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80002f6:	f000 f8d5 	bl	80004a4 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002fa:	2c0f      	cmp	r4, #15
 80002fc:	d800      	bhi.n	8000300 <HAL_InitTick+0x28>
 80002fe:	b108      	cbz	r0, 8000304 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000300:	2001      	movs	r0, #1
}
 8000302:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000304:	2200      	movs	r2, #0
 8000306:	4621      	mov	r1, r4
 8000308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800030c:	f000 f882 	bl	8000414 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <HAL_InitTick+0x48>)
 8000312:	2000      	movs	r0, #0
 8000314:	601c      	str	r4, [r3, #0]
}
 8000316:	bd10      	pop	{r4, pc}
 8000318:	20000000 	.word	0x20000000
 800031c:	20000b08 	.word	0x20000b08
 8000320:	20000004 	.word	0x20000004

08000324 <HAL_Init>:
{
 8000324:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000326:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000328:	4c12      	ldr	r4, [pc, #72]	; (8000374 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800032a:	f000 f85f 	bl	80003ec <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800032e:	4d12      	ldr	r5, [pc, #72]	; (8000378 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000330:	f002 fc02 	bl	8002b38 <HAL_RCC_GetSysClockFreq>
 8000334:	4b11      	ldr	r3, [pc, #68]	; (800037c <HAL_Init+0x58>)
 8000336:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000338:	2000      	movs	r0, #0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800033a:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800033c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800033e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000342:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000346:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000348:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800034a:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 800034e:	4c0c      	ldr	r4, [pc, #48]	; (8000380 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000350:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000354:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000356:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800035a:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800035c:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800035e:	f7ff ffbb 	bl	80002d8 <HAL_InitTick>
 8000362:	b110      	cbz	r0, 800036a <HAL_Init+0x46>
    return HAL_ERROR;
 8000364:	2401      	movs	r4, #1
}
 8000366:	4620      	mov	r0, r4
 8000368:	bd38      	pop	{r3, r4, r5, pc}
 800036a:	4604      	mov	r4, r0
  HAL_MspInit();
 800036c:	f00b f868 	bl	800b440 <HAL_MspInit>
}
 8000370:	4620      	mov	r0, r4
 8000372:	bd38      	pop	{r3, r4, r5, pc}
 8000374:	0800efec 	.word	0x0800efec
 8000378:	20000b0c 	.word	0x20000b0c
 800037c:	58024400 	.word	0x58024400
 8000380:	20000b08 	.word	0x20000b08

08000384 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000384:	4a03      	ldr	r2, [pc, #12]	; (8000394 <HAL_IncTick+0x10>)
 8000386:	4b04      	ldr	r3, [pc, #16]	; (8000398 <HAL_IncTick+0x14>)
 8000388:	6811      	ldr	r1, [r2, #0]
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	440b      	add	r3, r1
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	20000bf8 	.word	0x20000bf8
 8000398:	20000000 	.word	0x20000000

0800039c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800039c:	4b01      	ldr	r3, [pc, #4]	; (80003a4 <HAL_GetTick+0x8>)
 800039e:	6818      	ldr	r0, [r3, #0]
}
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	20000bf8 	.word	0x20000bf8

080003a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003a8:	b538      	push	{r3, r4, r5, lr}
 80003aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80003ac:	f7ff fff6 	bl	800039c <HAL_GetTick>
 80003b0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003b2:	1c63      	adds	r3, r4, #1
 80003b4:	d002      	beq.n	80003bc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80003b6:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <HAL_Delay+0x20>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80003bc:	f7ff ffee 	bl	800039c <HAL_GetTick>
 80003c0:	1b43      	subs	r3, r0, r5
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d3fa      	bcc.n	80003bc <HAL_Delay+0x14>
  {
  }
}
 80003c6:	bd38      	pop	{r3, r4, r5, pc}
 80003c8:	20000000 	.word	0x20000000

080003cc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80003cc:	4b01      	ldr	r3, [pc, #4]	; (80003d4 <HAL_GetREVID+0x8>)
 80003ce:	6818      	ldr	r0, [r3, #0]
}
 80003d0:	0c00      	lsrs	r0, r0, #16
 80003d2:	4770      	bx	lr
 80003d4:	5c001000 	.word	0x5c001000

080003d8 <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80003d8:	4a03      	ldr	r2, [pc, #12]	; (80003e8 <HAL_SetFMCMemorySwappingConfig+0x10>)
 80003da:	6813      	ldr	r3, [r2, #0]
 80003dc:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80003e0:	4318      	orrs	r0, r3
 80003e2:	6010      	str	r0, [r2, #0]
}
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	52004000 	.word	0x52004000

080003ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003ec:	4907      	ldr	r1, [pc, #28]	; (800040c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80003ee:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80003f0:	4b07      	ldr	r3, [pc, #28]	; (8000410 <HAL_NVIC_SetPriorityGrouping+0x24>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80003f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003f6:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003f8:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003fc:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003fe:	4022      	ands	r2, r4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000400:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8000402:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000404:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000406:	f85d 4b04 	ldr.w	r4, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	e000ed00 	.word	0xe000ed00
 8000410:	05fa0000 	.word	0x05fa0000

08000414 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000414:	4b19      	ldr	r3, [pc, #100]	; (800047c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000416:	b430      	push	{r4, r5}
 8000418:	68db      	ldr	r3, [r3, #12]
 800041a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800041e:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000422:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000424:	2d04      	cmp	r5, #4
 8000426:	bf28      	it	cs
 8000428:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800042a:	2c06      	cmp	r4, #6
 800042c:	d919      	bls.n	8000462 <HAL_NVIC_SetPriority+0x4e>
 800042e:	3b03      	subs	r3, #3
 8000430:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000434:	409c      	lsls	r4, r3
 8000436:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800043a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 800043e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000440:	fa04 f405 	lsl.w	r4, r4, r5
 8000444:	ea21 0104 	bic.w	r1, r1, r4
 8000448:	fa01 f103 	lsl.w	r1, r1, r3
 800044c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000450:	db0a      	blt.n	8000468 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000452:	0109      	lsls	r1, r1, #4
 8000454:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <HAL_NVIC_SetPriority+0x6c>)
 8000456:	b2c9      	uxtb	r1, r1
 8000458:	4403      	add	r3, r0
 800045a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800045e:	bc30      	pop	{r4, r5}
 8000460:	4770      	bx	lr
 8000462:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000464:	4613      	mov	r3, r2
 8000466:	e7e8      	b.n	800043a <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000468:	f000 000f 	and.w	r0, r0, #15
 800046c:	0109      	lsls	r1, r1, #4
 800046e:	4b05      	ldr	r3, [pc, #20]	; (8000484 <HAL_NVIC_SetPriority+0x70>)
 8000470:	b2c9      	uxtb	r1, r1
 8000472:	4403      	add	r3, r0
 8000474:	7619      	strb	r1, [r3, #24]
 8000476:	bc30      	pop	{r4, r5}
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	e000ed00 	.word	0xe000ed00
 8000480:	e000e100 	.word	0xe000e100
 8000484:	e000ecfc 	.word	0xe000ecfc

08000488 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000488:	2800      	cmp	r0, #0
 800048a:	db07      	blt.n	800049c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800048c:	2301      	movs	r3, #1
 800048e:	f000 011f 	and.w	r1, r0, #31
 8000492:	4a03      	ldr	r2, [pc, #12]	; (80004a0 <HAL_NVIC_EnableIRQ+0x18>)
 8000494:	0940      	lsrs	r0, r0, #5
 8000496:	408b      	lsls	r3, r1
 8000498:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	e000e100 	.word	0xe000e100

080004a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004a4:	3801      	subs	r0, #1
 80004a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80004aa:	d20d      	bcs.n	80004c8 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004ac:	4b07      	ldr	r3, [pc, #28]	; (80004cc <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004ae:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004b0:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004b2:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b4:	25f0      	movs	r5, #240	; 0xf0
 80004b6:	4c06      	ldr	r4, [pc, #24]	; (80004d0 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004b8:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004ba:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004bc:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004c2:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80004c4:	bc30      	pop	{r4, r5}
 80004c6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80004c8:	2001      	movs	r0, #1
 80004ca:	4770      	bx	lr
 80004cc:	e000e010 	.word	0xe000e010
 80004d0:	e000ed00 	.word	0xe000ed00

080004d4 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80004d4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80004da:	2000      	movs	r0, #0
 80004dc:	4904      	ldr	r1, [pc, #16]	; (80004f0 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80004de:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80004e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004e4:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 80004e6:	6048      	str	r0, [r1, #4]
}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	e000ed00 	.word	0xe000ed00
 80004f0:	e000ed90 	.word	0xe000ed90

080004f4 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80004f6:	f040 0001 	orr.w	r0, r0, #1
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <HAL_MPU_Enable+0x20>)
 80004fc:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80004fe:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000504:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000506:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800050a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800050e:	4770      	bx	lr
 8000510:	e000ed00 	.word	0xe000ed00
 8000514:	e000ed90 	.word	0xe000ed90

08000518 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000518:	7843      	ldrb	r3, [r0, #1]
 800051a:	4a13      	ldr	r2, [pc, #76]	; (8000568 <HAL_MPU_ConfigRegion+0x50>)
 800051c:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 800051e:	7803      	ldrb	r3, [r0, #0]
 8000520:	b1f3      	cbz	r3, 8000560 <HAL_MPU_ConfigRegion+0x48>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000522:	6843      	ldr	r3, [r0, #4]
{
 8000524:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 8000526:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000528:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800052a:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800052c:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800052e:	7805      	ldrb	r5, [r0, #0]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000530:	7a84      	ldrb	r4, [r0, #10]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000532:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000536:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000538:	7b86      	ldrb	r6, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800053a:	432b      	orrs	r3, r5
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800053c:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800053e:	ea43 43c4 	orr.w	r3, r3, r4, lsl #19
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000542:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000544:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8000548:	7a01      	ldrb	r1, [r0, #8]
 800054a:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 800054e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8000552:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8000556:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800055a:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800055c:	bc70      	pop	{r4, r5, r6}
 800055e:	4770      	bx	lr
    MPU->RBAR = 0x00;
 8000560:	60d3      	str	r3, [r2, #12]
    MPU->RASR = 0x00;
 8000562:	6113      	str	r3, [r2, #16]
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	e000ed90 	.word	0xe000ed90

0800056c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800056c:	4b35      	ldr	r3, [pc, #212]	; (8000644 <DMA_CalcBaseAndBitshift+0xd8>)
 800056e:	4936      	ldr	r1, [pc, #216]	; (8000648 <DMA_CalcBaseAndBitshift+0xdc>)
{
 8000570:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000572:	4c36      	ldr	r4, [pc, #216]	; (800064c <DMA_CalcBaseAndBitshift+0xe0>)
 8000574:	6802      	ldr	r2, [r0, #0]
 8000576:	4d36      	ldr	r5, [pc, #216]	; (8000650 <DMA_CalcBaseAndBitshift+0xe4>)
 8000578:	42a2      	cmp	r2, r4
 800057a:	bf18      	it	ne
 800057c:	429a      	cmpne	r2, r3
 800057e:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8000582:	bf0c      	ite	eq
 8000584:	2301      	moveq	r3, #1
 8000586:	2300      	movne	r3, #0
 8000588:	428a      	cmp	r2, r1
 800058a:	bf08      	it	eq
 800058c:	f043 0301 	orreq.w	r3, r3, #1
 8000590:	3148      	adds	r1, #72	; 0x48
 8000592:	42aa      	cmp	r2, r5
 8000594:	bf08      	it	eq
 8000596:	f043 0301 	orreq.w	r3, r3, #1
 800059a:	3548      	adds	r5, #72	; 0x48
 800059c:	42a2      	cmp	r2, r4
 800059e:	bf08      	it	eq
 80005a0:	f043 0301 	orreq.w	r3, r3, #1
 80005a4:	3448      	adds	r4, #72	; 0x48
 80005a6:	428a      	cmp	r2, r1
 80005a8:	bf08      	it	eq
 80005aa:	f043 0301 	orreq.w	r3, r3, #1
 80005ae:	f501 7162 	add.w	r1, r1, #904	; 0x388
 80005b2:	42aa      	cmp	r2, r5
 80005b4:	bf08      	it	eq
 80005b6:	f043 0301 	orreq.w	r3, r3, #1
 80005ba:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80005be:	42a2      	cmp	r2, r4
 80005c0:	bf08      	it	eq
 80005c2:	f043 0301 	orreq.w	r3, r3, #1
 80005c6:	f504 7462 	add.w	r4, r4, #904	; 0x388
 80005ca:	428a      	cmp	r2, r1
 80005cc:	bf08      	it	eq
 80005ce:	f043 0301 	orreq.w	r3, r3, #1
 80005d2:	3148      	adds	r1, #72	; 0x48
 80005d4:	42aa      	cmp	r2, r5
 80005d6:	bf08      	it	eq
 80005d8:	f043 0301 	orreq.w	r3, r3, #1
 80005dc:	3548      	adds	r5, #72	; 0x48
 80005de:	42a2      	cmp	r2, r4
 80005e0:	bf08      	it	eq
 80005e2:	f043 0301 	orreq.w	r3, r3, #1
 80005e6:	3448      	adds	r4, #72	; 0x48
 80005e8:	428a      	cmp	r2, r1
 80005ea:	bf08      	it	eq
 80005ec:	f043 0301 	orreq.w	r3, r3, #1
 80005f0:	3148      	adds	r1, #72	; 0x48
 80005f2:	42aa      	cmp	r2, r5
 80005f4:	bf08      	it	eq
 80005f6:	f043 0301 	orreq.w	r3, r3, #1
 80005fa:	42a2      	cmp	r2, r4
 80005fc:	bf08      	it	eq
 80005fe:	f043 0301 	orreq.w	r3, r3, #1
 8000602:	428a      	cmp	r2, r1
 8000604:	bf08      	it	eq
 8000606:	f043 0301 	orreq.w	r3, r3, #1
 800060a:	b913      	cbnz	r3, 8000612 <DMA_CalcBaseAndBitshift+0xa6>
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <DMA_CalcBaseAndBitshift+0xe8>)
 800060e:	429a      	cmp	r2, r3
 8000610:	d113      	bne.n	800063a <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8000612:	b2d3      	uxtb	r3, r2
 8000614:	4910      	ldr	r1, [pc, #64]	; (8000658 <DMA_CalcBaseAndBitshift+0xec>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8000616:	4c11      	ldr	r4, [pc, #68]	; (800065c <DMA_CalcBaseAndBitshift+0xf0>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8000618:	3b10      	subs	r3, #16
 800061a:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 800061e:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8000622:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8000626:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800062a:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800062c:	bf88      	it	hi
 800062e:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8000630:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8000632:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8000634:	4618      	mov	r0, r3
 8000636:	bc30      	pop	{r4, r5}
 8000638:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800063a:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 800063e:	6583      	str	r3, [r0, #88]	; 0x58
 8000640:	e7f8      	b.n	8000634 <DMA_CalcBaseAndBitshift+0xc8>
 8000642:	bf00      	nop
 8000644:	40020010 	.word	0x40020010
 8000648:	40020040 	.word	0x40020040
 800064c:	40020028 	.word	0x40020028
 8000650:	40020058 	.word	0x40020058
 8000654:	400204b8 	.word	0x400204b8
 8000658:	aaaaaaab 	.word	0xaaaaaaab
 800065c:	0800efd0 	.word	0x0800efd0
 8000660:	fffffc00 	.word	0xfffffc00

08000664 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8000664:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8000666:	4a29      	ldr	r2, [pc, #164]	; (800070c <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8000668:	4929      	ldr	r1, [pc, #164]	; (8000710 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 800066a:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800066c:	4d29      	ldr	r5, [pc, #164]	; (8000714 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 800066e:	4c2a      	ldr	r4, [pc, #168]	; (8000718 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8000670:	42ab      	cmp	r3, r5
 8000672:	bf18      	it	ne
 8000674:	4293      	cmpne	r3, r2
 8000676:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 800067a:	bf0c      	ite	eq
 800067c:	2201      	moveq	r2, #1
 800067e:	2200      	movne	r2, #0
 8000680:	42a3      	cmp	r3, r4
 8000682:	bf08      	it	eq
 8000684:	f042 0201 	orreq.w	r2, r2, #1
 8000688:	343c      	adds	r4, #60	; 0x3c
 800068a:	428b      	cmp	r3, r1
 800068c:	bf08      	it	eq
 800068e:	f042 0201 	orreq.w	r2, r2, #1
 8000692:	313c      	adds	r1, #60	; 0x3c
 8000694:	42ab      	cmp	r3, r5
 8000696:	bf08      	it	eq
 8000698:	f042 0201 	orreq.w	r2, r2, #1
 800069c:	42a3      	cmp	r3, r4
 800069e:	bf08      	it	eq
 80006a0:	f042 0201 	orreq.w	r2, r2, #1
 80006a4:	428b      	cmp	r3, r1
 80006a6:	bf08      	it	eq
 80006a8:	f042 0201 	orreq.w	r2, r2, #1
 80006ac:	b912      	cbnz	r2, 80006b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 80006ae:	4a1b      	ldr	r2, [pc, #108]	; (800071c <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d113      	bne.n	80006dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	4d1a      	ldr	r5, [pc, #104]	; (8000720 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80006b8:	4a1a      	ldr	r2, [pc, #104]	; (8000724 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80006ba:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80006bc:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80006be:	4c1a      	ldr	r4, [pc, #104]	; (8000728 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80006c0:	fba5 5303 	umull	r5, r3, r5, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80006c4:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80006c6:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80006ca:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80006ce:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80006d0:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80006d4:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80006d6:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80006d8:	bc30      	pop	{r4, r5}
 80006da:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80006dc:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80006de:	4913      	ldr	r1, [pc, #76]	; (800072c <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80006e0:	4c13      	ldr	r4, [pc, #76]	; (8000730 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80006e2:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80006e4:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80006e6:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80006e8:	fba4 2302 	umull	r2, r3, r4, r2
 80006ec:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80006f0:	d800      	bhi.n	80006f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>
      stream_number += 8U;
 80006f2:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80006f4:	4a0f      	ldr	r2, [pc, #60]	; (8000734 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80006f6:	f003 051f 	and.w	r5, r3, #31
 80006fa:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80006fc:	4c0e      	ldr	r4, [pc, #56]	; (8000738 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80006fe:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8000700:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000702:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8000704:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8000706:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8000708:	6602      	str	r2, [r0, #96]	; 0x60
}
 800070a:	e7e5      	b.n	80006d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>
 800070c:	58025408 	.word	0x58025408
 8000710:	58025444 	.word	0x58025444
 8000714:	5802541c 	.word	0x5802541c
 8000718:	58025430 	.word	0x58025430
 800071c:	58025494 	.word	0x58025494
 8000720:	cccccccd 	.word	0xcccccccd
 8000724:	16009600 	.word	0x16009600
 8000728:	58025880 	.word	0x58025880
 800072c:	bffdfbf0 	.word	0xbffdfbf0
 8000730:	aaaaaaab 	.word	0xaaaaaaab
 8000734:	10008200 	.word	0x10008200
 8000738:	40020880 	.word	0x40020880

0800073c <HAL_DMA_Init>:
{
 800073c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000740:	f7ff fe2c 	bl	800039c <HAL_GetTick>
  if(hdma == NULL)
 8000744:	2c00      	cmp	r4, #0
 8000746:	f000 8170 	beq.w	8000a2a <HAL_DMA_Init+0x2ee>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800074a:	6822      	ldr	r2, [r4, #0]
 800074c:	4605      	mov	r5, r0
 800074e:	4ba7      	ldr	r3, [pc, #668]	; (80009ec <HAL_DMA_Init+0x2b0>)
 8000750:	429a      	cmp	r2, r3
 8000752:	d049      	beq.n	80007e8 <HAL_DMA_Init+0xac>
 8000754:	3318      	adds	r3, #24
 8000756:	429a      	cmp	r2, r3
 8000758:	d046      	beq.n	80007e8 <HAL_DMA_Init+0xac>
 800075a:	3330      	adds	r3, #48	; 0x30
 800075c:	48a4      	ldr	r0, [pc, #656]	; (80009f0 <HAL_DMA_Init+0x2b4>)
 800075e:	49a5      	ldr	r1, [pc, #660]	; (80009f4 <HAL_DMA_Init+0x2b8>)
 8000760:	4282      	cmp	r2, r0
 8000762:	bf18      	it	ne
 8000764:	429a      	cmpne	r2, r3
 8000766:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800076a:	bf0c      	ite	eq
 800076c:	2301      	moveq	r3, #1
 800076e:	2300      	movne	r3, #0
 8000770:	428a      	cmp	r2, r1
 8000772:	bf08      	it	eq
 8000774:	f043 0301 	orreq.w	r3, r3, #1
 8000778:	3130      	adds	r1, #48	; 0x30
 800077a:	4282      	cmp	r2, r0
 800077c:	bf08      	it	eq
 800077e:	f043 0301 	orreq.w	r3, r3, #1
 8000782:	3030      	adds	r0, #48	; 0x30
 8000784:	428a      	cmp	r2, r1
 8000786:	bf08      	it	eq
 8000788:	f043 0301 	orreq.w	r3, r3, #1
 800078c:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8000790:	4282      	cmp	r2, r0
 8000792:	bf08      	it	eq
 8000794:	f043 0301 	orreq.w	r3, r3, #1
 8000798:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800079c:	428a      	cmp	r2, r1
 800079e:	bf08      	it	eq
 80007a0:	f043 0301 	orreq.w	r3, r3, #1
 80007a4:	3130      	adds	r1, #48	; 0x30
 80007a6:	4282      	cmp	r2, r0
 80007a8:	bf08      	it	eq
 80007aa:	f043 0301 	orreq.w	r3, r3, #1
 80007ae:	3030      	adds	r0, #48	; 0x30
 80007b0:	428a      	cmp	r2, r1
 80007b2:	bf08      	it	eq
 80007b4:	f043 0301 	orreq.w	r3, r3, #1
 80007b8:	3130      	adds	r1, #48	; 0x30
 80007ba:	4282      	cmp	r2, r0
 80007bc:	bf08      	it	eq
 80007be:	f043 0301 	orreq.w	r3, r3, #1
 80007c2:	3030      	adds	r0, #48	; 0x30
 80007c4:	428a      	cmp	r2, r1
 80007c6:	bf08      	it	eq
 80007c8:	f043 0301 	orreq.w	r3, r3, #1
 80007cc:	3130      	adds	r1, #48	; 0x30
 80007ce:	4282      	cmp	r2, r0
 80007d0:	bf08      	it	eq
 80007d2:	f043 0301 	orreq.w	r3, r3, #1
 80007d6:	428a      	cmp	r2, r1
 80007d8:	bf08      	it	eq
 80007da:	f043 0301 	orreq.w	r3, r3, #1
 80007de:	b91b      	cbnz	r3, 80007e8 <HAL_DMA_Init+0xac>
 80007e0:	4b85      	ldr	r3, [pc, #532]	; (80009f8 <HAL_DMA_Init+0x2bc>)
 80007e2:	429a      	cmp	r2, r3
 80007e4:	f040 8187 	bne.w	8000af6 <HAL_DMA_Init+0x3ba>
    hdma->State = HAL_DMA_STATE_BUSY;
 80007e8:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 80007ea:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80007ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80007f0:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 80007f4:	6813      	ldr	r3, [r2, #0]
 80007f6:	f023 0301 	bic.w	r3, r3, #1
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	e005      	b.n	800080a <HAL_DMA_Init+0xce>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80007fe:	f7ff fdcd 	bl	800039c <HAL_GetTick>
 8000802:	1b43      	subs	r3, r0, r5
 8000804:	2b05      	cmp	r3, #5
 8000806:	f200 80e9 	bhi.w	80009dc <HAL_DMA_Init+0x2a0>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800080a:	6823      	ldr	r3, [r4, #0]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	07d0      	lsls	r0, r2, #31
 8000810:	d4f5      	bmi.n	80007fe <HAL_DMA_Init+0xc2>
    registerValue |=  hdma->Init.Direction           |
 8000812:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000816:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8000818:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800081a:	e9d4 5005 	ldrd	r5, r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800081e:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000820:	69e1      	ldr	r1, [r4, #28]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000822:	432a      	orrs	r2, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 8000824:	6a25      	ldr	r5, [r4, #32]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000826:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000828:	6818      	ldr	r0, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800082a:	430a      	orrs	r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800082c:	4973      	ldr	r1, [pc, #460]	; (80009fc <HAL_DMA_Init+0x2c0>)
 800082e:	4001      	ands	r1, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000830:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 8000832:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000834:	2804      	cmp	r0, #4
    registerValue |=  hdma->Init.Direction           |
 8000836:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800083a:	d103      	bne.n	8000844 <HAL_DMA_Init+0x108>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800083c:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 8000840:	4301      	orrs	r1, r0
 8000842:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8000844:	486e      	ldr	r0, [pc, #440]	; (8000a00 <HAL_DMA_Init+0x2c4>)
 8000846:	496f      	ldr	r1, [pc, #444]	; (8000a04 <HAL_DMA_Init+0x2c8>)
 8000848:	6800      	ldr	r0, [r0, #0]
 800084a:	4001      	ands	r1, r0
 800084c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8000850:	d30a      	bcc.n	8000868 <HAL_DMA_Init+0x12c>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000852:	6861      	ldr	r1, [r4, #4]
 8000854:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
 8000858:	281f      	cmp	r0, #31
 800085a:	f240 80df 	bls.w	8000a1c <HAL_DMA_Init+0x2e0>
 800085e:	394f      	subs	r1, #79	; 0x4f
 8000860:	2903      	cmp	r1, #3
 8000862:	d801      	bhi.n	8000868 <HAL_DMA_Init+0x12c>
        registerValue |= DMA_SxCR_TRBUFF;
 8000864:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000868:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800086a:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
 800086c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800086e:	694a      	ldr	r2, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000870:	2b04      	cmp	r3, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000872:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8000876:	ea42 0203 	orr.w	r2, r2, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800087a:	d10e      	bne.n	800089a <HAL_DMA_Init+0x15e>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800087c:	e9d4 300a 	ldrd	r3, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 8000880:	431a      	orrs	r2, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000882:	b150      	cbz	r0, 800089a <HAL_DMA_Init+0x15e>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000884:	69a5      	ldr	r5, [r4, #24]
 8000886:	2d00      	cmp	r5, #0
 8000888:	f040 8110 	bne.w	8000aac <HAL_DMA_Init+0x370>
    switch (hdma->Init.FIFOThreshold)
 800088c:	2b01      	cmp	r3, #1
 800088e:	f000 812d 	beq.w	8000aec <HAL_DMA_Init+0x3b0>
 8000892:	f033 0302 	bics.w	r3, r3, #2
 8000896:	f000 8111 	beq.w	8000abc <HAL_DMA_Init+0x380>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800089a:	614a      	str	r2, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800089c:	4620      	mov	r0, r4
 800089e:	f7ff fe65 	bl	800056c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80008a2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80008a4:	233f      	movs	r3, #63	; 0x3f
 80008a6:	f002 021f 	and.w	r2, r2, #31
 80008aa:	4093      	lsls	r3, r2
 80008ac:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80008ae:	6822      	ldr	r2, [r4, #0]
 80008b0:	4b4e      	ldr	r3, [pc, #312]	; (80009ec <HAL_DMA_Init+0x2b0>)
 80008b2:	4955      	ldr	r1, [pc, #340]	; (8000a08 <HAL_DMA_Init+0x2cc>)
 80008b4:	4d4e      	ldr	r5, [pc, #312]	; (80009f0 <HAL_DMA_Init+0x2b4>)
 80008b6:	428a      	cmp	r2, r1
 80008b8:	bf18      	it	ne
 80008ba:	429a      	cmpne	r2, r3
 80008bc:	4853      	ldr	r0, [pc, #332]	; (8000a0c <HAL_DMA_Init+0x2d0>)
 80008be:	f101 0148 	add.w	r1, r1, #72	; 0x48
 80008c2:	bf0c      	ite	eq
 80008c4:	2301      	moveq	r3, #1
 80008c6:	2300      	movne	r3, #0
 80008c8:	42aa      	cmp	r2, r5
 80008ca:	bf08      	it	eq
 80008cc:	f043 0301 	orreq.w	r3, r3, #1
 80008d0:	3548      	adds	r5, #72	; 0x48
 80008d2:	4282      	cmp	r2, r0
 80008d4:	bf08      	it	eq
 80008d6:	f043 0301 	orreq.w	r3, r3, #1
 80008da:	3048      	adds	r0, #72	; 0x48
 80008dc:	428a      	cmp	r2, r1
 80008de:	bf08      	it	eq
 80008e0:	f043 0301 	orreq.w	r3, r3, #1
 80008e4:	3148      	adds	r1, #72	; 0x48
 80008e6:	42aa      	cmp	r2, r5
 80008e8:	bf08      	it	eq
 80008ea:	f043 0301 	orreq.w	r3, r3, #1
 80008ee:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80008f2:	4282      	cmp	r2, r0
 80008f4:	bf08      	it	eq
 80008f6:	f043 0301 	orreq.w	r3, r3, #1
 80008fa:	f500 7062 	add.w	r0, r0, #904	; 0x388
 80008fe:	428a      	cmp	r2, r1
 8000900:	bf08      	it	eq
 8000902:	f043 0301 	orreq.w	r3, r3, #1
 8000906:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800090a:	42aa      	cmp	r2, r5
 800090c:	bf08      	it	eq
 800090e:	f043 0301 	orreq.w	r3, r3, #1
 8000912:	3548      	adds	r5, #72	; 0x48
 8000914:	4282      	cmp	r2, r0
 8000916:	bf08      	it	eq
 8000918:	f043 0301 	orreq.w	r3, r3, #1
 800091c:	3048      	adds	r0, #72	; 0x48
 800091e:	428a      	cmp	r2, r1
 8000920:	bf08      	it	eq
 8000922:	f043 0301 	orreq.w	r3, r3, #1
 8000926:	3148      	adds	r1, #72	; 0x48
 8000928:	42aa      	cmp	r2, r5
 800092a:	bf08      	it	eq
 800092c:	f043 0301 	orreq.w	r3, r3, #1
 8000930:	3548      	adds	r5, #72	; 0x48
 8000932:	4282      	cmp	r2, r0
 8000934:	bf08      	it	eq
 8000936:	f043 0301 	orreq.w	r3, r3, #1
 800093a:	3048      	adds	r0, #72	; 0x48
 800093c:	428a      	cmp	r2, r1
 800093e:	bf08      	it	eq
 8000940:	f043 0301 	orreq.w	r3, r3, #1
 8000944:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 8000948:	42aa      	cmp	r2, r5
 800094a:	bf08      	it	eq
 800094c:	f043 0301 	orreq.w	r3, r3, #1
 8000950:	f501 419f 	add.w	r1, r1, #20352	; 0x4f80
 8000954:	4d2e      	ldr	r5, [pc, #184]	; (8000a10 <HAL_DMA_Init+0x2d4>)
 8000956:	4282      	cmp	r2, r0
 8000958:	bf08      	it	eq
 800095a:	f043 0301 	orreq.w	r3, r3, #1
 800095e:	482d      	ldr	r0, [pc, #180]	; (8000a14 <HAL_DMA_Init+0x2d8>)
 8000960:	428a      	cmp	r2, r1
 8000962:	bf08      	it	eq
 8000964:	f043 0301 	orreq.w	r3, r3, #1
 8000968:	313c      	adds	r1, #60	; 0x3c
 800096a:	42aa      	cmp	r2, r5
 800096c:	bf08      	it	eq
 800096e:	f043 0301 	orreq.w	r3, r3, #1
 8000972:	353c      	adds	r5, #60	; 0x3c
 8000974:	4282      	cmp	r2, r0
 8000976:	bf08      	it	eq
 8000978:	f043 0301 	orreq.w	r3, r3, #1
 800097c:	303c      	adds	r0, #60	; 0x3c
 800097e:	428a      	cmp	r2, r1
 8000980:	bf08      	it	eq
 8000982:	f043 0301 	orreq.w	r3, r3, #1
 8000986:	313c      	adds	r1, #60	; 0x3c
 8000988:	42aa      	cmp	r2, r5
 800098a:	bf08      	it	eq
 800098c:	f043 0301 	orreq.w	r3, r3, #1
 8000990:	4282      	cmp	r2, r0
 8000992:	bf08      	it	eq
 8000994:	f043 0301 	orreq.w	r3, r3, #1
 8000998:	428a      	cmp	r2, r1
 800099a:	bf08      	it	eq
 800099c:	f043 0301 	orreq.w	r3, r3, #1
 80009a0:	b913      	cbnz	r3, 80009a8 <HAL_DMA_Init+0x26c>
 80009a2:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <HAL_DMA_Init+0x2dc>)
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d113      	bne.n	80009d0 <HAL_DMA_Init+0x294>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80009a8:	4620      	mov	r0, r4
 80009aa:	f7ff fe5b 	bl	8000664 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80009ae:	68a3      	ldr	r3, [r4, #8]
 80009b0:	2b80      	cmp	r3, #128	; 0x80
 80009b2:	d03c      	beq.n	8000a2e <HAL_DMA_Init+0x2f2>
 80009b4:	7923      	ldrb	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80009b6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80009b8:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80009ba:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 80009be:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80009c0:	6861      	ldr	r1, [r4, #4]
 80009c2:	1e4b      	subs	r3, r1, #1
 80009c4:	2b07      	cmp	r3, #7
 80009c6:	d935      	bls.n	8000a34 <HAL_DMA_Init+0x2f8>
      hdma->DMAmuxRequestGen = 0U;
 80009c8:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 80009ca:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80009ce:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009d0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80009d2:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009d4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80009d6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80009da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80009dc:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80009de:	2303      	movs	r3, #3
        return HAL_ERROR;
 80009e0:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80009e2:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80009e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80009e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40020010 	.word	0x40020010
 80009f0:	40020040 	.word	0x40020040
 80009f4:	40020070 	.word	0x40020070
 80009f8:	400204b8 	.word	0x400204b8
 80009fc:	fe10803f 	.word	0xfe10803f
 8000a00:	5c001000 	.word	0x5c001000
 8000a04:	ffff0000 	.word	0xffff0000
 8000a08:	40020028 	.word	0x40020028
 8000a0c:	40020058 	.word	0x40020058
 8000a10:	5802541c 	.word	0x5802541c
 8000a14:	58025430 	.word	0x58025430
 8000a18:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000a1c:	496a      	ldr	r1, [pc, #424]	; (8000bc8 <HAL_DMA_Init+0x48c>)
 8000a1e:	fa21 f000 	lsr.w	r0, r1, r0
 8000a22:	07c1      	lsls	r1, r0, #31
 8000a24:	f57f af20 	bpl.w	8000868 <HAL_DMA_Init+0x12c>
 8000a28:	e71c      	b.n	8000864 <HAL_DMA_Init+0x128>
    return HAL_ERROR;
 8000a2a:	2001      	movs	r0, #1
}
 8000a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	6063      	str	r3, [r4, #4]
 8000a32:	e7c0      	b.n	80009b6 <HAL_DMA_Init+0x27a>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8000a34:	6820      	ldr	r0, [r4, #0]
 8000a36:	4a65      	ldr	r2, [pc, #404]	; (8000bcc <HAL_DMA_Init+0x490>)
 8000a38:	4e65      	ldr	r6, [pc, #404]	; (8000bd0 <HAL_DMA_Init+0x494>)
 8000a3a:	4d66      	ldr	r5, [pc, #408]	; (8000bd4 <HAL_DMA_Init+0x498>)
 8000a3c:	42b0      	cmp	r0, r6
 8000a3e:	bf18      	it	ne
 8000a40:	4290      	cmpne	r0, r2
 8000a42:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8000a46:	bf0c      	ite	eq
 8000a48:	2201      	moveq	r2, #1
 8000a4a:	2200      	movne	r2, #0
 8000a4c:	42a8      	cmp	r0, r5
 8000a4e:	bf08      	it	eq
 8000a50:	f042 0201 	orreq.w	r2, r2, #1
 8000a54:	3528      	adds	r5, #40	; 0x28
 8000a56:	42b0      	cmp	r0, r6
 8000a58:	bf08      	it	eq
 8000a5a:	f042 0201 	orreq.w	r2, r2, #1
 8000a5e:	3628      	adds	r6, #40	; 0x28
 8000a60:	42a8      	cmp	r0, r5
 8000a62:	bf08      	it	eq
 8000a64:	f042 0201 	orreq.w	r2, r2, #1
 8000a68:	3528      	adds	r5, #40	; 0x28
 8000a6a:	42b0      	cmp	r0, r6
 8000a6c:	bf08      	it	eq
 8000a6e:	f042 0201 	orreq.w	r2, r2, #1
 8000a72:	42a8      	cmp	r0, r5
 8000a74:	bf08      	it	eq
 8000a76:	f042 0201 	orreq.w	r2, r2, #1
 8000a7a:	b93a      	cbnz	r2, 8000a8c <HAL_DMA_Init+0x350>
 8000a7c:	4a56      	ldr	r2, [pc, #344]	; (8000bd8 <HAL_DMA_Init+0x49c>)
 8000a7e:	4290      	cmp	r0, r2
 8000a80:	d004      	beq.n	8000a8c <HAL_DMA_Init+0x350>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000a82:	4a56      	ldr	r2, [pc, #344]	; (8000bdc <HAL_DMA_Init+0x4a0>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000a84:	4d56      	ldr	r5, [pc, #344]	; (8000be0 <HAL_DMA_Init+0x4a4>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000a86:	440a      	add	r2, r1
 8000a88:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000a8a:	e003      	b.n	8000a94 <HAL_DMA_Init+0x358>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8000a8c:	4a55      	ldr	r2, [pc, #340]	; (8000be4 <HAL_DMA_Init+0x4a8>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8000a8e:	4d56      	ldr	r5, [pc, #344]	; (8000be8 <HAL_DMA_Init+0x4ac>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8000a90:	440a      	add	r2, r1
 8000a92:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8000a94:	2101      	movs	r1, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8000a96:	2000      	movs	r0, #0
 8000a98:	6725      	str	r5, [r4, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8000a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9e:	66e2      	str	r2, [r4, #108]	; 0x6c
 8000aa0:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8000aa2:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000aa4:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	e791      	b.n	80009d0 <HAL_DMA_Init+0x294>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000aac:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8000ab0:	d00e      	beq.n	8000ad0 <HAL_DMA_Init+0x394>
    switch (hdma->Init.FIFOThreshold)
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d905      	bls.n	8000ac2 <HAL_DMA_Init+0x386>
 8000ab6:	2b03      	cmp	r3, #3
 8000ab8:	f47f aeef 	bne.w	800089a <HAL_DMA_Init+0x15e>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000abc:	01c3      	lsls	r3, r0, #7
 8000abe:	f57f aeec 	bpl.w	800089a <HAL_DMA_Init+0x15e>
          hdma->State = HAL_DMA_STATE_READY;
 8000ac2:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000ac4:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8000ac6:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000ac8:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8000aca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8000ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	f63f aee2 	bhi.w	800089a <HAL_DMA_Init+0x15e>
 8000ad6:	a501      	add	r5, pc, #4	; (adr r5, 8000adc <HAL_DMA_Init+0x3a0>)
 8000ad8:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8000adc:	08000ac3 	.word	0x08000ac3
 8000ae0:	08000abd 	.word	0x08000abd
 8000ae4:	08000ac3 	.word	0x08000ac3
 8000ae8:	08000aed 	.word	0x08000aed
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000aec:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8000af0:	f47f aed3 	bne.w	800089a <HAL_DMA_Init+0x15e>
 8000af4:	e7e5      	b.n	8000ac2 <HAL_DMA_Init+0x386>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8000af6:	4b35      	ldr	r3, [pc, #212]	; (8000bcc <HAL_DMA_Init+0x490>)
 8000af8:	4935      	ldr	r1, [pc, #212]	; (8000bd0 <HAL_DMA_Init+0x494>)
 8000afa:	4836      	ldr	r0, [pc, #216]	; (8000bd4 <HAL_DMA_Init+0x498>)
 8000afc:	428a      	cmp	r2, r1
 8000afe:	bf18      	it	ne
 8000b00:	429a      	cmpne	r2, r3
 8000b02:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8000b06:	4d39      	ldr	r5, [pc, #228]	; (8000bec <HAL_DMA_Init+0x4b0>)
 8000b08:	bf0c      	ite	eq
 8000b0a:	2301      	moveq	r3, #1
 8000b0c:	2300      	movne	r3, #0
 8000b0e:	4282      	cmp	r2, r0
 8000b10:	bf08      	it	eq
 8000b12:	f043 0301 	orreq.w	r3, r3, #1
 8000b16:	303c      	adds	r0, #60	; 0x3c
 8000b18:	428a      	cmp	r2, r1
 8000b1a:	bf08      	it	eq
 8000b1c:	f043 0301 	orreq.w	r3, r3, #1
 8000b20:	313c      	adds	r1, #60	; 0x3c
 8000b22:	42aa      	cmp	r2, r5
 8000b24:	bf08      	it	eq
 8000b26:	f043 0301 	orreq.w	r3, r3, #1
 8000b2a:	4282      	cmp	r2, r0
 8000b2c:	bf08      	it	eq
 8000b2e:	f043 0301 	orreq.w	r3, r3, #1
 8000b32:	428a      	cmp	r2, r1
 8000b34:	bf08      	it	eq
 8000b36:	f043 0301 	orreq.w	r3, r3, #1
 8000b3a:	b913      	cbnz	r3, 8000b42 <HAL_DMA_Init+0x406>
 8000b3c:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <HAL_DMA_Init+0x49c>)
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d13a      	bne.n	8000bb8 <HAL_DMA_Init+0x47c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b42:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8000b44:	2100      	movs	r1, #0
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000b46:	4f2a      	ldr	r7, [pc, #168]	; (8000bf0 <HAL_DMA_Init+0x4b4>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b48:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000b4c:	68a3      	ldr	r3, [r4, #8]
    __HAL_UNLOCK(hdma);
 8000b4e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000b52:	2b40      	cmp	r3, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000b54:	6811      	ldr	r1, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000b56:	ea07 0701 	and.w	r7, r7, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000b5a:	d02b      	beq.n	8000bb4 <HAL_DMA_Init+0x478>
 8000b5c:	2b80      	cmp	r3, #128	; 0x80
 8000b5e:	bf0c      	ite	eq
 8000b60:	f44f 4180 	moveq.w	r1, #16384	; 0x4000
 8000b64:	2100      	movne	r1, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000b66:	6923      	ldr	r3, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000b68:	4620      	mov	r0, r4
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000b6a:	68e5      	ldr	r5, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000b6c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000b6e:	6966      	ldr	r6, [r4, #20]
 8000b70:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000b74:	69a5      	ldr	r5, [r4, #24]
 8000b76:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000b7a:	69e6      	ldr	r6, [r4, #28]
 8000b7c:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8000b80:	6a25      	ldr	r5, [r4, #32]
 8000b82:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000b86:	4e1b      	ldr	r6, [pc, #108]	; (8000bf4 <HAL_DMA_Init+0x4b8>)
 8000b88:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 8000b8c:	4d1a      	ldr	r5, [pc, #104]	; (8000bf8 <HAL_DMA_Init+0x4bc>)
 8000b8e:	433b      	orrs	r3, r7
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000b90:	430b      	orrs	r3, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8000b92:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000b94:	6823      	ldr	r3, [r4, #0]
 8000b96:	441e      	add	r6, r3
 8000b98:	fba5 2306 	umull	r2, r3, r5, r6
 8000b9c:	091b      	lsrs	r3, r3, #4
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000ba2:	f7ff fce3 	bl	800056c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000ba6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000ba8:	2301      	movs	r3, #1
 8000baa:	f002 021f 	and.w	r2, r2, #31
 8000bae:	4093      	lsls	r3, r2
 8000bb0:	6043      	str	r3, [r0, #4]
 8000bb2:	e67c      	b.n	80008ae <HAL_DMA_Init+0x172>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000bb4:	2110      	movs	r1, #16
 8000bb6:	e7d6      	b.n	8000b66 <HAL_DMA_Init+0x42a>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000bb8:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000bba:	2303      	movs	r3, #3
    return HAL_ERROR;
 8000bbc:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000bbe:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000bc0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8000bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	c3c0003f 	.word	0xc3c0003f
 8000bcc:	58025408 	.word	0x58025408
 8000bd0:	5802541c 	.word	0x5802541c
 8000bd4:	58025430 	.word	0x58025430
 8000bd8:	58025494 	.word	0x58025494
 8000bdc:	1000823f 	.word	0x1000823f
 8000be0:	40020940 	.word	0x40020940
 8000be4:	1600963f 	.word	0x1600963f
 8000be8:	58025940 	.word	0x58025940
 8000bec:	58025458 	.word	0x58025458
 8000bf0:	fffe000f 	.word	0xfffe000f
 8000bf4:	a7fdabf8 	.word	0xa7fdabf8
 8000bf8:	cccccccd 	.word	0xcccccccd

08000bfc <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8000bfc:	2800      	cmp	r0, #0
 8000bfe:	f000 826c 	beq.w	80010da <HAL_DMA_Start_IT+0x4de>
{
 8000c02:	b4f0      	push	{r4, r5, r6, r7}
 8000c04:	4605      	mov	r5, r0
  __HAL_LOCK(hdma);
 8000c06:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8000c0a:	2801      	cmp	r0, #1
 8000c0c:	f000 8267 	beq.w	80010de <HAL_DMA_Start_IT+0x4e2>
 8000c10:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c12:	f895 4035 	ldrb.w	r4, [r5, #53]	; 0x35
 8000c16:	4284      	cmp	r4, r0
  __HAL_LOCK(hdma);
 8000c18:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c1c:	d007      	beq.n	8000c2e <HAL_DMA_Start_IT+0x32>
    __HAL_UNLOCK(hdma);
 8000c1e:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000c20:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8000c24:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000c28:	656b      	str	r3, [r5, #84]	; 0x54
}
 8000c2a:	bcf0      	pop	{r4, r5, r6, r7}
 8000c2c:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c2e:	2702      	movs	r7, #2
    __HAL_DMA_DISABLE(hdma);
 8000c30:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000c32:	4e9e      	ldr	r6, [pc, #632]	; (8000eac <HAL_DMA_Start_IT+0x2b0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c34:	f885 7035 	strb.w	r7, [r5, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c38:	2700      	movs	r7, #0
 8000c3a:	656f      	str	r7, [r5, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8000c3c:	6820      	ldr	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000c3e:	4f9c      	ldr	r7, [pc, #624]	; (8000eb0 <HAL_DMA_Start_IT+0x2b4>)
    __HAL_DMA_DISABLE(hdma);
 8000c40:	f020 0001 	bic.w	r0, r0, #1
 8000c44:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000c46:	489b      	ldr	r0, [pc, #620]	; (8000eb4 <HAL_DMA_Start_IT+0x2b8>)
 8000c48:	682c      	ldr	r4, [r5, #0]
 8000c4a:	42b4      	cmp	r4, r6
 8000c4c:	bf18      	it	ne
 8000c4e:	4284      	cmpne	r4, r0
 8000c50:	f106 0630 	add.w	r6, r6, #48	; 0x30
 8000c54:	bf0c      	ite	eq
 8000c56:	2001      	moveq	r0, #1
 8000c58:	2000      	movne	r0, #0
 8000c5a:	42bc      	cmp	r4, r7
 8000c5c:	bf08      	it	eq
 8000c5e:	f040 0001 	orreq.w	r0, r0, #1
 8000c62:	3730      	adds	r7, #48	; 0x30
 8000c64:	42b4      	cmp	r4, r6
 8000c66:	bf08      	it	eq
 8000c68:	f040 0001 	orreq.w	r0, r0, #1
 8000c6c:	3630      	adds	r6, #48	; 0x30
 8000c6e:	42bc      	cmp	r4, r7
 8000c70:	bf08      	it	eq
 8000c72:	f040 0001 	orreq.w	r0, r0, #1
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	42b4      	cmp	r4, r6
 8000c7a:	bf08      	it	eq
 8000c7c:	f040 0001 	orreq.w	r0, r0, #1
 8000c80:	3630      	adds	r6, #48	; 0x30
 8000c82:	42bc      	cmp	r4, r7
 8000c84:	bf08      	it	eq
 8000c86:	f040 0001 	orreq.w	r0, r0, #1
 8000c8a:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8000c8e:	42b4      	cmp	r4, r6
 8000c90:	bf08      	it	eq
 8000c92:	f040 0001 	orreq.w	r0, r0, #1
 8000c96:	f506 765c 	add.w	r6, r6, #880	; 0x370
 8000c9a:	42bc      	cmp	r4, r7
 8000c9c:	bf08      	it	eq
 8000c9e:	f040 0001 	orreq.w	r0, r0, #1
 8000ca2:	3730      	adds	r7, #48	; 0x30
 8000ca4:	42b4      	cmp	r4, r6
 8000ca6:	bf08      	it	eq
 8000ca8:	f040 0001 	orreq.w	r0, r0, #1
 8000cac:	3630      	adds	r6, #48	; 0x30
 8000cae:	42bc      	cmp	r4, r7
 8000cb0:	bf08      	it	eq
 8000cb2:	f040 0001 	orreq.w	r0, r0, #1
 8000cb6:	3730      	adds	r7, #48	; 0x30
 8000cb8:	42b4      	cmp	r4, r6
 8000cba:	bf08      	it	eq
 8000cbc:	f040 0001 	orreq.w	r0, r0, #1
 8000cc0:	3630      	adds	r6, #48	; 0x30
 8000cc2:	42bc      	cmp	r4, r7
 8000cc4:	bf08      	it	eq
 8000cc6:	f040 0001 	orreq.w	r0, r0, #1
 8000cca:	3730      	adds	r7, #48	; 0x30
 8000ccc:	42b4      	cmp	r4, r6
 8000cce:	bf08      	it	eq
 8000cd0:	f040 0001 	orreq.w	r0, r0, #1
 8000cd4:	3630      	adds	r6, #48	; 0x30
 8000cd6:	42bc      	cmp	r4, r7
 8000cd8:	bf08      	it	eq
 8000cda:	f040 0001 	orreq.w	r0, r0, #1
 8000cde:	4f76      	ldr	r7, [pc, #472]	; (8000eb8 <HAL_DMA_Start_IT+0x2bc>)
 8000ce0:	42b4      	cmp	r4, r6
 8000ce2:	bf08      	it	eq
 8000ce4:	f040 0001 	orreq.w	r0, r0, #1
 8000ce8:	4e74      	ldr	r6, [pc, #464]	; (8000ebc <HAL_DMA_Start_IT+0x2c0>)
 8000cea:	42bc      	cmp	r4, r7
 8000cec:	bf08      	it	eq
 8000cee:	f040 0001 	orreq.w	r0, r0, #1
 8000cf2:	3728      	adds	r7, #40	; 0x28
 8000cf4:	42b4      	cmp	r4, r6
 8000cf6:	bf08      	it	eq
 8000cf8:	f040 0001 	orreq.w	r0, r0, #1
 8000cfc:	3628      	adds	r6, #40	; 0x28
 8000cfe:	42bc      	cmp	r4, r7
 8000d00:	bf08      	it	eq
 8000d02:	f040 0001 	orreq.w	r0, r0, #1
 8000d06:	3728      	adds	r7, #40	; 0x28
 8000d08:	42b4      	cmp	r4, r6
 8000d0a:	bf08      	it	eq
 8000d0c:	f040 0001 	orreq.w	r0, r0, #1
 8000d10:	3628      	adds	r6, #40	; 0x28
 8000d12:	42bc      	cmp	r4, r7
 8000d14:	bf08      	it	eq
 8000d16:	f040 0001 	orreq.w	r0, r0, #1
 8000d1a:	3728      	adds	r7, #40	; 0x28
 8000d1c:	42b4      	cmp	r4, r6
 8000d1e:	bf08      	it	eq
 8000d20:	f040 0001 	orreq.w	r0, r0, #1
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d24:	6dae      	ldr	r6, [r5, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000d26:	42bc      	cmp	r4, r7
 8000d28:	bf08      	it	eq
 8000d2a:	f040 0001 	orreq.w	r0, r0, #1
 8000d2e:	b910      	cbnz	r0, 8000d36 <HAL_DMA_Start_IT+0x13a>
 8000d30:	4863      	ldr	r0, [pc, #396]	; (8000ec0 <HAL_DMA_Start_IT+0x2c4>)
 8000d32:	4284      	cmp	r4, r0
 8000d34:	d108      	bne.n	8000d48 <HAL_DMA_Start_IT+0x14c>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d36:	e9d5 0419 	ldrd	r0, r4, [r5, #100]	; 0x64
 8000d3a:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8000d3c:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8000d3e:	b110      	cbz	r0, 8000d46 <HAL_DMA_Start_IT+0x14a>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d40:	e9d5 041c 	ldrd	r0, r4, [r5, #112]	; 0x70
 8000d44:	6044      	str	r4, [r0, #4]
 8000d46:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000d48:	485a      	ldr	r0, [pc, #360]	; (8000eb4 <HAL_DMA_Start_IT+0x2b8>)
 8000d4a:	f8df c160 	ldr.w	ip, [pc, #352]	; 8000eac <HAL_DMA_Start_IT+0x2b0>
 8000d4e:	4f58      	ldr	r7, [pc, #352]	; (8000eb0 <HAL_DMA_Start_IT+0x2b4>)
 8000d50:	4564      	cmp	r4, ip
 8000d52:	bf18      	it	ne
 8000d54:	4284      	cmpne	r4, r0
 8000d56:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8000d5a:	bf0c      	ite	eq
 8000d5c:	2001      	moveq	r0, #1
 8000d5e:	2000      	movne	r0, #0
 8000d60:	42bc      	cmp	r4, r7
 8000d62:	bf08      	it	eq
 8000d64:	f040 0001 	orreq.w	r0, r0, #1
 8000d68:	3730      	adds	r7, #48	; 0x30
 8000d6a:	4564      	cmp	r4, ip
 8000d6c:	bf08      	it	eq
 8000d6e:	f040 0001 	orreq.w	r0, r0, #1
 8000d72:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8000d76:	42bc      	cmp	r4, r7
 8000d78:	bf08      	it	eq
 8000d7a:	f040 0001 	orreq.w	r0, r0, #1
 8000d7e:	3730      	adds	r7, #48	; 0x30
 8000d80:	4564      	cmp	r4, ip
 8000d82:	bf08      	it	eq
 8000d84:	f040 0001 	orreq.w	r0, r0, #1
 8000d88:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8000d8c:	42bc      	cmp	r4, r7
 8000d8e:	bf08      	it	eq
 8000d90:	f040 0001 	orreq.w	r0, r0, #1
 8000d94:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8000d98:	4564      	cmp	r4, ip
 8000d9a:	bf08      	it	eq
 8000d9c:	f040 0001 	orreq.w	r0, r0, #1
 8000da0:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 8000da4:	42bc      	cmp	r4, r7
 8000da6:	bf08      	it	eq
 8000da8:	f040 0001 	orreq.w	r0, r0, #1
 8000dac:	3730      	adds	r7, #48	; 0x30
 8000dae:	4564      	cmp	r4, ip
 8000db0:	bf08      	it	eq
 8000db2:	f040 0001 	orreq.w	r0, r0, #1
 8000db6:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8000dba:	42bc      	cmp	r4, r7
 8000dbc:	bf08      	it	eq
 8000dbe:	f040 0001 	orreq.w	r0, r0, #1
 8000dc2:	3730      	adds	r7, #48	; 0x30
 8000dc4:	4564      	cmp	r4, ip
 8000dc6:	bf08      	it	eq
 8000dc8:	f040 0001 	orreq.w	r0, r0, #1
 8000dcc:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8000dd0:	42bc      	cmp	r4, r7
 8000dd2:	bf08      	it	eq
 8000dd4:	f040 0001 	orreq.w	r0, r0, #1
 8000dd8:	3730      	adds	r7, #48	; 0x30
 8000dda:	4564      	cmp	r4, ip
 8000ddc:	bf08      	it	eq
 8000dde:	f040 0001 	orreq.w	r0, r0, #1
 8000de2:	42bc      	cmp	r4, r7
 8000de4:	bf08      	it	eq
 8000de6:	f040 0001 	orreq.w	r0, r0, #1
 8000dea:	b918      	cbnz	r0, 8000df4 <HAL_DMA_Start_IT+0x1f8>
 8000dec:	4835      	ldr	r0, [pc, #212]	; (8000ec4 <HAL_DMA_Start_IT+0x2c8>)
 8000dee:	4284      	cmp	r4, r0
 8000df0:	f040 8178 	bne.w	80010e4 <HAL_DMA_Start_IT+0x4e8>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000df4:	6dec      	ldr	r4, [r5, #92]	; 0x5c
 8000df6:	203f      	movs	r0, #63	; 0x3f
 8000df8:	f004 041f 	and.w	r4, r4, #31
 8000dfc:	40a0      	lsls	r0, r4
 8000dfe:	60b0      	str	r0, [r6, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000e00:	682c      	ldr	r4, [r5, #0]
 8000e02:	6820      	ldr	r0, [r4, #0]
 8000e04:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8000e08:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8000e0a:	6828      	ldr	r0, [r5, #0]
 8000e0c:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e0e:	68ab      	ldr	r3, [r5, #8]
 8000e10:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8000e12:	682b      	ldr	r3, [r5, #0]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e14:	f000 815d 	beq.w	80010d2 <HAL_DMA_Start_IT+0x4d6>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8000e18:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8000e1a:	682b      	ldr	r3, [r5, #0]
 8000e1c:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000e1e:	682c      	ldr	r4, [r5, #0]
 8000e20:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <HAL_DMA_Start_IT+0x2b8>)
 8000e22:	4922      	ldr	r1, [pc, #136]	; (8000eac <HAL_DMA_Start_IT+0x2b0>)
 8000e24:	4a22      	ldr	r2, [pc, #136]	; (8000eb0 <HAL_DMA_Start_IT+0x2b4>)
 8000e26:	428c      	cmp	r4, r1
 8000e28:	bf18      	it	ne
 8000e2a:	429c      	cmpne	r4, r3
 8000e2c:	4826      	ldr	r0, [pc, #152]	; (8000ec8 <HAL_DMA_Start_IT+0x2cc>)
 8000e2e:	f101 0148 	add.w	r1, r1, #72	; 0x48
 8000e32:	bf0c      	ite	eq
 8000e34:	2301      	moveq	r3, #1
 8000e36:	2300      	movne	r3, #0
 8000e38:	4294      	cmp	r4, r2
 8000e3a:	bf08      	it	eq
 8000e3c:	f043 0301 	orreq.w	r3, r3, #1
 8000e40:	3248      	adds	r2, #72	; 0x48
 8000e42:	4284      	cmp	r4, r0
 8000e44:	bf08      	it	eq
 8000e46:	f043 0301 	orreq.w	r3, r3, #1
 8000e4a:	3048      	adds	r0, #72	; 0x48
 8000e4c:	428c      	cmp	r4, r1
 8000e4e:	bf08      	it	eq
 8000e50:	f043 0301 	orreq.w	r3, r3, #1
 8000e54:	3148      	adds	r1, #72	; 0x48
 8000e56:	4294      	cmp	r4, r2
 8000e58:	bf08      	it	eq
 8000e5a:	f043 0301 	orreq.w	r3, r3, #1
 8000e5e:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8000e62:	4284      	cmp	r4, r0
 8000e64:	bf08      	it	eq
 8000e66:	f043 0301 	orreq.w	r3, r3, #1
 8000e6a:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8000e6e:	428c      	cmp	r4, r1
 8000e70:	bf08      	it	eq
 8000e72:	f043 0301 	orreq.w	r3, r3, #1
 8000e76:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8000e7a:	4294      	cmp	r4, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f043 0301 	orreq.w	r3, r3, #1
 8000e82:	3248      	adds	r2, #72	; 0x48
 8000e84:	4284      	cmp	r4, r0
 8000e86:	bf08      	it	eq
 8000e88:	f043 0301 	orreq.w	r3, r3, #1
 8000e8c:	3048      	adds	r0, #72	; 0x48
 8000e8e:	428c      	cmp	r4, r1
 8000e90:	bf08      	it	eq
 8000e92:	f043 0301 	orreq.w	r3, r3, #1
 8000e96:	3148      	adds	r1, #72	; 0x48
 8000e98:	4294      	cmp	r4, r2
 8000e9a:	bf08      	it	eq
 8000e9c:	f043 0301 	orreq.w	r3, r3, #1
 8000ea0:	3248      	adds	r2, #72	; 0x48
 8000ea2:	4284      	cmp	r4, r0
 8000ea4:	bf08      	it	eq
 8000ea6:	f043 0301 	orreq.w	r3, r3, #1
 8000eaa:	e00f      	b.n	8000ecc <HAL_DMA_Start_IT+0x2d0>
 8000eac:	40020028 	.word	0x40020028
 8000eb0:	40020040 	.word	0x40020040
 8000eb4:	40020010 	.word	0x40020010
 8000eb8:	58025408 	.word	0x58025408
 8000ebc:	5802541c 	.word	0x5802541c
 8000ec0:	58025494 	.word	0x58025494
 8000ec4:	400204b8 	.word	0x400204b8
 8000ec8:	40020058 	.word	0x40020058
 8000ecc:	428c      	cmp	r4, r1
 8000ece:	bf08      	it	eq
 8000ed0:	f043 0301 	orreq.w	r3, r3, #1
 8000ed4:	4294      	cmp	r4, r2
 8000ed6:	bf08      	it	eq
 8000ed8:	f043 0301 	orreq.w	r3, r3, #1
 8000edc:	b91b      	cbnz	r3, 8000ee6 <HAL_DMA_Start_IT+0x2ea>
 8000ede:	4b9b      	ldr	r3, [pc, #620]	; (800114c <HAL_DMA_Start_IT+0x550>)
 8000ee0:	429c      	cmp	r4, r3
 8000ee2:	f040 8147 	bne.w	8001174 <HAL_DMA_Start_IT+0x578>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8000ee6:	6823      	ldr	r3, [r4, #0]
 8000ee8:	f023 031e 	bic.w	r3, r3, #30
 8000eec:	f043 0316 	orr.w	r3, r3, #22
 8000ef0:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8000ef2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000ef4:	b123      	cbz	r3, 8000f00 <HAL_DMA_Start_IT+0x304>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8000ef6:	682a      	ldr	r2, [r5, #0]
 8000ef8:	6813      	ldr	r3, [r2, #0]
 8000efa:	f043 0308 	orr.w	r3, r3, #8
 8000efe:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000f00:	682c      	ldr	r4, [r5, #0]
 8000f02:	4b93      	ldr	r3, [pc, #588]	; (8001150 <HAL_DMA_Start_IT+0x554>)
 8000f04:	4a93      	ldr	r2, [pc, #588]	; (8001154 <HAL_DMA_Start_IT+0x558>)
 8000f06:	4894      	ldr	r0, [pc, #592]	; (8001158 <HAL_DMA_Start_IT+0x55c>)
 8000f08:	4294      	cmp	r4, r2
 8000f0a:	bf18      	it	ne
 8000f0c:	429c      	cmpne	r4, r3
 8000f0e:	4993      	ldr	r1, [pc, #588]	; (800115c <HAL_DMA_Start_IT+0x560>)
 8000f10:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8000f14:	bf0c      	ite	eq
 8000f16:	2301      	moveq	r3, #1
 8000f18:	2300      	movne	r3, #0
 8000f1a:	4284      	cmp	r4, r0
 8000f1c:	bf08      	it	eq
 8000f1e:	f043 0301 	orreq.w	r3, r3, #1
 8000f22:	3048      	adds	r0, #72	; 0x48
 8000f24:	428c      	cmp	r4, r1
 8000f26:	bf08      	it	eq
 8000f28:	f043 0301 	orreq.w	r3, r3, #1
 8000f2c:	3148      	adds	r1, #72	; 0x48
 8000f2e:	4294      	cmp	r4, r2
 8000f30:	bf08      	it	eq
 8000f32:	f043 0301 	orreq.w	r3, r3, #1
 8000f36:	3248      	adds	r2, #72	; 0x48
 8000f38:	4284      	cmp	r4, r0
 8000f3a:	bf08      	it	eq
 8000f3c:	f043 0301 	orreq.w	r3, r3, #1
 8000f40:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8000f44:	428c      	cmp	r4, r1
 8000f46:	bf08      	it	eq
 8000f48:	f043 0301 	orreq.w	r3, r3, #1
 8000f4c:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8000f50:	4294      	cmp	r4, r2
 8000f52:	bf08      	it	eq
 8000f54:	f043 0301 	orreq.w	r3, r3, #1
 8000f58:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8000f5c:	4284      	cmp	r4, r0
 8000f5e:	bf08      	it	eq
 8000f60:	f043 0301 	orreq.w	r3, r3, #1
 8000f64:	3048      	adds	r0, #72	; 0x48
 8000f66:	428c      	cmp	r4, r1
 8000f68:	bf08      	it	eq
 8000f6a:	f043 0301 	orreq.w	r3, r3, #1
 8000f6e:	3148      	adds	r1, #72	; 0x48
 8000f70:	4294      	cmp	r4, r2
 8000f72:	bf08      	it	eq
 8000f74:	f043 0301 	orreq.w	r3, r3, #1
 8000f78:	3248      	adds	r2, #72	; 0x48
 8000f7a:	4284      	cmp	r4, r0
 8000f7c:	bf08      	it	eq
 8000f7e:	f043 0301 	orreq.w	r3, r3, #1
 8000f82:	3048      	adds	r0, #72	; 0x48
 8000f84:	428c      	cmp	r4, r1
 8000f86:	bf08      	it	eq
 8000f88:	f043 0301 	orreq.w	r3, r3, #1
 8000f8c:	3148      	adds	r1, #72	; 0x48
 8000f8e:	4294      	cmp	r4, r2
 8000f90:	bf08      	it	eq
 8000f92:	f043 0301 	orreq.w	r3, r3, #1
 8000f96:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8000f9a:	4284      	cmp	r4, r0
 8000f9c:	bf08      	it	eq
 8000f9e:	f043 0301 	orreq.w	r3, r3, #1
 8000fa2:	f502 429f 	add.w	r2, r2, #20352	; 0x4f80
 8000fa6:	486e      	ldr	r0, [pc, #440]	; (8001160 <HAL_DMA_Start_IT+0x564>)
 8000fa8:	428c      	cmp	r4, r1
 8000faa:	bf08      	it	eq
 8000fac:	f043 0301 	orreq.w	r3, r3, #1
 8000fb0:	496c      	ldr	r1, [pc, #432]	; (8001164 <HAL_DMA_Start_IT+0x568>)
 8000fb2:	4294      	cmp	r4, r2
 8000fb4:	bf08      	it	eq
 8000fb6:	f043 0301 	orreq.w	r3, r3, #1
 8000fba:	323c      	adds	r2, #60	; 0x3c
 8000fbc:	4284      	cmp	r4, r0
 8000fbe:	bf08      	it	eq
 8000fc0:	f043 0301 	orreq.w	r3, r3, #1
 8000fc4:	303c      	adds	r0, #60	; 0x3c
 8000fc6:	428c      	cmp	r4, r1
 8000fc8:	bf08      	it	eq
 8000fca:	f043 0301 	orreq.w	r3, r3, #1
 8000fce:	313c      	adds	r1, #60	; 0x3c
 8000fd0:	4294      	cmp	r4, r2
 8000fd2:	bf08      	it	eq
 8000fd4:	f043 0301 	orreq.w	r3, r3, #1
 8000fd8:	323c      	adds	r2, #60	; 0x3c
 8000fda:	4284      	cmp	r4, r0
 8000fdc:	bf08      	it	eq
 8000fde:	f043 0301 	orreq.w	r3, r3, #1
 8000fe2:	428c      	cmp	r4, r1
 8000fe4:	bf08      	it	eq
 8000fe6:	f043 0301 	orreq.w	r3, r3, #1
 8000fea:	4294      	cmp	r4, r2
 8000fec:	bf08      	it	eq
 8000fee:	f043 0301 	orreq.w	r3, r3, #1
 8000ff2:	b913      	cbnz	r3, 8000ffa <HAL_DMA_Start_IT+0x3fe>
 8000ff4:	4b5c      	ldr	r3, [pc, #368]	; (8001168 <HAL_DMA_Start_IT+0x56c>)
 8000ff6:	429c      	cmp	r4, r3
 8000ff8:	d10e      	bne.n	8001018 <HAL_DMA_Start_IT+0x41c>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000ffa:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	03d2      	lsls	r2, r2, #15
 8001000:	d503      	bpl.n	800100a <HAL_DMA_Start_IT+0x40e>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001008:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800100a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800100c:	b11b      	cbz	r3, 8001016 <HAL_DMA_Start_IT+0x41a>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	682c      	ldr	r4, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8001018:	4b4d      	ldr	r3, [pc, #308]	; (8001150 <HAL_DMA_Start_IT+0x554>)
 800101a:	494e      	ldr	r1, [pc, #312]	; (8001154 <HAL_DMA_Start_IT+0x558>)
 800101c:	4a4e      	ldr	r2, [pc, #312]	; (8001158 <HAL_DMA_Start_IT+0x55c>)
 800101e:	428c      	cmp	r4, r1
 8001020:	bf18      	it	ne
 8001022:	429c      	cmpne	r4, r3
 8001024:	4d4d      	ldr	r5, [pc, #308]	; (800115c <HAL_DMA_Start_IT+0x560>)
 8001026:	4851      	ldr	r0, [pc, #324]	; (800116c <HAL_DMA_Start_IT+0x570>)
 8001028:	f101 0160 	add.w	r1, r1, #96	; 0x60
 800102c:	bf0c      	ite	eq
 800102e:	2301      	moveq	r3, #1
 8001030:	2300      	movne	r3, #0
 8001032:	4294      	cmp	r4, r2
 8001034:	bf08      	it	eq
 8001036:	f043 0301 	orreq.w	r3, r3, #1
 800103a:	3260      	adds	r2, #96	; 0x60
 800103c:	42ac      	cmp	r4, r5
 800103e:	bf08      	it	eq
 8001040:	f043 0301 	orreq.w	r3, r3, #1
 8001044:	3560      	adds	r5, #96	; 0x60
 8001046:	4284      	cmp	r4, r0
 8001048:	bf08      	it	eq
 800104a:	f043 0301 	orreq.w	r3, r3, #1
 800104e:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 8001052:	428c      	cmp	r4, r1
 8001054:	bf08      	it	eq
 8001056:	f043 0301 	orreq.w	r3, r3, #1
 800105a:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
 800105e:	4294      	cmp	r4, r2
 8001060:	bf08      	it	eq
 8001062:	f043 0301 	orreq.w	r3, r3, #1
 8001066:	f502 7268 	add.w	r2, r2, #928	; 0x3a0
 800106a:	42ac      	cmp	r4, r5
 800106c:	bf08      	it	eq
 800106e:	f043 0301 	orreq.w	r3, r3, #1
 8001072:	f505 7568 	add.w	r5, r5, #928	; 0x3a0
 8001076:	4284      	cmp	r4, r0
 8001078:	bf08      	it	eq
 800107a:	f043 0301 	orreq.w	r3, r3, #1
 800107e:	3060      	adds	r0, #96	; 0x60
 8001080:	428c      	cmp	r4, r1
 8001082:	bf08      	it	eq
 8001084:	f043 0301 	orreq.w	r3, r3, #1
 8001088:	3160      	adds	r1, #96	; 0x60
 800108a:	4294      	cmp	r4, r2
 800108c:	bf08      	it	eq
 800108e:	f043 0301 	orreq.w	r3, r3, #1
 8001092:	3260      	adds	r2, #96	; 0x60
 8001094:	42ac      	cmp	r4, r5
 8001096:	bf08      	it	eq
 8001098:	f043 0301 	orreq.w	r3, r3, #1
 800109c:	4284      	cmp	r4, r0
 800109e:	bf08      	it	eq
 80010a0:	f043 0301 	orreq.w	r3, r3, #1
 80010a4:	428c      	cmp	r4, r1
 80010a6:	bf08      	it	eq
 80010a8:	f043 0301 	orreq.w	r3, r3, #1
 80010ac:	4294      	cmp	r4, r2
 80010ae:	bf08      	it	eq
 80010b0:	f043 0301 	orreq.w	r3, r3, #1
 80010b4:	b933      	cbnz	r3, 80010c4 <HAL_DMA_Start_IT+0x4c8>
 80010b6:	3048      	adds	r0, #72	; 0x48
 80010b8:	1a20      	subs	r0, r4, r0
 80010ba:	fab0 f080 	clz	r0, r0
 80010be:	0940      	lsrs	r0, r0, #5
 80010c0:	2800      	cmp	r0, #0
 80010c2:	d03e      	beq.n	8001142 <HAL_DMA_Start_IT+0x546>
 80010c4:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010c6:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6023      	str	r3, [r4, #0]
}
 80010ce:	bcf0      	pop	{r4, r5, r6, r7}
 80010d0:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80010d2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80010d4:	682b      	ldr	r3, [r5, #0]
 80010d6:	60d9      	str	r1, [r3, #12]
 80010d8:	e6a1      	b.n	8000e1e <HAL_DMA_Start_IT+0x222>
    return HAL_ERROR;
 80010da:	2001      	movs	r0, #1
}
 80010dc:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80010de:	2002      	movs	r0, #2
}
 80010e0:	bcf0      	pop	{r4, r5, r6, r7}
 80010e2:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80010e4:	4822      	ldr	r0, [pc, #136]	; (8001170 <HAL_DMA_Start_IT+0x574>)
 80010e6:	f8df c078 	ldr.w	ip, [pc, #120]	; 8001160 <HAL_DMA_Start_IT+0x564>
 80010ea:	4f1e      	ldr	r7, [pc, #120]	; (8001164 <HAL_DMA_Start_IT+0x568>)
 80010ec:	4564      	cmp	r4, ip
 80010ee:	bf18      	it	ne
 80010f0:	4284      	cmpne	r4, r0
 80010f2:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 80010f6:	bf0c      	ite	eq
 80010f8:	2001      	moveq	r0, #1
 80010fa:	2000      	movne	r0, #0
 80010fc:	42bc      	cmp	r4, r7
 80010fe:	bf08      	it	eq
 8001100:	f040 0001 	orreq.w	r0, r0, #1
 8001104:	3728      	adds	r7, #40	; 0x28
 8001106:	4564      	cmp	r4, ip
 8001108:	bf08      	it	eq
 800110a:	f040 0001 	orreq.w	r0, r0, #1
 800110e:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8001112:	42bc      	cmp	r4, r7
 8001114:	bf08      	it	eq
 8001116:	f040 0001 	orreq.w	r0, r0, #1
 800111a:	3728      	adds	r7, #40	; 0x28
 800111c:	4564      	cmp	r4, ip
 800111e:	bf08      	it	eq
 8001120:	f040 0001 	orreq.w	r0, r0, #1
 8001124:	42bc      	cmp	r4, r7
 8001126:	bf08      	it	eq
 8001128:	f040 0001 	orreq.w	r0, r0, #1
 800112c:	b910      	cbnz	r0, 8001134 <HAL_DMA_Start_IT+0x538>
 800112e:	480e      	ldr	r0, [pc, #56]	; (8001168 <HAL_DMA_Start_IT+0x56c>)
 8001130:	4284      	cmp	r4, r0
 8001132:	d11f      	bne.n	8001174 <HAL_DMA_Start_IT+0x578>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001134:	6dec      	ldr	r4, [r5, #92]	; 0x5c
 8001136:	2001      	movs	r0, #1
 8001138:	f004 041f 	and.w	r4, r4, #31
 800113c:	40a0      	lsls	r0, r4
 800113e:	6070      	str	r0, [r6, #4]
 8001140:	e663      	b.n	8000e0a <HAL_DMA_Start_IT+0x20e>
    __HAL_DMA_ENABLE(hdma);
 8001142:	6823      	ldr	r3, [r4, #0]
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6023      	str	r3, [r4, #0]
 800114a:	e56e      	b.n	8000c2a <HAL_DMA_Start_IT+0x2e>
 800114c:	400204b8 	.word	0x400204b8
 8001150:	40020010 	.word	0x40020010
 8001154:	40020028 	.word	0x40020028
 8001158:	40020040 	.word	0x40020040
 800115c:	40020058 	.word	0x40020058
 8001160:	5802541c 	.word	0x5802541c
 8001164:	58025430 	.word	0x58025430
 8001168:	58025494 	.word	0x58025494
 800116c:	40020070 	.word	0x40020070
 8001170:	58025408 	.word	0x58025408
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001174:	6823      	ldr	r3, [r4, #0]
 8001176:	f023 030e 	bic.w	r3, r3, #14
 800117a:	f043 030a 	orr.w	r3, r3, #10
 800117e:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001180:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001182:	2b00      	cmp	r3, #0
 8001184:	f43f aebc 	beq.w	8000f00 <HAL_DMA_Start_IT+0x304>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001188:	682a      	ldr	r2, [r5, #0]
 800118a:	6813      	ldr	r3, [r2, #0]
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e6b5      	b.n	8000f00 <HAL_DMA_Start_IT+0x304>

08001194 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8001194:	2800      	cmp	r0, #0
 8001196:	d06a      	beq.n	800126e <HAL_DMA_Abort_IT+0xda>
{
 8001198:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800119c:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 80011a0:	4603      	mov	r3, r0
 80011a2:	2a02      	cmp	r2, #2
 80011a4:	d15e      	bne.n	8001264 <HAL_DMA_Abort_IT+0xd0>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80011a6:	6802      	ldr	r2, [r0, #0]
 80011a8:	4988      	ldr	r1, [pc, #544]	; (80013cc <HAL_DMA_Abort_IT+0x238>)
 80011aa:	428a      	cmp	r2, r1
 80011ac:	d050      	beq.n	8001250 <HAL_DMA_Abort_IT+0xbc>
 80011ae:	4888      	ldr	r0, [pc, #544]	; (80013d0 <HAL_DMA_Abort_IT+0x23c>)
 80011b0:	4282      	cmp	r2, r0
 80011b2:	d04d      	beq.n	8001250 <HAL_DMA_Abort_IT+0xbc>
 80011b4:	f8df 8230 	ldr.w	r8, [pc, #560]	; 80013e8 <HAL_DMA_Abort_IT+0x254>
 80011b8:	f8df 9228 	ldr.w	r9, [pc, #552]	; 80013e4 <HAL_DMA_Abort_IT+0x250>
 80011bc:	f8df e238 	ldr.w	lr, [pc, #568]	; 80013f8 <HAL_DMA_Abort_IT+0x264>
 80011c0:	454a      	cmp	r2, r9
 80011c2:	bf18      	it	ne
 80011c4:	4542      	cmpne	r2, r8
 80011c6:	f8df c234 	ldr.w	ip, [pc, #564]	; 80013fc <HAL_DMA_Abort_IT+0x268>
 80011ca:	4f82      	ldr	r7, [pc, #520]	; (80013d4 <HAL_DMA_Abort_IT+0x240>)
 80011cc:	bf0c      	ite	eq
 80011ce:	f04f 0a01 	moveq.w	sl, #1
 80011d2:	f04f 0a00 	movne.w	sl, #0
 80011d6:	4c80      	ldr	r4, [pc, #512]	; (80013d8 <HAL_DMA_Abort_IT+0x244>)
 80011d8:	4572      	cmp	r2, lr
 80011da:	bf08      	it	eq
 80011dc:	f04a 0a01 	orreq.w	sl, sl, #1
 80011e0:	f8df b21c 	ldr.w	fp, [pc, #540]	; 8001400 <HAL_DMA_Abort_IT+0x26c>
 80011e4:	4e7d      	ldr	r6, [pc, #500]	; (80013dc <HAL_DMA_Abort_IT+0x248>)
 80011e6:	4562      	cmp	r2, ip
 80011e8:	bf08      	it	eq
 80011ea:	f04a 0a01 	orreq.w	sl, sl, #1
 80011ee:	4d7c      	ldr	r5, [pc, #496]	; (80013e0 <HAL_DMA_Abort_IT+0x24c>)
 80011f0:	42ba      	cmp	r2, r7
 80011f2:	bf08      	it	eq
 80011f4:	f04a 0a01 	orreq.w	sl, sl, #1
 80011f8:	42a2      	cmp	r2, r4
 80011fa:	bf08      	it	eq
 80011fc:	f04a 0a01 	orreq.w	sl, sl, #1
 8001200:	f504 7456 	add.w	r4, r4, #856	; 0x358
 8001204:	42a2      	cmp	r2, r4
 8001206:	bf08      	it	eq
 8001208:	f04a 0a01 	orreq.w	sl, sl, #1
 800120c:	3418      	adds	r4, #24
 800120e:	42a2      	cmp	r2, r4
 8001210:	bf08      	it	eq
 8001212:	f04a 0a01 	orreq.w	sl, sl, #1
 8001216:	3418      	adds	r4, #24
 8001218:	42a2      	cmp	r2, r4
 800121a:	bf08      	it	eq
 800121c:	f04a 0a01 	orreq.w	sl, sl, #1
 8001220:	3460      	adds	r4, #96	; 0x60
 8001222:	455a      	cmp	r2, fp
 8001224:	bf08      	it	eq
 8001226:	f04a 0a01 	orreq.w	sl, sl, #1
 800122a:	42b2      	cmp	r2, r6
 800122c:	bf08      	it	eq
 800122e:	f04a 0a01 	orreq.w	sl, sl, #1
 8001232:	42aa      	cmp	r2, r5
 8001234:	bf08      	it	eq
 8001236:	f04a 0a01 	orreq.w	sl, sl, #1
 800123a:	42a2      	cmp	r2, r4
 800123c:	bf08      	it	eq
 800123e:	f04a 0a01 	orreq.w	sl, sl, #1
 8001242:	f1ba 0f00 	cmp.w	sl, #0
 8001246:	d103      	bne.n	8001250 <HAL_DMA_Abort_IT+0xbc>
 8001248:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 8001404 <HAL_DMA_Abort_IT+0x270>
 800124c:	4552      	cmp	r2, sl
 800124e:	d110      	bne.n	8001272 <HAL_DMA_Abort_IT+0xde>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001250:	2104      	movs	r1, #4
  return HAL_OK;
 8001252:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8001254:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001258:	6813      	ldr	r3, [r2, #0]
 800125a:	f023 0301 	bic.w	r3, r3, #1
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001264:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8001266:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001268:	655a      	str	r2, [r3, #84]	; 0x54
}
 800126a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 800126e:	2001      	movs	r0, #1
}
 8001270:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001272:	6814      	ldr	r4, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001274:	4856      	ldr	r0, [pc, #344]	; (80013d0 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001276:	f024 040e 	bic.w	r4, r4, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800127a:	4d5a      	ldr	r5, [pc, #360]	; (80013e4 <HAL_DMA_Abort_IT+0x250>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800127c:	6014      	str	r4, [r2, #0]
      __HAL_DMA_DISABLE(hdma);
 800127e:	681a      	ldr	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001280:	4c59      	ldr	r4, [pc, #356]	; (80013e8 <HAL_DMA_Abort_IT+0x254>)
      __HAL_DMA_DISABLE(hdma);
 8001282:	6811      	ldr	r1, [r2, #0]
 8001284:	f021 0101 	bic.w	r1, r1, #1
 8001288:	6011      	str	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800128a:	4a50      	ldr	r2, [pc, #320]	; (80013cc <HAL_DMA_Abort_IT+0x238>)
 800128c:	6819      	ldr	r1, [r3, #0]
 800128e:	4281      	cmp	r1, r0
 8001290:	bf18      	it	ne
 8001292:	4291      	cmpne	r1, r2
 8001294:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8001298:	bf0c      	ite	eq
 800129a:	2201      	moveq	r2, #1
 800129c:	2200      	movne	r2, #0
 800129e:	42a9      	cmp	r1, r5
 80012a0:	bf08      	it	eq
 80012a2:	f042 0201 	orreq.w	r2, r2, #1
 80012a6:	3548      	adds	r5, #72	; 0x48
 80012a8:	42a1      	cmp	r1, r4
 80012aa:	bf08      	it	eq
 80012ac:	f042 0201 	orreq.w	r2, r2, #1
 80012b0:	3448      	adds	r4, #72	; 0x48
 80012b2:	4281      	cmp	r1, r0
 80012b4:	bf08      	it	eq
 80012b6:	f042 0201 	orreq.w	r2, r2, #1
 80012ba:	3048      	adds	r0, #72	; 0x48
 80012bc:	42a9      	cmp	r1, r5
 80012be:	bf08      	it	eq
 80012c0:	f042 0201 	orreq.w	r2, r2, #1
 80012c4:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80012c8:	42a1      	cmp	r1, r4
 80012ca:	bf08      	it	eq
 80012cc:	f042 0201 	orreq.w	r2, r2, #1
 80012d0:	f504 7462 	add.w	r4, r4, #904	; 0x388
 80012d4:	4281      	cmp	r1, r0
 80012d6:	bf08      	it	eq
 80012d8:	f042 0201 	orreq.w	r2, r2, #1
 80012dc:	f500 7062 	add.w	r0, r0, #904	; 0x388
 80012e0:	42a9      	cmp	r1, r5
 80012e2:	bf08      	it	eq
 80012e4:	f042 0201 	orreq.w	r2, r2, #1
 80012e8:	3548      	adds	r5, #72	; 0x48
 80012ea:	42a1      	cmp	r1, r4
 80012ec:	bf08      	it	eq
 80012ee:	f042 0201 	orreq.w	r2, r2, #1
 80012f2:	3448      	adds	r4, #72	; 0x48
 80012f4:	4281      	cmp	r1, r0
 80012f6:	bf08      	it	eq
 80012f8:	f042 0201 	orreq.w	r2, r2, #1
 80012fc:	3048      	adds	r0, #72	; 0x48
 80012fe:	42a9      	cmp	r1, r5
 8001300:	bf08      	it	eq
 8001302:	f042 0201 	orreq.w	r2, r2, #1
 8001306:	3548      	adds	r5, #72	; 0x48
 8001308:	42a1      	cmp	r1, r4
 800130a:	bf08      	it	eq
 800130c:	f042 0201 	orreq.w	r2, r2, #1
 8001310:	3448      	adds	r4, #72	; 0x48
 8001312:	4281      	cmp	r1, r0
 8001314:	bf08      	it	eq
 8001316:	f042 0201 	orreq.w	r2, r2, #1
 800131a:	f100 50c0 	add.w	r0, r0, #402653184	; 0x18000000
 800131e:	42a9      	cmp	r1, r5
 8001320:	bf08      	it	eq
 8001322:	f042 0201 	orreq.w	r2, r2, #1
 8001326:	f500 409f 	add.w	r0, r0, #20352	; 0x4f80
 800132a:	4d30      	ldr	r5, [pc, #192]	; (80013ec <HAL_DMA_Abort_IT+0x258>)
 800132c:	42a1      	cmp	r1, r4
 800132e:	bf08      	it	eq
 8001330:	f042 0201 	orreq.w	r2, r2, #1
 8001334:	4c2e      	ldr	r4, [pc, #184]	; (80013f0 <HAL_DMA_Abort_IT+0x25c>)
 8001336:	4281      	cmp	r1, r0
 8001338:	bf08      	it	eq
 800133a:	f042 0201 	orreq.w	r2, r2, #1
 800133e:	303c      	adds	r0, #60	; 0x3c
 8001340:	42a9      	cmp	r1, r5
 8001342:	bf08      	it	eq
 8001344:	f042 0201 	orreq.w	r2, r2, #1
 8001348:	353c      	adds	r5, #60	; 0x3c
 800134a:	42a1      	cmp	r1, r4
 800134c:	bf08      	it	eq
 800134e:	f042 0201 	orreq.w	r2, r2, #1
 8001352:	343c      	adds	r4, #60	; 0x3c
 8001354:	4281      	cmp	r1, r0
 8001356:	bf08      	it	eq
 8001358:	f042 0201 	orreq.w	r2, r2, #1
 800135c:	303c      	adds	r0, #60	; 0x3c
 800135e:	42a9      	cmp	r1, r5
 8001360:	bf08      	it	eq
 8001362:	f042 0201 	orreq.w	r2, r2, #1
 8001366:	42a1      	cmp	r1, r4
 8001368:	bf08      	it	eq
 800136a:	f042 0201 	orreq.w	r2, r2, #1
 800136e:	4281      	cmp	r1, r0
 8001370:	bf08      	it	eq
 8001372:	f042 0201 	orreq.w	r2, r2, #1
 8001376:	b912      	cbnz	r2, 800137e <HAL_DMA_Abort_IT+0x1ea>
 8001378:	4a1e      	ldr	r2, [pc, #120]	; (80013f4 <HAL_DMA_Abort_IT+0x260>)
 800137a:	4291      	cmp	r1, r2
 800137c:	d117      	bne.n	80013ae <HAL_DMA_Abort_IT+0x21a>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800137e:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001380:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001382:	6801      	ldr	r1, [r0, #0]
 8001384:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001388:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800138a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800138e:	f001 011f 	and.w	r1, r1, #31
 8001392:	408a      	lsls	r2, r1
 8001394:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001396:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 800139a:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800139c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800139e:	b132      	cbz	r2, 80013ae <HAL_DMA_Abort_IT+0x21a>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013a0:	6811      	ldr	r1, [r2, #0]
 80013a2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80013a6:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013a8:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 80013ac:	6051      	str	r1, [r2, #4]
      __HAL_UNLOCK(hdma);
 80013ae:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 80013b0:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 80013b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 80013b4:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80013b8:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 80013bc:	b11a      	cbz	r2, 80013c6 <HAL_DMA_Abort_IT+0x232>
        hdma->XferAbortCallback(hdma);
 80013be:	4618      	mov	r0, r3
 80013c0:	4790      	blx	r2
  return HAL_OK;
 80013c2:	4620      	mov	r0, r4
 80013c4:	e751      	b.n	800126a <HAL_DMA_Abort_IT+0xd6>
 80013c6:	4610      	mov	r0, r2
 80013c8:	e74f      	b.n	800126a <HAL_DMA_Abort_IT+0xd6>
 80013ca:	bf00      	nop
 80013cc:	40020010 	.word	0x40020010
 80013d0:	40020028 	.word	0x40020028
 80013d4:	400200a0 	.word	0x400200a0
 80013d8:	400200b8 	.word	0x400200b8
 80013dc:	40020470 	.word	0x40020470
 80013e0:	40020488 	.word	0x40020488
 80013e4:	40020040 	.word	0x40020040
 80013e8:	40020058 	.word	0x40020058
 80013ec:	5802541c 	.word	0x5802541c
 80013f0:	58025430 	.word	0x58025430
 80013f4:	58025494 	.word	0x58025494
 80013f8:	40020070 	.word	0x40020070
 80013fc:	40020088 	.word	0x40020088
 8001400:	40020458 	.word	0x40020458
 8001404:	400204b8 	.word	0x400204b8

08001408 <HAL_DMA_IRQHandler>:
{
 8001408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t count = 0U;
 800140c:	2300      	movs	r3, #0
{
 800140e:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001410:	4aa3      	ldr	r2, [pc, #652]	; (80016a0 <HAL_DMA_IRQHandler+0x298>)
{
 8001412:	4681      	mov	r9, r0
  __IO uint32_t count = 0U;
 8001414:	9301      	str	r3, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001416:	6803      	ldr	r3, [r0, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001418:	49a2      	ldr	r1, [pc, #648]	; (80016a4 <HAL_DMA_IRQHandler+0x29c>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800141a:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800141c:	4293      	cmp	r3, r2
  uint32_t timeout = SystemCoreClock / 9600U;
 800141e:	680d      	ldr	r5, [r1, #0]
  tmpisr_dma  = regs_dma->ISR;
 8001420:	6826      	ldr	r6, [r4, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8001422:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001424:	d049      	beq.n	80014ba <HAL_DMA_IRQHandler+0xb2>
 8001426:	3218      	adds	r2, #24
 8001428:	4293      	cmp	r3, r2
 800142a:	d046      	beq.n	80014ba <HAL_DMA_IRQHandler+0xb2>
 800142c:	3218      	adds	r2, #24
 800142e:	489e      	ldr	r0, [pc, #632]	; (80016a8 <HAL_DMA_IRQHandler+0x2a0>)
 8001430:	4f9e      	ldr	r7, [pc, #632]	; (80016ac <HAL_DMA_IRQHandler+0x2a4>)
 8001432:	4283      	cmp	r3, r0
 8001434:	bf18      	it	ne
 8001436:	4293      	cmpne	r3, r2
 8001438:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800143c:	bf0c      	ite	eq
 800143e:	2201      	moveq	r2, #1
 8001440:	2200      	movne	r2, #0
 8001442:	42bb      	cmp	r3, r7
 8001444:	bf08      	it	eq
 8001446:	f042 0201 	orreq.w	r2, r2, #1
 800144a:	3730      	adds	r7, #48	; 0x30
 800144c:	4283      	cmp	r3, r0
 800144e:	bf08      	it	eq
 8001450:	f042 0201 	orreq.w	r2, r2, #1
 8001454:	3030      	adds	r0, #48	; 0x30
 8001456:	42bb      	cmp	r3, r7
 8001458:	bf08      	it	eq
 800145a:	f042 0201 	orreq.w	r2, r2, #1
 800145e:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8001462:	4283      	cmp	r3, r0
 8001464:	bf08      	it	eq
 8001466:	f042 0201 	orreq.w	r2, r2, #1
 800146a:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800146e:	42bb      	cmp	r3, r7
 8001470:	bf08      	it	eq
 8001472:	f042 0201 	orreq.w	r2, r2, #1
 8001476:	3730      	adds	r7, #48	; 0x30
 8001478:	4283      	cmp	r3, r0
 800147a:	bf08      	it	eq
 800147c:	f042 0201 	orreq.w	r2, r2, #1
 8001480:	3030      	adds	r0, #48	; 0x30
 8001482:	42bb      	cmp	r3, r7
 8001484:	bf08      	it	eq
 8001486:	f042 0201 	orreq.w	r2, r2, #1
 800148a:	3730      	adds	r7, #48	; 0x30
 800148c:	4283      	cmp	r3, r0
 800148e:	bf08      	it	eq
 8001490:	f042 0201 	orreq.w	r2, r2, #1
 8001494:	3030      	adds	r0, #48	; 0x30
 8001496:	42bb      	cmp	r3, r7
 8001498:	bf08      	it	eq
 800149a:	f042 0201 	orreq.w	r2, r2, #1
 800149e:	3730      	adds	r7, #48	; 0x30
 80014a0:	4283      	cmp	r3, r0
 80014a2:	bf08      	it	eq
 80014a4:	f042 0201 	orreq.w	r2, r2, #1
 80014a8:	42bb      	cmp	r3, r7
 80014aa:	bf08      	it	eq
 80014ac:	f042 0201 	orreq.w	r2, r2, #1
 80014b0:	b91a      	cbnz	r2, 80014ba <HAL_DMA_IRQHandler+0xb2>
 80014b2:	4a7f      	ldr	r2, [pc, #508]	; (80016b0 <HAL_DMA_IRQHandler+0x2a8>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	f040 8251 	bne.w	800195c <HAL_DMA_IRQHandler+0x554>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80014ba:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
 80014be:	2208      	movs	r2, #8
 80014c0:	f001 0c1f 	and.w	ip, r1, #31
 80014c4:	fa02 f20c 	lsl.w	r2, r2, ip
 80014c8:	4232      	tst	r2, r6
 80014ca:	f040 81b8 	bne.w	800183e <HAL_DMA_IRQHandler+0x436>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80014ce:	fa26 f20c 	lsr.w	r2, r6, ip
 80014d2:	07d2      	lsls	r2, r2, #31
 80014d4:	d511      	bpl.n	80014fa <HAL_DMA_IRQHandler+0xf2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80014d6:	695a      	ldr	r2, [r3, #20]
 80014d8:	0610      	lsls	r0, r2, #24
 80014da:	f140 827f 	bpl.w	80019dc <HAL_DMA_IRQHandler+0x5d4>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80014de:	2101      	movs	r1, #1
 80014e0:	fa01 f10c 	lsl.w	r1, r1, ip
 80014e4:	60a1      	str	r1, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014e6:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 80014ea:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
 80014ee:	f043 0302 	orr.w	r3, r3, #2
 80014f2:	f001 0c1f 	and.w	ip, r1, #31
 80014f6:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80014fa:	2704      	movs	r7, #4
 80014fc:	fa07 f70c 	lsl.w	r7, r7, ip
 8001500:	4237      	tst	r7, r6
 8001502:	d06d      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x1d8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001504:	f8d9 0000 	ldr.w	r0, [r9]
 8001508:	4a65      	ldr	r2, [pc, #404]	; (80016a0 <HAL_DMA_IRQHandler+0x298>)
 800150a:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80016b8 <HAL_DMA_IRQHandler+0x2b0>
 800150e:	4603      	mov	r3, r0
 8001510:	4540      	cmp	r0, r8
 8001512:	bf18      	it	ne
 8001514:	4290      	cmpne	r0, r2
 8001516:	f108 0818 	add.w	r8, r8, #24
 800151a:	bf0c      	ite	eq
 800151c:	2201      	moveq	r2, #1
 800151e:	2200      	movne	r2, #0
 8001520:	4540      	cmp	r0, r8
 8001522:	bf08      	it	eq
 8001524:	f042 0201 	orreq.w	r2, r2, #1
 8001528:	f108 0818 	add.w	r8, r8, #24
 800152c:	4540      	cmp	r0, r8
 800152e:	bf08      	it	eq
 8001530:	f042 0201 	orreq.w	r2, r2, #1
 8001534:	f108 0818 	add.w	r8, r8, #24
 8001538:	4540      	cmp	r0, r8
 800153a:	bf08      	it	eq
 800153c:	f042 0201 	orreq.w	r2, r2, #1
 8001540:	f108 0818 	add.w	r8, r8, #24
 8001544:	4540      	cmp	r0, r8
 8001546:	bf08      	it	eq
 8001548:	f042 0201 	orreq.w	r2, r2, #1
 800154c:	f108 0818 	add.w	r8, r8, #24
 8001550:	4540      	cmp	r0, r8
 8001552:	bf08      	it	eq
 8001554:	f042 0201 	orreq.w	r2, r2, #1
 8001558:	f108 0818 	add.w	r8, r8, #24
 800155c:	4540      	cmp	r0, r8
 800155e:	bf08      	it	eq
 8001560:	f042 0201 	orreq.w	r2, r2, #1
 8001564:	f508 7856 	add.w	r8, r8, #856	; 0x358
 8001568:	4540      	cmp	r0, r8
 800156a:	bf08      	it	eq
 800156c:	f042 0201 	orreq.w	r2, r2, #1
 8001570:	f108 0818 	add.w	r8, r8, #24
 8001574:	4540      	cmp	r0, r8
 8001576:	bf08      	it	eq
 8001578:	f042 0201 	orreq.w	r2, r2, #1
 800157c:	f108 0818 	add.w	r8, r8, #24
 8001580:	4540      	cmp	r0, r8
 8001582:	bf08      	it	eq
 8001584:	f042 0201 	orreq.w	r2, r2, #1
 8001588:	f108 0818 	add.w	r8, r8, #24
 800158c:	4540      	cmp	r0, r8
 800158e:	bf08      	it	eq
 8001590:	f042 0201 	orreq.w	r2, r2, #1
 8001594:	f108 0818 	add.w	r8, r8, #24
 8001598:	4540      	cmp	r0, r8
 800159a:	bf08      	it	eq
 800159c:	f042 0201 	orreq.w	r2, r2, #1
 80015a0:	f108 0818 	add.w	r8, r8, #24
 80015a4:	4540      	cmp	r0, r8
 80015a6:	bf08      	it	eq
 80015a8:	f042 0201 	orreq.w	r2, r2, #1
 80015ac:	f108 0818 	add.w	r8, r8, #24
 80015b0:	4540      	cmp	r0, r8
 80015b2:	bf08      	it	eq
 80015b4:	f042 0201 	orreq.w	r2, r2, #1
 80015b8:	b91a      	cbnz	r2, 80015c2 <HAL_DMA_IRQHandler+0x1ba>
 80015ba:	4a3d      	ldr	r2, [pc, #244]	; (80016b0 <HAL_DMA_IRQHandler+0x2a8>)
 80015bc:	4290      	cmp	r0, r2
 80015be:	f040 826d 	bne.w	8001a9c <HAL_DMA_IRQHandler+0x694>
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	0792      	lsls	r2, r2, #30
 80015c6:	f140 8213 	bpl.w	80019f0 <HAL_DMA_IRQHandler+0x5e8>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80015ca:	60a7      	str	r7, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015cc:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 80015d0:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	f001 0c1f 	and.w	ip, r1, #31
 80015dc:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80015e0:	2710      	movs	r7, #16
 80015e2:	fa07 f70c 	lsl.w	r7, r7, ip
 80015e6:	4237      	tst	r7, r6
 80015e8:	f000 8083 	beq.w	80016f2 <HAL_DMA_IRQHandler+0x2ea>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80015ec:	f8d9 3000 	ldr.w	r3, [r9]
 80015f0:	4a2b      	ldr	r2, [pc, #172]	; (80016a0 <HAL_DMA_IRQHandler+0x298>)
 80015f2:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 80016b8 <HAL_DMA_IRQHandler+0x2b0>
 80015f6:	482f      	ldr	r0, [pc, #188]	; (80016b4 <HAL_DMA_IRQHandler+0x2ac>)
 80015f8:	4573      	cmp	r3, lr
 80015fa:	bf18      	it	ne
 80015fc:	4293      	cmpne	r3, r2
 80015fe:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001602:	bf0c      	ite	eq
 8001604:	2201      	moveq	r2, #1
 8001606:	2200      	movne	r2, #0
 8001608:	4283      	cmp	r3, r0
 800160a:	bf08      	it	eq
 800160c:	f042 0201 	orreq.w	r2, r2, #1
 8001610:	3030      	adds	r0, #48	; 0x30
 8001612:	4573      	cmp	r3, lr
 8001614:	bf08      	it	eq
 8001616:	f042 0201 	orreq.w	r2, r2, #1
 800161a:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800161e:	4283      	cmp	r3, r0
 8001620:	bf08      	it	eq
 8001622:	f042 0201 	orreq.w	r2, r2, #1
 8001626:	3030      	adds	r0, #48	; 0x30
 8001628:	4573      	cmp	r3, lr
 800162a:	bf08      	it	eq
 800162c:	f042 0201 	orreq.w	r2, r2, #1
 8001630:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001634:	4283      	cmp	r3, r0
 8001636:	bf08      	it	eq
 8001638:	f042 0201 	orreq.w	r2, r2, #1
 800163c:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8001640:	4573      	cmp	r3, lr
 8001642:	bf08      	it	eq
 8001644:	f042 0201 	orreq.w	r2, r2, #1
 8001648:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 800164c:	4283      	cmp	r3, r0
 800164e:	bf08      	it	eq
 8001650:	f042 0201 	orreq.w	r2, r2, #1
 8001654:	3030      	adds	r0, #48	; 0x30
 8001656:	4573      	cmp	r3, lr
 8001658:	bf08      	it	eq
 800165a:	f042 0201 	orreq.w	r2, r2, #1
 800165e:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001662:	4283      	cmp	r3, r0
 8001664:	bf08      	it	eq
 8001666:	f042 0201 	orreq.w	r2, r2, #1
 800166a:	3030      	adds	r0, #48	; 0x30
 800166c:	4573      	cmp	r3, lr
 800166e:	bf08      	it	eq
 8001670:	f042 0201 	orreq.w	r2, r2, #1
 8001674:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8001678:	4283      	cmp	r3, r0
 800167a:	bf08      	it	eq
 800167c:	f042 0201 	orreq.w	r2, r2, #1
 8001680:	3030      	adds	r0, #48	; 0x30
 8001682:	4573      	cmp	r3, lr
 8001684:	bf08      	it	eq
 8001686:	f042 0201 	orreq.w	r2, r2, #1
 800168a:	4283      	cmp	r3, r0
 800168c:	bf08      	it	eq
 800168e:	f042 0201 	orreq.w	r2, r2, #1
 8001692:	b99a      	cbnz	r2, 80016bc <HAL_DMA_IRQHandler+0x2b4>
 8001694:	4a06      	ldr	r2, [pc, #24]	; (80016b0 <HAL_DMA_IRQHandler+0x2a8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	f040 8151 	bne.w	800193e <HAL_DMA_IRQHandler+0x536>
 800169c:	e00e      	b.n	80016bc <HAL_DMA_IRQHandler+0x2b4>
 800169e:	bf00      	nop
 80016a0:	40020010 	.word	0x40020010
 80016a4:	20000b08 	.word	0x20000b08
 80016a8:	40020058 	.word	0x40020058
 80016ac:	40020070 	.word	0x40020070
 80016b0:	400204b8 	.word	0x400204b8
 80016b4:	40020040 	.word	0x40020040
 80016b8:	40020028 	.word	0x40020028
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80016c2:	b1a3      	cbz	r3, 80016ee <HAL_DMA_IRQHandler+0x2e6>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80016c4:	60a7      	str	r7, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80016c6:	f8d9 3000 	ldr.w	r3, [r9]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	0357      	lsls	r7, r2, #13
 80016ce:	f100 8199 	bmi.w	8001a04 <HAL_DMA_IRQHandler+0x5fc>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	05d1      	lsls	r1, r2, #23
 80016d6:	d403      	bmi.n	80016e0 <HAL_DMA_IRQHandler+0x2d8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	f022 0208 	bic.w	r2, r2, #8
 80016de:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80016e0:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 80016e4:	b10b      	cbz	r3, 80016ea <HAL_DMA_IRQHandler+0x2e2>
            hdma->XferHalfCpltCallback(hdma);
 80016e6:	4648      	mov	r0, r9
 80016e8:	4798      	blx	r3
 80016ea:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
 80016ee:	f001 0c1f 	and.w	ip, r1, #31
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80016f2:	2120      	movs	r1, #32
 80016f4:	fa01 f10c 	lsl.w	r1, r1, ip
 80016f8:	4231      	tst	r1, r6
 80016fa:	d06b      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x3cc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80016fc:	f8d9 2000 	ldr.w	r2, [r9]
 8001700:	4b91      	ldr	r3, [pc, #580]	; (8001948 <HAL_DMA_IRQHandler+0x540>)
 8001702:	4f92      	ldr	r7, [pc, #584]	; (800194c <HAL_DMA_IRQHandler+0x544>)
 8001704:	4e92      	ldr	r6, [pc, #584]	; (8001950 <HAL_DMA_IRQHandler+0x548>)
 8001706:	42ba      	cmp	r2, r7
 8001708:	bf18      	it	ne
 800170a:	429a      	cmpne	r2, r3
 800170c:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8001710:	bf0c      	ite	eq
 8001712:	2301      	moveq	r3, #1
 8001714:	2300      	movne	r3, #0
 8001716:	42b2      	cmp	r2, r6
 8001718:	bf08      	it	eq
 800171a:	f043 0301 	orreq.w	r3, r3, #1
 800171e:	3630      	adds	r6, #48	; 0x30
 8001720:	42ba      	cmp	r2, r7
 8001722:	bf08      	it	eq
 8001724:	f043 0301 	orreq.w	r3, r3, #1
 8001728:	3730      	adds	r7, #48	; 0x30
 800172a:	42b2      	cmp	r2, r6
 800172c:	bf08      	it	eq
 800172e:	f043 0301 	orreq.w	r3, r3, #1
 8001732:	3630      	adds	r6, #48	; 0x30
 8001734:	42ba      	cmp	r2, r7
 8001736:	bf08      	it	eq
 8001738:	f043 0301 	orreq.w	r3, r3, #1
 800173c:	3730      	adds	r7, #48	; 0x30
 800173e:	42b2      	cmp	r2, r6
 8001740:	bf08      	it	eq
 8001742:	f043 0301 	orreq.w	r3, r3, #1
 8001746:	f506 765c 	add.w	r6, r6, #880	; 0x370
 800174a:	42ba      	cmp	r2, r7
 800174c:	bf08      	it	eq
 800174e:	f043 0301 	orreq.w	r3, r3, #1
 8001752:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8001756:	42b2      	cmp	r2, r6
 8001758:	bf08      	it	eq
 800175a:	f043 0301 	orreq.w	r3, r3, #1
 800175e:	3630      	adds	r6, #48	; 0x30
 8001760:	42ba      	cmp	r2, r7
 8001762:	bf08      	it	eq
 8001764:	f043 0301 	orreq.w	r3, r3, #1
 8001768:	3730      	adds	r7, #48	; 0x30
 800176a:	42b2      	cmp	r2, r6
 800176c:	bf08      	it	eq
 800176e:	f043 0301 	orreq.w	r3, r3, #1
 8001772:	3630      	adds	r6, #48	; 0x30
 8001774:	42ba      	cmp	r2, r7
 8001776:	bf08      	it	eq
 8001778:	f043 0301 	orreq.w	r3, r3, #1
 800177c:	3730      	adds	r7, #48	; 0x30
 800177e:	42b2      	cmp	r2, r6
 8001780:	bf08      	it	eq
 8001782:	f043 0301 	orreq.w	r3, r3, #1
 8001786:	3630      	adds	r6, #48	; 0x30
 8001788:	42ba      	cmp	r2, r7
 800178a:	bf08      	it	eq
 800178c:	f043 0301 	orreq.w	r3, r3, #1
 8001790:	42b2      	cmp	r2, r6
 8001792:	bf08      	it	eq
 8001794:	f043 0301 	orreq.w	r3, r3, #1
 8001798:	b91b      	cbnz	r3, 80017a2 <HAL_DMA_IRQHandler+0x39a>
 800179a:	4b6e      	ldr	r3, [pc, #440]	; (8001954 <HAL_DMA_IRQHandler+0x54c>)
 800179c:	429a      	cmp	r2, r3
 800179e:	f040 819b 	bne.w	8001ad8 <HAL_DMA_IRQHandler+0x6d0>
 80017a2:	6813      	ldr	r3, [r2, #0]
 80017a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80017a8:	b1a3      	cbz	r3, 80017d4 <HAL_DMA_IRQHandler+0x3cc>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80017aa:	60a1      	str	r1, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80017ac:	f899 3035 	ldrb.w	r3, [r9, #53]	; 0x35
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	f000 8131 	beq.w	8001a18 <HAL_DMA_IRQHandler+0x610>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80017b6:	f8d9 3000 	ldr.w	r3, [r9]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	0352      	lsls	r2, r2, #13
 80017be:	f140 8153 	bpl.w	8001a68 <HAL_DMA_IRQHandler+0x660>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	031b      	lsls	r3, r3, #12
 80017c6:	f140 815e 	bpl.w	8001a86 <HAL_DMA_IRQHandler+0x67e>
          if(hdma->XferCpltCallback != NULL)
 80017ca:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 80017ce:	b10b      	cbz	r3, 80017d4 <HAL_DMA_IRQHandler+0x3cc>
            hdma->XferCpltCallback(hdma);
 80017d0:	4648      	mov	r0, r9
 80017d2:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017d4:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 80fc 	beq.w	80019d6 <HAL_DMA_IRQHandler+0x5ce>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80017de:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 80017e2:	07df      	lsls	r7, r3, #31
 80017e4:	d521      	bpl.n	800182a <HAL_DMA_IRQHandler+0x422>
        __HAL_DMA_DISABLE(hdma);
 80017e6:	f8d9 2000 	ldr.w	r2, [r9]
        hdma->State = HAL_DMA_STATE_ABORT;
 80017ea:	2404      	movs	r4, #4
 80017ec:	f889 4035 	strb.w	r4, [r9, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80017f0:	6813      	ldr	r3, [r2, #0]
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017f8:	4b57      	ldr	r3, [pc, #348]	; (8001958 <HAL_DMA_IRQHandler+0x550>)
 80017fa:	f8d9 2000 	ldr.w	r2, [r9]
 80017fe:	fba3 3505 	umull	r3, r5, r3, r5
 8001802:	0aad      	lsrs	r5, r5, #10
 8001804:	e002      	b.n	800180c <HAL_DMA_IRQHandler+0x404>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8001806:	6813      	ldr	r3, [r2, #0]
 8001808:	07de      	lsls	r6, r3, #31
 800180a:	d504      	bpl.n	8001816 <HAL_DMA_IRQHandler+0x40e>
          if (++count > timeout)
 800180c:	9b01      	ldr	r3, [sp, #4]
 800180e:	3301      	adds	r3, #1
 8001810:	42ab      	cmp	r3, r5
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	d9f7      	bls.n	8001806 <HAL_DMA_IRQHandler+0x3fe>
        __HAL_UNLOCK(hdma);
 8001816:	2300      	movs	r3, #0
 8001818:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800181c:	6813      	ldr	r3, [r2, #0]
 800181e:	07dc      	lsls	r4, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8001820:	bf4c      	ite	mi
 8001822:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8001824:	2301      	movpl	r3, #1
 8001826:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 800182a:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 80d1 	beq.w	80019d6 <HAL_DMA_IRQHandler+0x5ce>
        hdma->XferErrorCallback(hdma);
 8001834:	4648      	mov	r0, r9
}
 8001836:	b003      	add	sp, #12
 8001838:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        hdma->XferErrorCallback(hdma);
 800183c:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	0752      	lsls	r2, r2, #29
 8001842:	d515      	bpl.n	8001870 <HAL_DMA_IRQHandler+0x468>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001844:	6819      	ldr	r1, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001846:	2208      	movs	r2, #8
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001848:	f021 0104 	bic.w	r1, r1, #4
 800184c:	6019      	str	r1, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800184e:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 8001852:	f003 031f 	and.w	r3, r3, #31
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	60a3      	str	r3, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800185c:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8001860:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	f001 0c1f 	and.w	ip, r1, #31
 800186c:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001870:	fa26 f30c 	lsr.w	r3, r6, ip
 8001874:	07df      	lsls	r7, r3, #31
 8001876:	f57f ae40 	bpl.w	80014fa <HAL_DMA_IRQHandler+0xf2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800187a:	f8d9 3000 	ldr.w	r3, [r9]
 800187e:	4a32      	ldr	r2, [pc, #200]	; (8001948 <HAL_DMA_IRQHandler+0x540>)
 8001880:	4f32      	ldr	r7, [pc, #200]	; (800194c <HAL_DMA_IRQHandler+0x544>)
 8001882:	4618      	mov	r0, r3
 8001884:	42bb      	cmp	r3, r7
 8001886:	bf18      	it	ne
 8001888:	4293      	cmpne	r3, r2
 800188a:	f107 0718 	add.w	r7, r7, #24
 800188e:	bf0c      	ite	eq
 8001890:	2201      	moveq	r2, #1
 8001892:	2200      	movne	r2, #0
 8001894:	42bb      	cmp	r3, r7
 8001896:	bf08      	it	eq
 8001898:	f042 0201 	orreq.w	r2, r2, #1
 800189c:	3718      	adds	r7, #24
 800189e:	42bb      	cmp	r3, r7
 80018a0:	bf08      	it	eq
 80018a2:	f042 0201 	orreq.w	r2, r2, #1
 80018a6:	3718      	adds	r7, #24
 80018a8:	42bb      	cmp	r3, r7
 80018aa:	bf08      	it	eq
 80018ac:	f042 0201 	orreq.w	r2, r2, #1
 80018b0:	3718      	adds	r7, #24
 80018b2:	42bb      	cmp	r3, r7
 80018b4:	bf08      	it	eq
 80018b6:	f042 0201 	orreq.w	r2, r2, #1
 80018ba:	3718      	adds	r7, #24
 80018bc:	42bb      	cmp	r3, r7
 80018be:	bf08      	it	eq
 80018c0:	f042 0201 	orreq.w	r2, r2, #1
 80018c4:	3718      	adds	r7, #24
 80018c6:	42bb      	cmp	r3, r7
 80018c8:	bf08      	it	eq
 80018ca:	f042 0201 	orreq.w	r2, r2, #1
 80018ce:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80018d2:	42bb      	cmp	r3, r7
 80018d4:	bf08      	it	eq
 80018d6:	f042 0201 	orreq.w	r2, r2, #1
 80018da:	3718      	adds	r7, #24
 80018dc:	42bb      	cmp	r3, r7
 80018de:	bf08      	it	eq
 80018e0:	f042 0201 	orreq.w	r2, r2, #1
 80018e4:	3718      	adds	r7, #24
 80018e6:	42bb      	cmp	r3, r7
 80018e8:	bf08      	it	eq
 80018ea:	f042 0201 	orreq.w	r2, r2, #1
 80018ee:	3718      	adds	r7, #24
 80018f0:	42bb      	cmp	r3, r7
 80018f2:	bf08      	it	eq
 80018f4:	f042 0201 	orreq.w	r2, r2, #1
 80018f8:	3718      	adds	r7, #24
 80018fa:	42bb      	cmp	r3, r7
 80018fc:	bf08      	it	eq
 80018fe:	f042 0201 	orreq.w	r2, r2, #1
 8001902:	3718      	adds	r7, #24
 8001904:	42bb      	cmp	r3, r7
 8001906:	bf08      	it	eq
 8001908:	f042 0201 	orreq.w	r2, r2, #1
 800190c:	3718      	adds	r7, #24
 800190e:	42bb      	cmp	r3, r7
 8001910:	bf08      	it	eq
 8001912:	f042 0201 	orreq.w	r2, r2, #1
 8001916:	2a00      	cmp	r2, #0
 8001918:	f47f addd 	bne.w	80014d6 <HAL_DMA_IRQHandler+0xce>
 800191c:	4a0d      	ldr	r2, [pc, #52]	; (8001954 <HAL_DMA_IRQHandler+0x54c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	f43f add9 	beq.w	80014d6 <HAL_DMA_IRQHandler+0xce>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001924:	2204      	movs	r2, #4
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001926:	681f      	ldr	r7, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001928:	fa02 f20c 	lsl.w	r2, r2, ip
 800192c:	4232      	tst	r2, r6
 800192e:	f040 80b5 	bne.w	8001a9c <HAL_DMA_IRQHandler+0x694>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001932:	2710      	movs	r7, #16
 8001934:	fa07 f70c 	lsl.w	r7, r7, ip
 8001938:	423e      	tst	r6, r7
 800193a:	f43f aeda 	beq.w	80016f2 <HAL_DMA_IRQHandler+0x2ea>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001944:	e6bd      	b.n	80016c2 <HAL_DMA_IRQHandler+0x2ba>
 8001946:	bf00      	nop
 8001948:	40020010 	.word	0x40020010
 800194c:	40020028 	.word	0x40020028
 8001950:	40020040 	.word	0x40020040
 8001954:	400204b8 	.word	0x400204b8
 8001958:	1b4e81b5 	.word	0x1b4e81b5
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800195c:	4aa1      	ldr	r2, [pc, #644]	; (8001be4 <HAL_DMA_IRQHandler+0x7dc>)
 800195e:	4ea2      	ldr	r6, [pc, #648]	; (8001be8 <HAL_DMA_IRQHandler+0x7e0>)
 8001960:	4da2      	ldr	r5, [pc, #648]	; (8001bec <HAL_DMA_IRQHandler+0x7e4>)
 8001962:	42b3      	cmp	r3, r6
 8001964:	bf18      	it	ne
 8001966:	4293      	cmpne	r3, r2
 8001968:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800196c:	bf0c      	ite	eq
 800196e:	2201      	moveq	r2, #1
 8001970:	2200      	movne	r2, #0
 8001972:	42ab      	cmp	r3, r5
 8001974:	bf08      	it	eq
 8001976:	f042 0201 	orreq.w	r2, r2, #1
 800197a:	3528      	adds	r5, #40	; 0x28
 800197c:	42b3      	cmp	r3, r6
 800197e:	bf08      	it	eq
 8001980:	f042 0201 	orreq.w	r2, r2, #1
 8001984:	3628      	adds	r6, #40	; 0x28
 8001986:	42ab      	cmp	r3, r5
 8001988:	bf08      	it	eq
 800198a:	f042 0201 	orreq.w	r2, r2, #1
 800198e:	3528      	adds	r5, #40	; 0x28
 8001990:	42b3      	cmp	r3, r6
 8001992:	bf08      	it	eq
 8001994:	f042 0201 	orreq.w	r2, r2, #1
 8001998:	42ab      	cmp	r3, r5
 800199a:	bf08      	it	eq
 800199c:	f042 0201 	orreq.w	r2, r2, #1
 80019a0:	b912      	cbnz	r2, 80019a8 <HAL_DMA_IRQHandler+0x5a0>
 80019a2:	4a93      	ldr	r2, [pc, #588]	; (8001bf0 <HAL_DMA_IRQHandler+0x7e8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d116      	bne.n	80019d6 <HAL_DMA_IRQHandler+0x5ce>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80019a8:	f8d9 505c 	ldr.w	r5, [r9, #92]	; 0x5c
 80019ac:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80019ae:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80019b0:	f005 051f 	and.w	r5, r5, #31
 80019b4:	40ae      	lsls	r6, r5
 80019b6:	420e      	tst	r6, r1
 80019b8:	d07b      	beq.n	8001ab2 <HAL_DMA_IRQHandler+0x6aa>
 80019ba:	0750      	lsls	r0, r2, #29
 80019bc:	d579      	bpl.n	8001ab2 <HAL_DMA_IRQHandler+0x6aa>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80019be:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80019c0:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80019c2:	f140 80af 	bpl.w	8001b24 <HAL_DMA_IRQHandler+0x71c>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80019c6:	03d2      	lsls	r2, r2, #15
 80019c8:	f100 8106 	bmi.w	8001bd8 <HAL_DMA_IRQHandler+0x7d0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019cc:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f47f af2f 	bne.w	8001834 <HAL_DMA_IRQHandler+0x42c>
}
 80019d6:	b003      	add	sp, #12
 80019d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80019dc:	2704      	movs	r7, #4
 80019de:	fa07 f70c 	lsl.w	r7, r7, ip
 80019e2:	423e      	tst	r6, r7
 80019e4:	f43f adfc 	beq.w	80015e0 <HAL_DMA_IRQHandler+0x1d8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	0792      	lsls	r2, r2, #30
 80019ec:	f53f aded 	bmi.w	80015ca <HAL_DMA_IRQHandler+0x1c2>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80019f0:	2710      	movs	r7, #16
 80019f2:	fa07 f70c 	lsl.w	r7, r7, ip
 80019f6:	423e      	tst	r6, r7
 80019f8:	f43f ae7b 	beq.w	80016f2 <HAL_DMA_IRQHandler+0x2ea>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001a02:	e65e      	b.n	80016c2 <HAL_DMA_IRQHandler+0x2ba>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	0318      	lsls	r0, r3, #12
 8001a08:	f57f ae6a 	bpl.w	80016e0 <HAL_DMA_IRQHandler+0x2d8>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001a0c:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f47f ae68 	bne.w	80016e6 <HAL_DMA_IRQHandler+0x2de>
 8001a16:	e668      	b.n	80016ea <HAL_DMA_IRQHandler+0x2e2>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a18:	f8d9 2000 	ldr.w	r2, [r9]
 8001a1c:	6813      	ldr	r3, [r2, #0]
 8001a1e:	f023 0316 	bic.w	r3, r3, #22
 8001a22:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001a24:	f8d9 2000 	ldr.w	r2, [r9]
 8001a28:	6953      	ldr	r3, [r2, #20]
 8001a2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a2e:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a30:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8001a34:	b36b      	cbz	r3, 8001a92 <HAL_DMA_IRQHandler+0x68a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001a36:	f8d9 2000 	ldr.w	r2, [r9]
 8001a3a:	6813      	ldr	r3, [r2, #0]
 8001a3c:	f023 0308 	bic.w	r3, r3, #8
 8001a40:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a42:	f8d9 205c 	ldr.w	r2, [r9, #92]	; 0x5c
 8001a46:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 8001a48:	2500      	movs	r5, #0
          hdma->State = HAL_DMA_STATE_READY;
 8001a4a:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a4c:	f002 021f 	and.w	r2, r2, #31
 8001a50:	4093      	lsls	r3, r2
 8001a52:	60a3      	str	r3, [r4, #8]
          if(hdma->XferAbortCallback != NULL)
 8001a54:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
          __HAL_UNLOCK(hdma);
 8001a58:	f889 5034 	strb.w	r5, [r9, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001a5c:	f889 1035 	strb.w	r1, [r9, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f47f aee7 	bne.w	8001834 <HAL_DMA_IRQHandler+0x42c>
 8001a66:	e7b6      	b.n	80019d6 <HAL_DMA_IRQHandler+0x5ce>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001a6e:	f47f aeac 	bne.w	80017ca <HAL_DMA_IRQHandler+0x3c2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001a72:	6819      	ldr	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8001a74:	2401      	movs	r4, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001a76:	f021 0110 	bic.w	r1, r1, #16
 8001a7a:	6019      	str	r1, [r3, #0]
            __HAL_UNLOCK(hdma);
 8001a7c:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8001a80:	f889 4035 	strb.w	r4, [r9, #53]	; 0x35
 8001a84:	e6a1      	b.n	80017ca <HAL_DMA_IRQHandler+0x3c2>
            if(hdma->XferM1CpltCallback != NULL)
 8001a86:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f47f aea0 	bne.w	80017d0 <HAL_DMA_IRQHandler+0x3c8>
 8001a90:	e6a0      	b.n	80017d4 <HAL_DMA_IRQHandler+0x3cc>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a92:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1cd      	bne.n	8001a36 <HAL_DMA_IRQHandler+0x62e>
 8001a9a:	e7d2      	b.n	8001a42 <HAL_DMA_IRQHandler+0x63a>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a9c:	f001 0c1f 	and.w	ip, r1, #31
 8001aa0:	2710      	movs	r7, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001aa2:	6803      	ldr	r3, [r0, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001aa4:	fa07 f70c 	lsl.w	r7, r7, ip
 8001aa8:	423e      	tst	r6, r7
 8001aaa:	f43f ae22 	beq.w	80016f2 <HAL_DMA_IRQHandler+0x2ea>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001aae:	4603      	mov	r3, r0
 8001ab0:	e745      	b.n	800193e <HAL_DMA_IRQHandler+0x536>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8001ab2:	2602      	movs	r6, #2
 8001ab4:	40ae      	lsls	r6, r5
 8001ab6:	420e      	tst	r6, r1
 8001ab8:	d012      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x6d8>
 8001aba:	0797      	lsls	r7, r2, #30
 8001abc:	d510      	bpl.n	8001ae0 <HAL_DMA_IRQHandler+0x6d8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001abe:	0415      	lsls	r5, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8001ac0:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001ac2:	f140 80a1 	bpl.w	8001c08 <HAL_DMA_IRQHandler+0x800>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001ac6:	03d4      	lsls	r4, r2, #15
 8001ac8:	f100 80fd 	bmi.w	8001cc6 <HAL_DMA_IRQHandler+0x8be>
          if(hdma->XferM1CpltCallback != NULL)
 8001acc:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f47f aeaf 	bne.w	8001834 <HAL_DMA_IRQHandler+0x42c>
 8001ad6:	e77e      	b.n	80019d6 <HAL_DMA_IRQHandler+0x5ce>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001ad8:	6813      	ldr	r3, [r2, #0]
 8001ada:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001ade:	e663      	b.n	80017a8 <HAL_DMA_IRQHandler+0x3a0>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8001ae0:	2608      	movs	r6, #8
 8001ae2:	fa06 f505 	lsl.w	r5, r6, r5
 8001ae6:	420d      	tst	r5, r1
 8001ae8:	f43f af75 	beq.w	80019d6 <HAL_DMA_IRQHandler+0x5ce>
 8001aec:	0711      	lsls	r1, r2, #28
 8001aee:	f57f af72 	bpl.w	80019d6 <HAL_DMA_IRQHandler+0x5ce>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af2:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001af4:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8001af6:	2500      	movs	r5, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af8:	f021 010e 	bic.w	r1, r1, #14
 8001afc:	6019      	str	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001afe:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 8001b02:	f003 031f 	and.w	r3, r3, #31
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	6063      	str	r3, [r4, #4]
      if (hdma->XferErrorCallback != NULL)
 8001b0c:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b10:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8001b14:	f889 5034 	strb.w	r5, [r9, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001b18:	f889 2035 	strb.w	r2, [r9, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f47f ae89 	bne.w	8001834 <HAL_DMA_IRQHandler+0x42c>
 8001b22:	e758      	b.n	80019d6 <HAL_DMA_IRQHandler+0x5ce>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001b24:	0693      	lsls	r3, r2, #26
 8001b26:	d457      	bmi.n	8001bd8 <HAL_DMA_IRQHandler+0x7d0>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b28:	f8d9 2000 	ldr.w	r2, [r9]
 8001b2c:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <HAL_DMA_IRQHandler+0x7ec>)
 8001b2e:	4c32      	ldr	r4, [pc, #200]	; (8001bf8 <HAL_DMA_IRQHandler+0x7f0>)
 8001b30:	4932      	ldr	r1, [pc, #200]	; (8001bfc <HAL_DMA_IRQHandler+0x7f4>)
 8001b32:	42a2      	cmp	r2, r4
 8001b34:	bf18      	it	ne
 8001b36:	429a      	cmpne	r2, r3
 8001b38:	4d31      	ldr	r5, [pc, #196]	; (8001c00 <HAL_DMA_IRQHandler+0x7f8>)
 8001b3a:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8001b3e:	bf0c      	ite	eq
 8001b40:	2301      	moveq	r3, #1
 8001b42:	2300      	movne	r3, #0
 8001b44:	428a      	cmp	r2, r1
 8001b46:	bf08      	it	eq
 8001b48:	f043 0301 	orreq.w	r3, r3, #1
 8001b4c:	3148      	adds	r1, #72	; 0x48
 8001b4e:	42aa      	cmp	r2, r5
 8001b50:	bf08      	it	eq
 8001b52:	f043 0301 	orreq.w	r3, r3, #1
 8001b56:	3548      	adds	r5, #72	; 0x48
 8001b58:	42a2      	cmp	r2, r4
 8001b5a:	bf08      	it	eq
 8001b5c:	f043 0301 	orreq.w	r3, r3, #1
 8001b60:	3448      	adds	r4, #72	; 0x48
 8001b62:	428a      	cmp	r2, r1
 8001b64:	bf08      	it	eq
 8001b66:	f043 0301 	orreq.w	r3, r3, #1
 8001b6a:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8001b6e:	42aa      	cmp	r2, r5
 8001b70:	bf08      	it	eq
 8001b72:	f043 0301 	orreq.w	r3, r3, #1
 8001b76:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8001b7a:	42a2      	cmp	r2, r4
 8001b7c:	bf08      	it	eq
 8001b7e:	f043 0301 	orreq.w	r3, r3, #1
 8001b82:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8001b86:	428a      	cmp	r2, r1
 8001b88:	bf08      	it	eq
 8001b8a:	f043 0301 	orreq.w	r3, r3, #1
 8001b8e:	3148      	adds	r1, #72	; 0x48
 8001b90:	42aa      	cmp	r2, r5
 8001b92:	bf08      	it	eq
 8001b94:	f043 0301 	orreq.w	r3, r3, #1
 8001b98:	3548      	adds	r5, #72	; 0x48
 8001b9a:	42a2      	cmp	r2, r4
 8001b9c:	bf08      	it	eq
 8001b9e:	f043 0301 	orreq.w	r3, r3, #1
 8001ba2:	3448      	adds	r4, #72	; 0x48
 8001ba4:	428a      	cmp	r2, r1
 8001ba6:	bf08      	it	eq
 8001ba8:	f043 0301 	orreq.w	r3, r3, #1
 8001bac:	3148      	adds	r1, #72	; 0x48
 8001bae:	42aa      	cmp	r2, r5
 8001bb0:	bf08      	it	eq
 8001bb2:	f043 0301 	orreq.w	r3, r3, #1
 8001bb6:	42a2      	cmp	r2, r4
 8001bb8:	bf08      	it	eq
 8001bba:	f043 0301 	orreq.w	r3, r3, #1
 8001bbe:	428a      	cmp	r2, r1
 8001bc0:	bf08      	it	eq
 8001bc2:	f043 0301 	orreq.w	r3, r3, #1
 8001bc6:	b91b      	cbnz	r3, 8001bd0 <HAL_DMA_IRQHandler+0x7c8>
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <HAL_DMA_IRQHandler+0x7fc>)
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	f040 8081 	bne.w	8001cd2 <HAL_DMA_IRQHandler+0x8ca>
 8001bd0:	6813      	ldr	r3, [r2, #0]
 8001bd2:	f023 0308 	bic.w	r3, r3, #8
 8001bd6:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8001bd8:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f47f ae29 	bne.w	8001834 <HAL_DMA_IRQHandler+0x42c>
 8001be2:	e6f8      	b.n	80019d6 <HAL_DMA_IRQHandler+0x5ce>
 8001be4:	58025408 	.word	0x58025408
 8001be8:	5802541c 	.word	0x5802541c
 8001bec:	58025430 	.word	0x58025430
 8001bf0:	58025494 	.word	0x58025494
 8001bf4:	40020010 	.word	0x40020010
 8001bf8:	40020028 	.word	0x40020028
 8001bfc:	40020040 	.word	0x40020040
 8001c00:	40020058 	.word	0x40020058
 8001c04:	400204b8 	.word	0x400204b8
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001c08:	0690      	lsls	r0, r2, #26
 8001c0a:	d45c      	bmi.n	8001cc6 <HAL_DMA_IRQHandler+0x8be>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c0c:	f8d9 2000 	ldr.w	r2, [r9]
 8001c10:	4b35      	ldr	r3, [pc, #212]	; (8001ce8 <HAL_DMA_IRQHandler+0x8e0>)
 8001c12:	4c36      	ldr	r4, [pc, #216]	; (8001cec <HAL_DMA_IRQHandler+0x8e4>)
 8001c14:	4936      	ldr	r1, [pc, #216]	; (8001cf0 <HAL_DMA_IRQHandler+0x8e8>)
 8001c16:	42a2      	cmp	r2, r4
 8001c18:	bf18      	it	ne
 8001c1a:	429a      	cmpne	r2, r3
 8001c1c:	4d35      	ldr	r5, [pc, #212]	; (8001cf4 <HAL_DMA_IRQHandler+0x8ec>)
 8001c1e:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8001c22:	bf0c      	ite	eq
 8001c24:	2301      	moveq	r3, #1
 8001c26:	2300      	movne	r3, #0
 8001c28:	428a      	cmp	r2, r1
 8001c2a:	bf08      	it	eq
 8001c2c:	f043 0301 	orreq.w	r3, r3, #1
 8001c30:	3148      	adds	r1, #72	; 0x48
 8001c32:	42aa      	cmp	r2, r5
 8001c34:	bf08      	it	eq
 8001c36:	f043 0301 	orreq.w	r3, r3, #1
 8001c3a:	3548      	adds	r5, #72	; 0x48
 8001c3c:	42a2      	cmp	r2, r4
 8001c3e:	bf08      	it	eq
 8001c40:	f043 0301 	orreq.w	r3, r3, #1
 8001c44:	3448      	adds	r4, #72	; 0x48
 8001c46:	428a      	cmp	r2, r1
 8001c48:	bf08      	it	eq
 8001c4a:	f043 0301 	orreq.w	r3, r3, #1
 8001c4e:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8001c52:	42aa      	cmp	r2, r5
 8001c54:	bf08      	it	eq
 8001c56:	f043 0301 	orreq.w	r3, r3, #1
 8001c5a:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8001c5e:	42a2      	cmp	r2, r4
 8001c60:	bf08      	it	eq
 8001c62:	f043 0301 	orreq.w	r3, r3, #1
 8001c66:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8001c6a:	428a      	cmp	r2, r1
 8001c6c:	bf08      	it	eq
 8001c6e:	f043 0301 	orreq.w	r3, r3, #1
 8001c72:	3148      	adds	r1, #72	; 0x48
 8001c74:	42aa      	cmp	r2, r5
 8001c76:	bf08      	it	eq
 8001c78:	f043 0301 	orreq.w	r3, r3, #1
 8001c7c:	3548      	adds	r5, #72	; 0x48
 8001c7e:	42a2      	cmp	r2, r4
 8001c80:	bf08      	it	eq
 8001c82:	f043 0301 	orreq.w	r3, r3, #1
 8001c86:	3448      	adds	r4, #72	; 0x48
 8001c88:	428a      	cmp	r2, r1
 8001c8a:	bf08      	it	eq
 8001c8c:	f043 0301 	orreq.w	r3, r3, #1
 8001c90:	3148      	adds	r1, #72	; 0x48
 8001c92:	42aa      	cmp	r2, r5
 8001c94:	bf08      	it	eq
 8001c96:	f043 0301 	orreq.w	r3, r3, #1
 8001c9a:	42a2      	cmp	r2, r4
 8001c9c:	bf08      	it	eq
 8001c9e:	f043 0301 	orreq.w	r3, r3, #1
 8001ca2:	428a      	cmp	r2, r1
 8001ca4:	bf08      	it	eq
 8001ca6:	f043 0301 	orreq.w	r3, r3, #1
 8001caa:	b913      	cbnz	r3, 8001cb2 <HAL_DMA_IRQHandler+0x8aa>
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_DMA_IRQHandler+0x8f0>)
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d114      	bne.n	8001cdc <HAL_DMA_IRQHandler+0x8d4>
 8001cb2:	6813      	ldr	r3, [r2, #0]
 8001cb4:	f023 0314 	bic.w	r3, r3, #20
 8001cb8:	6013      	str	r3, [r2, #0]
          __HAL_UNLOCK(hdma);
 8001cba:	2200      	movs	r2, #0
          hdma->State = HAL_DMA_STATE_READY;
 8001cbc:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001cbe:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001cc2:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001cc6:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f47f adb2 	bne.w	8001834 <HAL_DMA_IRQHandler+0x42c>
 8001cd0:	e681      	b.n	80019d6 <HAL_DMA_IRQHandler+0x5ce>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cd2:	6813      	ldr	r3, [r2, #0]
 8001cd4:	f023 0304 	bic.w	r3, r3, #4
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e77d      	b.n	8001bd8 <HAL_DMA_IRQHandler+0x7d0>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001cdc:	6813      	ldr	r3, [r2, #0]
 8001cde:	f023 030a 	bic.w	r3, r3, #10
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	e7e9      	b.n	8001cba <HAL_DMA_IRQHandler+0x8b2>
 8001ce6:	bf00      	nop
 8001ce8:	40020010 	.word	0x40020010
 8001cec:	40020028 	.word	0x40020028
 8001cf0:	40020040 	.word	0x40020040
 8001cf4:	40020058 	.word	0x40020058
 8001cf8:	400204b8 	.word	0x400204b8

08001cfc <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8001cfc:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8001cfe:	4770      	bx	lr

08001d00 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d00:	680a      	ldr	r2, [r1, #0]
 8001d02:	2a00      	cmp	r2, #0
 8001d04:	f000 80f7 	beq.w	8001ef6 <HAL_GPIO_Init+0x1f6>
  uint32_t position = 0x00U;
 8001d08:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0a:	f8df c228 	ldr.w	ip, [pc, #552]	; 8001f34 <HAL_GPIO_Init+0x234>
{
 8001d0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d12:	f8df e224 	ldr.w	lr, [pc, #548]	; 8001f38 <HAL_GPIO_Init+0x238>
 8001d16:	b083      	sub	sp, #12
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d18:	4f80      	ldr	r7, [pc, #512]	; (8001f1c <HAL_GPIO_Init+0x21c>)
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d1a:	2401      	movs	r4, #1
 8001d1c:	409c      	lsls	r4, r3
    if (iocurrent != 0x00U)
 8001d1e:	ea14 0602 	ands.w	r6, r4, r2
 8001d22:	f000 80be 	beq.w	8001ea2 <HAL_GPIO_Init+0x1a2>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d26:	684a      	ldr	r2, [r1, #4]
 8001d28:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d2c:	2503      	movs	r5, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d2e:	f022 0210 	bic.w	r2, r2, #16
 8001d32:	3a01      	subs	r2, #1
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d34:	2a01      	cmp	r2, #1
 8001d36:	f200 80bc 	bhi.w	8001eb2 <HAL_GPIO_Init+0x1b2>
        temp = GPIOx->OSPEEDR;
 8001d3a:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d3c:	fa05 f508 	lsl.w	r5, r5, r8
 8001d40:	ea22 0905 	bic.w	r9, r2, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d44:	68ca      	ldr	r2, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d46:	43ed      	mvns	r5, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d48:	fa02 f208 	lsl.w	r2, r2, r8
 8001d4c:	ea42 0209 	orr.w	r2, r2, r9
        GPIOx->OSPEEDR = temp;
 8001d50:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d52:	684a      	ldr	r2, [r1, #4]
        temp = GPIOx->OTYPER;
 8001d54:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d58:	f3c2 1200 	ubfx	r2, r2, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d5c:	ea29 0904 	bic.w	r9, r9, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d60:	fa02 f403 	lsl.w	r4, r2, r3
 8001d64:	ea44 0409 	orr.w	r4, r4, r9
        GPIOx->OTYPER = temp;
 8001d68:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8001d6a:	68c2      	ldr	r2, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d6c:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d6e:	402a      	ands	r2, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d70:	fa04 f408 	lsl.w	r4, r4, r8
 8001d74:	4314      	orrs	r4, r2
      GPIOx->PUPDR = temp;
 8001d76:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d78:	684a      	ldr	r2, [r1, #4]
 8001d7a:	f022 0410 	bic.w	r4, r2, #16
 8001d7e:	2c02      	cmp	r4, #2
 8001d80:	d115      	bne.n	8001dae <HAL_GPIO_Init+0xae>
        temp = GPIOx->AFR[position >> 3U];
 8001d82:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d84:	f003 0907 	and.w	r9, r3, #7
 8001d88:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d8c:	690a      	ldr	r2, [r1, #16]
 8001d8e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d92:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8001d96:	f8d4 a020 	ldr.w	sl, [r4, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d9a:	fa0b fb09 	lsl.w	fp, fp, r9
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d9e:	fa02 f209 	lsl.w	r2, r2, r9
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001da2:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001da6:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001daa:	6222      	str	r2, [r4, #32]
 8001dac:	684a      	ldr	r2, [r1, #4]
      temp = GPIOx->MODER;
 8001dae:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db0:	f002 0203 	and.w	r2, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001db4:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db6:	fa02 f208 	lsl.w	r2, r2, r8
 8001dba:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;
 8001dbc:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dbe:	684a      	ldr	r2, [r1, #4]
 8001dc0:	00d2      	lsls	r2, r2, #3
 8001dc2:	d56d      	bpl.n	8001ea0 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc4:	f8dc 50f4 	ldr.w	r5, [ip, #244]	; 0xf4
 8001dc8:	f023 0903 	bic.w	r9, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001dcc:	f003 0203 	and.w	r2, r3, #3
 8001dd0:	240f      	movs	r4, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd2:	f045 0802 	orr.w	r8, r5, #2
 8001dd6:	eb09 050e 	add.w	r5, r9, lr
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001dda:	ea4f 0982 	mov.w	r9, r2, lsl #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dde:	4a50      	ldr	r2, [pc, #320]	; (8001f20 <HAL_GPIO_Init+0x220>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de0:	f8cc 80f4 	str.w	r8, [ip, #244]	; 0xf4
 8001de4:	f8dc 80f4 	ldr.w	r8, [ip, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001de8:	fa04 f409 	lsl.w	r4, r4, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dec:	4290      	cmp	r0, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dee:	f008 0802 	and.w	r8, r8, #2
 8001df2:	f8cd 8004 	str.w	r8, [sp, #4]
 8001df6:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001dfa:	f8d5 8008 	ldr.w	r8, [r5, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001dfe:	ea28 0404 	bic.w	r4, r8, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e02:	d026      	beq.n	8001e52 <HAL_GPIO_Init+0x152>
 8001e04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e08:	4290      	cmp	r0, r2
 8001e0a:	d05c      	beq.n	8001ec6 <HAL_GPIO_Init+0x1c6>
 8001e0c:	4a45      	ldr	r2, [pc, #276]	; (8001f24 <HAL_GPIO_Init+0x224>)
 8001e0e:	4290      	cmp	r0, r2
 8001e10:	d05f      	beq.n	8001ed2 <HAL_GPIO_Init+0x1d2>
 8001e12:	4a45      	ldr	r2, [pc, #276]	; (8001f28 <HAL_GPIO_Init+0x228>)
 8001e14:	4290      	cmp	r0, r2
 8001e16:	d050      	beq.n	8001eba <HAL_GPIO_Init+0x1ba>
 8001e18:	4a44      	ldr	r2, [pc, #272]	; (8001f2c <HAL_GPIO_Init+0x22c>)
 8001e1a:	4290      	cmp	r0, r2
 8001e1c:	d065      	beq.n	8001eea <HAL_GPIO_Init+0x1ea>
 8001e1e:	4a44      	ldr	r2, [pc, #272]	; (8001f30 <HAL_GPIO_Init+0x230>)
 8001e20:	4290      	cmp	r0, r2
 8001e22:	d069      	beq.n	8001ef8 <HAL_GPIO_Init+0x1f8>
 8001e24:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8001f3c <HAL_GPIO_Init+0x23c>
 8001e28:	4540      	cmp	r0, r8
 8001e2a:	d058      	beq.n	8001ede <HAL_GPIO_Init+0x1de>
 8001e2c:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8001f40 <HAL_GPIO_Init+0x240>
 8001e30:	4540      	cmp	r0, r8
 8001e32:	d067      	beq.n	8001f04 <HAL_GPIO_Init+0x204>
 8001e34:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8001f44 <HAL_GPIO_Init+0x244>
 8001e38:	4540      	cmp	r0, r8
 8001e3a:	d069      	beq.n	8001f10 <HAL_GPIO_Init+0x210>
 8001e3c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8001f48 <HAL_GPIO_Init+0x248>
 8001e40:	4540      	cmp	r0, r8
 8001e42:	bf0c      	ite	eq
 8001e44:	f04f 0809 	moveq.w	r8, #9
 8001e48:	f04f 080a 	movne.w	r8, #10
 8001e4c:	fa08 f209 	lsl.w	r2, r8, r9
 8001e50:	4314      	orrs	r4, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e52:	60ac      	str	r4, [r5, #8]
        temp &= ~(iocurrent);
 8001e54:	43f4      	mvns	r4, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e56:	684d      	ldr	r5, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8001e58:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp = EXTI_CurrentCPU->IMR1;
 8001e5c:	683a      	ldr	r2, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e5e:	03ed      	lsls	r5, r5, #15
          temp |= iocurrent;
 8001e60:	bf4c      	ite	mi
 8001e62:	4332      	orrmi	r2, r6
        temp &= ~(iocurrent);
 8001e64:	4022      	andpl	r2, r4
        EXTI_CurrentCPU->IMR1 = temp;
 8001e66:	603a      	str	r2, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e68:	684d      	ldr	r5, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8001e6a:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e6c:	03ad      	lsls	r5, r5, #14
          temp |= iocurrent;
 8001e6e:	bf4c      	ite	mi
 8001e70:	4332      	orrmi	r2, r6
        temp &= ~(iocurrent);
 8001e72:	4022      	andpl	r2, r4
        EXTI_CurrentCPU->EMR1 = temp;
 8001e74:	607a      	str	r2, [r7, #4]
        temp = EXTI->RTSR1;
 8001e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e7a:	684d      	ldr	r5, [r1, #4]
        temp = EXTI->RTSR1;
 8001e7c:	6812      	ldr	r2, [r2, #0]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e7e:	02ed      	lsls	r5, r5, #11
          temp |= iocurrent;
 8001e80:	bf4c      	ite	mi
 8001e82:	4332      	orrmi	r2, r6
        temp &= ~(iocurrent);
 8001e84:	4022      	andpl	r2, r4
        EXTI->RTSR1 = temp;
 8001e86:	f8c8 2000 	str.w	r2, [r8]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e8a:	684d      	ldr	r5, [r1, #4]
        temp = EXTI->FTSR1;
 8001e8c:	f8d8 2004 	ldr.w	r2, [r8, #4]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e90:	02ad      	lsls	r5, r5, #10
        temp &= ~(iocurrent);
 8001e92:	bf54      	ite	pl
 8001e94:	ea04 0602 	andpl.w	r6, r4, r2
        {
          temp |= iocurrent;
 8001e98:	4316      	orrmi	r6, r2
        }
        EXTI->FTSR1 = temp;
 8001e9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e9e:	6056      	str	r6, [r2, #4]
 8001ea0:	680a      	ldr	r2, [r1, #0]
      }
    }

    position++;
 8001ea2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ea4:	fa32 f403 	lsrs.w	r4, r2, r3
 8001ea8:	f47f af37 	bne.w	8001d1a <HAL_GPIO_Init+0x1a>
  }
}
 8001eac:	b003      	add	sp, #12
 8001eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001eb2:	fa05 f508 	lsl.w	r5, r5, r8
 8001eb6:	43ed      	mvns	r5, r5
 8001eb8:	e757      	b.n	8001d6a <HAL_GPIO_Init+0x6a>
 8001eba:	f04f 0803 	mov.w	r8, #3
 8001ebe:	fa08 f209 	lsl.w	r2, r8, r9
 8001ec2:	4314      	orrs	r4, r2
 8001ec4:	e7c5      	b.n	8001e52 <HAL_GPIO_Init+0x152>
 8001ec6:	f04f 0801 	mov.w	r8, #1
 8001eca:	fa08 f209 	lsl.w	r2, r8, r9
 8001ece:	4314      	orrs	r4, r2
 8001ed0:	e7bf      	b.n	8001e52 <HAL_GPIO_Init+0x152>
 8001ed2:	f04f 0802 	mov.w	r8, #2
 8001ed6:	fa08 f209 	lsl.w	r2, r8, r9
 8001eda:	4314      	orrs	r4, r2
 8001edc:	e7b9      	b.n	8001e52 <HAL_GPIO_Init+0x152>
 8001ede:	f04f 0806 	mov.w	r8, #6
 8001ee2:	fa08 f209 	lsl.w	r2, r8, r9
 8001ee6:	4314      	orrs	r4, r2
 8001ee8:	e7b3      	b.n	8001e52 <HAL_GPIO_Init+0x152>
 8001eea:	f04f 0804 	mov.w	r8, #4
 8001eee:	fa08 f209 	lsl.w	r2, r8, r9
 8001ef2:	4314      	orrs	r4, r2
 8001ef4:	e7ad      	b.n	8001e52 <HAL_GPIO_Init+0x152>
 8001ef6:	4770      	bx	lr
 8001ef8:	f04f 0805 	mov.w	r8, #5
 8001efc:	fa08 f209 	lsl.w	r2, r8, r9
 8001f00:	4314      	orrs	r4, r2
 8001f02:	e7a6      	b.n	8001e52 <HAL_GPIO_Init+0x152>
 8001f04:	f04f 0807 	mov.w	r8, #7
 8001f08:	fa08 f209 	lsl.w	r2, r8, r9
 8001f0c:	4314      	orrs	r4, r2
 8001f0e:	e7a0      	b.n	8001e52 <HAL_GPIO_Init+0x152>
 8001f10:	f04f 0808 	mov.w	r8, #8
 8001f14:	fa08 f209 	lsl.w	r2, r8, r9
 8001f18:	4314      	orrs	r4, r2
 8001f1a:	e79a      	b.n	8001e52 <HAL_GPIO_Init+0x152>
 8001f1c:	58000080 	.word	0x58000080
 8001f20:	58020000 	.word	0x58020000
 8001f24:	58020800 	.word	0x58020800
 8001f28:	58020c00 	.word	0x58020c00
 8001f2c:	58021000 	.word	0x58021000
 8001f30:	58021400 	.word	0x58021400
 8001f34:	58024400 	.word	0x58024400
 8001f38:	58000400 	.word	0x58000400
 8001f3c:	58021800 	.word	0x58021800
 8001f40:	58021c00 	.word	0x58021c00
 8001f44:	58022000 	.word	0x58022000
 8001f48:	58022400 	.word	0x58022400

08001f4c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001f4c:	6903      	ldr	r3, [r0, #16]
 8001f4e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001f50:	bf14      	ite	ne
 8001f52:	2001      	movne	r0, #1
 8001f54:	2000      	moveq	r0, #0
 8001f56:	4770      	bx	lr

08001f58 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f58:	b902      	cbnz	r2, 8001f5c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f5a:	0409      	lsls	r1, r1, #16
 8001f5c:	6181      	str	r1, [r0, #24]
  }
}
 8001f5e:	4770      	bx	lr

08001f60 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f60:	b570      	push	{r4, r5, r6, lr}
 8001f62:	4604      	mov	r4, r0
 8001f64:	460d      	mov	r5, r1
 8001f66:	4616      	mov	r6, r2
 8001f68:	1c6a      	adds	r2, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f6a:	6823      	ldr	r3, [r4, #0]
 8001f6c:	d12e      	bne.n	8001fcc <I2C_WaitOnTXISFlagUntilTimeout+0x6c>
 8001f6e:	699a      	ldr	r2, [r3, #24]
 8001f70:	0790      	lsls	r0, r2, #30
 8001f72:	d451      	bmi.n	8002018 <I2C_WaitOnTXISFlagUntilTimeout+0xb8>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f74:	699a      	ldr	r2, [r3, #24]
 8001f76:	06d1      	lsls	r1, r2, #27
 8001f78:	d5f9      	bpl.n	8001f6e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f7a:	699a      	ldr	r2, [r3, #24]
 8001f7c:	0691      	lsls	r1, r2, #26
 8001f7e:	d5fc      	bpl.n	8001f7a <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f80:	2110      	movs	r1, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f82:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f84:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f8a:	6823      	ldr	r3, [r4, #0]
 8001f8c:	699a      	ldr	r2, [r3, #24]
 8001f8e:	0790      	lsls	r0, r2, #30
 8001f90:	d502      	bpl.n	8001f98 <I2C_WaitOnTXISFlagUntilTimeout+0x38>
    hi2c->Instance->TXDR = 0x00U;
 8001f92:	2200      	movs	r2, #0
 8001f94:	629a      	str	r2, [r3, #40]	; 0x28
 8001f96:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f98:	699a      	ldr	r2, [r3, #24]
 8001f9a:	07d1      	lsls	r1, r2, #31
 8001f9c:	d404      	bmi.n	8001fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f9e:	699a      	ldr	r2, [r3, #24]
 8001fa0:	f042 0201 	orr.w	r2, r2, #1
 8001fa4:	619a      	str	r2, [r3, #24]
 8001fa6:	6823      	ldr	r3, [r4, #0]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fa8:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001faa:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8001fac:	4e1b      	ldr	r6, [pc, #108]	; (800201c <I2C_WaitOnTXISFlagUntilTimeout+0xbc>)
    hi2c->State = HAL_I2C_STATE_READY;
 8001fae:	2520      	movs	r5, #32
      return HAL_ERROR;
 8001fb0:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8001fb2:	4032      	ands	r2, r6
 8001fb4:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fb6:	6c63      	ldr	r3, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb8:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fbc:	f043 0304 	orr.w	r3, r3, #4
 8001fc0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001fc2:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc6:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8001fca:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fcc:	699a      	ldr	r2, [r3, #24]
 8001fce:	0792      	lsls	r2, r2, #30
 8001fd0:	d422      	bmi.n	8002018 <I2C_WaitOnTXISFlagUntilTimeout+0xb8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fd2:	699a      	ldr	r2, [r3, #24]
 8001fd4:	06d0      	lsls	r0, r2, #27
 8001fd6:	d41b      	bmi.n	8002010 <I2C_WaitOnTXISFlagUntilTimeout+0xb0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd8:	f7fe f9e0 	bl	800039c <HAL_GetTick>
 8001fdc:	1b80      	subs	r0, r0, r6
 8001fde:	42a8      	cmp	r0, r5
 8001fe0:	d801      	bhi.n	8001fe6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 8001fe2:	2d00      	cmp	r5, #0
 8001fe4:	d1c0      	bne.n	8001f68 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fe6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fe8:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fea:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8001fec:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fee:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8001ff0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ff4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ff6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ffa:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8001ffe:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002000:	f7fe f9cc 	bl	800039c <HAL_GetTick>
 8002004:	1b80      	subs	r0, r0, r6
 8002006:	4285      	cmp	r5, r0
 8002008:	d3ed      	bcc.n	8001fe6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 800200a:	2d00      	cmp	r5, #0
 800200c:	d0eb      	beq.n	8001fe6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 800200e:	6823      	ldr	r3, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002010:	6999      	ldr	r1, [r3, #24]
 8002012:	068a      	lsls	r2, r1, #26
 8002014:	d5f4      	bpl.n	8002000 <I2C_WaitOnTXISFlagUntilTimeout+0xa0>
 8002016:	e7b3      	b.n	8001f80 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
  return HAL_OK;
 8002018:	2000      	movs	r0, #0
}
 800201a:	bd70      	pop	{r4, r5, r6, pc}
 800201c:	fe00e800 	.word	0xfe00e800

08002020 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002020:	b570      	push	{r4, r5, r6, lr}
 8002022:	4604      	mov	r4, r0
 8002024:	460d      	mov	r5, r1
 8002026:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002028:	e006      	b.n	8002038 <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800202a:	f7fe f9b7 	bl	800039c <HAL_GetTick>
 800202e:	1b80      	subs	r0, r0, r6
 8002030:	42a8      	cmp	r0, r5
 8002032:	d83e      	bhi.n	80020b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
 8002034:	2d00      	cmp	r5, #0
 8002036:	d03c      	beq.n	80020b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	6999      	ldr	r1, [r3, #24]
 800203c:	068a      	lsls	r2, r1, #26
 800203e:	d445      	bmi.n	80020cc <I2C_WaitOnSTOPFlagUntilTimeout+0xac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002040:	6999      	ldr	r1, [r3, #24]
 8002042:	06ca      	lsls	r2, r1, #27
 8002044:	d5f1      	bpl.n	800202a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 8002046:	1c68      	adds	r0, r5, #1
 8002048:	d128      	bne.n	800209c <I2C_WaitOnSTOPFlagUntilTimeout+0x7c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800204a:	699a      	ldr	r2, [r3, #24]
 800204c:	0691      	lsls	r1, r2, #26
 800204e:	d5fc      	bpl.n	800204a <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002050:	2110      	movs	r1, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002052:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002054:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002056:	6823      	ldr	r3, [r4, #0]
 8002058:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	699a      	ldr	r2, [r3, #24]
 800205e:	0790      	lsls	r0, r2, #30
 8002060:	d502      	bpl.n	8002068 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    hi2c->Instance->TXDR = 0x00U;
 8002062:	2200      	movs	r2, #0
 8002064:	629a      	str	r2, [r3, #40]	; 0x28
 8002066:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002068:	699a      	ldr	r2, [r3, #24]
 800206a:	07d1      	lsls	r1, r2, #31
 800206c:	d404      	bmi.n	8002078 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800206e:	699a      	ldr	r2, [r3, #24]
 8002070:	f042 0201 	orr.w	r2, r2, #1
 8002074:	619a      	str	r2, [r3, #24]
 8002076:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002078:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800207a:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 800207c:	4e14      	ldr	r6, [pc, #80]	; (80020d0 <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>)
    hi2c->State = HAL_I2C_STATE_READY;
 800207e:	2520      	movs	r5, #32
      return HAL_ERROR;
 8002080:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8002082:	4032      	ands	r2, r6
 8002084:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002086:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8002088:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002092:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002096:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800209a:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	0692      	lsls	r2, r2, #26
 80020a0:	d4d6      	bmi.n	8002050 <I2C_WaitOnSTOPFlagUntilTimeout+0x30>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020a2:	f7fe f97b 	bl	800039c <HAL_GetTick>
 80020a6:	1b80      	subs	r0, r0, r6
 80020a8:	4285      	cmp	r5, r0
 80020aa:	d302      	bcc.n	80020b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
 80020ac:	b10d      	cbz	r5, 80020b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
 80020ae:	6823      	ldr	r3, [r4, #0]
 80020b0:	e7c9      	b.n	8002046 <I2C_WaitOnSTOPFlagUntilTimeout+0x26>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020b4:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b6:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 80020b8:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ba:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 80020bc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020c0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020c2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 80020ca:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80020cc:	2000      	movs	r0, #0
}
 80020ce:	bd70      	pop	{r4, r5, r6, pc}
 80020d0:	fe00e800 	.word	0xfe00e800

080020d4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80020d4:	2800      	cmp	r0, #0
 80020d6:	d055      	beq.n	8002184 <HAL_I2C_Init+0xb0>
{
 80020d8:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020da:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80020de:	4604      	mov	r4, r0
 80020e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d048      	beq.n	800217a <HAL_I2C_Init+0xa6>
  __HAL_I2C_DISABLE(hi2c);
 80020e8:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80020ea:	2324      	movs	r3, #36	; 0x24
 80020ec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80020f0:	6813      	ldr	r3, [r2, #0]
 80020f2:	f023 0301 	bic.w	r3, r3, #1
 80020f6:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020f8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80020fc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002100:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002102:	6822      	ldr	r2, [r4, #0]
 8002104:	6893      	ldr	r3, [r2, #8]
 8002106:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800210a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800210c:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800210e:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002110:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002112:	68a3      	ldr	r3, [r4, #8]
 8002114:	bf0c      	ite	eq
 8002116:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800211a:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 800211e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002120:	68e3      	ldr	r3, [r4, #12]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d103      	bne.n	800212e <HAL_I2C_Init+0x5a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002126:	6823      	ldr	r3, [r4, #0]
 8002128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800212c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800212e:	6825      	ldr	r5, [r4, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002130:	2200      	movs	r2, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <HAL_I2C_Init+0xb4>)
  hi2c->State = HAL_I2C_STATE_READY;
 8002134:	2120      	movs	r1, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002136:	686e      	ldr	r6, [r5, #4]
  return HAL_OK;
 8002138:	4610      	mov	r0, r2
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800213a:	4333      	orrs	r3, r6
 800213c:	606b      	str	r3, [r5, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800213e:	6825      	ldr	r5, [r4, #0]
 8002140:	68eb      	ldr	r3, [r5, #12]
 8002142:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002146:	60eb      	str	r3, [r5, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002148:	e9d4 3504 	ldrd	r3, r5, [r4, #16]
 800214c:	432b      	orrs	r3, r5
 800214e:	69a5      	ldr	r5, [r4, #24]
 8002150:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002154:	6825      	ldr	r5, [r4, #0]
 8002156:	60eb      	str	r3, [r5, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002158:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 800215c:	432b      	orrs	r3, r5
 800215e:	6825      	ldr	r5, [r4, #0]
 8002160:	602b      	str	r3, [r5, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002162:	6825      	ldr	r5, [r4, #0]
 8002164:	682b      	ldr	r3, [r5, #0]
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	602b      	str	r3, [r5, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800216c:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800216e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002172:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002174:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8002178:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800217a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800217e:	f008 fb31 	bl	800a7e4 <HAL_I2C_MspInit>
 8002182:	e7b1      	b.n	80020e8 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8002184:	2001      	movs	r0, #1
}
 8002186:	4770      	bx	lr
 8002188:	02008000 	.word	0x02008000

0800218c <HAL_I2C_Master_Transmit>:
{
 800218c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002190:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002192:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002196:	9e08      	ldr	r6, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002198:	2b20      	cmp	r3, #32
 800219a:	f040 808d 	bne.w	80022b8 <HAL_I2C_Master_Transmit+0x12c>
    __HAL_LOCK(hi2c);
 800219e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80021a2:	4604      	mov	r4, r0
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	f000 8087 	beq.w	80022b8 <HAL_I2C_Master_Transmit+0x12c>
 80021aa:	2301      	movs	r3, #1
 80021ac:	4689      	mov	r9, r1
 80021ae:	4617      	mov	r7, r2
 80021b0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80021b4:	f7fe f8f2 	bl	800039c <HAL_GetTick>
 80021b8:	4605      	mov	r5, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 80021ba:	e005      	b.n	80021c8 <HAL_I2C_Master_Transmit+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021bc:	f7fe f8ee 	bl	800039c <HAL_GetTick>
 80021c0:	1b40      	subs	r0, r0, r5
 80021c2:	2819      	cmp	r0, #25
 80021c4:	f200 8085 	bhi.w	80022d2 <HAL_I2C_Master_Transmit+0x146>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021c8:	6823      	ldr	r3, [r4, #0]
 80021ca:	6998      	ldr	r0, [r3, #24]
 80021cc:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 80021d0:	d1f4      	bne.n	80021bc <HAL_I2C_Master_Transmit+0x30>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021d2:	2210      	movs	r2, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021d4:	2121      	movs	r1, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 80021d6:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021d8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021dc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80021e2:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021e8:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ea:	b292      	uxth	r2, r2
 80021ec:	2aff      	cmp	r2, #255	; 0xff
 80021ee:	d87e      	bhi.n	80022ee <HAL_I2C_Master_Transmit+0x162>
      hi2c->XferSize = hi2c->XferCount;
 80021f0:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80021f2:	f3c9 0709 	ubfx	r7, r9, #0, #10
 80021f6:	f8df c138 	ldr.w	ip, [pc, #312]	; 8002330 <HAL_I2C_Master_Transmit+0x1a4>
      hi2c->XferSize = hi2c->XferCount;
 80021fa:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
 80021fc:	484a      	ldr	r0, [pc, #296]	; (8002328 <HAL_I2C_Master_Transmit+0x19c>)
      hi2c->XferSize = hi2c->XferCount;
 80021fe:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8002200:	b2c9      	uxtb	r1, r1
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	ea02 020c 	and.w	r2, r2, ip
 8002208:	433a      	orrs	r2, r7
 800220a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800220e:	4310      	orrs	r0, r2
 8002210:	6058      	str	r0, [r3, #4]
 8002212:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8002338 <HAL_I2C_Master_Transmit+0x1ac>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002216:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 800221a:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800233c <HAL_I2C_Master_Transmit+0x1b0>
    while (hi2c->XferCount > 0U)
 800221e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002220:	462a      	mov	r2, r5
 8002222:	4631      	mov	r1, r6
 8002224:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8002226:	b29b      	uxth	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d032      	beq.n	8002292 <HAL_I2C_Master_Transmit+0x106>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800222c:	f7ff fe98 	bl	8001f60 <I2C_WaitOnTXISFlagUntilTimeout>
 8002230:	2800      	cmp	r0, #0
 8002232:	d176      	bne.n	8002322 <HAL_I2C_Master_Transmit+0x196>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002234:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002236:	6823      	ldr	r3, [r4, #0]
 8002238:	7812      	ldrb	r2, [r2, #0]
 800223a:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800223c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800223e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002240:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 8002242:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002244:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8002246:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8002248:	3201      	adds	r2, #1
      hi2c->XferSize--;
 800224a:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800224c:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800224e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002250:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002252:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8002254:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1e1      	bne.n	800221e <HAL_I2C_Master_Transmit+0x92>
 800225a:	2900      	cmp	r1, #0
 800225c:	d0df      	beq.n	800221e <HAL_I2C_Master_Transmit+0x92>
 800225e:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002260:	6822      	ldr	r2, [r4, #0]
 8002262:	d12c      	bne.n	80022be <HAL_I2C_Master_Transmit+0x132>
 8002264:	6993      	ldr	r3, [r2, #24]
 8002266:	0619      	lsls	r1, r3, #24
 8002268:	d5fc      	bpl.n	8002264 <HAL_I2C_Master_Transmit+0xd8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800226a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800226c:	b29b      	uxth	r3, r3
 800226e:	2bff      	cmp	r3, #255	; 0xff
 8002270:	d949      	bls.n	8002306 <HAL_I2C_Master_Transmit+0x17a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002272:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002276:	4631      	mov	r1, r6
  MODIFY_REG(hi2c->Instance->CR2,
 8002278:	6853      	ldr	r3, [r2, #4]
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800227a:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2,
 800227c:	ea03 0308 	and.w	r3, r3, r8
 8002280:	433b      	orrs	r3, r7
 8002282:	ea43 0309 	orr.w	r3, r3, r9
 8002286:	6053      	str	r3, [r2, #4]
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002288:	462a      	mov	r2, r5
    while (hi2c->XferCount > 0U)
 800228a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1cc      	bne.n	800222c <HAL_I2C_Master_Transmit+0xa0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002292:	f7ff fec5 	bl	8002020 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002296:	2800      	cmp	r0, #0
 8002298:	d143      	bne.n	8002322 <HAL_I2C_Master_Transmit+0x196>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
 800229e:	4d23      	ldr	r5, [pc, #140]	; (800232c <HAL_I2C_Master_Transmit+0x1a0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022a0:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80022a2:	6821      	ldr	r1, [r4, #0]
 80022a4:	684b      	ldr	r3, [r1, #4]
 80022a6:	402b      	ands	r3, r5
 80022a8:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80022aa:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80022ae:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022b2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80022b6:	e000      	b.n	80022ba <HAL_I2C_Master_Transmit+0x12e>
    return HAL_BUSY;
 80022b8:	2002      	movs	r0, #2
}
 80022ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022be:	6993      	ldr	r3, [r2, #24]
 80022c0:	061b      	lsls	r3, r3, #24
 80022c2:	d4d2      	bmi.n	800226a <HAL_I2C_Master_Transmit+0xde>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c4:	f7fe f86a 	bl	800039c <HAL_GetTick>
 80022c8:	1b40      	subs	r0, r0, r5
 80022ca:	4286      	cmp	r6, r0
 80022cc:	d301      	bcc.n	80022d2 <HAL_I2C_Master_Transmit+0x146>
 80022ce:	2e00      	cmp	r6, #0
 80022d0:	d1c5      	bne.n	800225e <HAL_I2C_Master_Transmit+0xd2>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022d4:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d6:	2200      	movs	r2, #0
          return HAL_ERROR;
 80022d8:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022da:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 80022dc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022e0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022e2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 80022ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022ee:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 80022f0:	480f      	ldr	r0, [pc, #60]	; (8002330 <HAL_I2C_Master_Transmit+0x1a4>)
 80022f2:	f3c9 0709 	ubfx	r7, r9, #0, #10
 80022f6:	490f      	ldr	r1, [pc, #60]	; (8002334 <HAL_I2C_Master_Transmit+0x1a8>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022f8:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	4002      	ands	r2, r0
 80022fe:	433a      	orrs	r2, r7
 8002300:	4311      	orrs	r1, r2
 8002302:	6059      	str	r1, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002304:	e785      	b.n	8002212 <HAL_I2C_Master_Transmit+0x86>
          hi2c->XferSize = hi2c->XferCount;
 8002306:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002308:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2,
 800230a:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
 800230c:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800230e:	6853      	ldr	r3, [r2, #4]
 8002310:	ea03 0308 	and.w	r3, r3, r8
 8002314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002318:	433b      	orrs	r3, r7
 800231a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800231e:	6053      	str	r3, [r2, #4]
}
 8002320:	e77d      	b.n	800221e <HAL_I2C_Master_Transmit+0x92>
        return HAL_ERROR;
 8002322:	2001      	movs	r0, #1
}
 8002324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002328:	82002000 	.word	0x82002000
 800232c:	fe00e800 	.word	0xfe00e800
 8002330:	fc009800 	.word	0xfc009800
 8002334:	81ff2000 	.word	0x81ff2000
 8002338:	fc009c00 	.word	0xfc009c00
 800233c:	01ff0000 	.word	0x01ff0000

08002340 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002340:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002344:	2a20      	cmp	r2, #32
 8002346:	d127      	bne.n	8002398 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002348:	4603      	mov	r3, r0
{
 800234a:	b470      	push	{r4, r5, r6}
 800234c:	b2d5      	uxtb	r5, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800234e:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8002352:	2a01      	cmp	r2, #1
 8002354:	d022      	beq.n	800239c <HAL_I2CEx_ConfigAnalogFilter+0x5c>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002356:	681e      	ldr	r6, [r3, #0]
    __HAL_LOCK(hi2c);
 8002358:	2001      	movs	r0, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 800235a:	2224      	movs	r2, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800235c:	2400      	movs	r4, #0
    __HAL_LOCK(hi2c);
 800235e:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002366:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8002368:	6832      	ldr	r2, [r6, #0]
 800236a:	f022 0201 	bic.w	r2, r2, #1
 800236e:	6032      	str	r2, [r6, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002370:	681e      	ldr	r6, [r3, #0]
 8002372:	6832      	ldr	r2, [r6, #0]
 8002374:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002378:	6032      	str	r2, [r6, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800237a:	681e      	ldr	r6, [r3, #0]
 800237c:	6832      	ldr	r2, [r6, #0]
 800237e:	4311      	orrs	r1, r2
 8002380:	6031      	str	r1, [r6, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002382:	6819      	ldr	r1, [r3, #0]
 8002384:	680a      	ldr	r2, [r1, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800238c:	f883 5041 	strb.w	r5, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002390:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002394:	bc70      	pop	{r4, r5, r6}
 8002396:	4770      	bx	lr
    return HAL_BUSY;
 8002398:	2002      	movs	r0, #2
}
 800239a:	4770      	bx	lr
    return HAL_BUSY;
 800239c:	2002      	movs	r0, #2
}
 800239e:	bc70      	pop	{r4, r5, r6}
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop

080023a4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023a4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80023a8:	2a20      	cmp	r2, #32
 80023aa:	d125      	bne.n	80023f8 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80023ac:	4603      	mov	r3, r0
{
 80023ae:	b470      	push	{r4, r5, r6}
 80023b0:	b2d5      	uxtb	r5, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b2:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80023b6:	2a01      	cmp	r2, #1
 80023b8:	d020      	beq.n	80023fc <HAL_I2CEx_ConfigDigitalFilter+0x58>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023ba:	681e      	ldr	r6, [r3, #0]
    __HAL_LOCK(hi2c);
 80023bc:	2001      	movs	r0, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 80023be:	2224      	movs	r2, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023c0:	2400      	movs	r4, #0
    __HAL_LOCK(hi2c);
 80023c2:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 80023c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80023ca:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 80023cc:	6832      	ldr	r2, [r6, #0]
 80023ce:	f022 0201 	bic.w	r2, r2, #1
 80023d2:	6032      	str	r2, [r6, #0]
    tmpreg = hi2c->Instance->CR1;
 80023d4:	681e      	ldr	r6, [r3, #0]
 80023d6:	6832      	ldr	r2, [r6, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80023d8:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 80023dc:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 80023e0:	6031      	str	r1, [r6, #0]
    __HAL_I2C_ENABLE(hi2c);
 80023e2:	6819      	ldr	r1, [r3, #0]
 80023e4:	680a      	ldr	r2, [r1, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80023ec:	f883 5041 	strb.w	r5, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80023f0:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80023f4:	bc70      	pop	{r4, r5, r6}
 80023f6:	4770      	bx	lr
    return HAL_BUSY;
 80023f8:	2002      	movs	r0, #2
}
 80023fa:	4770      	bx	lr
    return HAL_BUSY;
 80023fc:	2002      	movs	r0, #2
}
 80023fe:	bc70      	pop	{r4, r5, r6}
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop

08002404 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002404:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_PWREx_ConfigSupply+0x48>)
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	0752      	lsls	r2, r2, #29
 800240c:	d406      	bmi.n	800241c <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002414:	1a18      	subs	r0, r3, r0
 8002416:	bf18      	it	ne
 8002418:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800241a:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800241c:	68da      	ldr	r2, [r3, #12]
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800241e:	461d      	mov	r5, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002420:	f022 0207 	bic.w	r2, r2, #7
 8002424:	4310      	orrs	r0, r2
 8002426:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 8002428:	f7fd ffb8 	bl	800039c <HAL_GetTick>
 800242c:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800242e:	e005      	b.n	800243c <HAL_PWREx_ConfigSupply+0x38>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002430:	f7fd ffb4 	bl	800039c <HAL_GetTick>
 8002434:	1b00      	subs	r0, r0, r4
 8002436:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800243a:	d804      	bhi.n	8002446 <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800243c:	686b      	ldr	r3, [r5, #4]
 800243e:	049b      	lsls	r3, r3, #18
 8002440:	d5f6      	bpl.n	8002430 <HAL_PWREx_ConfigSupply+0x2c>
  return HAL_OK;
 8002442:	2000      	movs	r0, #0
}
 8002444:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002446:	2001      	movs	r0, #1
}
 8002448:	bd38      	pop	{r3, r4, r5, pc}
 800244a:	bf00      	nop
 800244c:	58024800 	.word	0x58024800

08002450 <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002450:	4b3b      	ldr	r3, [pc, #236]	; (8002540 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8002452:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002456:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002458:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 800245a:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800245e:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002462:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    if (pllm != 0U)
 8002464:	d038      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002466:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800246a:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800246e:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002472:	fb01 f105 	mul.w	r1, r1, r5
 8002476:	2a01      	cmp	r2, #1
 8002478:	ee07 1a90 	vmov	s15, r1
 800247c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 8002480:	d002      	beq.n	8002488 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8002482:	2a02      	cmp	r2, #2
 8002484:	d04e      	beq.n	8002524 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8002486:	b34a      	cbz	r2, 80024dc <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002488:	ee07 0a90 	vmov	s15, r0
 800248c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8002544 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 8002490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800249a:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8002548 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800249e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024a2:	ee06 3a90 	vmov	s13, r3
 80024a6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80024aa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80024ae:	ee76 6a85 	vadd.f32	s13, s13, s10
 80024b2:	eee7 6a25 	vfma.f32	s13, s14, s11
 80024b6:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80024ba:	4b21      	ldr	r3, [pc, #132]	; (8002540 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80024c2:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80024c4:	ee07 3a90 	vmov	s15, r3
 80024c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024d4:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80024d8:	bc30      	pop	{r4, r5}
 80024da:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	0692      	lsls	r2, r2, #26
 80024e0:	d527      	bpl.n	8002532 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024e2:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024e4:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024e8:	4a18      	ldr	r2, [pc, #96]	; (800254c <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024ea:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024ee:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024f8:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024fa:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8002548 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80024fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002502:	ee06 2a10 	vmov	s12, r2
 8002506:	ee06 3a90 	vmov	s13, r3
 800250a:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 800250e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002512:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002516:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800251a:	eee7 6a05 	vfma.f32	s13, s14, s10
 800251e:	ee66 6a26 	vmul.f32	s13, s12, s13
 8002522:	e7ca      	b.n	80024ba <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002524:	ee07 0a90 	vmov	s15, r0
 8002528:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002550 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 800252c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002530:	e7b0      	b.n	8002494 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002532:	ee07 0a90 	vmov	s15, r0
 8002536:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002554 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800253a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800253e:	e7a9      	b.n	8002494 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8002540:	58024400 	.word	0x58024400
 8002544:	4a742400 	.word	0x4a742400
 8002548:	39000000 	.word	0x39000000
 800254c:	03d09000 	.word	0x03d09000
 8002550:	4bbebc20 	.word	0x4bbebc20
 8002554:	4c742400 	.word	0x4c742400

08002558 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002558:	2800      	cmp	r0, #0
 800255a:	f000 81fd 	beq.w	8002958 <HAL_RCC_OscConfig+0x400>
{
 800255e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002560:	6803      	ldr	r3, [r0, #0]
 8002562:	4604      	mov	r4, r0
 8002564:	07d9      	lsls	r1, r3, #31
 8002566:	d52e      	bpl.n	80025c6 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002568:	49a3      	ldr	r1, [pc, #652]	; (80027f8 <HAL_RCC_OscConfig+0x2a0>)
 800256a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800256c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800256e:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002572:	2a10      	cmp	r2, #16
 8002574:	f000 812c 	beq.w	80027d0 <HAL_RCC_OscConfig+0x278>
 8002578:	2a18      	cmp	r2, #24
 800257a:	f000 8124 	beq.w	80027c6 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257e:	6863      	ldr	r3, [r4, #4]
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002584:	f000 8168 	beq.w	8002858 <HAL_RCC_OscConfig+0x300>
 8002588:	2b00      	cmp	r3, #0
 800258a:	f040 81b5 	bne.w	80028f8 <HAL_RCC_OscConfig+0x3a0>
 800258e:	4b9a      	ldr	r3, [pc, #616]	; (80027f8 <HAL_RCC_OscConfig+0x2a0>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800259e:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025a0:	6863      	ldr	r3, [r4, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 8173 	beq.w	800288e <HAL_RCC_OscConfig+0x336>
        tickstart = HAL_GetTick();
 80025a8:	f7fd fef8 	bl	800039c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025ac:	4e92      	ldr	r6, [pc, #584]	; (80027f8 <HAL_RCC_OscConfig+0x2a0>)
        tickstart = HAL_GetTick();
 80025ae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025b0:	e005      	b.n	80025be <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b2:	f7fd fef3 	bl	800039c <HAL_GetTick>
 80025b6:	1b40      	subs	r0, r0, r5
 80025b8:	2864      	cmp	r0, #100	; 0x64
 80025ba:	f200 8166 	bhi.w	800288a <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025be:	6833      	ldr	r3, [r6, #0]
 80025c0:	039f      	lsls	r7, r3, #14
 80025c2:	d5f6      	bpl.n	80025b2 <HAL_RCC_OscConfig+0x5a>
 80025c4:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c6:	0799      	lsls	r1, r3, #30
 80025c8:	d521      	bpl.n	800260e <HAL_RCC_OscConfig+0xb6>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ca:	4a8b      	ldr	r2, [pc, #556]	; (80027f8 <HAL_RCC_OscConfig+0x2a0>)
 80025cc:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025ce:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025d0:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80025d4:	f040 80a8 	bne.w	8002728 <HAL_RCC_OscConfig+0x1d0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d8:	4b87      	ldr	r3, [pc, #540]	; (80027f8 <HAL_RCC_OscConfig+0x2a0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	075b      	lsls	r3, r3, #29
 80025de:	d503      	bpl.n	80025e8 <HAL_RCC_OscConfig+0x90>
 80025e0:	68e3      	ldr	r3, [r4, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 80ed 	beq.w	80027c2 <HAL_RCC_OscConfig+0x26a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e8:	f7fd fef0 	bl	80003cc <HAL_GetREVID>
 80025ec:	f241 0303 	movw	r3, #4099	; 0x1003
 80025f0:	4298      	cmp	r0, r3
 80025f2:	f200 818f 	bhi.w	8002914 <HAL_RCC_OscConfig+0x3bc>
 80025f6:	6922      	ldr	r2, [r4, #16]
 80025f8:	2a40      	cmp	r2, #64	; 0x40
 80025fa:	f000 824c 	beq.w	8002a96 <HAL_RCC_OscConfig+0x53e>
 80025fe:	497e      	ldr	r1, [pc, #504]	; (80027f8 <HAL_RCC_OscConfig+0x2a0>)
 8002600:	684b      	ldr	r3, [r1, #4]
 8002602:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002606:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800260a:	604b      	str	r3, [r1, #4]
 800260c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800260e:	06d9      	lsls	r1, r3, #27
 8002610:	d456      	bmi.n	80026c0 <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002612:	071d      	lsls	r5, r3, #28
 8002614:	d517      	bpl.n	8002646 <HAL_RCC_OscConfig+0xee>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002616:	6963      	ldr	r3, [r4, #20]
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80b4 	beq.w	8002786 <HAL_RCC_OscConfig+0x22e>
      __HAL_RCC_LSI_ENABLE();
 800261e:	4b76      	ldr	r3, [pc, #472]	; (80027f8 <HAL_RCC_OscConfig+0x2a0>)
 8002620:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002622:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 8002624:	f042 0201 	orr.w	r2, r2, #1
 8002628:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800262a:	f7fd feb7 	bl	800039c <HAL_GetTick>
 800262e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002630:	e005      	b.n	800263e <HAL_RCC_OscConfig+0xe6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002632:	f7fd feb3 	bl	800039c <HAL_GetTick>
 8002636:	1b40      	subs	r0, r0, r5
 8002638:	2802      	cmp	r0, #2
 800263a:	f200 8126 	bhi.w	800288a <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800263e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002640:	0798      	lsls	r0, r3, #30
 8002642:	d5f6      	bpl.n	8002632 <HAL_RCC_OscConfig+0xda>
 8002644:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002646:	069a      	lsls	r2, r3, #26
 8002648:	d517      	bpl.n	800267a <HAL_RCC_OscConfig+0x122>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800264a:	69a3      	ldr	r3, [r4, #24]
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 812c 	beq.w	80028aa <HAL_RCC_OscConfig+0x352>
      __HAL_RCC_HSI48_ENABLE();
 8002652:	4b69      	ldr	r3, [pc, #420]	; (80027f8 <HAL_RCC_OscConfig+0x2a0>)
 8002654:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002656:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 8002658:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800265c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800265e:	f7fd fe9d 	bl	800039c <HAL_GetTick>
 8002662:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002664:	e005      	b.n	8002672 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002666:	f7fd fe99 	bl	800039c <HAL_GetTick>
 800266a:	1b40      	subs	r0, r0, r5
 800266c:	2802      	cmp	r0, #2
 800266e:	f200 810c 	bhi.w	800288a <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002672:	6833      	ldr	r3, [r6, #0]
 8002674:	049f      	lsls	r7, r3, #18
 8002676:	d5f6      	bpl.n	8002666 <HAL_RCC_OscConfig+0x10e>
 8002678:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800267a:	0759      	lsls	r1, r3, #29
 800267c:	f100 80b2 	bmi.w	80027e4 <HAL_RCC_OscConfig+0x28c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002680:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002682:	b1d8      	cbz	r0, 80026bc <HAL_RCC_OscConfig+0x164>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002684:	4b5c      	ldr	r3, [pc, #368]	; (80027f8 <HAL_RCC_OscConfig+0x2a0>)
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800268c:	2a18      	cmp	r2, #24
 800268e:	f000 81d4 	beq.w	8002a3a <HAL_RCC_OscConfig+0x4e2>
        __HAL_RCC_PLL_DISABLE();
 8002692:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002694:	2802      	cmp	r0, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002696:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8002698:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800269c:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800269e:	f000 8167 	beq.w	8002970 <HAL_RCC_OscConfig+0x418>
        tickstart = HAL_GetTick();
 80026a2:	f7fd fe7b 	bl	800039c <HAL_GetTick>
 80026a6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026a8:	e005      	b.n	80026b6 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026aa:	f7fd fe77 	bl	800039c <HAL_GetTick>
 80026ae:	1b00      	subs	r0, r0, r4
 80026b0:	2802      	cmp	r0, #2
 80026b2:	f200 80ea 	bhi.w	800288a <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026b6:	682b      	ldr	r3, [r5, #0]
 80026b8:	019b      	lsls	r3, r3, #6
 80026ba:	d4f6      	bmi.n	80026aa <HAL_RCC_OscConfig+0x152>
  return HAL_OK;
 80026bc:	2000      	movs	r0, #0
}
 80026be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c0:	4a4d      	ldr	r2, [pc, #308]	; (80027f8 <HAL_RCC_OscConfig+0x2a0>)
 80026c2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d072      	beq.n	80027b4 <HAL_RCC_OscConfig+0x25c>
 80026ce:	2b18      	cmp	r3, #24
 80026d0:	d06c      	beq.n	80027ac <HAL_RCC_OscConfig+0x254>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80026d2:	69e3      	ldr	r3, [r4, #28]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80fb 	beq.w	80028d0 <HAL_RCC_OscConfig+0x378>
        __HAL_RCC_CSI_ENABLE();
 80026da:	4b47      	ldr	r3, [pc, #284]	; (80027f8 <HAL_RCC_OscConfig+0x2a0>)
 80026dc:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026de:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 80026e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80026e6:	f7fd fe59 	bl	800039c <HAL_GetTick>
 80026ea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026ec:	e005      	b.n	80026fa <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80026ee:	f7fd fe55 	bl	800039c <HAL_GetTick>
 80026f2:	1b40      	subs	r0, r0, r5
 80026f4:	2802      	cmp	r0, #2
 80026f6:	f200 80c8 	bhi.w	800288a <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026fa:	6833      	ldr	r3, [r6, #0]
 80026fc:	05db      	lsls	r3, r3, #23
 80026fe:	d5f6      	bpl.n	80026ee <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002700:	f7fd fe64 	bl	80003cc <HAL_GetREVID>
 8002704:	f241 0303 	movw	r3, #4099	; 0x1003
 8002708:	4298      	cmp	r0, r3
 800270a:	f200 81de 	bhi.w	8002aca <HAL_RCC_OscConfig+0x572>
 800270e:	6a22      	ldr	r2, [r4, #32]
 8002710:	6873      	ldr	r3, [r6, #4]
 8002712:	2a20      	cmp	r2, #32
 8002714:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002718:	bf0c      	ite	eq
 800271a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800271e:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8002722:	6073      	str	r3, [r6, #4]
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	e774      	b.n	8002612 <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002728:	2b18      	cmp	r3, #24
 800272a:	f000 8111 	beq.w	8002950 <HAL_RCC_OscConfig+0x3f8>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800272e:	68e2      	ldr	r2, [r4, #12]
 8002730:	2a00      	cmp	r2, #0
 8002732:	f000 80f9 	beq.w	8002928 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002736:	4930      	ldr	r1, [pc, #192]	; (80027f8 <HAL_RCC_OscConfig+0x2a0>)
 8002738:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800273a:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800273c:	f023 0319 	bic.w	r3, r3, #25
 8002740:	4313      	orrs	r3, r2
 8002742:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8002744:	f7fd fe2a 	bl	800039c <HAL_GetTick>
 8002748:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800274a:	e005      	b.n	8002758 <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800274c:	f7fd fe26 	bl	800039c <HAL_GetTick>
 8002750:	1b40      	subs	r0, r0, r5
 8002752:	2802      	cmp	r0, #2
 8002754:	f200 8099 	bhi.w	800288a <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002758:	6833      	ldr	r3, [r6, #0]
 800275a:	075f      	lsls	r7, r3, #29
 800275c:	d5f6      	bpl.n	800274c <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275e:	f7fd fe35 	bl	80003cc <HAL_GetREVID>
 8002762:	f241 0303 	movw	r3, #4099	; 0x1003
 8002766:	4298      	cmp	r0, r3
 8002768:	f200 81be 	bhi.w	8002ae8 <HAL_RCC_OscConfig+0x590>
 800276c:	6922      	ldr	r2, [r4, #16]
 800276e:	6873      	ldr	r3, [r6, #4]
 8002770:	2a40      	cmp	r2, #64	; 0x40
 8002772:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002776:	bf0c      	ite	eq
 8002778:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800277c:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8002780:	6073      	str	r3, [r6, #4]
 8002782:	6823      	ldr	r3, [r4, #0]
 8002784:	e743      	b.n	800260e <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 8002786:	4b1c      	ldr	r3, [pc, #112]	; (80027f8 <HAL_RCC_OscConfig+0x2a0>)
 8002788:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800278a:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002792:	f7fd fe03 	bl	800039c <HAL_GetTick>
 8002796:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002798:	e004      	b.n	80027a4 <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800279a:	f7fd fdff 	bl	800039c <HAL_GetTick>
 800279e:	1b40      	subs	r0, r0, r5
 80027a0:	2802      	cmp	r0, #2
 80027a2:	d872      	bhi.n	800288a <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027a4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80027a6:	0799      	lsls	r1, r3, #30
 80027a8:	d4f7      	bmi.n	800279a <HAL_RCC_OscConfig+0x242>
 80027aa:	e74b      	b.n	8002644 <HAL_RCC_OscConfig+0xec>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027ac:	f002 0203 	and.w	r2, r2, #3
 80027b0:	2a01      	cmp	r2, #1
 80027b2:	d18e      	bne.n	80026d2 <HAL_RCC_OscConfig+0x17a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027b4:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <HAL_RCC_OscConfig+0x2a0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	05da      	lsls	r2, r3, #23
 80027ba:	d553      	bpl.n	8002864 <HAL_RCC_OscConfig+0x30c>
 80027bc:	69e3      	ldr	r3, [r4, #28]
 80027be:	2b80      	cmp	r3, #128	; 0x80
 80027c0:	d050      	beq.n	8002864 <HAL_RCC_OscConfig+0x30c>
        return HAL_ERROR;
 80027c2:	2001      	movs	r0, #1
}
 80027c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80027c6:	f001 0103 	and.w	r1, r1, #3
 80027ca:	2902      	cmp	r1, #2
 80027cc:	f47f aed7 	bne.w	800257e <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d0:	4a09      	ldr	r2, [pc, #36]	; (80027f8 <HAL_RCC_OscConfig+0x2a0>)
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	0392      	lsls	r2, r2, #14
 80027d6:	f57f aef6 	bpl.w	80025c6 <HAL_RCC_OscConfig+0x6e>
 80027da:	6862      	ldr	r2, [r4, #4]
 80027dc:	2a00      	cmp	r2, #0
 80027de:	f47f aef2 	bne.w	80025c6 <HAL_RCC_OscConfig+0x6e>
 80027e2:	e7ee      	b.n	80027c2 <HAL_RCC_OscConfig+0x26a>
    PWR->CR1 |= PWR_CR1_DBP;
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_RCC_OscConfig+0x2a4>)
 80027e6:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027e8:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 80027ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ee:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80027f0:	f7fd fdd4 	bl	800039c <HAL_GetTick>
 80027f4:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x2b2>
 80027f8:	58024400 	.word	0x58024400
 80027fc:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002800:	f7fd fdcc 	bl	800039c <HAL_GetTick>
 8002804:	1b40      	subs	r0, r0, r5
 8002806:	2864      	cmp	r0, #100	; 0x64
 8002808:	d83f      	bhi.n	800288a <HAL_RCC_OscConfig+0x332>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800280a:	6833      	ldr	r3, [r6, #0]
 800280c:	05da      	lsls	r2, r3, #23
 800280e:	d5f7      	bpl.n	8002800 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002810:	68a3      	ldr	r3, [r4, #8]
 8002812:	2b01      	cmp	r3, #1
 8002814:	f000 8171 	beq.w	8002afa <HAL_RCC_OscConfig+0x5a2>
 8002818:	2b00      	cmp	r3, #0
 800281a:	f040 8174 	bne.w	8002b06 <HAL_RCC_OscConfig+0x5ae>
 800281e:	4baf      	ldr	r3, [pc, #700]	; (8002adc <HAL_RCC_OscConfig+0x584>)
 8002820:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	671a      	str	r2, [r3, #112]	; 0x70
 8002828:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800282a:	f022 0204 	bic.w	r2, r2, #4
 800282e:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002830:	68a3      	ldr	r3, [r4, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 8138 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x550>
      tickstart = HAL_GetTick();
 8002838:	f7fd fdb0 	bl	800039c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800283c:	4ea7      	ldr	r6, [pc, #668]	; (8002adc <HAL_RCC_OscConfig+0x584>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800283e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002842:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002844:	e004      	b.n	8002850 <HAL_RCC_OscConfig+0x2f8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002846:	f7fd fda9 	bl	800039c <HAL_GetTick>
 800284a:	1b40      	subs	r0, r0, r5
 800284c:	42b8      	cmp	r0, r7
 800284e:	d81c      	bhi.n	800288a <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002850:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002852:	079b      	lsls	r3, r3, #30
 8002854:	d5f7      	bpl.n	8002846 <HAL_RCC_OscConfig+0x2ee>
 8002856:	e713      	b.n	8002680 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002858:	4aa0      	ldr	r2, [pc, #640]	; (8002adc <HAL_RCC_OscConfig+0x584>)
 800285a:	6813      	ldr	r3, [r2, #0]
 800285c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	e69d      	b.n	80025a0 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002864:	f7fd fdb2 	bl	80003cc <HAL_GetREVID>
 8002868:	f241 0303 	movw	r3, #4099	; 0x1003
 800286c:	4298      	cmp	r0, r3
 800286e:	d875      	bhi.n	800295c <HAL_RCC_OscConfig+0x404>
 8002870:	6a22      	ldr	r2, [r4, #32]
 8002872:	2a20      	cmp	r2, #32
 8002874:	f000 8154 	beq.w	8002b20 <HAL_RCC_OscConfig+0x5c8>
 8002878:	4998      	ldr	r1, [pc, #608]	; (8002adc <HAL_RCC_OscConfig+0x584>)
 800287a:	684b      	ldr	r3, [r1, #4]
 800287c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002880:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8002884:	604b      	str	r3, [r1, #4]
 8002886:	6823      	ldr	r3, [r4, #0]
 8002888:	e6c3      	b.n	8002612 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 800288a:	2003      	movs	r0, #3
}
 800288c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 800288e:	f7fd fd85 	bl	800039c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002892:	4e92      	ldr	r6, [pc, #584]	; (8002adc <HAL_RCC_OscConfig+0x584>)
        tickstart = HAL_GetTick();
 8002894:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002896:	e004      	b.n	80028a2 <HAL_RCC_OscConfig+0x34a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002898:	f7fd fd80 	bl	800039c <HAL_GetTick>
 800289c:	1b40      	subs	r0, r0, r5
 800289e:	2864      	cmp	r0, #100	; 0x64
 80028a0:	d8f3      	bhi.n	800288a <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028a2:	6833      	ldr	r3, [r6, #0]
 80028a4:	0398      	lsls	r0, r3, #14
 80028a6:	d4f7      	bmi.n	8002898 <HAL_RCC_OscConfig+0x340>
 80028a8:	e68c      	b.n	80025c4 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 80028aa:	4b8c      	ldr	r3, [pc, #560]	; (8002adc <HAL_RCC_OscConfig+0x584>)
 80028ac:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028ae:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 80028b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028b4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80028b6:	f7fd fd71 	bl	800039c <HAL_GetTick>
 80028ba:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028bc:	e004      	b.n	80028c8 <HAL_RCC_OscConfig+0x370>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80028be:	f7fd fd6d 	bl	800039c <HAL_GetTick>
 80028c2:	1b40      	subs	r0, r0, r5
 80028c4:	2802      	cmp	r0, #2
 80028c6:	d8e0      	bhi.n	800288a <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028c8:	6833      	ldr	r3, [r6, #0]
 80028ca:	0498      	lsls	r0, r3, #18
 80028cc:	d4f7      	bmi.n	80028be <HAL_RCC_OscConfig+0x366>
 80028ce:	e6d3      	b.n	8002678 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 80028d0:	4b82      	ldr	r3, [pc, #520]	; (8002adc <HAL_RCC_OscConfig+0x584>)
 80028d2:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028d4:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 80028d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80028dc:	f7fd fd5e 	bl	800039c <HAL_GetTick>
 80028e0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028e2:	e004      	b.n	80028ee <HAL_RCC_OscConfig+0x396>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80028e4:	f7fd fd5a 	bl	800039c <HAL_GetTick>
 80028e8:	1b40      	subs	r0, r0, r5
 80028ea:	2802      	cmp	r0, #2
 80028ec:	d8cd      	bhi.n	800288a <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028ee:	6833      	ldr	r3, [r6, #0]
 80028f0:	05df      	lsls	r7, r3, #23
 80028f2:	d4f7      	bmi.n	80028e4 <HAL_RCC_OscConfig+0x38c>
 80028f4:	6823      	ldr	r3, [r4, #0]
 80028f6:	e68c      	b.n	8002612 <HAL_RCC_OscConfig+0xba>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028fc:	4b77      	ldr	r3, [pc, #476]	; (8002adc <HAL_RCC_OscConfig+0x584>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	f47f ae47 	bne.w	8002592 <HAL_RCC_OscConfig+0x3a>
 8002904:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	e645      	b.n	80025a0 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002914:	4a71      	ldr	r2, [pc, #452]	; (8002adc <HAL_RCC_OscConfig+0x584>)
 8002916:	6921      	ldr	r1, [r4, #16]
 8002918:	6853      	ldr	r3, [r2, #4]
 800291a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800291e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002922:	6053      	str	r3, [r2, #4]
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	e672      	b.n	800260e <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 8002928:	4b6c      	ldr	r3, [pc, #432]	; (8002adc <HAL_RCC_OscConfig+0x584>)
 800292a:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800292c:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 800292e:	f022 0201 	bic.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002934:	f7fd fd32 	bl	800039c <HAL_GetTick>
 8002938:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800293a:	e004      	b.n	8002946 <HAL_RCC_OscConfig+0x3ee>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800293c:	f7fd fd2e 	bl	800039c <HAL_GetTick>
 8002940:	1b40      	subs	r0, r0, r5
 8002942:	2802      	cmp	r0, #2
 8002944:	d8a1      	bhi.n	800288a <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002946:	6833      	ldr	r3, [r6, #0]
 8002948:	0758      	lsls	r0, r3, #29
 800294a:	d4f7      	bmi.n	800293c <HAL_RCC_OscConfig+0x3e4>
 800294c:	6823      	ldr	r3, [r4, #0]
 800294e:	e65e      	b.n	800260e <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002950:	0792      	lsls	r2, r2, #30
 8002952:	f47f aeec 	bne.w	800272e <HAL_RCC_OscConfig+0x1d6>
 8002956:	e63f      	b.n	80025d8 <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 8002958:	2001      	movs	r0, #1
}
 800295a:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800295c:	4a5f      	ldr	r2, [pc, #380]	; (8002adc <HAL_RCC_OscConfig+0x584>)
 800295e:	6a21      	ldr	r1, [r4, #32]
 8002960:	68d3      	ldr	r3, [r2, #12]
 8002962:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002966:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800296a:	60d3      	str	r3, [r2, #12]
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	e650      	b.n	8002612 <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 8002970:	f7fd fd14 	bl	800039c <HAL_GetTick>
 8002974:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002976:	e004      	b.n	8002982 <HAL_RCC_OscConfig+0x42a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002978:	f7fd fd10 	bl	800039c <HAL_GetTick>
 800297c:	1b80      	subs	r0, r0, r6
 800297e:	2802      	cmp	r0, #2
 8002980:	d883      	bhi.n	800288a <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002982:	682b      	ldr	r3, [r5, #0]
 8002984:	0199      	lsls	r1, r3, #6
 8002986:	d4f7      	bmi.n	8002978 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002988:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800298a:	4b55      	ldr	r3, [pc, #340]	; (8002ae0 <HAL_RCC_OscConfig+0x588>)
 800298c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800298e:	4013      	ands	r3, r2
 8002990:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002992:	4954      	ldr	r1, [pc, #336]	; (8002ae4 <HAL_RCC_OscConfig+0x58c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002994:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002996:	4e51      	ldr	r6, [pc, #324]	; (8002adc <HAL_RCC_OscConfig+0x584>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002998:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800299c:	62ab      	str	r3, [r5, #40]	; 0x28
 800299e:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80029a0:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80029a4:	3f01      	subs	r7, #1
 80029a6:	1e50      	subs	r0, r2, #1
 80029a8:	3b01      	subs	r3, #1
 80029aa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80029ac:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80029b0:	025b      	lsls	r3, r3, #9
 80029b2:	0400      	lsls	r0, r0, #16
 80029b4:	3a01      	subs	r2, #1
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80029bc:	0612      	lsls	r2, r2, #24
 80029be:	4303      	orrs	r3, r0
 80029c0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80029c4:	433b      	orrs	r3, r7
 80029c6:	4313      	orrs	r3, r2
 80029c8:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80029ca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80029cc:	f023 0301 	bic.w	r3, r3, #1
 80029d0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029d2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80029d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80029d6:	4011      	ands	r1, r2
 80029d8:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80029dc:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80029de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80029e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80029e2:	f023 030c 	bic.w	r3, r3, #12
 80029e6:	4313      	orrs	r3, r2
 80029e8:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80029ea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80029ec:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80029ee:	f023 0302 	bic.w	r3, r3, #2
 80029f2:	4313      	orrs	r3, r2
 80029f4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80029f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80029f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029fe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a04:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a06:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a0c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8002a0e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8002a16:	682b      	ldr	r3, [r5, #0]
 8002a18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a1c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002a1e:	f7fd fcbd 	bl	800039c <HAL_GetTick>
 8002a22:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a24:	e005      	b.n	8002a32 <HAL_RCC_OscConfig+0x4da>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a26:	f7fd fcb9 	bl	800039c <HAL_GetTick>
 8002a2a:	1b00      	subs	r0, r0, r4
 8002a2c:	2802      	cmp	r0, #2
 8002a2e:	f63f af2c 	bhi.w	800288a <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a32:	6833      	ldr	r3, [r6, #0]
 8002a34:	019a      	lsls	r2, r3, #6
 8002a36:	d5f6      	bpl.n	8002a26 <HAL_RCC_OscConfig+0x4ce>
 8002a38:	e640      	b.n	80026bc <HAL_RCC_OscConfig+0x164>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a3a:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a3e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a40:	f43f ae3d 	beq.w	80026be <HAL_RCC_OscConfig+0x166>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a44:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a48:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002a4a:	428b      	cmp	r3, r1
 8002a4c:	f47f aeb9 	bne.w	80027c2 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a50:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a56:	429a      	cmp	r2, r3
 8002a58:	f47f aeb3 	bne.w	80027c2 <HAL_RCC_OscConfig+0x26a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a5e:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8002a62:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a64:	429a      	cmp	r2, r3
 8002a66:	f47f aeac 	bne.w	80027c2 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a6c:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8002a70:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a72:	429a      	cmp	r2, r3
 8002a74:	f47f aea5 	bne.w	80027c2 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a7a:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8002a7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	f47f ae9e 	bne.w	80027c2 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a86:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002a88:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8002a8c:	3801      	subs	r0, #1
  return HAL_OK;
 8002a8e:	1a28      	subs	r0, r5, r0
 8002a90:	bf18      	it	ne
 8002a92:	2001      	movne	r0, #1
}
 8002a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a96:	4a11      	ldr	r2, [pc, #68]	; (8002adc <HAL_RCC_OscConfig+0x584>)
 8002a98:	6853      	ldr	r3, [r2, #4]
 8002a9a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa2:	6053      	str	r3, [r2, #4]
 8002aa4:	6823      	ldr	r3, [r4, #0]
 8002aa6:	e5b2      	b.n	800260e <HAL_RCC_OscConfig+0xb6>
      tickstart = HAL_GetTick();
 8002aa8:	f7fd fc78 	bl	800039c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002aac:	4e0b      	ldr	r6, [pc, #44]	; (8002adc <HAL_RCC_OscConfig+0x584>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aae:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002ab2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ab4:	e005      	b.n	8002ac2 <HAL_RCC_OscConfig+0x56a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab6:	f7fd fc71 	bl	800039c <HAL_GetTick>
 8002aba:	1b40      	subs	r0, r0, r5
 8002abc:	42b8      	cmp	r0, r7
 8002abe:	f63f aee4 	bhi.w	800288a <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ac2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002ac4:	0798      	lsls	r0, r3, #30
 8002ac6:	d4f6      	bmi.n	8002ab6 <HAL_RCC_OscConfig+0x55e>
 8002ac8:	e5da      	b.n	8002680 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002aca:	68f3      	ldr	r3, [r6, #12]
 8002acc:	6a22      	ldr	r2, [r4, #32]
 8002ace:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002ad2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002ad6:	60f3      	str	r3, [r6, #12]
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	e59a      	b.n	8002612 <HAL_RCC_OscConfig+0xba>
 8002adc:	58024400 	.word	0x58024400
 8002ae0:	fffffc0c 	.word	0xfffffc0c
 8002ae4:	ffff0007 	.word	0xffff0007
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae8:	6873      	ldr	r3, [r6, #4]
 8002aea:	6922      	ldr	r2, [r4, #16]
 8002aec:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002af0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002af4:	6073      	str	r3, [r6, #4]
 8002af6:	6823      	ldr	r3, [r4, #0]
 8002af8:	e589      	b.n	800260e <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002afa:	4a0e      	ldr	r2, [pc, #56]	; (8002b34 <HAL_RCC_OscConfig+0x5dc>)
 8002afc:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	6713      	str	r3, [r2, #112]	; 0x70
 8002b04:	e694      	b.n	8002830 <HAL_RCC_OscConfig+0x2d8>
 8002b06:	2b05      	cmp	r3, #5
 8002b08:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <HAL_RCC_OscConfig+0x5dc>)
 8002b0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b0c:	f47f ae89 	bne.w	8002822 <HAL_RCC_OscConfig+0x2ca>
 8002b10:	f042 0204 	orr.w	r2, r2, #4
 8002b14:	671a      	str	r2, [r3, #112]	; 0x70
 8002b16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b18:	f042 0201 	orr.w	r2, r2, #1
 8002b1c:	671a      	str	r2, [r3, #112]	; 0x70
 8002b1e:	e687      	b.n	8002830 <HAL_RCC_OscConfig+0x2d8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b20:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <HAL_RCC_OscConfig+0x5dc>)
 8002b22:	6853      	ldr	r3, [r2, #4]
 8002b24:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b2c:	6053      	str	r3, [r2, #4]
 8002b2e:	6823      	ldr	r3, [r4, #0]
 8002b30:	e56f      	b.n	8002612 <HAL_RCC_OscConfig+0xba>
 8002b32:	bf00      	nop
 8002b34:	58024400 	.word	0x58024400

08002b38 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b38:	4a47      	ldr	r2, [pc, #284]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x120>)
 8002b3a:	6913      	ldr	r3, [r2, #16]
 8002b3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b40:	2b10      	cmp	r3, #16
 8002b42:	d004      	beq.n	8002b4e <HAL_RCC_GetSysClockFreq+0x16>
 8002b44:	2b18      	cmp	r3, #24
 8002b46:	d00d      	beq.n	8002b64 <HAL_RCC_GetSysClockFreq+0x2c>
 8002b48:	b11b      	cbz	r3, 8002b52 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 8002b4a:	4844      	ldr	r0, [pc, #272]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x124>)
 8002b4c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b4e:	4844      	ldr	r0, [pc, #272]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x128>)
 8002b50:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b52:	6813      	ldr	r3, [r2, #0]
 8002b54:	0699      	lsls	r1, r3, #26
 8002b56:	d54a      	bpl.n	8002bee <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b58:	6813      	ldr	r3, [r2, #0]
 8002b5a:	4842      	ldr	r0, [pc, #264]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002b5c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002b60:	40d8      	lsrs	r0, r3
 8002b62:	4770      	bx	lr
{
 8002b64:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b66:	6a93      	ldr	r3, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002b68:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    if (pllm != 0U)
 8002b6c:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002b70:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002b74:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 8002b76:	d038      	beq.n	8002bea <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002b78:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b7c:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b80:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002b84:	fb01 f105 	mul.w	r1, r1, r5
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	ee07 1a90 	vmov	s15, r1
 8002b8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 8002b92:	d002      	beq.n	8002b9a <HAL_RCC_GetSysClockFreq+0x62>
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d02c      	beq.n	8002bf2 <HAL_RCC_GetSysClockFreq+0xba>
 8002b98:	b393      	cbz	r3, 8002c00 <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b9a:	ee07 0a90 	vmov	s15, r0
 8002b9e:	eddf 6a32 	vldr	s13, [pc, #200]	; 8002c68 <HAL_RCC_GetSysClockFreq+0x130>
 8002ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ba6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002ba8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8002bac:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8002c6c <HAL_RCC_GetSysClockFreq+0x134>
 8002bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb4:	ee06 3a90 	vmov	s13, r3
 8002bb8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8002bbc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002bc0:	ee76 6a85 	vadd.f32	s13, s13, s10
 8002bc4:	eee7 6a25 	vfma.f32	s13, s14, s11
 8002bc8:	ee66 6a26 	vmul.f32	s13, s12, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002bcc:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x120>)
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002bd4:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002bd6:	ee07 3a90 	vmov	s15, r3
 8002bda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002be6:	ee17 0a90 	vmov	r0, s15
}
 8002bea:	bc30      	pop	{r4, r5}
 8002bec:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002bee:	481d      	ldr	r0, [pc, #116]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8002bf0:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002bf2:	ee07 0a90 	vmov	s15, r0
 8002bf6:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8002c70 <HAL_RCC_GetSysClockFreq+0x138>
 8002bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bfe:	e7d2      	b.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c00:	6813      	ldr	r3, [r2, #0]
 8002c02:	069b      	lsls	r3, r3, #26
 8002c04:	d520      	bpl.n	8002c48 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c06:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c08:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c0c:	4915      	ldr	r1, [pc, #84]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c0e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c12:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c1c:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c1e:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8002c6c <HAL_RCC_GetSysClockFreq+0x134>
 8002c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c26:	ee06 1a10 	vmov	s12, r1
 8002c2a:	ee06 3a90 	vmov	s13, r3
 8002c2e:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8002c32:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002c36:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002c3a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8002c3e:	eee7 6a05 	vfma.f32	s13, s14, s10
 8002c42:	ee66 6a26 	vmul.f32	s13, s12, s13
 8002c46:	e7c1      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c48:	ee07 0a90 	vmov	s15, r0
 8002c4c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002c74 <HAL_RCC_GetSysClockFreq+0x13c>
 8002c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c54:	e7a7      	b.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x6e>
 8002c56:	bf00      	nop
 8002c58:	58024400 	.word	0x58024400
 8002c5c:	003d0900 	.word	0x003d0900
 8002c60:	017d7840 	.word	0x017d7840
 8002c64:	03d09000 	.word	0x03d09000
 8002c68:	4a742400 	.word	0x4a742400
 8002c6c:	39000000 	.word	0x39000000
 8002c70:	4bbebc20 	.word	0x4bbebc20
 8002c74:	4c742400 	.word	0x4c742400

08002c78 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	f000 811c 	beq.w	8002eb6 <HAL_RCC_ClockConfig+0x23e>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c7e:	4a93      	ldr	r2, [pc, #588]	; (8002ecc <HAL_RCC_ClockConfig+0x254>)
{
 8002c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c84:	6813      	ldr	r3, [r2, #0]
 8002c86:	4604      	mov	r4, r0
 8002c88:	460d      	mov	r5, r1
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	428b      	cmp	r3, r1
 8002c90:	d20c      	bcs.n	8002cac <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	6813      	ldr	r3, [r2, #0]
 8002c94:	f023 030f 	bic.w	r3, r3, #15
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9c:	6813      	ldr	r3, [r2, #0]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	428b      	cmp	r3, r1
 8002ca4:	d002      	beq.n	8002cac <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002ca6:	2001      	movs	r0, #1
}
 8002ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cac:	6823      	ldr	r3, [r4, #0]
 8002cae:	075f      	lsls	r7, r3, #29
 8002cb0:	d50c      	bpl.n	8002ccc <HAL_RCC_ClockConfig+0x54>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cb2:	4987      	ldr	r1, [pc, #540]	; (8002ed0 <HAL_RCC_ClockConfig+0x258>)
 8002cb4:	6920      	ldr	r0, [r4, #16]
 8002cb6:	698a      	ldr	r2, [r1, #24]
 8002cb8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002cbc:	4290      	cmp	r0, r2
 8002cbe:	d905      	bls.n	8002ccc <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cc0:	698b      	ldr	r3, [r1, #24]
 8002cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc6:	4303      	orrs	r3, r0
 8002cc8:	618b      	str	r3, [r1, #24]
 8002cca:	6823      	ldr	r3, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ccc:	071e      	lsls	r6, r3, #28
 8002cce:	d50c      	bpl.n	8002cea <HAL_RCC_ClockConfig+0x72>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cd0:	497f      	ldr	r1, [pc, #508]	; (8002ed0 <HAL_RCC_ClockConfig+0x258>)
 8002cd2:	6960      	ldr	r0, [r4, #20]
 8002cd4:	69ca      	ldr	r2, [r1, #28]
 8002cd6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002cda:	4290      	cmp	r0, r2
 8002cdc:	d905      	bls.n	8002cea <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cde:	69cb      	ldr	r3, [r1, #28]
 8002ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce4:	4303      	orrs	r3, r0
 8002ce6:	61cb      	str	r3, [r1, #28]
 8002ce8:	6823      	ldr	r3, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cea:	06d8      	lsls	r0, r3, #27
 8002cec:	d50c      	bpl.n	8002d08 <HAL_RCC_ClockConfig+0x90>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cee:	4978      	ldr	r1, [pc, #480]	; (8002ed0 <HAL_RCC_ClockConfig+0x258>)
 8002cf0:	69a0      	ldr	r0, [r4, #24]
 8002cf2:	69ca      	ldr	r2, [r1, #28]
 8002cf4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002cf8:	4290      	cmp	r0, r2
 8002cfa:	d905      	bls.n	8002d08 <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cfc:	69cb      	ldr	r3, [r1, #28]
 8002cfe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d02:	4303      	orrs	r3, r0
 8002d04:	61cb      	str	r3, [r1, #28]
 8002d06:	6823      	ldr	r3, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d08:	0699      	lsls	r1, r3, #26
 8002d0a:	d50c      	bpl.n	8002d26 <HAL_RCC_ClockConfig+0xae>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d0c:	4970      	ldr	r1, [pc, #448]	; (8002ed0 <HAL_RCC_ClockConfig+0x258>)
 8002d0e:	69e0      	ldr	r0, [r4, #28]
 8002d10:	6a0a      	ldr	r2, [r1, #32]
 8002d12:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002d16:	4290      	cmp	r0, r2
 8002d18:	d905      	bls.n	8002d26 <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d1a:	6a0b      	ldr	r3, [r1, #32]
 8002d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d20:	4303      	orrs	r3, r0
 8002d22:	620b      	str	r3, [r1, #32]
 8002d24:	6823      	ldr	r3, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d26:	079a      	lsls	r2, r3, #30
 8002d28:	f140 8084 	bpl.w	8002e34 <HAL_RCC_ClockConfig+0x1bc>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d2c:	4868      	ldr	r0, [pc, #416]	; (8002ed0 <HAL_RCC_ClockConfig+0x258>)
 8002d2e:	68e1      	ldr	r1, [r4, #12]
 8002d30:	6982      	ldr	r2, [r0, #24]
 8002d32:	f002 020f 	and.w	r2, r2, #15
 8002d36:	4291      	cmp	r1, r2
 8002d38:	f240 80ab 	bls.w	8002e92 <HAL_RCC_ClockConfig+0x21a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d3c:	6983      	ldr	r3, [r0, #24]
 8002d3e:	f023 030f 	bic.w	r3, r3, #15
 8002d42:	4319      	orrs	r1, r3
 8002d44:	6181      	str	r1, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d46:	6823      	ldr	r3, [r4, #0]
 8002d48:	07df      	lsls	r7, r3, #31
 8002d4a:	d475      	bmi.n	8002e38 <HAL_RCC_ClockConfig+0x1c0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d4c:	079f      	lsls	r7, r3, #30
 8002d4e:	d507      	bpl.n	8002d60 <HAL_RCC_ClockConfig+0xe8>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d50:	4a5f      	ldr	r2, [pc, #380]	; (8002ed0 <HAL_RCC_ClockConfig+0x258>)
 8002d52:	68e1      	ldr	r1, [r4, #12]
 8002d54:	6993      	ldr	r3, [r2, #24]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	428b      	cmp	r3, r1
 8002d5c:	f200 80a2 	bhi.w	8002ea4 <HAL_RCC_ClockConfig+0x22c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d60:	4a5a      	ldr	r2, [pc, #360]	; (8002ecc <HAL_RCC_ClockConfig+0x254>)
 8002d62:	6813      	ldr	r3, [r2, #0]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	42ab      	cmp	r3, r5
 8002d6a:	d909      	bls.n	8002d80 <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6c:	6813      	ldr	r3, [r2, #0]
 8002d6e:	f023 030f 	bic.w	r3, r3, #15
 8002d72:	432b      	orrs	r3, r5
 8002d74:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d76:	6813      	ldr	r3, [r2, #0]
 8002d78:	f003 030f 	and.w	r3, r3, #15
 8002d7c:	42ab      	cmp	r3, r5
 8002d7e:	d192      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d80:	6823      	ldr	r3, [r4, #0]
 8002d82:	075e      	lsls	r6, r3, #29
 8002d84:	d50c      	bpl.n	8002da0 <HAL_RCC_ClockConfig+0x128>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d86:	4952      	ldr	r1, [pc, #328]	; (8002ed0 <HAL_RCC_ClockConfig+0x258>)
 8002d88:	6920      	ldr	r0, [r4, #16]
 8002d8a:	698a      	ldr	r2, [r1, #24]
 8002d8c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002d90:	4290      	cmp	r0, r2
 8002d92:	d205      	bcs.n	8002da0 <HAL_RCC_ClockConfig+0x128>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d94:	698b      	ldr	r3, [r1, #24]
 8002d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9a:	4303      	orrs	r3, r0
 8002d9c:	618b      	str	r3, [r1, #24]
 8002d9e:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da0:	071d      	lsls	r5, r3, #28
 8002da2:	d50c      	bpl.n	8002dbe <HAL_RCC_ClockConfig+0x146>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002da4:	494a      	ldr	r1, [pc, #296]	; (8002ed0 <HAL_RCC_ClockConfig+0x258>)
 8002da6:	6960      	ldr	r0, [r4, #20]
 8002da8:	69ca      	ldr	r2, [r1, #28]
 8002daa:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002dae:	4290      	cmp	r0, r2
 8002db0:	d205      	bcs.n	8002dbe <HAL_RCC_ClockConfig+0x146>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002db2:	69cb      	ldr	r3, [r1, #28]
 8002db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db8:	4303      	orrs	r3, r0
 8002dba:	61cb      	str	r3, [r1, #28]
 8002dbc:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dbe:	06d8      	lsls	r0, r3, #27
 8002dc0:	d50c      	bpl.n	8002ddc <HAL_RCC_ClockConfig+0x164>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002dc2:	4943      	ldr	r1, [pc, #268]	; (8002ed0 <HAL_RCC_ClockConfig+0x258>)
 8002dc4:	69a0      	ldr	r0, [r4, #24]
 8002dc6:	69ca      	ldr	r2, [r1, #28]
 8002dc8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002dcc:	4290      	cmp	r0, r2
 8002dce:	d205      	bcs.n	8002ddc <HAL_RCC_ClockConfig+0x164>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002dd0:	69cb      	ldr	r3, [r1, #28]
 8002dd2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002dd6:	4303      	orrs	r3, r0
 8002dd8:	61cb      	str	r3, [r1, #28]
 8002dda:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ddc:	0699      	lsls	r1, r3, #26
 8002dde:	d50b      	bpl.n	8002df8 <HAL_RCC_ClockConfig+0x180>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002de0:	4a3b      	ldr	r2, [pc, #236]	; (8002ed0 <HAL_RCC_ClockConfig+0x258>)
 8002de2:	69e1      	ldr	r1, [r4, #28]
 8002de4:	6a13      	ldr	r3, [r2, #32]
 8002de6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dea:	4299      	cmp	r1, r3
 8002dec:	d204      	bcs.n	8002df8 <HAL_RCC_ClockConfig+0x180>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002dee:	6a13      	ldr	r3, [r2, #32]
 8002df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df4:	430b      	orrs	r3, r1
 8002df6:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002df8:	f7ff fe9e 	bl	8002b38 <HAL_RCC_GetSysClockFreq>
 8002dfc:	4b34      	ldr	r3, [pc, #208]	; (8002ed0 <HAL_RCC_ClockConfig+0x258>)
 8002dfe:	4602      	mov	r2, r0
 8002e00:	4834      	ldr	r0, [pc, #208]	; (8002ed4 <HAL_RCC_ClockConfig+0x25c>)
 8002e02:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e04:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e06:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8002e0a:	4d33      	ldr	r5, [pc, #204]	; (8002ed8 <HAL_RCC_ClockConfig+0x260>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	4c32      	ldr	r4, [pc, #200]	; (8002edc <HAL_RCC_ClockConfig+0x264>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e12:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e14:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e16:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8002e1a:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e1c:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8002e20:	4d2f      	ldr	r5, [pc, #188]	; (8002ee0 <HAL_RCC_ClockConfig+0x268>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e22:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8002e28:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e2a:	6023      	str	r3, [r4, #0]
}
 8002e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8002e30:	f7fd ba52 	b.w	80002d8 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e34:	07db      	lsls	r3, r3, #31
 8002e36:	d593      	bpl.n	8002d60 <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e38:	4a25      	ldr	r2, [pc, #148]	; (8002ed0 <HAL_RCC_ClockConfig+0x258>)
 8002e3a:	68a1      	ldr	r1, [r4, #8]
 8002e3c:	6993      	ldr	r3, [r2, #24]
 8002e3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e42:	430b      	orrs	r3, r1
 8002e44:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e46:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e48:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e4a:	2902      	cmp	r1, #2
 8002e4c:	d035      	beq.n	8002eba <HAL_RCC_ClockConfig+0x242>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e4e:	2903      	cmp	r1, #3
 8002e50:	d02e      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x238>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e52:	2901      	cmp	r1, #1
 8002e54:	d036      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x24c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e56:	075b      	lsls	r3, r3, #29
 8002e58:	f57f af25 	bpl.w	8002ca6 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e5c:	4a1c      	ldr	r2, [pc, #112]	; (8002ed0 <HAL_RCC_ClockConfig+0x258>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e5e:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e62:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e64:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e66:	f023 0307 	bic.w	r3, r3, #7
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 8002e6e:	f7fd fa95 	bl	800039c <HAL_GetTick>
 8002e72:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e74:	e004      	b.n	8002e80 <HAL_RCC_ClockConfig+0x208>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e76:	f7fd fa91 	bl	800039c <HAL_GetTick>
 8002e7a:	1b80      	subs	r0, r0, r6
 8002e7c:	4540      	cmp	r0, r8
 8002e7e:	d81f      	bhi.n	8002ec0 <HAL_RCC_ClockConfig+0x248>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	6862      	ldr	r2, [r4, #4]
 8002e84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e88:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8002e8c:	d1f3      	bne.n	8002e76 <HAL_RCC_ClockConfig+0x1fe>
 8002e8e:	6823      	ldr	r3, [r4, #0]
 8002e90:	e75c      	b.n	8002d4c <HAL_RCC_ClockConfig+0xd4>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e92:	07da      	lsls	r2, r3, #31
 8002e94:	d4d0      	bmi.n	8002e38 <HAL_RCC_ClockConfig+0x1c0>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e96:	4a0e      	ldr	r2, [pc, #56]	; (8002ed0 <HAL_RCC_ClockConfig+0x258>)
 8002e98:	6993      	ldr	r3, [r2, #24]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	428b      	cmp	r3, r1
 8002ea0:	f67f af5e 	bls.w	8002d60 <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea4:	6993      	ldr	r3, [r2, #24]
 8002ea6:	f023 030f 	bic.w	r3, r3, #15
 8002eaa:	4319      	orrs	r1, r3
 8002eac:	6191      	str	r1, [r2, #24]
 8002eae:	e757      	b.n	8002d60 <HAL_RCC_ClockConfig+0xe8>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002eb0:	0198      	lsls	r0, r3, #6
 8002eb2:	d4d3      	bmi.n	8002e5c <HAL_RCC_ClockConfig+0x1e4>
 8002eb4:	e6f7      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002eb6:	2001      	movs	r0, #1
}
 8002eb8:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002eba:	039e      	lsls	r6, r3, #14
 8002ebc:	d4ce      	bmi.n	8002e5c <HAL_RCC_ClockConfig+0x1e4>
 8002ebe:	e6f2      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8002ec0:	2003      	movs	r0, #3
 8002ec2:	e6f1      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ec4:	05da      	lsls	r2, r3, #23
 8002ec6:	d4c9      	bmi.n	8002e5c <HAL_RCC_ClockConfig+0x1e4>
 8002ec8:	e6ed      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x2e>
 8002eca:	bf00      	nop
 8002ecc:	52002000 	.word	0x52002000
 8002ed0:	58024400 	.word	0x58024400
 8002ed4:	0800efec 	.word	0x0800efec
 8002ed8:	20000004 	.word	0x20000004
 8002edc:	20000b0c 	.word	0x20000b0c
 8002ee0:	20000b08 	.word	0x20000b08

08002ee4 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ee4:	4a18      	ldr	r2, [pc, #96]	; (8002f48 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ee8:	6913      	ldr	r3, [r2, #16]
 8002eea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eee:	2b10      	cmp	r3, #16
 8002ef0:	d01a      	beq.n	8002f28 <HAL_RCC_GetHCLKFreq+0x44>
 8002ef2:	2b18      	cmp	r3, #24
 8002ef4:	d023      	beq.n	8002f3e <HAL_RCC_GetHCLKFreq+0x5a>
 8002ef6:	b1cb      	cbz	r3, 8002f2c <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 8002ef8:	4814      	ldr	r0, [pc, #80]	; (8002f4c <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <HAL_RCC_GetHCLKFreq+0x64>)
 8002efc:	4914      	ldr	r1, [pc, #80]	; (8002f50 <HAL_RCC_GetHCLKFreq+0x6c>)
 8002efe:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f00:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002f02:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f06:	4c13      	ldr	r4, [pc, #76]	; (8002f54 <HAL_RCC_GetHCLKFreq+0x70>)
 8002f08:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f0c:	4d12      	ldr	r5, [pc, #72]	; (8002f58 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002f0e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f10:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002f12:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f16:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002f1a:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f1e:	fa22 f003 	lsr.w	r0, r2, r3
  SystemCoreClock = common_system_clock;
 8002f22:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f24:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8002f26:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f28:	480c      	ldr	r0, [pc, #48]	; (8002f5c <HAL_RCC_GetHCLKFreq+0x78>)
 8002f2a:	e7e6      	b.n	8002efa <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f2c:	6813      	ldr	r3, [r2, #0]
 8002f2e:	069b      	lsls	r3, r3, #26
 8002f30:	d508      	bpl.n	8002f44 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	480a      	ldr	r0, [pc, #40]	; (8002f60 <HAL_RCC_GetHCLKFreq+0x7c>)
 8002f36:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002f3a:	40d0      	lsrs	r0, r2
 8002f3c:	e7dd      	b.n	8002efa <HAL_RCC_GetHCLKFreq+0x16>
 8002f3e:	f7ff fa87 	bl	8002450 <HAL_RCC_GetSysClockFreq.part.0>
 8002f42:	e7da      	b.n	8002efa <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f44:	4806      	ldr	r0, [pc, #24]	; (8002f60 <HAL_RCC_GetHCLKFreq+0x7c>)
 8002f46:	e7d8      	b.n	8002efa <HAL_RCC_GetHCLKFreq+0x16>
 8002f48:	58024400 	.word	0x58024400
 8002f4c:	003d0900 	.word	0x003d0900
 8002f50:	0800efec 	.word	0x0800efec
 8002f54:	20000b0c 	.word	0x20000b0c
 8002f58:	20000b08 	.word	0x20000b08
 8002f5c:	017d7840 	.word	0x017d7840
 8002f60:	03d09000 	.word	0x03d09000

08002f64 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002f64:	4a3b      	ldr	r2, [pc, #236]	; (8003054 <RCCEx_PLL2_Config+0xf0>)
{
 8002f66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002f68:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d069      	beq.n	8003046 <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8002f72:	6813      	ldr	r3, [r2, #0]
 8002f74:	4606      	mov	r6, r0
 8002f76:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002f78:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8002f7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f7e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002f80:	f7fd fa0c 	bl	800039c <HAL_GetTick>
 8002f84:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002f86:	e004      	b.n	8002f92 <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002f88:	f7fd fa08 	bl	800039c <HAL_GetTick>
 8002f8c:	1b43      	subs	r3, r0, r5
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d857      	bhi.n	8003042 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	011a      	lsls	r2, r3, #4
 8002f96:	d4f7      	bmi.n	8002f88 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002f98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f9a:	6832      	ldr	r2, [r6, #0]
 8002f9c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002fa0:	492d      	ldr	r1, [pc, #180]	; (8003058 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002fa2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002fa6:	62a3      	str	r3, [r4, #40]	; 0x28
 8002fa8:	6875      	ldr	r5, [r6, #4]
 8002faa:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8002fae:	3d01      	subs	r5, #1
 8002fb0:	1e50      	subs	r0, r2, #1
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	6932      	ldr	r2, [r6, #16]
 8002fb6:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8002fba:	025b      	lsls	r3, r3, #9
 8002fbc:	0400      	lsls	r0, r0, #16
 8002fbe:	3a01      	subs	r2, #1
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8002fc6:	0612      	lsls	r2, r2, #24
 8002fc8:	4303      	orrs	r3, r0
 8002fca:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002fce:	432b      	orrs	r3, r5
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8002fd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fd6:	6972      	ldr	r2, [r6, #20]
 8002fd8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002fe0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fe2:	69b2      	ldr	r2, [r6, #24]
 8002fe4:	f023 0320 	bic.w	r3, r3, #32
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8002fec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fee:	f023 0310 	bic.w	r3, r3, #16
 8002ff2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002ff4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002ff6:	69f3      	ldr	r3, [r6, #28]
 8002ff8:	4011      	ands	r1, r2
 8002ffa:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8002ffe:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003000:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003002:	f043 0310 	orr.w	r3, r3, #16
 8003006:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003008:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800300a:	b1f7      	cbz	r7, 800304a <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800300c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800300e:	bf0c      	ite	eq
 8003010:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003014:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8003018:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800301a:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <RCCEx_PLL2_Config+0xf0>)
 800301c:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800301e:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 8003020:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003024:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003026:	f7fd f9b9 	bl	800039c <HAL_GetTick>
 800302a:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800302c:	e004      	b.n	8003038 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800302e:	f7fd f9b5 	bl	800039c <HAL_GetTick>
 8003032:	1b00      	subs	r0, r0, r4
 8003034:	2802      	cmp	r0, #2
 8003036:	d804      	bhi.n	8003042 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003038:	682b      	ldr	r3, [r5, #0]
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	d5f7      	bpl.n	800302e <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 800303e:	2000      	movs	r0, #0
}
 8003040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003042:	2003      	movs	r0, #3
}
 8003044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003046:	2001      	movs	r0, #1
}
 8003048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800304a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800304e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003050:	e7e3      	b.n	800301a <RCCEx_PLL2_Config+0xb6>
 8003052:	bf00      	nop
 8003054:	58024400 	.word	0x58024400
 8003058:	ffff0007 	.word	0xffff0007

0800305c <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800305c:	4a3b      	ldr	r2, [pc, #236]	; (800314c <RCCEx_PLL3_Config+0xf0>)
{
 800305e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003060:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	2b03      	cmp	r3, #3
 8003068:	d069      	beq.n	800313e <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800306a:	6813      	ldr	r3, [r2, #0]
 800306c:	4606      	mov	r6, r0
 800306e:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003070:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 8003072:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003076:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003078:	f7fd f990 	bl	800039c <HAL_GetTick>
 800307c:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800307e:	e004      	b.n	800308a <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003080:	f7fd f98c 	bl	800039c <HAL_GetTick>
 8003084:	1b43      	subs	r3, r0, r5
 8003086:	2b02      	cmp	r3, #2
 8003088:	d857      	bhi.n	800313a <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	009a      	lsls	r2, r3, #2
 800308e:	d4f7      	bmi.n	8003080 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003090:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003092:	6832      	ldr	r2, [r6, #0]
 8003094:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003098:	492d      	ldr	r1, [pc, #180]	; (8003150 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800309a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800309e:	62a3      	str	r3, [r4, #40]	; 0x28
 80030a0:	6875      	ldr	r5, [r6, #4]
 80030a2:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80030a6:	3d01      	subs	r5, #1
 80030a8:	1e50      	subs	r0, r2, #1
 80030aa:	3b01      	subs	r3, #1
 80030ac:	6932      	ldr	r2, [r6, #16]
 80030ae:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80030b2:	025b      	lsls	r3, r3, #9
 80030b4:	0400      	lsls	r0, r0, #16
 80030b6:	3a01      	subs	r2, #1
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80030be:	0612      	lsls	r2, r2, #24
 80030c0:	4303      	orrs	r3, r0
 80030c2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80030c6:	432b      	orrs	r3, r5
 80030c8:	4313      	orrs	r3, r2
 80030ca:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80030cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80030ce:	6972      	ldr	r2, [r6, #20]
 80030d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80030d4:	4313      	orrs	r3, r2
 80030d6:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80030d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80030da:	69b2      	ldr	r2, [r6, #24]
 80030dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030e0:	4313      	orrs	r3, r2
 80030e2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80030e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80030e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030ea:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80030ec:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80030ee:	69f3      	ldr	r3, [r6, #28]
 80030f0:	4011      	ands	r1, r2
 80030f2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80030f6:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80030f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80030fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fe:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003100:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8003102:	b1f7      	cbz	r7, 8003142 <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003104:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003106:	bf0c      	ite	eq
 8003108:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800310c:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8003110:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <RCCEx_PLL3_Config+0xf0>)
 8003114:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003116:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 8003118:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800311c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800311e:	f7fd f93d 	bl	800039c <HAL_GetTick>
 8003122:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003124:	e004      	b.n	8003130 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003126:	f7fd f939 	bl	800039c <HAL_GetTick>
 800312a:	1b00      	subs	r0, r0, r4
 800312c:	2802      	cmp	r0, #2
 800312e:	d804      	bhi.n	800313a <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003130:	682b      	ldr	r3, [r5, #0]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	d5f7      	bpl.n	8003126 <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8003136:	2000      	movs	r0, #0
}
 8003138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800313a:	2003      	movs	r0, #3
}
 800313c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800313e:	2001      	movs	r0, #1
}
 8003140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003142:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003146:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003148:	e7e3      	b.n	8003112 <RCCEx_PLL3_Config+0xb6>
 800314a:	bf00      	nop
 800314c:	58024400 	.word	0x58024400
 8003150:	ffff0007 	.word	0xffff0007

08003154 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003158:	6803      	ldr	r3, [r0, #0]
{
 800315a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800315c:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8003160:	d01a      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003162:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8003164:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003168:	f000 84b3 	beq.w	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800316c:	d821      	bhi.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 800316e:	2a00      	cmp	r2, #0
 8003170:	f000 8414 	beq.w	800399c <HAL_RCCEx_PeriphCLKConfig+0x848>
 8003174:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003178:	d11e      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800317a:	2102      	movs	r1, #2
 800317c:	3004      	adds	r0, #4
 800317e:	f7ff fef1 	bl	8002f64 <RCCEx_PLL2_Config>
 8003182:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8003184:	b93e      	cbnz	r6, 8003196 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003186:	6e62      	ldr	r2, [r4, #100]	; 0x64
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003188:	499e      	ldr	r1, [pc, #632]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800318a:	2600      	movs	r6, #0
 800318c:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800318e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003192:	431a      	orrs	r2, r3
 8003194:	650a      	str	r2, [r1, #80]	; 0x50
 8003196:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003198:	05dd      	lsls	r5, r3, #23
 800319a:	d511      	bpl.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai1ClockSelection)
 800319c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800319e:	2a04      	cmp	r2, #4
 80031a0:	f200 8545 	bhi.w	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xada>
 80031a4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80031a8:	04b604af 	.word	0x04b604af
 80031ac:	031c04c4 	.word	0x031c04c4
 80031b0:	031c      	.short	0x031c
    switch(PeriphClkInit->SpdifrxClockSelection)
 80031b2:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80031b6:	d0e7      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x34>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031b8:	05dd      	lsls	r5, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 80031ba:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031be:	d4ed      	bmi.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->Sai1ClockSelection)
 80031c0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80031c2:	0598      	lsls	r0, r3, #22
 80031c4:	d515      	bpl.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    switch(PeriphClkInit->Sai23ClockSelection)
 80031c6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80031c8:	2a80      	cmp	r2, #128	; 0x80
 80031ca:	f000 8494 	beq.w	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80031ce:	f200 80d2 	bhi.w	8003376 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80031d2:	2a00      	cmp	r2, #0
 80031d4:	f000 83dc 	beq.w	8003990 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80031d8:	2a40      	cmp	r2, #64	; 0x40
 80031da:	f040 80d3 	bne.w	8003384 <HAL_RCCEx_PeriphCLKConfig+0x230>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031de:	2100      	movs	r1, #0
 80031e0:	1d20      	adds	r0, r4, #4
 80031e2:	f7ff febf 	bl	8002f64 <RCCEx_PLL2_Config>
 80031e6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80031e8:	2d00      	cmp	r5, #0
 80031ea:	f000 83b2 	beq.w	8003952 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80031ee:	6823      	ldr	r3, [r4, #0]
 80031f0:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80031f2:	0559      	lsls	r1, r3, #21
 80031f4:	d518      	bpl.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    switch(PeriphClkInit->Sai4AClockSelection)
 80031f6:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 80031fa:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80031fe:	f000 848f 	beq.w	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003202:	f200 80c2 	bhi.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x236>
 8003206:	2a00      	cmp	r2, #0
 8003208:	f000 83bc 	beq.w	8003984 <HAL_RCCEx_PeriphCLKConfig+0x830>
 800320c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003210:	f040 80c3 	bne.w	800339a <HAL_RCCEx_PeriphCLKConfig+0x246>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003214:	2100      	movs	r1, #0
 8003216:	1d20      	adds	r0, r4, #4
 8003218:	f7ff fea4 	bl	8002f64 <RCCEx_PLL2_Config>
 800321c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800321e:	2d00      	cmp	r5, #0
 8003220:	f000 83a0 	beq.w	8003964 <HAL_RCCEx_PeriphCLKConfig+0x810>
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003228:	051a      	lsls	r2, r3, #20
 800322a:	d518      	bpl.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch(PeriphClkInit->Sai4BClockSelection)
 800322c:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8003230:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8003234:	f000 8483 	beq.w	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x9ea>
 8003238:	f200 80b2 	bhi.w	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800323c:	2a00      	cmp	r2, #0
 800323e:	f000 83b5 	beq.w	80039ac <HAL_RCCEx_PeriphCLKConfig+0x858>
 8003242:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8003246:	f040 80b3 	bne.w	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800324a:	2100      	movs	r1, #0
 800324c:	1d20      	adds	r0, r4, #4
 800324e:	f7ff fe89 	bl	8002f64 <RCCEx_PLL2_Config>
 8003252:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003254:	2d00      	cmp	r5, #0
 8003256:	f000 8369 	beq.w	800392c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 800325a:	6823      	ldr	r3, [r4, #0]
 800325c:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800325e:	019f      	lsls	r7, r3, #6
 8003260:	d519      	bpl.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x142>
    switch(PeriphClkInit->QspiClockSelection)
 8003262:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003264:	2a20      	cmp	r2, #32
 8003266:	f000 83d9 	beq.w	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 800326a:	f200 80a4 	bhi.w	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 800326e:	b13a      	cbz	r2, 8003280 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8003270:	2a10      	cmp	r2, #16
 8003272:	f040 80a3 	bne.w	80033bc <HAL_RCCEx_PeriphCLKConfig+0x268>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003276:	4a63      	ldr	r2, [pc, #396]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8003278:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800327a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800327e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003280:	2d00      	cmp	r5, #0
 8003282:	f040 83a8 	bne.w	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x882>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003286:	4a5f      	ldr	r2, [pc, #380]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8003288:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800328a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800328c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003290:	430b      	orrs	r3, r1
 8003292:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003294:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003296:	04d8      	lsls	r0, r3, #19
 8003298:	d517      	bpl.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x176>
    switch(PeriphClkInit->Spi123ClockSelection)
 800329a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800329c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80032a0:	f000 8421 	beq.w	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x992>
 80032a4:	f200 808d 	bhi.w	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80032a8:	2a00      	cmp	r2, #0
 80032aa:	f000 8365 	beq.w	8003978 <HAL_RCCEx_PeriphCLKConfig+0x824>
 80032ae:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80032b2:	f040 808e 	bne.w	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032b6:	2100      	movs	r1, #0
 80032b8:	1d20      	adds	r0, r4, #4
 80032ba:	f7ff fe53 	bl	8002f64 <RCCEx_PLL2_Config>
 80032be:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80032c0:	2d00      	cmp	r5, #0
 80032c2:	f000 833d 	beq.w	8003940 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80032ca:	0499      	lsls	r1, r3, #18
 80032cc:	d51a      	bpl.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    switch(PeriphClkInit->Spi45ClockSelection)
 80032ce:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80032d0:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80032d4:	f000 83e7 	beq.w	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80032d8:	d87e      	bhi.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80032da:	b142      	cbz	r2, 80032ee <HAL_RCCEx_PeriphCLKConfig+0x19a>
 80032dc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80032e0:	f040 8082 	bne.w	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x294>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032e4:	2101      	movs	r1, #1
 80032e6:	1d20      	adds	r0, r4, #4
 80032e8:	f7ff fe3c 	bl	8002f64 <RCCEx_PLL2_Config>
 80032ec:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80032ee:	2d00      	cmp	r5, #0
 80032f0:	f040 8374 	bne.w	80039dc <HAL_RCCEx_PeriphCLKConfig+0x888>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80032f4:	4a43      	ldr	r2, [pc, #268]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80032f6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80032f8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80032fa:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80032fe:	430b      	orrs	r3, r1
 8003300:	6513      	str	r3, [r2, #80]	; 0x50
 8003302:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003304:	045a      	lsls	r2, r3, #17
 8003306:	d51b      	bpl.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->Spi6ClockSelection)
 8003308:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 800330c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8003310:	f000 8398 	beq.w	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003314:	d86b      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003316:	b13a      	cbz	r2, 8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003318:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800331c:	d16f      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800331e:	2101      	movs	r1, #1
 8003320:	1d20      	adds	r0, r4, #4
 8003322:	f7ff fe1f 	bl	8002f64 <RCCEx_PLL2_Config>
 8003326:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003328:	2d00      	cmp	r5, #0
 800332a:	f040 834e 	bne.w	80039ca <HAL_RCCEx_PeriphCLKConfig+0x876>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800332e:	4a35      	ldr	r2, [pc, #212]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8003330:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8003334:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003336:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800333a:	430b      	orrs	r3, r1
 800333c:	6593      	str	r3, [r2, #88]	; 0x58
 800333e:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003340:	041f      	lsls	r7, r3, #16
 8003342:	d50d      	bpl.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->FdcanClockSelection)
 8003344:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003346:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800334a:	f000 8399 	beq.w	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x92c>
 800334e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8003352:	f000 824c 	beq.w	80037ee <HAL_RCCEx_PeriphCLKConfig+0x69a>
 8003356:	2a00      	cmp	r2, #0
 8003358:	f000 824e 	beq.w	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 800335c:	2601      	movs	r6, #1
 800335e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003360:	01d8      	lsls	r0, r3, #7
 8003362:	d553      	bpl.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    switch(PeriphClkInit->FmcClockSelection)
 8003364:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003366:	2a03      	cmp	r2, #3
 8003368:	d84e      	bhi.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800336a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800336e:	01e1      	.short	0x01e1
 8003370:	01dc0360 	.word	0x01dc0360
 8003374:	01e1      	.short	0x01e1
    switch(PeriphClkInit->Sai23ClockSelection)
 8003376:	2ac0      	cmp	r2, #192	; 0xc0
 8003378:	f43f af36 	beq.w	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x94>
 800337c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003380:	f43f af32 	beq.w	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8003384:	2601      	movs	r6, #1
 8003386:	4635      	mov	r5, r6
 8003388:	e733      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    switch(PeriphClkInit->Sai4AClockSelection)
 800338a:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800338e:	f43f af46 	beq.w	800321e <HAL_RCCEx_PeriphCLKConfig+0xca>
 8003392:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8003396:	f43f af42 	beq.w	800321e <HAL_RCCEx_PeriphCLKConfig+0xca>
 800339a:	2601      	movs	r6, #1
 800339c:	4635      	mov	r5, r6
 800339e:	e743      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    switch(PeriphClkInit->Sai4BClockSelection)
 80033a0:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 80033a4:	f43f af56 	beq.w	8003254 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80033a8:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80033ac:	f43f af52 	beq.w	8003254 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80033b0:	2601      	movs	r6, #1
 80033b2:	4635      	mov	r5, r6
 80033b4:	e753      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch(PeriphClkInit->QspiClockSelection)
 80033b6:	2a30      	cmp	r2, #48	; 0x30
 80033b8:	f43f af62 	beq.w	8003280 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80033bc:	2601      	movs	r6, #1
 80033be:	4635      	mov	r5, r6
 80033c0:	e769      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x142>
    switch(PeriphClkInit->Spi123ClockSelection)
 80033c2:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80033c6:	f43f af7b 	beq.w	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80033ca:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80033ce:	f43f af77 	beq.w	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80033d2:	2601      	movs	r6, #1
 80033d4:	4635      	mov	r5, r6
 80033d6:	e778      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x176>
    switch(PeriphClkInit->Spi45ClockSelection)
 80033d8:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80033dc:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80033e0:	d085      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x19a>
 80033e2:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80033e6:	d082      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x19a>
 80033e8:	2601      	movs	r6, #1
 80033ea:	4635      	mov	r5, r6
 80033ec:	e78a      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    switch(PeriphClkInit->Spi6ClockSelection)
 80033ee:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80033f2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80033f6:	d097      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80033f8:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80033fc:	d094      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80033fe:	2601      	movs	r6, #1
 8003400:	4635      	mov	r5, r6
 8003402:	e79d      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003404:	58024400 	.word	0x58024400
    switch(PeriphClkInit->FmcClockSelection)
 8003408:	2601      	movs	r6, #1
 800340a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800340c:	0259      	lsls	r1, r3, #9
 800340e:	f100 819d 	bmi.w	800374c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003412:	07df      	lsls	r7, r3, #31
 8003414:	d52f      	bpl.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x322>
    switch(PeriphClkInit->Usart16ClockSelection)
 8003416:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8003418:	2a28      	cmp	r2, #40	; 0x28
 800341a:	d82a      	bhi.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 800341c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003420:	002901fe 	.word	0x002901fe
 8003424:	00290029 	.word	0x00290029
 8003428:	00290029 	.word	0x00290029
 800342c:	00290029 	.word	0x00290029
 8003430:	002903a9 	.word	0x002903a9
 8003434:	00290029 	.word	0x00290029
 8003438:	00290029 	.word	0x00290029
 800343c:	00290029 	.word	0x00290029
 8003440:	002901f8 	.word	0x002901f8
 8003444:	00290029 	.word	0x00290029
 8003448:	00290029 	.word	0x00290029
 800344c:	00290029 	.word	0x00290029
 8003450:	002901fe 	.word	0x002901fe
 8003454:	00290029 	.word	0x00290029
 8003458:	00290029 	.word	0x00290029
 800345c:	00290029 	.word	0x00290029
 8003460:	002901fe 	.word	0x002901fe
 8003464:	00290029 	.word	0x00290029
 8003468:	00290029 	.word	0x00290029
 800346c:	00290029 	.word	0x00290029
 8003470:	01fe      	.short	0x01fe
 8003472:	2601      	movs	r6, #1
 8003474:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003476:	0798      	lsls	r0, r3, #30
 8003478:	d50c      	bpl.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x340>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800347a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800347c:	2a05      	cmp	r2, #5
 800347e:	d807      	bhi.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003480:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003484:	03650145 	.word	0x03650145
 8003488:	0145013f 	.word	0x0145013f
 800348c:	01450145 	.word	0x01450145
 8003490:	2601      	movs	r6, #1
 8003492:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003494:	0759      	lsls	r1, r3, #29
 8003496:	d50d      	bpl.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003498:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800349c:	2a05      	cmp	r2, #5
 800349e:	d807      	bhi.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80034a0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80034a4:	035e0122 	.word	0x035e0122
 80034a8:	0122011c 	.word	0x0122011c
 80034ac:	01220122 	.word	0x01220122
 80034b0:	2601      	movs	r6, #1
 80034b2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034b4:	069a      	lsls	r2, r3, #26
 80034b6:	d51d      	bpl.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80034b8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80034bc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80034c0:	f000 82e7 	beq.w	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80034c4:	f200 81b6 	bhi.w	8003834 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 80034c8:	b142      	cbz	r2, 80034dc <HAL_RCCEx_PeriphCLKConfig+0x388>
 80034ca:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80034ce:	f040 81bb 	bne.w	8003848 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034d2:	2100      	movs	r1, #0
 80034d4:	1d20      	adds	r0, r4, #4
 80034d6:	f7ff fd45 	bl	8002f64 <RCCEx_PLL2_Config>
 80034da:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80034dc:	2d00      	cmp	r5, #0
 80034de:	f040 8286 	bne.w	80039ee <HAL_RCCEx_PeriphCLKConfig+0x89a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034e2:	4a9f      	ldr	r2, [pc, #636]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x60c>)
 80034e4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80034e8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80034ea:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80034ee:	430b      	orrs	r3, r1
 80034f0:	6553      	str	r3, [r2, #84]	; 0x54
 80034f2:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80034f4:	065f      	lsls	r7, r3, #25
 80034f6:	d51d      	bpl.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80034f8:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80034fc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003500:	f000 82b4 	beq.w	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x918>
 8003504:	f200 81c2 	bhi.w	800388c <HAL_RCCEx_PeriphCLKConfig+0x738>
 8003508:	b142      	cbz	r2, 800351c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 800350a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800350e:	f040 81c7 	bne.w	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003512:	2100      	movs	r1, #0
 8003514:	1d20      	adds	r0, r4, #4
 8003516:	f7ff fd25 	bl	8002f64 <RCCEx_PLL2_Config>
 800351a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800351c:	2d00      	cmp	r5, #0
 800351e:	f040 8260 	bne.w	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x88e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003522:	4a8f      	ldr	r2, [pc, #572]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x60c>)
 8003524:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8003528:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800352a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800352e:	430b      	orrs	r3, r1
 8003530:	6593      	str	r3, [r2, #88]	; 0x58
 8003532:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003534:	0618      	lsls	r0, r3, #24
 8003536:	d51d      	bpl.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x420>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003538:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800353c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003540:	f000 828a 	beq.w	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x904>
 8003544:	f200 8195 	bhi.w	8003872 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8003548:	b142      	cbz	r2, 800355c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800354a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800354e:	f040 819a 	bne.w	8003886 <HAL_RCCEx_PeriphCLKConfig+0x732>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003552:	2100      	movs	r1, #0
 8003554:	1d20      	adds	r0, r4, #4
 8003556:	f7ff fd05 	bl	8002f64 <RCCEx_PLL2_Config>
 800355a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800355c:	2d00      	cmp	r5, #0
 800355e:	f040 8243 	bne.w	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x894>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003562:	4a7f      	ldr	r2, [pc, #508]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x60c>)
 8003564:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8003568:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800356a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800356e:	430b      	orrs	r3, r1
 8003570:	6593      	str	r3, [r2, #88]	; 0x58
 8003572:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003574:	0719      	lsls	r1, r3, #28
 8003576:	d50c      	bpl.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x43e>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003578:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800357c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003580:	f000 829b 	beq.w	8003aba <HAL_RCCEx_PeriphCLKConfig+0x966>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003584:	4976      	ldr	r1, [pc, #472]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x60c>)
 8003586:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8003588:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800358c:	4313      	orrs	r3, r2
 800358e:	654b      	str	r3, [r1, #84]	; 0x54
 8003590:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003592:	06da      	lsls	r2, r3, #27
 8003594:	d50c      	bpl.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003596:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800359a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800359e:	f000 8318 	beq.w	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035a2:	496f      	ldr	r1, [pc, #444]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x60c>)
 80035a4:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 80035a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035aa:	4313      	orrs	r3, r2
 80035ac:	658b      	str	r3, [r1, #88]	; 0x58
 80035ae:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035b0:	031f      	lsls	r7, r3, #12
 80035b2:	d50e      	bpl.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
    switch(PeriphClkInit->AdcClockSelection)
 80035b4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80035b8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80035bc:	f000 8189 	beq.w	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80035c0:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80035c4:	f000 818b 	beq.w	80038de <HAL_RCCEx_PeriphCLKConfig+0x78a>
 80035c8:	2900      	cmp	r1, #0
 80035ca:	f000 82f1 	beq.w	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xa5c>
 80035ce:	2601      	movs	r6, #1
 80035d0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035d2:	0358      	lsls	r0, r3, #13
 80035d4:	d50f      	bpl.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    switch(PeriphClkInit->UsbClockSelection)
 80035d6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80035da:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80035de:	f000 8162 	beq.w	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x752>
 80035e2:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80035e6:	f000 8164 	beq.w	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x75e>
 80035ea:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80035ee:	f000 82e7 	beq.w	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 80035f2:	2601      	movs	r6, #1
 80035f4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80035f6:	03d9      	lsls	r1, r3, #15
 80035f8:	d517      	bpl.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x4d6>
    switch(PeriphClkInit->SdmmcClockSelection)
 80035fa:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80035fc:	2a00      	cmp	r2, #0
 80035fe:	f000 82c5 	beq.w	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xa38>
 8003602:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003606:	f040 8185 	bne.w	8003914 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800360a:	2102      	movs	r1, #2
 800360c:	1d20      	adds	r0, r4, #4
 800360e:	f7ff fca9 	bl	8002f64 <RCCEx_PLL2_Config>
 8003612:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003614:	2d00      	cmp	r5, #0
 8003616:	f040 81fe 	bne.w	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800361a:	4a51      	ldr	r2, [pc, #324]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x60c>)
 800361c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800361e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003624:	430b      	orrs	r3, r1
 8003626:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003628:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800362a:	009a      	lsls	r2, r3, #2
 800362c:	f100 8167 	bmi.w	80038fe <HAL_RCCEx_PeriphCLKConfig+0x7aa>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003630:	039f      	lsls	r7, r3, #14
 8003632:	d444      	bmi.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8003634:	1e30      	subs	r0, r6, #0
 8003636:	bf18      	it	ne
 8003638:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800363a:	02de      	lsls	r6, r3, #11
 800363c:	d507      	bpl.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800363e:	4a48      	ldr	r2, [pc, #288]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x60c>)
 8003640:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003642:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003644:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003648:	430b      	orrs	r3, r1
 800364a:	6513      	str	r3, [r2, #80]	; 0x50
 800364c:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800364e:	00dd      	lsls	r5, r3, #3
 8003650:	d508      	bpl.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x510>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003652:	4a43      	ldr	r2, [pc, #268]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x60c>)
 8003654:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8003658:	6913      	ldr	r3, [r2, #16]
 800365a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800365e:	430b      	orrs	r3, r1
 8003660:	6113      	str	r3, [r2, #16]
 8003662:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003664:	0299      	lsls	r1, r3, #10
 8003666:	d507      	bpl.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x524>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003668:	4a3d      	ldr	r2, [pc, #244]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x60c>)
 800366a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800366c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800366e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003672:	430b      	orrs	r3, r1
 8003674:	6513      	str	r3, [r2, #80]	; 0x50
 8003676:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003678:	005a      	lsls	r2, r3, #1
 800367a:	d50a      	bpl.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x53e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800367c:	4b38      	ldr	r3, [pc, #224]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x60c>)
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003684:	611a      	str	r2, [r3, #16]
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 800368c:	430a      	orrs	r2, r1
 800368e:	611a      	str	r2, [r3, #16]
 8003690:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003692:	2b00      	cmp	r3, #0
 8003694:	da07      	bge.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x552>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003696:	4a32      	ldr	r2, [pc, #200]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x60c>)
 8003698:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800369a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800369c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80036a0:	430b      	orrs	r3, r1
 80036a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036a4:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036a6:	021b      	lsls	r3, r3, #8
 80036a8:	d507      	bpl.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x566>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036aa:	4a2d      	ldr	r2, [pc, #180]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x60c>)
 80036ac:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80036b0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80036b2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80036b6:	430b      	orrs	r3, r1
 80036b8:	6553      	str	r3, [r2, #84]	; 0x54
}
 80036ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 80036be:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80036c0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80036c4:	f000 826b 	beq.w	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xa4a>
 80036c8:	f240 80c1 	bls.w	800384e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 80036cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036d0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80036d4:	f000 80be 	beq.w	8003854 <HAL_RCCEx_PeriphCLKConfig+0x700>
    if(ret == HAL_OK)
 80036d8:	2001      	movs	r0, #1
 80036da:	e7ae      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036dc:	2101      	movs	r1, #1
 80036de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80036e2:	f7ff fcbb 	bl	800305c <RCCEx_PLL3_Config>
 80036e6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80036e8:	2d00      	cmp	r5, #0
 80036ea:	f040 816b 	bne.w	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x870>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036ee:	4a1c      	ldr	r2, [pc, #112]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x60c>)
 80036f0:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80036f4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80036f6:	f023 0307 	bic.w	r3, r3, #7
 80036fa:	430b      	orrs	r3, r1
 80036fc:	6593      	str	r3, [r2, #88]	; 0x58
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	e6d8      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003702:	2101      	movs	r1, #1
 8003704:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003708:	f7ff fca8 	bl	800305c <RCCEx_PLL3_Config>
 800370c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800370e:	2d00      	cmp	r5, #0
 8003710:	f040 815e 	bne.w	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003714:	4a12      	ldr	r2, [pc, #72]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x60c>)
 8003716:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003718:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800371a:	f023 0307 	bic.w	r3, r3, #7
 800371e:	430b      	orrs	r3, r1
 8003720:	6553      	str	r3, [r2, #84]	; 0x54
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	e6b6      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x340>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003726:	2102      	movs	r1, #2
 8003728:	1d20      	adds	r0, r4, #4
 800372a:	f7ff fc1b 	bl	8002f64 <RCCEx_PLL2_Config>
 800372e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003730:	2d00      	cmp	r5, #0
 8003732:	f040 8141 	bne.w	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x864>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003736:	4a0a      	ldr	r2, [pc, #40]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x60c>)
 8003738:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800373a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800373c:	f023 0303 	bic.w	r3, r3, #3
 8003740:	430b      	orrs	r3, r1
 8003742:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003744:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003746:	0259      	lsls	r1, r3, #9
 8003748:	f57f ae63 	bpl.w	8003412 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800374c:	4b05      	ldr	r3, [pc, #20]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x610>)
 800374e:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003750:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003756:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003758:	f7fc fe20 	bl	800039c <HAL_GetTick>
 800375c:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800375e:	e009      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x620>
 8003760:	58024400 	.word	0x58024400
 8003764:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003768:	f7fc fe18 	bl	800039c <HAL_GetTick>
 800376c:	1bc0      	subs	r0, r0, r7
 800376e:	2864      	cmp	r0, #100	; 0x64
 8003770:	f200 8208 	bhi.w	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003774:	f8d8 3000 	ldr.w	r3, [r8]
 8003778:	05da      	lsls	r2, r3, #23
 800377a:	d5f5      	bpl.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x614>
    if(ret == HAL_OK)
 800377c:	2d00      	cmp	r5, #0
 800377e:	f040 8252 	bne.w	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003782:	4baf      	ldr	r3, [pc, #700]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003784:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8003788:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800378a:	4051      	eors	r1, r2
 800378c:	f411 7f40 	tst.w	r1, #768	; 0x300
 8003790:	d00d      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x65a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003792:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8003794:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003796:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800379a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800379e:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037a0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80037a2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80037a6:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80037a8:	671a      	str	r2, [r3, #112]	; 0x70
 80037aa:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80037ae:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80037b2:	f000 821a 	beq.w	8003bea <HAL_RCCEx_PeriphCLKConfig+0xa96>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037b6:	f402 7340 	and.w	r3, r2, #768	; 0x300
 80037ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037be:	f000 8228 	beq.w	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xabe>
 80037c2:	4a9f      	ldr	r2, [pc, #636]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80037c4:	6913      	ldr	r3, [r2, #16]
 80037c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80037ca:	6113      	str	r3, [r2, #16]
 80037cc:	4a9c      	ldr	r2, [pc, #624]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80037ce:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80037d2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80037d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d8:	430b      	orrs	r3, r1
 80037da:	6713      	str	r3, [r2, #112]	; 0x70
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	e618      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Sai1ClockSelection)
 80037e0:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 80037e2:	2d00      	cmp	r5, #0
 80037e4:	f000 8099 	beq.w	800391a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	462e      	mov	r6, r5
 80037ec:	e4e9      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037ee:	2101      	movs	r1, #1
 80037f0:	1d20      	adds	r0, r4, #4
 80037f2:	f7ff fbb7 	bl	8002f64 <RCCEx_PLL2_Config>
 80037f6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80037f8:	2d00      	cmp	r5, #0
 80037fa:	f040 80e0 	bne.w	80039be <HAL_RCCEx_PeriphCLKConfig+0x86a>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037fe:	4a90      	ldr	r2, [pc, #576]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003800:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003802:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003804:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003808:	430b      	orrs	r3, r1
 800380a:	6513      	str	r3, [r2, #80]	; 0x50
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	e5a7      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003810:	2101      	movs	r1, #1
 8003812:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003816:	f7ff fc21 	bl	800305c <RCCEx_PLL3_Config>
 800381a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800381c:	2d00      	cmp	r5, #0
 800381e:	f040 80f5 	bne.w	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003822:	4a87      	ldr	r2, [pc, #540]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003824:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003826:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003828:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800382c:	430b      	orrs	r3, r1
 800382e:	6553      	str	r3, [r2, #84]	; 0x54
 8003830:	6823      	ldr	r3, [r4, #0]
 8003832:	e620      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x322>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003834:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8003838:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800383c:	f43f ae4e 	beq.w	80034dc <HAL_RCCEx_PeriphCLKConfig+0x388>
 8003840:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8003844:	f43f ae4a 	beq.w	80034dc <HAL_RCCEx_PeriphCLKConfig+0x388>
 8003848:	2601      	movs	r6, #1
 800384a:	4635      	mov	r5, r6
 800384c:	e652      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
    switch(PeriphClkInit->RngClockSelection)
 800384e:	2a00      	cmp	r2, #0
 8003850:	f47f af42 	bne.w	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
    if(ret == HAL_OK)
 8003854:	2d00      	cmp	r5, #0
 8003856:	f040 80dc 	bne.w	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800385a:	4a79      	ldr	r2, [pc, #484]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800385c:	1e30      	subs	r0, r6, #0
 800385e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003860:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003862:	bf18      	it	ne
 8003864:	2001      	movne	r0, #1
 8003866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386a:	430b      	orrs	r3, r1
 800386c:	6553      	str	r3, [r2, #84]	; 0x54
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	e6e3      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003872:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8003876:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800387a:	f43f ae6f 	beq.w	800355c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800387e:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8003882:	f43f ae6b 	beq.w	800355c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003886:	2601      	movs	r6, #1
 8003888:	4635      	mov	r5, r6
 800388a:	e673      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x420>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800388c:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8003890:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003894:	f43f ae42 	beq.w	800351c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8003898:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800389c:	f43f ae3e 	beq.w	800351c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80038a0:	2601      	movs	r6, #1
 80038a2:	4635      	mov	r5, r6
 80038a4:	e646      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038a6:	2101      	movs	r1, #1
 80038a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80038ac:	f7ff fbd6 	bl	800305c <RCCEx_PLL3_Config>
 80038b0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80038b2:	2d00      	cmp	r5, #0
 80038b4:	f040 80a4 	bne.w	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038b8:	4a61      	ldr	r2, [pc, #388]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80038ba:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80038be:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80038c0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80038c4:	430b      	orrs	r3, r1
 80038c6:	6553      	str	r3, [r2, #84]	; 0x54
 80038c8:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80038ca:	03d9      	lsls	r1, r3, #15
 80038cc:	f57f aead 	bpl.w	800362a <HAL_RCCEx_PeriphCLKConfig+0x4d6>
 80038d0:	e693      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80038d2:	2102      	movs	r1, #2
 80038d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80038d8:	f7ff fbc0 	bl	800305c <RCCEx_PLL3_Config>
 80038dc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80038de:	2d00      	cmp	r5, #0
 80038e0:	f040 8088 	bne.w	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038e4:	4a56      	ldr	r2, [pc, #344]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80038e6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80038ea:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80038ec:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80038f0:	430b      	orrs	r3, r1
 80038f2:	6593      	str	r3, [r2, #88]	; 0x58
 80038f4:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038f6:	0358      	lsls	r0, r3, #13
 80038f8:	f57f ae7d 	bpl.w	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 80038fc:	e66b      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x482>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80038fe:	2102      	movs	r1, #2
 8003900:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003904:	f7ff fbaa 	bl	800305c <RCCEx_PLL3_Config>
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	2800      	cmp	r0, #0
 800390c:	f43f ae90 	beq.w	8003630 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
      status=HAL_ERROR;
 8003910:	2601      	movs	r6, #1
 8003912:	e68d      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    switch(PeriphClkInit->SdmmcClockSelection)
 8003914:	2601      	movs	r6, #1
 8003916:	4635      	mov	r5, r6
 8003918:	e687      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x4d6>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800391a:	4a49      	ldr	r2, [pc, #292]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800391c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800391e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003920:	f023 0307 	bic.w	r3, r3, #7
 8003924:	430b      	orrs	r3, r1
 8003926:	6513      	str	r3, [r2, #80]	; 0x50
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	e44a      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800392c:	4a44      	ldr	r2, [pc, #272]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800392e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8003932:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003934:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003938:	430b      	orrs	r3, r1
 800393a:	6593      	str	r3, [r2, #88]	; 0x58
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	e48e      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x10a>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003940:	4a3f      	ldr	r2, [pc, #252]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003942:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003944:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800394a:	430b      	orrs	r3, r1
 800394c:	6513      	str	r3, [r2, #80]	; 0x50
 800394e:	6823      	ldr	r3, [r4, #0]
 8003950:	e4bb      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x176>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003952:	4a3b      	ldr	r2, [pc, #236]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003954:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003956:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003958:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800395c:	430b      	orrs	r3, r1
 800395e:	6513      	str	r3, [r2, #80]	; 0x50
 8003960:	6823      	ldr	r3, [r4, #0]
 8003962:	e446      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003964:	4a36      	ldr	r2, [pc, #216]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003966:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800396a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800396c:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8003970:	430b      	orrs	r3, r1
 8003972:	6593      	str	r3, [r2, #88]	; 0x58
 8003974:	6823      	ldr	r3, [r4, #0]
 8003976:	e457      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003978:	4a31      	ldr	r2, [pc, #196]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800397a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800397c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003980:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003982:	e49d      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003984:	4a2e      	ldr	r2, [pc, #184]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003986:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800398c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800398e:	e446      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003990:	4a2b      	ldr	r2, [pc, #172]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003992:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003998:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800399a:	e425      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x94>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800399c:	4a28      	ldr	r2, [pc, #160]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800399e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80039a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80039a6:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80039a8:	f7ff bbee 	b.w	8003188 <HAL_RCCEx_PeriphCLKConfig+0x34>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ac:	4a24      	ldr	r2, [pc, #144]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80039ae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80039b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80039b6:	e44d      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80039b8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80039ba:	462e      	mov	r6, r5
 80039bc:	e526      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80039be:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80039c0:	462e      	mov	r6, r5
 80039c2:	e4cd      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 80039c4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80039c6:	462e      	mov	r6, r5
 80039c8:	e574      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80039ca:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80039cc:	462e      	mov	r6, r5
 80039ce:	e4b7      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80039d0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80039d2:	462e      	mov	r6, r5
 80039d4:	e55e      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x340>
 80039d6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80039d8:	462e      	mov	r6, r5
 80039da:	e45c      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80039dc:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80039de:	462e      	mov	r6, r5
 80039e0:	e490      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 80039e2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80039e4:	462e      	mov	r6, r5
 80039e6:	e5a5      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80039e8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80039ea:	462e      	mov	r6, r5
 80039ec:	e5c2      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80039ee:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80039f0:	462e      	mov	r6, r5
 80039f2:	e57f      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 80039f4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80039f6:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039f8:	0358      	lsls	r0, r3, #13
 80039fa:	f57f adfc 	bpl.w	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 80039fe:	e5ea      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003a00:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003a02:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003a04:	03d9      	lsls	r1, r3, #15
 8003a06:	f57f ae10 	bpl.w	800362a <HAL_RCCEx_PeriphCLKConfig+0x4d6>
 8003a0a:	e5f6      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003a0c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003a0e:	462e      	mov	r6, r5
 8003a10:	e531      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	e660      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003a16:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003a18:	462e      	mov	r6, r5
 8003a1a:	e606      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x4d6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a1c:	2102      	movs	r1, #2
 8003a1e:	1d20      	adds	r0, r4, #4
 8003a20:	f7ff faa0 	bl	8002f64 <RCCEx_PLL2_Config>
 8003a24:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003a26:	2d00      	cmp	r5, #0
 8003a28:	f43f ac2d 	beq.w	8003286 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8003a2c:	e7d3      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x882>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a2e:	4a04      	ldr	r2, [pc, #16]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003a30:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a36:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003a38:	2d00      	cmp	r5, #0
 8003a3a:	f43f ae7c 	beq.w	8003736 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
 8003a3e:	e7bb      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x864>
 8003a40:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a44:	2101      	movs	r1, #1
 8003a46:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003a4a:	f7ff fb07 	bl	800305c <RCCEx_PLL3_Config>
 8003a4e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003a50:	2d00      	cmp	r5, #0
 8003a52:	f43f ac6c 	beq.w	800332e <HAL_RCCEx_PeriphCLKConfig+0x1da>
 8003a56:	e7b8      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x876>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a58:	2102      	movs	r1, #2
 8003a5a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003a5e:	f7ff fafd 	bl	800305c <RCCEx_PLL3_Config>
 8003a62:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003a64:	2d00      	cmp	r5, #0
 8003a66:	f43f ad7c 	beq.w	8003562 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003a6a:	e7bd      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x894>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a6c:	2102      	movs	r1, #2
 8003a6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003a72:	f7ff faf3 	bl	800305c <RCCEx_PLL3_Config>
 8003a76:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003a78:	2d00      	cmp	r5, #0
 8003a7a:	f43f ad52 	beq.w	8003522 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003a7e:	e7b0      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x88e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a80:	4a6c      	ldr	r2, [pc, #432]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0xae0>)
 8003a82:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a88:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003a8a:	2d00      	cmp	r5, #0
 8003a8c:	f43f aeb7 	beq.w	80037fe <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8003a90:	e795      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x86a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a92:	2102      	movs	r1, #2
 8003a94:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003a98:	f7ff fae0 	bl	800305c <RCCEx_PLL3_Config>
 8003a9c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003a9e:	2d00      	cmp	r5, #0
 8003aa0:	f43f ad1f 	beq.w	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8003aa4:	e7a3      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x89a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003aac:	f7ff fad6 	bl	800305c <RCCEx_PLL3_Config>
 8003ab0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003ab2:	2d00      	cmp	r5, #0
 8003ab4:	f43f ac1e 	beq.w	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8003ab8:	e790      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x888>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003aba:	2102      	movs	r1, #2
 8003abc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ac0:	f7ff facc 	bl	800305c <RCCEx_PLL3_Config>
 8003ac4:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	f43f ad5b 	beq.w	8003584 <HAL_RCCEx_PeriphCLKConfig+0x430>
          status = HAL_ERROR;
 8003ace:	2601      	movs	r6, #1
 8003ad0:	e558      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x430>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	3024      	adds	r0, #36	; 0x24
 8003ad6:	f7ff fac1 	bl	800305c <RCCEx_PLL3_Config>
 8003ada:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8003adc:	2e00      	cmp	r6, #0
 8003ade:	f43f ab52 	beq.w	8003186 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003ae2:	f7ff bb58 	b.w	8003196 <HAL_RCCEx_PeriphCLKConfig+0x42>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003aec:	f7ff fab6 	bl	800305c <RCCEx_PLL3_Config>
 8003af0:	4605      	mov	r5, r0
      break;
 8003af2:	f7ff bbe5 	b.w	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003af6:	2100      	movs	r1, #0
 8003af8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003afc:	f7ff faae 	bl	800305c <RCCEx_PLL3_Config>
 8003b00:	4605      	mov	r5, r0
      break;
 8003b02:	f7ff bb71 	b.w	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x94>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b06:	4a4b      	ldr	r2, [pc, #300]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0xae0>)
      break;
 8003b08:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b0a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b10:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003b12:	e666      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b14:	2100      	movs	r1, #0
 8003b16:	1d20      	adds	r0, r4, #4
 8003b18:	f7ff fa24 	bl	8002f64 <RCCEx_PLL2_Config>
 8003b1c:	4605      	mov	r5, r0
      break;
 8003b1e:	e660      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b20:	2100      	movs	r1, #0
 8003b22:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003b26:	f7ff fa99 	bl	800305c <RCCEx_PLL3_Config>
 8003b2a:	4605      	mov	r5, r0
      break;
 8003b2c:	f7ff bb77 	b.w	800321e <HAL_RCCEx_PeriphCLKConfig+0xca>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b30:	2100      	movs	r1, #0
 8003b32:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003b36:	f7ff fa91 	bl	800305c <RCCEx_PLL3_Config>
 8003b3a:	4605      	mov	r5, r0
      break;
 8003b3c:	e651      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b3e:	2100      	movs	r1, #0
 8003b40:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003b44:	f7ff fa8a 	bl	800305c <RCCEx_PLL3_Config>
 8003b48:	4605      	mov	r5, r0
      break;
 8003b4a:	f7ff bb83 	b.w	8003254 <HAL_RCCEx_PeriphCLKConfig+0x100>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b4e:	2101      	movs	r1, #1
 8003b50:	1d20      	adds	r0, r4, #4
 8003b52:	f7ff fa07 	bl	8002f64 <RCCEx_PLL2_Config>
 8003b56:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003b58:	2d00      	cmp	r5, #0
 8003b5a:	f43f addb 	beq.w	8003714 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003b5e:	e737      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b60:	2101      	movs	r1, #1
 8003b62:	1d20      	adds	r0, r4, #4
 8003b64:	f7ff f9fe 	bl	8002f64 <RCCEx_PLL2_Config>
 8003b68:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003b6a:	2d00      	cmp	r5, #0
 8003b6c:	f43f adbf 	beq.w	80036ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003b70:	e728      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x870>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b72:	2101      	movs	r1, #1
 8003b74:	1d20      	adds	r0, r4, #4
 8003b76:	f7ff f9f5 	bl	8002f64 <RCCEx_PLL2_Config>
 8003b7a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003b7c:	2d00      	cmp	r5, #0
 8003b7e:	f43f ae50 	beq.w	8003822 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
 8003b82:	e743      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
            ret = HAL_TIMEOUT;
 8003b84:	2603      	movs	r6, #3
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	4635      	mov	r5, r6
 8003b8a:	e442      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b8c:	4a29      	ldr	r2, [pc, #164]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0xae0>)
 8003b8e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b94:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003b96:	2d00      	cmp	r5, #0
 8003b98:	f43f ad3f 	beq.w	800361a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003b9c:	e73b      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b9e:	4a25      	ldr	r2, [pc, #148]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0xae0>)
 8003ba0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003ba8:	2d00      	cmp	r5, #0
 8003baa:	f43f ae56 	beq.w	800385a <HAL_RCCEx_PeriphCLKConfig+0x706>
 8003bae:	e730      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x8be>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bb0:	1d20      	adds	r0, r4, #4
 8003bb2:	f7ff f9d7 	bl	8002f64 <RCCEx_PLL2_Config>
 8003bb6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003bb8:	2d00      	cmp	r5, #0
 8003bba:	f43f ae93 	beq.w	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x790>
 8003bbe:	e719      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bc0:	4a1c      	ldr	r2, [pc, #112]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0xae0>)
 8003bc2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003bca:	2d00      	cmp	r5, #0
 8003bcc:	f43f ae74 	beq.w	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8003bd0:	e716      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003bd2:	2102      	movs	r1, #2
 8003bd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003bd8:	f7ff fa40 	bl	800305c <RCCEx_PLL3_Config>
 8003bdc:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8003be0:	2800      	cmp	r0, #0
 8003be2:	f43f acde 	beq.w	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
        status = HAL_ERROR;
 8003be6:	2601      	movs	r6, #1
 8003be8:	e4db      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
        tickstart = HAL_GetTick();
 8003bea:	f7fc fbd7 	bl	800039c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bee:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8003c34 <HAL_RCCEx_PeriphCLKConfig+0xae0>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf2:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003bf6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bf8:	e004      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xab0>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfa:	f7fc fbcf 	bl	800039c <HAL_GetTick>
 8003bfe:	1bc0      	subs	r0, r0, r7
 8003c00:	4548      	cmp	r0, r9
 8003c02:	d8bf      	bhi.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xa30>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c04:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8003c08:	079b      	lsls	r3, r3, #30
 8003c0a:	d5f6      	bpl.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xaa6>
 8003c0c:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8003c10:	e5d1      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c12:	4808      	ldr	r0, [pc, #32]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0xae0>)
 8003c14:	4b08      	ldr	r3, [pc, #32]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0xae4>)
 8003c16:	6901      	ldr	r1, [r0, #16]
 8003c18:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 8003c1c:	f421 527c 	bic.w	r2, r1, #16128	; 0x3f00
 8003c20:	4313      	orrs	r3, r2
 8003c22:	6103      	str	r3, [r0, #16]
 8003c24:	e5d2      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003c26:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003c28:	462e      	mov	r6, r5
 8003c2a:	f7ff bbf2 	b.w	8003412 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003c2e:	2601      	movs	r6, #1
 8003c30:	f7ff bac6 	b.w	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003c34:	58024400 	.word	0x58024400
 8003c38:	00ffffcf 	.word	0x00ffffcf

08003c3c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c3c:	4b4f      	ldr	r3, [pc, #316]	; (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8003c3e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c40:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003c42:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003c44:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 8003c46:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003c4a:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003c4e:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 8003c50:	d05c      	beq.n	8003d0c <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003c52:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003c56:	f3c4 1400 	ubfx	r4, r4, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c5a:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003c5e:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8003c62:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003c64:	ee07 4a90 	vmov	s15, r4
 8003c68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8003c6c:	d003      	beq.n	8003c76 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8003c6e:	2902      	cmp	r1, #2
 8003c70:	d075      	beq.n	8003d5e <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 8003c72:	2900      	cmp	r1, #0
 8003c74:	d04f      	beq.n	8003d16 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003c76:	ee07 2a90 	vmov	s15, r2
 8003c7a:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003d80 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8003c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c84:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8003c88:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8003c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c90:	ee06 3a90 	vmov	s13, r3
 8003c94:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8003c98:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003c9c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8003ca0:	eee7 6a25 	vfma.f32	s13, s14, s11
 8003ca4:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003ca8:	4a34      	ldr	r2, [pc, #208]	; (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8003caa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003cae:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003cb0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003cb4:	ee07 3a10 	vmov	s14, r3
 8003cb8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8003cbc:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003cbe:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cca:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003cce:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003cd0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003cd4:	ee07 3a10 	vmov	s14, r3
 8003cd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003cdc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ce8:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003cec:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003cee:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003cf2:	ee07 3a90 	vmov	s15, r3
 8003cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cfa:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d02:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003d06:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8003d0a:	4770      	bx	lr
 8003d0c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003d0e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003d12:	6082      	str	r2, [r0, #8]
}
 8003d14:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d16:	6819      	ldr	r1, [r3, #0]
 8003d18:	0689      	lsls	r1, r1, #26
 8003d1a:	d527      	bpl.n	8003d6c <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d1c:	6819      	ldr	r1, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d1e:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d22:	4a19      	ldr	r2, [pc, #100]	; (8003d88 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d24:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d28:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d32:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d34:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8003d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3c:	ee06 2a10 	vmov	s12, r2
 8003d40:	ee06 3a90 	vmov	s13, r3
 8003d44:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8003d48:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003d4c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8003d50:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8003d54:	eee7 6a05 	vfma.f32	s13, s14, s10
 8003d58:	ee66 6a26 	vmul.f32	s13, s12, s13
 8003d5c:	e7a4      	b.n	8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d5e:	ee07 2a90 	vmov	s15, r2
 8003d62:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003d8c <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8003d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d6a:	e78a      	b.n	8003c82 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d6c:	ee07 2a90 	vmov	s15, r2
 8003d70:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8003d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d78:	e783      	b.n	8003c82 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8003d7a:	bf00      	nop
 8003d7c:	58024400 	.word	0x58024400
 8003d80:	4a742400 	.word	0x4a742400
 8003d84:	39000000 	.word	0x39000000
 8003d88:	03d09000 	.word	0x03d09000
 8003d8c:	4bbebc20 	.word	0x4bbebc20
 8003d90:	4c742400 	.word	0x4c742400

08003d94 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d94:	4b4f      	ldr	r3, [pc, #316]	; (8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8003d96:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d98:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003d9a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003d9c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 8003d9e:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003da2:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003da6:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8003da8:	d05c      	beq.n	8003e64 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003daa:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003dae:	f3c4 2400 	ubfx	r4, r4, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003db2:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003db6:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8003dba:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003dbc:	ee07 4a90 	vmov	s15, r4
 8003dc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8003dc4:	d003      	beq.n	8003dce <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8003dc6:	2902      	cmp	r1, #2
 8003dc8:	d075      	beq.n	8003eb6 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 8003dca:	2900      	cmp	r1, #0
 8003dcc:	d04f      	beq.n	8003e6e <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003dce:	ee07 2a90 	vmov	s15, r2
 8003dd2:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8003dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8003de0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8003de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de8:	ee06 3a90 	vmov	s13, r3
 8003dec:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8003df0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003df4:	ee76 6a85 	vadd.f32	s13, s13, s10
 8003df8:	eee7 6a25 	vfma.f32	s13, s14, s11
 8003dfc:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003e00:	4a34      	ldr	r2, [pc, #208]	; (8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8003e02:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003e06:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003e08:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003e0c:	ee07 3a10 	vmov	s14, r3
 8003e10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8003e14:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003e16:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e22:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003e26:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003e28:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003e2c:	ee07 3a10 	vmov	s14, r3
 8003e30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003e34:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e40:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003e44:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003e46:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e52:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e5a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003e5e:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8003e62:	4770      	bx	lr
 8003e64:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003e66:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003e6a:	6082      	str	r2, [r0, #8]
}
 8003e6c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e6e:	6819      	ldr	r1, [r3, #0]
 8003e70:	0689      	lsls	r1, r1, #26
 8003e72:	d527      	bpl.n	8003ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e74:	6819      	ldr	r1, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e76:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e7a:	4a19      	ldr	r2, [pc, #100]	; (8003ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e7c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e80:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e8a:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e8c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8003e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e94:	ee06 2a10 	vmov	s12, r2
 8003e98:	ee06 3a90 	vmov	s13, r3
 8003e9c:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8003ea0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003ea4:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8003ea8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8003eac:	eee7 6a05 	vfma.f32	s13, s14, s10
 8003eb0:	ee66 6a26 	vmul.f32	s13, s12, s13
 8003eb4:	e7a4      	b.n	8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003eb6:	ee07 2a90 	vmov	s15, r2
 8003eba:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8003ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ec2:	e78a      	b.n	8003dda <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ec4:	ee07 2a90 	vmov	s15, r2
 8003ec8:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8003ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ed0:	e783      	b.n	8003dda <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8003ed2:	bf00      	nop
 8003ed4:	58024400 	.word	0x58024400
 8003ed8:	4a742400 	.word	0x4a742400
 8003edc:	39000000 	.word	0x39000000
 8003ee0:	03d09000 	.word	0x03d09000
 8003ee4:	4bbebc20 	.word	0x4bbebc20
 8003ee8:	4c742400 	.word	0x4c742400

08003eec <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003eec:	4b4f      	ldr	r3, [pc, #316]	; (800402c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 8003eee:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ef0:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8003ef2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8003ef4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 8003ef6:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8003efa:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003efe:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (pll1m != 0U)
 8003f00:	d05c      	beq.n	8003fbc <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003f02:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8003f06:	f004 0401 	and.w	r4, r4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f0a:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003f0e:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8003f12:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003f14:	ee07 4a90 	vmov	s15, r4
 8003f18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8003f1c:	d07e      	beq.n	800401c <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8003f1e:	2902      	cmp	r1, #2
 8003f20:	d075      	beq.n	800400e <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 8003f22:	2900      	cmp	r1, #0
 8003f24:	d04f      	beq.n	8003fc6 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f26:	ee07 2a90 	vmov	s15, r2
 8003f2a:	eddf 6a41 	vldr	s13, [pc, #260]	; 8004030 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8003f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8003f38:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004034 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8003f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f40:	ee06 3a90 	vmov	s13, r3
 8003f44:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8003f48:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003f4c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8003f50:	eee7 6a25 	vfma.f32	s13, s14, s11
 8003f54:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8003f58:	4a34      	ldr	r2, [pc, #208]	; (800402c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8003f5a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003f5e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003f60:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003f64:	ee07 3a10 	vmov	s14, r3
 8003f68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8003f6c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8003f6e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f7a:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8003f7e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003f80:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003f84:	ee07 3a10 	vmov	s14, r3
 8003f88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003f8c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f98:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8003f9c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003f9e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003faa:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fb2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003fb6:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8003fba:	4770      	bx	lr
 8003fbc:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003fbe:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003fc2:	6082      	str	r2, [r0, #8]
}
 8003fc4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fc6:	6819      	ldr	r1, [r3, #0]
 8003fc8:	0689      	lsls	r1, r1, #26
 8003fca:	d5ac      	bpl.n	8003f26 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fcc:	6819      	ldr	r1, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fce:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fd2:	4a19      	ldr	r2, [pc, #100]	; (8004038 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fd4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fd8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fe2:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fe4:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8004034 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8003fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fec:	ee06 2a10 	vmov	s12, r2
 8003ff0:	ee06 3a90 	vmov	s13, r3
 8003ff4:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8003ff8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003ffc:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8004000:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8004004:	eee7 6a05 	vfma.f32	s13, s14, s10
 8004008:	ee66 6a26 	vmul.f32	s13, s12, s13
 800400c:	e7a4      	b.n	8003f58 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800400e:	ee07 2a90 	vmov	s15, r2
 8004012:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800403c <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8004016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800401a:	e78a      	b.n	8003f32 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800401c:	ee07 2a90 	vmov	s15, r2
 8004020:	eddf 6a07 	vldr	s13, [pc, #28]	; 8004040 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 8004024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004028:	e783      	b.n	8003f32 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 800402a:	bf00      	nop
 800402c:	58024400 	.word	0x58024400
 8004030:	4c742400 	.word	0x4c742400
 8004034:	39000000 	.word	0x39000000
 8004038:	03d09000 	.word	0x03d09000
 800403c:	4bbebc20 	.word	0x4bbebc20
 8004040:	4a742400 	.word	0x4a742400

08004044 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004044:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8004048:	b500      	push	{lr}
 800404a:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800404c:	d077      	beq.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800404e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004052:	d02e      	beq.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004054:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004058:	f000 80cf 	beq.w	80041fa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800405c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8004060:	f000 8080 	beq.w	8004164 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004064:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8004068:	d05a      	beq.n	8004120 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800406a:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800406e:	f000 8105 	beq.w	800427c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004072:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8004076:	f000 8110 	beq.w	800429a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800407a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800407e:	f000 80e2 	beq.w	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004082:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004086:	d13a      	bne.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004088:	4ba9      	ldr	r3, [pc, #676]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800408a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 8004090:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004094:	f000 808e 	beq.w	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8004098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800409c:	f000 812e 	beq.w	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80040a0:	bb6b      	cbnz	r3, 80040fe <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80040a2:	4aa3      	ldr	r2, [pc, #652]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = HSE_VALUE;
 80040a4:	4ba3      	ldr	r3, [pc, #652]	; (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80040a6:	6810      	ldr	r0, [r2, #0]
            frequency = HSE_VALUE;
 80040a8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80040ac:	bf18      	it	ne
 80040ae:	4618      	movne	r0, r3
 80040b0:	e042      	b.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80040b2:	4a9f      	ldr	r2, [pc, #636]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80040b4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80040b6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 80040ba:	2b80      	cmp	r3, #128	; 0x80
 80040bc:	f000 8098 	beq.w	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80040c0:	d921      	bls.n	8004106 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 80040c2:	2bc0      	cmp	r3, #192	; 0xc0
 80040c4:	d037      	beq.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80040c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ca:	d118      	bne.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80040cc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80040ce:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80040d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80040d4:	0749      	lsls	r1, r1, #29
 80040d6:	d502      	bpl.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 80ae 	beq.w	800423a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80040de:	4a94      	ldr	r2, [pc, #592]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80040e0:	6812      	ldr	r2, [r2, #0]
 80040e2:	05d0      	lsls	r0, r2, #23
 80040e4:	d503      	bpl.n	80040ee <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80040e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040ea:	f000 80fb 	beq.w	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80040ee:	4a90      	ldr	r2, [pc, #576]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80040f0:	6812      	ldr	r2, [r2, #0]
 80040f2:	0391      	lsls	r1, r2, #14
 80040f4:	d503      	bpl.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 80040f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040fa:	f000 80bd 	beq.w	8004278 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      switch (srcclk)
 80040fe:	2000      	movs	r0, #0
}
 8004100:	b005      	add	sp, #20
 8004102:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 8004106:	2b00      	cmp	r3, #0
 8004108:	d04b      	beq.n	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800410a:	2b40      	cmp	r3, #64	; 0x40
 800410c:	d1f7      	bne.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800410e:	6810      	ldr	r0, [r2, #0]
 8004110:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004114:	d010      	beq.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004116:	a801      	add	r0, sp, #4
 8004118:	f7ff fd90 	bl	8003c3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800411c:	9801      	ldr	r0, [sp, #4]
 800411e:	e00b      	b.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004120:	4a83      	ldr	r2, [pc, #524]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004122:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004124:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8004128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800412c:	d060      	beq.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800412e:	d936      	bls.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8004130:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004134:	d178      	bne.n	8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004136:	4880      	ldr	r0, [pc, #512]	; (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
}
 8004138:	b005      	add	sp, #20
 800413a:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800413e:	4b7c      	ldr	r3, [pc, #496]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	2b04      	cmp	r3, #4
 8004148:	d8d9      	bhi.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800414a:	a201      	add	r2, pc, #4	; (adr r2, 8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 800414c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004150:	080041b5 	.word	0x080041b5
 8004154:	080041d9 	.word	0x080041d9
 8004158:	080041c5 	.word	0x080041c5
 800415c:	08004137 	.word	0x08004137
 8004160:	080041c1 	.word	0x080041c1
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004164:	4a72      	ldr	r2, [pc, #456]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004166:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004168:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 800416c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004170:	d03e      	beq.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8004172:	d937      	bls.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8004174:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004178:	d0dd      	beq.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800417a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800417e:	d1be      	bne.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004180:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004182:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004184:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004188:	0752      	lsls	r2, r2, #29
 800418a:	d5a8      	bpl.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1a6      	bne.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004190:	4b67      	ldr	r3, [pc, #412]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004192:	486a      	ldr	r0, [pc, #424]	; (800433c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800419a:	40d8      	lsrs	r0, r3
 800419c:	e7cc      	b.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d146      	bne.n	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80041a2:	6810      	ldr	r0, [r2, #0]
 80041a4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80041a8:	d0c6      	beq.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80041aa:	a801      	add	r0, sp, #4
 80041ac:	f7ff fe9e 	bl	8003eec <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80041b0:	9802      	ldr	r0, [sp, #8]
 80041b2:	e7c1      	b.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80041b4:	4b5e      	ldr	r3, [pc, #376]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80041b6:	6818      	ldr	r0, [r3, #0]
 80041b8:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80041bc:	d0bc      	beq.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80041be:	e7f4      	b.n	80041aa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80041c0:	4a5b      	ldr	r2, [pc, #364]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80041c2:	e783      	b.n	80040cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80041c4:	4b5a      	ldr	r3, [pc, #360]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80041c6:	6818      	ldr	r0, [r3, #0]
 80041c8:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80041cc:	d0b4      	beq.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80041ce:	a801      	add	r0, sp, #4
 80041d0:	f7ff fde0 	bl	8003d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80041d4:	9801      	ldr	r0, [sp, #4]
 80041d6:	e7af      	b.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80041d8:	4b55      	ldr	r3, [pc, #340]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80041e0:	d0aa      	beq.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80041e2:	e798      	b.n	8004116 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      switch (saiclocksource)
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0dc      	beq.n	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80041e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041ec:	d08f      	beq.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 80041ee:	e786      	b.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80041f0:	6810      	ldr	r0, [r2, #0]
 80041f2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80041f6:	d09f      	beq.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80041f8:	e7e9      	b.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80041fa:	4a4d      	ldr	r2, [pc, #308]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80041fc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80041fe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8004202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004206:	d0f3      	beq.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8004208:	d806      	bhi.n	8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0c9      	beq.n	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800420e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004212:	f43f af7c 	beq.w	800410e <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8004216:	e772      	b.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8004218:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800421c:	d08b      	beq.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800421e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004222:	f43f af53 	beq.w	80040cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 8004226:	e76a      	b.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      switch (srcclk)
 8004228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800422c:	d0a8      	beq.n	8004180 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800422e:	e766      	b.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8004230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004234:	f43f af6b 	beq.w	800410e <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8004238:	e761      	b.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0xba>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800423a:	6813      	ldr	r3, [r2, #0]
 800423c:	483f      	ldr	r0, [pc, #252]	; (800433c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800423e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004242:	40d8      	lsrs	r0, r3
 8004244:	e778      	b.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004246:	4a3a      	ldr	r2, [pc, #232]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004248:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800424a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 800424e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004252:	d066      	beq.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8004254:	d82f      	bhi.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8004256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800425a:	d04f      	beq.n	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 800425c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004260:	d131      	bne.n	80042c6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004262:	4b33      	ldr	r3, [pc, #204]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004264:	6818      	ldr	r0, [r3, #0]
 8004266:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800426a:	f43f af65 	beq.w	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800426e:	a801      	add	r0, sp, #4
 8004270:	f7ff fd90 	bl	8003d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004274:	9802      	ldr	r0, [sp, #8]
 8004276:	e75f      	b.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = HSE_VALUE;
 8004278:	482e      	ldr	r0, [pc, #184]	; (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800427a:	e75d      	b.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800427c:	4a2c      	ldr	r2, [pc, #176]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800427e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004280:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8004284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004288:	d02e      	beq.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 800428a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800428e:	f43f af77 	beq.w	8004180 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8004292:	2b00      	cmp	r3, #0
 8004294:	f47f af33 	bne.w	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8004298:	e739      	b.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0xca>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800429a:	4b25      	ldr	r3, [pc, #148]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800429c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 800429e:	03d2      	lsls	r2, r2, #15
 80042a0:	d589      	bpl.n	80041b6 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80042a2:	6818      	ldr	r0, [r3, #0]
 80042a4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80042a8:	f43f af46 	beq.w	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042ac:	a801      	add	r0, sp, #4
 80042ae:	f7ff fcc5 	bl	8003c3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80042b2:	9803      	ldr	r0, [sp, #12]
 80042b4:	e740      	b.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 80042b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ba:	d02a      	beq.n	8004312 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 80042bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042c0:	f43f aeef 	beq.w	80040a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 80042c4:	e71b      	b.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f47f af19 	bne.w	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0xba>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80042cc:	f7fe fe0a 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 80042d0:	4b17      	ldr	r3, [pc, #92]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80042d2:	4a1b      	ldr	r2, [pc, #108]	; (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80042da:	5cd3      	ldrb	r3, [r2, r3]
 80042dc:	f003 031f 	and.w	r3, r3, #31
 80042e0:	40d8      	lsrs	r0, r3
          break;
 80042e2:	e729      	b.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = CSI_VALUE;
 80042e4:	4817      	ldr	r0, [pc, #92]	; (8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80042e6:	e727      	b.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80042e8:	6810      	ldr	r0, [r2, #0]
 80042ea:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80042ee:	f43f af23 	beq.w	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80042f2:	a801      	add	r0, sp, #4
 80042f4:	f7ff fd4e 	bl	8003d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80042f8:	9803      	ldr	r0, [sp, #12]
 80042fa:	e71d      	b.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80042fc:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004304:	f43f af18 	beq.w	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004308:	a801      	add	r0, sp, #4
 800430a:	f7ff fc97 	bl	8003c3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800430e:	9802      	ldr	r0, [sp, #8]
 8004310:	e712      	b.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004312:	4a07      	ldr	r2, [pc, #28]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = CSI_VALUE;
 8004314:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004316:	6810      	ldr	r0, [r2, #0]
            frequency = CSI_VALUE;
 8004318:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800431c:	bf18      	it	ne
 800431e:	4618      	movne	r0, r3
 8004320:	e70a      	b.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004322:	6810      	ldr	r0, [r2, #0]
 8004324:	f010 0004 	ands.w	r0, r0, #4
 8004328:	f43f af06 	beq.w	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800432c:	e730      	b.n	8004190 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800432e:	bf00      	nop
 8004330:	58024400 	.word	0x58024400
 8004334:	017d7840 	.word	0x017d7840
 8004338:	00bb8000 	.word	0x00bb8000
 800433c:	03d09000 	.word	0x03d09000
 8004340:	0800efec 	.word	0x0800efec
 8004344:	003d0900 	.word	0x003d0900

08004348 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004348:	2800      	cmp	r0, #0
 800434a:	d038      	beq.n	80043be <HAL_RNG_Init+0x76>
{
 800434c:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800434e:	7a43      	ldrb	r3, [r0, #9]
 8004350:	4604      	mov	r4, r0
 8004352:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004356:	b343      	cbz	r3, 80043aa <HAL_RNG_Init+0x62>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004358:	2302      	movs	r3, #2
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800435a:	e9d4 2100 	ldrd	r2, r1, [r4]
  hrng->State = HAL_RNG_STATE_BUSY;
 800435e:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8004360:	6813      	ldr	r3, [r2, #0]
 8004362:	f023 0320 	bic.w	r3, r3, #32
 8004366:	430b      	orrs	r3, r1
 8004368:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800436a:	6822      	ldr	r2, [r4, #0]
 800436c:	6813      	ldr	r3, [r2, #0]
 800436e:	f043 0304 	orr.w	r3, r3, #4
 8004372:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	065b      	lsls	r3, r3, #25
 800437a:	d503      	bpl.n	8004384 <HAL_RNG_Init+0x3c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800437c:	2304      	movs	r3, #4
    return HAL_ERROR;
 800437e:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 8004380:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 8004382:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 8004384:	f7fc f80a 	bl	800039c <HAL_GetTick>
 8004388:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800438a:	e004      	b.n	8004396 <HAL_RNG_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800438c:	f7fc f806 	bl	800039c <HAL_GetTick>
 8004390:	1b43      	subs	r3, r0, r5
 8004392:	2b02      	cmp	r3, #2
 8004394:	d80d      	bhi.n	80043b2 <HAL_RNG_Init+0x6a>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f013 0304 	ands.w	r3, r3, #4
 800439e:	d1f5      	bne.n	800438c <HAL_RNG_Init+0x44>
  hrng->State = HAL_RNG_STATE_READY;
 80043a0:	2201      	movs	r2, #1
  return HAL_OK;
 80043a2:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 80043a4:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80043a6:	60e3      	str	r3, [r4, #12]
}
 80043a8:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 80043aa:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 80043ac:	f006 fc4e 	bl	800ac4c <HAL_RNG_MspInit>
 80043b0:	e7d2      	b.n	8004358 <HAL_RNG_Init+0x10>
      hrng->State = HAL_RNG_STATE_ERROR;
 80043b2:	2204      	movs	r2, #4
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80043b4:	2302      	movs	r3, #2
      return HAL_ERROR;
 80043b6:	2001      	movs	r0, #1
      hrng->State = HAL_RNG_STATE_ERROR;
 80043b8:	7262      	strb	r2, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80043ba:	60e3      	str	r3, [r4, #12]
}
 80043bc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80043be:	2001      	movs	r0, #1
}
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop

080043c4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80043c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 80043c8:	7a03      	ldrb	r3, [r0, #8]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d028      	beq.n	8004420 <HAL_RNG_GenerateRandomNumber+0x5c>
 80043ce:	2201      	movs	r2, #1

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80043d0:	7a43      	ldrb	r3, [r0, #9]
 80043d2:	4604      	mov	r4, r0
 80043d4:	4293      	cmp	r3, r2
 80043d6:	fa5f f883 	uxtb.w	r8, r3
  __HAL_LOCK(hrng);
 80043da:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 80043dc:	d007      	beq.n	80043ee <HAL_RNG_GenerateRandomNumber+0x2a>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80043de:	2304      	movs	r3, #4
    status = HAL_ERROR;
 80043e0:	4690      	mov	r8, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80043e2:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80043e4:	2300      	movs	r3, #0
 80043e6:	7223      	strb	r3, [r4, #8]

  return status;
}
 80043e8:	4640      	mov	r0, r8
 80043ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 80043ee:	2302      	movs	r3, #2
 80043f0:	460e      	mov	r6, r1
 80043f2:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 80043f4:	f7fb ffd2 	bl	800039c <HAL_GetTick>
 80043f8:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80043fa:	e004      	b.n	8004406 <HAL_RNG_GenerateRandomNumber+0x42>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80043fc:	f7fb ffce 	bl	800039c <HAL_GetTick>
 8004400:	1bc0      	subs	r0, r0, r7
 8004402:	2802      	cmp	r0, #2
 8004404:	d811      	bhi.n	800442a <HAL_RNG_GenerateRandomNumber+0x66>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004406:	6822      	ldr	r2, [r4, #0]
 8004408:	6855      	ldr	r5, [r2, #4]
 800440a:	f015 0501 	ands.w	r5, r5, #1
 800440e:	d0f5      	beq.n	80043fc <HAL_RNG_GenerateRandomNumber+0x38>
    hrng->RandomNumber = hrng->Instance->DR;
 8004410:	6893      	ldr	r3, [r2, #8]
    hrng->State = HAL_RNG_STATE_READY;
 8004412:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 8004414:	f04f 0800 	mov.w	r8, #0
    hrng->RandomNumber = hrng->Instance->DR;
 8004418:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 800441a:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 800441c:	7262      	strb	r2, [r4, #9]
 800441e:	e7e1      	b.n	80043e4 <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
 8004420:	f04f 0802 	mov.w	r8, #2
}
 8004424:	4640      	mov	r0, r8
 8004426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hrng->State = HAL_RNG_STATE_READY;
 800442a:	2201      	movs	r2, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800442c:	2302      	movs	r3, #2
        __HAL_UNLOCK(hrng);
 800442e:	7225      	strb	r5, [r4, #8]
        hrng->State = HAL_RNG_STATE_READY;
 8004430:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004432:	60e3      	str	r3, [r4, #12]
        return HAL_ERROR;
 8004434:	e7d8      	b.n	80043e8 <HAL_RNG_GenerateRandomNumber+0x24>
 8004436:	bf00      	nop

08004438 <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 8004438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800443a:	4baf      	ldr	r3, [pc, #700]	; (80046f8 <HAL_SAI_Init.part.0+0x2c0>)
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 800443c:	4604      	mov	r4, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800443e:	6802      	ldr	r2, [r0, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d01c      	beq.n	800447e <HAL_SAI_Init.part.0+0x46>
 8004444:	3320      	adds	r3, #32
 8004446:	429a      	cmp	r2, r3
 8004448:	d019      	beq.n	800447e <HAL_SAI_Init.part.0+0x46>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800444a:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800444e:	429a      	cmp	r2, r3
 8004450:	d04d      	beq.n	80044ee <HAL_SAI_Init.part.0+0xb6>
 8004452:	3320      	adds	r3, #32
 8004454:	429a      	cmp	r2, r3
 8004456:	d04a      	beq.n	80044ee <HAL_SAI_Init.part.0+0xb6>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8004458:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800445c:	429a      	cmp	r2, r3
 800445e:	f000 8134 	beq.w	80046ca <HAL_SAI_Init.part.0+0x292>
 8004462:	3320      	adds	r3, #32
 8004464:	429a      	cmp	r2, r3
 8004466:	f000 8130 	beq.w	80046ca <HAL_SAI_Init.part.0+0x292>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800446a:	4ba4      	ldr	r3, [pc, #656]	; (80046fc <HAL_SAI_Init.part.0+0x2c4>)
 800446c:	429a      	cmp	r2, r3
 800446e:	f000 812e 	beq.w	80046ce <HAL_SAI_Init.part.0+0x296>
 8004472:	3320      	adds	r3, #32
 8004474:	429a      	cmp	r2, r3
 8004476:	f000 812a 	beq.w	80046ce <HAL_SAI_Init.part.0+0x296>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800447a:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
 800447c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
 800447e:	4ea0      	ldr	r6, [pc, #640]	; (8004700 <HAL_SAI_Init.part.0+0x2c8>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8004480:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8004484:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8004488:	2b00      	cmp	r3, #0
 800448a:	d037      	beq.n	80044fc <HAL_SAI_Init.part.0+0xc4>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800448c:	4b9d      	ldr	r3, [pc, #628]	; (8004704 <HAL_SAI_Init.part.0+0x2cc>)
 800448e:	489e      	ldr	r0, [pc, #632]	; (8004708 <HAL_SAI_Init.part.0+0x2d0>)
 8004490:	681b      	ldr	r3, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004492:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004494:	fba0 0303 	umull	r0, r3, r0, r3
  __HAL_SAI_DISABLE(hsai);
 8004498:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800449c:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 800449e:	6011      	str	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80044a0:	009b      	lsls	r3, r3, #2

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d031      	beq.n	800450a <HAL_SAI_Init.part.0+0xd2>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80044a6:	6822      	ldr	r2, [r4, #0]
    count--;
 80044a8:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80044aa:	6815      	ldr	r5, [r2, #0]
 80044ac:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
 80044b0:	d1f7      	bne.n	80044a2 <HAL_SAI_Init.part.0+0x6a>
  switch (hsai->Init.SynchroExt)
 80044b2:	68e3      	ldr	r3, [r4, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
 80044b4:	2202      	movs	r2, #2
  switch (hsai->Init.SynchroExt)
 80044b6:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
 80044b8:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 80044bc:	f000 8152 	beq.w	8004764 <HAL_SAI_Init.part.0+0x32c>
 80044c0:	4293      	cmp	r3, r2
 80044c2:	bf19      	ittee	ne
 80044c4:	4610      	movne	r0, r2
 80044c6:	2103      	movne	r1, #3
 80044c8:	2123      	moveq	r1, #35	; 0x23
 80044ca:	2022      	moveq	r0, #34	; 0x22
 80044cc:	bf15      	itete	ne
 80044ce:	2701      	movne	r7, #1
 80044d0:	2721      	moveq	r7, #33	; 0x21
 80044d2:	2200      	movne	r2, #0
 80044d4:	2220      	moveq	r2, #32
  switch (hsai->Init.Synchro)
 80044d6:	68a3      	ldr	r3, [r4, #8]
 80044d8:	3b01      	subs	r3, #1
 80044da:	2b04      	cmp	r3, #4
 80044dc:	f200 8178 	bhi.w	80047d0 <HAL_SAI_Init.part.0+0x398>
 80044e0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80044e4:	001c00e8 	.word	0x001c00e8
 80044e8:	001b00ef 	.word	0x001b00ef
 80044ec:	00eb      	.short	0x00eb
  if (hsai->State == HAL_SAI_STATE_RESET)
 80044ee:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    SaiBaseAddress = SAI2;
 80044f2:	4e86      	ldr	r6, [pc, #536]	; (800470c <HAL_SAI_Init.part.0+0x2d4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 80044f4:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1c7      	bne.n	800448c <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
 80044fc:	4620      	mov	r0, r4
    hsai->Lock = HAL_UNLOCKED;
 80044fe:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 8004502:	f006 fc0b 	bl	800ad1c <HAL_SAI_MspInit>
 8004506:	6822      	ldr	r2, [r4, #0]
 8004508:	e7c0      	b.n	800448c <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800450a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    return HAL_ERROR;
 800450e:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004514:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 8004518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800451a:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800451c:	f44f 6700 	mov.w	r7, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
 8004520:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004522:	6a23      	ldr	r3, [r4, #32]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d04a      	beq.n	80045be <HAL_SAI_Init.part.0+0x186>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	4a73      	ldr	r2, [pc, #460]	; (80046f8 <HAL_SAI_Init.part.0+0x2c0>)
 800452c:	4293      	cmp	r3, r2
 800452e:	f000 812d 	beq.w	800478c <HAL_SAI_Init.part.0+0x354>
 8004532:	4877      	ldr	r0, [pc, #476]	; (8004710 <HAL_SAI_Init.part.0+0x2d8>)
 8004534:	1a18      	subs	r0, r3, r0
 8004536:	fab0 f080 	clz	r0, r0
 800453a:	0940      	lsrs	r0, r0, #5
 800453c:	2800      	cmp	r0, #0
 800453e:	f040 8125 	bne.w	800478c <HAL_SAI_Init.part.0+0x354>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004542:	4a74      	ldr	r2, [pc, #464]	; (8004714 <HAL_SAI_Init.part.0+0x2dc>)
 8004544:	4293      	cmp	r3, r2
 8004546:	f000 812d 	beq.w	80047a4 <HAL_SAI_Init.part.0+0x36c>
 800454a:	3220      	adds	r2, #32
 800454c:	4293      	cmp	r3, r2
 800454e:	f000 8129 	beq.w	80047a4 <HAL_SAI_Init.part.0+0x36c>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8004552:	4a71      	ldr	r2, [pc, #452]	; (8004718 <HAL_SAI_Init.part.0+0x2e0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	f000 811f 	beq.w	8004798 <HAL_SAI_Init.part.0+0x360>
 800455a:	3220      	adds	r2, #32
 800455c:	4293      	cmp	r3, r2
 800455e:	f000 811b 	beq.w	8004798 <HAL_SAI_Init.part.0+0x360>
    if (hsai->Instance == SAI4_Block_A)
 8004562:	4a66      	ldr	r2, [pc, #408]	; (80046fc <HAL_SAI_Init.part.0+0x2c4>)
 8004564:	4293      	cmp	r3, r2
 8004566:	f000 812b 	beq.w	80047c0 <HAL_SAI_Init.part.0+0x388>
    if (hsai->Instance == SAI4_Block_B)
 800456a:	4a6c      	ldr	r2, [pc, #432]	; (800471c <HAL_SAI_Init.part.0+0x2e4>)
 800456c:	4293      	cmp	r3, r2
 800456e:	f000 8122 	beq.w	80047b6 <HAL_SAI_Init.part.0+0x37e>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8004572:	69a3      	ldr	r3, [r4, #24]
 8004574:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004578:	f000 80f9 	beq.w	800476e <HAL_SAI_Init.part.0+0x336>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800457c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800457e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004582:	6a22      	ldr	r2, [r4, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004584:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004588:	ea4f 0340 	mov.w	r3, r0, lsl #1
 800458c:	6c61      	ldr	r1, [r4, #68]	; 0x44
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800458e:	bf0c      	ite	eq
 8004590:	2002      	moveq	r0, #2
 8004592:	2001      	movne	r0, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004594:	fb02 f200 	mul.w	r2, r2, r0
 8004598:	0212      	lsls	r2, r2, #8
 800459a:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 800459e:	4a60      	ldr	r2, [pc, #384]	; (8004720 <HAL_SAI_Init.part.0+0x2e8>)
 80045a0:	fba2 0203 	umull	r0, r2, r2, r3
 80045a4:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 80045a6:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 80045aa:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 80045ae:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 80045b0:	bf08      	it	eq
 80045b2:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80045b4:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
 80045b6:	6262      	str	r2, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80045b8:	d101      	bne.n	80045be <HAL_SAI_Init.part.0+0x186>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80045ba:	0852      	lsrs	r2, r2, #1
 80045bc:	6262      	str	r2, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80045be:	6863      	ldr	r3, [r4, #4]
 80045c0:	f033 0302 	bics.w	r3, r3, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80045c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80045c6:	f040 80c8 	bne.w	800475a <HAL_SAI_Init.part.0+0x322>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	bf14      	ite	ne
 80045ce:	f44f 7500 	movne.w	r5, #512	; 0x200
 80045d2:	2500      	moveq	r5, #0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80045d4:	f7fb fefa 	bl	80003cc <HAL_GetREVID>
 80045d8:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80045dc:	6822      	ldr	r2, [r4, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80045de:	f0c0 80ab 	bcc.w	8004738 <HAL_SAI_Init.part.0+0x300>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80045e2:	6811      	ldr	r1, [r2, #0]
 80045e4:	4b4f      	ldr	r3, [pc, #316]	; (8004724 <HAL_SAI_Init.part.0+0x2ec>)
 80045e6:	400b      	ands	r3, r1
 80045e8:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80045ea:	6863      	ldr	r3, [r4, #4]
 80045ec:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80045ee:	e9d4 1211 	ldrd	r1, r2, [r4, #68]	; 0x44
 80045f2:	430b      	orrs	r3, r1
 80045f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80045f6:	431a      	orrs	r2, r3
 80045f8:	6963      	ldr	r3, [r4, #20]
 80045fa:	4302      	orrs	r2, r0
 80045fc:	69a0      	ldr	r0, [r4, #24]
 80045fe:	430a      	orrs	r2, r1
 8004600:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004602:	431a      	orrs	r2, r3
 8004604:	6923      	ldr	r3, [r4, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004606:	4302      	orrs	r2, r0
 8004608:	6820      	ldr	r0, [r4, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	6801      	ldr	r1, [r0, #0]
 800460e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004610:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004612:	430a      	orrs	r2, r1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004614:	f24f 0120 	movw	r1, #61472	; 0xf020
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004618:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800461c:	4b42      	ldr	r3, [pc, #264]	; (8004728 <HAL_SAI_Init.part.0+0x2f0>)
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800461e:	433a      	orrs	r2, r7
 8004620:	432a      	orrs	r2, r5
 8004622:	6002      	str	r2, [r0, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004624:	6825      	ldr	r5, [r4, #0]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004626:	4841      	ldr	r0, [pc, #260]	; (800472c <HAL_SAI_Init.part.0+0x2f4>)
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004628:	686a      	ldr	r2, [r5, #4]
 800462a:	4013      	ands	r3, r2
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800462c:	4a32      	ldr	r2, [pc, #200]	; (80046f8 <HAL_SAI_Init.part.0+0x2c0>)
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800462e:	606b      	str	r3, [r5, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004630:	69e3      	ldr	r3, [r4, #28]
 8004632:	e9d4 750c 	ldrd	r7, r5, [r4, #48]	; 0x30
 8004636:	433b      	orrs	r3, r7
 8004638:	6827      	ldr	r7, [r4, #0]
 800463a:	432b      	orrs	r3, r5
 800463c:	687d      	ldr	r5, [r7, #4]
 800463e:	432b      	orrs	r3, r5
 8004640:	607b      	str	r3, [r7, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	689d      	ldr	r5, [r3, #8]
 8004646:	4028      	ands	r0, r5
 8004648:	6098      	str	r0, [r3, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800464a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800464c:	6827      	ldr	r7, [r4, #0]
 800464e:	e9d4 5017 	ldrd	r5, r0, [r4, #92]	; 0x5c
 8004652:	432b      	orrs	r3, r5
 8004654:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8004656:	4303      	orrs	r3, r0
 8004658:	68b8      	ldr	r0, [r7, #8]
 800465a:	3d01      	subs	r5, #1
 800465c:	4303      	orrs	r3, r0
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800465e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004660:	432b      	orrs	r3, r5
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004662:	3801      	subs	r0, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004664:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004668:	60bb      	str	r3, [r7, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800466a:	6820      	ldr	r0, [r4, #0]
 800466c:	68c3      	ldr	r3, [r0, #12]
 800466e:	400b      	ands	r3, r1
 8004670:	60c3      	str	r3, [r0, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004672:	6820      	ldr	r0, [r4, #0]
 8004674:	e9d4 351a 	ldrd	r3, r5, [r4, #104]	; 0x68
 8004678:	68c1      	ldr	r1, [r0, #12]
 800467a:	432b      	orrs	r3, r5
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800467c:	6f65      	ldr	r5, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800467e:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004680:	6f21      	ldr	r1, [r4, #112]	; 0x70
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004682:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004686:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004688:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800468c:	60c3      	str	r3, [r0, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	4293      	cmp	r3, r2
 8004692:	d01e      	beq.n	80046d2 <HAL_SAI_Init.part.0+0x29a>
 8004694:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8004698:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800469c:	4293      	cmp	r3, r2
 800469e:	d018      	beq.n	80046d2 <HAL_SAI_Init.part.0+0x29a>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80046a0:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 80046a2:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80046a4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
 80046a8:	4618      	mov	r0, r3
  __HAL_UNLOCK(hsai);
 80046aa:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  hsai->State = HAL_SAI_STATE_READY;
 80046ae:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
}
 80046b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
 80046b4:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80046b8:	e732      	b.n	8004520 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80046ba:	460a      	mov	r2, r1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80046bc:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 80046c0:	e72e      	b.n	8004520 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80046c2:	463a      	mov	r2, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80046c4:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 80046c8:	e72a      	b.n	8004520 <HAL_SAI_Init.part.0+0xe8>
    SaiBaseAddress = SAI3;
 80046ca:	4e19      	ldr	r6, [pc, #100]	; (8004730 <HAL_SAI_Init.part.0+0x2f8>)
 80046cc:	e6d8      	b.n	8004480 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
 80046ce:	4e19      	ldr	r6, [pc, #100]	; (8004734 <HAL_SAI_Init.part.0+0x2fc>)
 80046d0:	e6d6      	b.n	8004480 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80046d2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80046d4:	f023 0301 	bic.w	r3, r3, #1
 80046d8:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80046da:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d1de      	bne.n	80046a0 <HAL_SAI_Init.part.0+0x268>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80046e2:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80046e6:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80046e8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80046ec:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80046ee:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80046f0:	f043 0301 	orr.w	r3, r3, #1
 80046f4:	6473      	str	r3, [r6, #68]	; 0x44
 80046f6:	e7d3      	b.n	80046a0 <HAL_SAI_Init.part.0+0x268>
 80046f8:	40015804 	.word	0x40015804
 80046fc:	58005404 	.word	0x58005404
 8004700:	40015800 	.word	0x40015800
 8004704:	20000b08 	.word	0x20000b08
 8004708:	95cbec1b 	.word	0x95cbec1b
 800470c:	40015c00 	.word	0x40015c00
 8004710:	40015824 	.word	0x40015824
 8004714:	40015c04 	.word	0x40015c04
 8004718:	40016004 	.word	0x40016004
 800471c:	58005424 	.word	0x58005424
 8004720:	cccccccd 	.word	0xcccccccd
 8004724:	f005c010 	.word	0xf005c010
 8004728:	ffff1ff0 	.word	0xffff1ff0
 800472c:	fff88000 	.word	0xfff88000
 8004730:	40016000 	.word	0x40016000
 8004734:	58005400 	.word	0x58005400
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004738:	6811      	ldr	r1, [r2, #0]
 800473a:	4b26      	ldr	r3, [pc, #152]	; (80047d4 <HAL_SAI_Init.part.0+0x39c>)
 800473c:	400b      	ands	r3, r1
 800473e:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004740:	6863      	ldr	r3, [r4, #4]
 8004742:	6960      	ldr	r0, [r4, #20]
 8004744:	e9d4 1211 	ldrd	r1, r2, [r4, #68]	; 0x44
 8004748:	430b      	orrs	r3, r1
 800474a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800474c:	431a      	orrs	r2, r3
 800474e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004750:	430a      	orrs	r2, r1
 8004752:	69a1      	ldr	r1, [r4, #24]
 8004754:	431a      	orrs	r2, r3
 8004756:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004758:	e755      	b.n	8004606 <HAL_SAI_Init.part.0+0x1ce>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800475a:	2b01      	cmp	r3, #1
 800475c:	bf08      	it	eq
 800475e:	f44f 7500 	moveq.w	r5, #512	; 0x200
 8004762:	e737      	b.n	80045d4 <HAL_SAI_Init.part.0+0x19c>
  switch (hsai->Init.SynchroExt)
 8004764:	2113      	movs	r1, #19
 8004766:	2012      	movs	r0, #18
 8004768:	2711      	movs	r7, #17
 800476a:	2210      	movs	r2, #16
 800476c:	e6b3      	b.n	80044d6 <HAL_SAI_Init.part.0+0x9e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800476e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004770:	2904      	cmp	r1, #4
 8004772:	d02b      	beq.n	80047cc <HAL_SAI_Init.part.0+0x394>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8004774:	2908      	cmp	r1, #8
 8004776:	d01b      	beq.n	80047b0 <HAL_SAI_Init.part.0+0x378>
        tmpframelength = hsai->FrameInit.FrameLength;
 8004778:	6d62      	ldr	r2, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800477a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800477e:	0043      	lsls	r3, r0, #1
 8004780:	6a20      	ldr	r0, [r4, #32]
 8004782:	fb00 f202 	mul.w	r2, r0, r2
 8004786:	fbb3 f3f2 	udiv	r3, r3, r2
 800478a:	e708      	b.n	800459e <HAL_SAI_Init.part.0+0x166>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800478c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004790:	f7ff fc58 	bl	8004044 <HAL_RCCEx_GetPeriphCLKFreq>
 8004794:	6823      	ldr	r3, [r4, #0]
 8004796:	e6d4      	b.n	8004542 <HAL_SAI_Init.part.0+0x10a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8004798:	f44f 7000 	mov.w	r0, #512	; 0x200
 800479c:	f7ff fc52 	bl	8004044 <HAL_RCCEx_GetPeriphCLKFreq>
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	e6de      	b.n	8004562 <HAL_SAI_Init.part.0+0x12a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80047a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80047a8:	f7ff fc4c 	bl	8004044 <HAL_RCCEx_GetPeriphCLKFreq>
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	e6d0      	b.n	8004552 <HAL_SAI_Init.part.0+0x11a>
        tmpframelength = 256U;
 80047b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047b4:	e7e1      	b.n	800477a <HAL_SAI_Init.part.0+0x342>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80047b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80047ba:	f7ff fc43 	bl	8004044 <HAL_RCCEx_GetPeriphCLKFreq>
 80047be:	e6d8      	b.n	8004572 <HAL_SAI_Init.part.0+0x13a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80047c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80047c4:	f7ff fc3e 	bl	8004044 <HAL_RCCEx_GetPeriphCLKFreq>
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	e6ce      	b.n	800456a <HAL_SAI_Init.part.0+0x132>
        tmpframelength = 64U;
 80047cc:	2240      	movs	r2, #64	; 0x40
 80047ce:	e7d4      	b.n	800477a <HAL_SAI_Init.part.0+0x342>
      syncen_bits = 0;
 80047d0:	2700      	movs	r7, #0
 80047d2:	e6a5      	b.n	8004520 <HAL_SAI_Init.part.0+0xe8>
 80047d4:	f805c010 	.word	0xf805c010

080047d8 <HAL_SAI_InitProtocol>:
  switch (protocol)
 80047d8:	2902      	cmp	r1, #2
{
 80047da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047dc:	4604      	mov	r4, r0
  switch (protocol)
 80047de:	d935      	bls.n	800484c <HAL_SAI_InitProtocol+0x74>
 80047e0:	1ec8      	subs	r0, r1, #3
 80047e2:	2801      	cmp	r0, #1
 80047e4:	d830      	bhi.n	8004848 <HAL_SAI_InitProtocol+0x70>
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80047e6:	6865      	ldr	r5, [r4, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80047e8:	2000      	movs	r0, #0
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80047ea:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  hsai->SlotInit.SlotNumber      = nbslot;
 80047ee:	6723      	str	r3, [r4, #112]	; 0x70
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80047f0:	f035 0502 	bics.w	r5, r5, #2
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80047f4:	f44f 2580 	mov.w	r5, #262144	; 0x40000
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80047f8:	6460      	str	r0, [r4, #68]	; 0x44
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80047fa:	bf0c      	ite	eq
 80047fc:	2701      	moveq	r7, #1
 80047fe:	4607      	movne	r7, r0
      hsai->FrameInit.ActiveFrameLength = 13;
 8004800:	2904      	cmp	r1, #4
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004802:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004806:	6527      	str	r7, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
 8004808:	bf0c      	ite	eq
 800480a:	2701      	moveq	r7, #1
 800480c:	270d      	movne	r7, #13
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800480e:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004810:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8004812:	65a7      	str	r7, [r4, #88]	; 0x58
  hsai->SlotInit.FirstBitOffset  = 0;
 8004814:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004816:	6761      	str	r1, [r4, #116]	; 0x74
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8004818:	e9c4 6518 	strd	r6, r5, [r4, #96]	; 0x60
  switch (datasize)
 800481c:	2a03      	cmp	r2, #3
 800481e:	d813      	bhi.n	8004848 <HAL_SAI_InitProtocol+0x70>
 8004820:	e8df f002 	tbb	[pc, r2]
 8004824:	5d56503f 	.word	0x5d56503f
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	4a4a      	ldr	r2, [pc, #296]	; (8004954 <HAL_SAI_InitProtocol+0x17c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d005      	beq.n	800483c <HAL_SAI_InitProtocol+0x64>
 8004830:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8004834:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 8004838:	4293      	cmp	r3, r2
 800483a:	d105      	bne.n	8004848 <HAL_SAI_InitProtocol+0x70>
 800483c:	6863      	ldr	r3, [r4, #4]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d102      	bne.n	8004848 <HAL_SAI_InitProtocol+0x70>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004842:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004844:	2b00      	cmp	r3, #0
 8004846:	d038      	beq.n	80048ba <HAL_SAI_InitProtocol+0xe2>
}
 8004848:	2001      	movs	r0, #1
 800484a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800484c:	6845      	ldr	r5, [r0, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800484e:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 8004850:	6723      	str	r3, [r4, #112]	; 0x70
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004852:	f035 0502 	bics.w	r5, r5, #2
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004856:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004858:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800485a:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800485e:	bf08      	it	eq
 8004860:	4606      	moveq	r6, r0
  hsai->SlotInit.FirstBitOffset  = 0;
 8004862:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004864:	f64f 70ff 	movw	r0, #65535	; 0xffff
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004868:	bf18      	it	ne
 800486a:	2601      	movne	r6, #1
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800486c:	65e5      	str	r5, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800486e:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 8004870:	f013 0001 	ands.w	r0, r3, #1
 8004874:	6526      	str	r6, [r4, #80]	; 0x50
 8004876:	d1e7      	bne.n	8004848 <HAL_SAI_InitProtocol+0x70>
  if (protocol == SAI_I2S_STANDARD)
 8004878:	b949      	cbnz	r1, 800488e <HAL_SAI_InitProtocol+0xb6>
 800487a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800487e:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
 8004882:	2a03      	cmp	r2, #3
 8004884:	d8e0      	bhi.n	8004848 <HAL_SAI_InitProtocol+0x70>
 8004886:	e8df f002 	tbb	[pc, r2]
 800488a:	4b5a      	.short	0x4b5a
 800488c:	313b      	.short	0x313b
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800488e:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8004892:	e9c4 5018 	strd	r5, r0, [r4, #96]	; 0x60
  switch (datasize)
 8004896:	2a03      	cmp	r2, #3
 8004898:	d8d6      	bhi.n	8004848 <HAL_SAI_InitProtocol+0x70>
 800489a:	e8df f002 	tbb	[pc, r2]
 800489e:	4150      	.short	0x4150
 80048a0:	2731      	.short	0x2731
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80048a2:	011b      	lsls	r3, r3, #4
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80048a4:	2180      	movs	r1, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80048a6:	2240      	movs	r2, #64	; 0x40
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80048a8:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80048aa:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80048ac:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80048ae:	f7fb fd8d 	bl	80003cc <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80048b2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d0b6      	beq.n	8004828 <HAL_SAI_InitProtocol+0x50>
 80048ba:	4620      	mov	r0, r4
}
 80048bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048c0:	f7ff bdba 	b.w	8004438 <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80048c4:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80048c6:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80048c8:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80048ca:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80048cc:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 80048ce:	e7ee      	b.n	80048ae <HAL_SAI_InitProtocol+0xd6>
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80048d0:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80048d2:	21c0      	movs	r1, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80048d4:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80048d6:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80048d8:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80048da:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 80048dc:	e7e7      	b.n	80048ae <HAL_SAI_InitProtocol+0xd6>
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80048de:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80048e0:	21e0      	movs	r1, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80048e2:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80048e4:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80048e6:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80048e8:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 80048ea:	e7e0      	b.n	80048ae <HAL_SAI_InitProtocol+0xd6>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80048ec:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80048ee:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80048f0:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80048f2:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80048f4:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80048f6:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80048f8:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80048fa:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80048fe:	e7d6      	b.n	80048ae <HAL_SAI_InitProtocol+0xd6>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004900:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004902:	25c0      	movs	r5, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004904:	2080      	movs	r0, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004906:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004908:	ea4f 1283 	mov.w	r2, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800490c:	64a5      	str	r5, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800490e:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004912:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004914:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004918:	d1c9      	bne.n	80048ae <HAL_SAI_InitProtocol+0xd6>
      hsai->SlotInit.FirstBitOffset = 8;
 800491a:	2308      	movs	r3, #8
 800491c:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 800491e:	e7c6      	b.n	80048ae <HAL_SAI_InitProtocol+0xd6>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004920:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004922:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004924:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004926:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800492a:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800492c:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004930:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004932:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004936:	d1ba      	bne.n	80048ae <HAL_SAI_InitProtocol+0xd6>
      hsai->SlotInit.FirstBitOffset = 16;
 8004938:	2310      	movs	r3, #16
 800493a:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 800493c:	e7b7      	b.n	80048ae <HAL_SAI_InitProtocol+0xd6>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800493e:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004940:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004942:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004944:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004946:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004948:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800494a:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800494c:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004950:	e7ad      	b.n	80048ae <HAL_SAI_InitProtocol+0xd6>
 8004952:	bf00      	nop
 8004954:	40015804 	.word	0x40015804

08004958 <HAL_SAI_Transmit_DMA>:
{
 8004958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800495c:	460f      	mov	r7, r1
 800495e:	4604      	mov	r4, r0
 8004960:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8004962:	f7fb fd1b 	bl	800039c <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 8004966:	2f00      	cmp	r7, #0
 8004968:	d06b      	beq.n	8004a42 <HAL_SAI_Transmit_DMA+0xea>
 800496a:	fab5 f885 	clz	r8, r5
 800496e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8004972:	2d00      	cmp	r5, #0
 8004974:	d065      	beq.n	8004a42 <HAL_SAI_Transmit_DMA+0xea>
  if (hsai->State == HAL_SAI_STATE_READY)
 8004976:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800497a:	2b01      	cmp	r3, #1
 800497c:	fa5f f983 	uxtb.w	r9, r3
 8004980:	d15a      	bne.n	8004a38 <HAL_SAI_Transmit_DMA+0xe0>
    __HAL_LOCK(hsai);
 8004982:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8004986:	2b01      	cmp	r3, #1
 8004988:	d056      	beq.n	8004a38 <HAL_SAI_Transmit_DMA+0xe0>
    hsai->XferSize = Size;
 800498a:	4643      	mov	r3, r8
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800498c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004990:	2112      	movs	r1, #18
 8004992:	4606      	mov	r6, r0
    hsai->XferSize = Size;
 8004994:	f365 030f 	bfi	r3, r5, #0, #16
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004998:	483a      	ldr	r0, [pc, #232]	; (8004a84 <HAL_SAI_Transmit_DMA+0x12c>)
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800499a:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
    hsai->XferSize = Size;
 800499e:	f365 431f 	bfi	r3, r5, #16, #16
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80049a2:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
    __HAL_LOCK(hsai);
 80049a6:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80049aa:	4937      	ldr	r1, [pc, #220]	; (8004a88 <HAL_SAI_Transmit_DMA+0x130>)
    hsai->XferSize = Size;
 80049ac:	e9c4 731e 	strd	r7, r3, [r4, #120]	; 0x78
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80049b0:	6410      	str	r0, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80049b2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80049b6:	4a35      	ldr	r2, [pc, #212]	; (8004a8c <HAL_SAI_Transmit_DMA+0x134>)
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80049b8:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80049ba:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80049be:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 80049c0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80049c4:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80049c8:	6822      	ldr	r2, [r4, #0]
 80049ca:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 80049ce:	321c      	adds	r2, #28
 80049d0:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80049d2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80049d6:	f7fc f911 	bl	8000bfc <HAL_DMA_Start_IT>
 80049da:	2800      	cmp	r0, #0
 80049dc:	d13f      	bne.n	8004a5e <HAL_SAI_Transmit_DMA+0x106>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80049de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80049e0:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80049e2:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80049e4:	d032      	beq.n	8004a4c <HAL_SAI_Transmit_DMA+0xf4>
 80049e6:	2205      	movs	r2, #5
 80049e8:	2061      	movs	r0, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80049ea:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80049ec:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	bf98      	it	ls
 80049f2:	4602      	movls	r2, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80049f4:	690b      	ldr	r3, [r1, #16]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80049fa:	6822      	ldr	r2, [r4, #0]
 80049fc:	6813      	ldr	r3, [r2, #0]
 80049fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a02:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004a04:	e005      	b.n	8004a12 <HAL_SAI_Transmit_DMA+0xba>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8004a06:	f7fb fcc9 	bl	800039c <HAL_GetTick>
 8004a0a:	1b83      	subs	r3, r0, r6
 8004a0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a10:	d82a      	bhi.n	8004a68 <HAL_SAI_Transmit_DMA+0x110>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004a12:	6822      	ldr	r2, [r4, #0]
 8004a14:	6955      	ldr	r5, [r2, #20]
 8004a16:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 8004a1a:	d0f4      	beq.n	8004a06 <HAL_SAI_Transmit_DMA+0xae>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8004a1c:	6813      	ldr	r3, [r2, #0]
 8004a1e:	03db      	lsls	r3, r3, #15
 8004a20:	d403      	bmi.n	8004a2a <HAL_SAI_Transmit_DMA+0xd2>
      __HAL_SAI_ENABLE(hsai);
 8004a22:	6813      	ldr	r3, [r2, #0]
 8004a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a28:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8004a2a:	f04f 0900 	mov.w	r9, #0
}
 8004a2e:	4648      	mov	r0, r9
    __HAL_UNLOCK(hsai);
 8004a30:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
}
 8004a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8004a38:	f04f 0902 	mov.w	r9, #2
}
 8004a3c:	4648      	mov	r0, r9
 8004a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
 8004a42:	f04f 0901 	mov.w	r9, #1
}
 8004a46:	4648      	mov	r0, r9
 8004a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004a4c:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004a50:	2a01      	cmp	r2, #1
 8004a52:	bf0b      	itete	eq
 8004a54:	2215      	moveq	r2, #21
 8004a56:	2205      	movne	r2, #5
 8004a58:	2071      	moveq	r0, #113	; 0x71
 8004a5a:	2061      	movne	r0, #97	; 0x61
 8004a5c:	e7c5      	b.n	80049ea <HAL_SAI_Transmit_DMA+0x92>
}
 8004a5e:	4648      	mov	r0, r9
      __HAL_UNLOCK(hsai);
 8004a60:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
}
 8004a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004a68:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 8004a6c:	f04f 0903 	mov.w	r9, #3
        __HAL_UNLOCK(hsai);
 8004a70:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8004a78:	4648      	mov	r0, r9
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004a7a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 8004a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a82:	bf00      	nop
 8004a84:	08004bd9 	.word	0x08004bd9
 8004a88:	08004b75 	.word	0x08004b75
 8004a8c:	08004c55 	.word	0x08004c55

08004a90 <HAL_SAI_Receive_DMA>:
{
 8004a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((pData == NULL) || (Size == 0U))
 8004a92:	2900      	cmp	r1, #0
 8004a94:	d058      	beq.n	8004b48 <HAL_SAI_Receive_DMA+0xb8>
 8004a96:	fab2 f582 	clz	r5, r2
 8004a9a:	096d      	lsrs	r5, r5, #5
 8004a9c:	2a00      	cmp	r2, #0
 8004a9e:	d053      	beq.n	8004b48 <HAL_SAI_Receive_DMA+0xb8>
  if (hsai->State == HAL_SAI_STATE_READY)
 8004aa0:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	b2de      	uxtb	r6, r3
 8004aaa:	d14a      	bne.n	8004b42 <HAL_SAI_Receive_DMA+0xb2>
    __HAL_LOCK(hsai);
 8004aac:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d046      	beq.n	8004b42 <HAL_SAI_Receive_DMA+0xb2>
    hsai->XferSize = Size;
 8004ab4:	462b      	mov	r3, r5
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004ab6:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004aba:	2722      	movs	r7, #34	; 0x22
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004abc:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    hsai->XferSize = Size;
 8004ac0:	f362 030f 	bfi	r3, r2, #0, #16
    __HAL_LOCK(hsai);
 8004ac4:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004ac8:	f884 7091 	strb.w	r7, [r4, #145]	; 0x91
    hsai->XferSize = Size;
 8004acc:	f362 431f 	bfi	r3, r2, #16, #16
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004ad0:	4a25      	ldr	r2, [pc, #148]	; (8004b68 <HAL_SAI_Receive_DMA+0xd8>)
    hsai->XferSize = Size;
 8004ad2:	e9c4 131e 	strd	r1, r3, [r4, #120]	; 0x78
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004ad6:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004ad8:	4924      	ldr	r1, [pc, #144]	; (8004b6c <HAL_SAI_Receive_DMA+0xdc>)
 8004ada:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8004ade:	4a24      	ldr	r2, [pc, #144]	; (8004b70 <HAL_SAI_Receive_DMA+0xe0>)
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004ae0:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8004ae2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004ae6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 8004ae8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004aec:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8004aee:	6821      	ldr	r1, [r4, #0]
 8004af0:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8004af4:	311c      	adds	r1, #28
 8004af6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8004af8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004afc:	f7fc f87e 	bl	8000bfc <HAL_DMA_Start_IT>
 8004b00:	bb28      	cbnz	r0, 8004b4e <HAL_SAI_Receive_DMA+0xbe>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004b02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004b04:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004b06:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004b08:	d025      	beq.n	8004b56 <HAL_SAI_Receive_DMA+0xc6>
 8004b0a:	2205      	movs	r2, #5
 8004b0c:	2061      	movs	r0, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004b0e:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004b10:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	bf98      	it	ls
 8004b16:	4602      	movls	r2, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004b18:	690b      	ldr	r3, [r1, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004b1e:	6822      	ldr	r2, [r4, #0]
 8004b20:	6813      	ldr	r3, [r2, #0]
 8004b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b26:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8004b28:	6823      	ldr	r3, [r4, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	03d2      	lsls	r2, r2, #15
 8004b2e:	d403      	bmi.n	8004b38 <HAL_SAI_Receive_DMA+0xa8>
      __HAL_SAI_ENABLE(hsai);
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004b36:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8004b38:	2600      	movs	r6, #0
}
 8004b3a:	4630      	mov	r0, r6
    __HAL_UNLOCK(hsai);
 8004b3c:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
}
 8004b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8004b42:	2602      	movs	r6, #2
}
 8004b44:	4630      	mov	r0, r6
 8004b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 8004b48:	2601      	movs	r6, #1
}
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b4e:	4630      	mov	r0, r6
      __HAL_UNLOCK(hsai);
 8004b50:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
}
 8004b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004b56:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004b5a:	2a01      	cmp	r2, #1
 8004b5c:	bf0b      	itete	eq
 8004b5e:	2215      	moveq	r2, #21
 8004b60:	2205      	movne	r2, #5
 8004b62:	2071      	moveq	r0, #113	; 0x71
 8004b64:	2061      	movne	r0, #97	; 0x61
 8004b66:	e7d2      	b.n	8004b0e <HAL_SAI_Receive_DMA+0x7e>
 8004b68:	08004c49 	.word	0x08004c49
 8004b6c:	08004be5 	.word	0x08004be5
 8004b70:	08004c55 	.word	0x08004c55

08004b74 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004b74:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004b76:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b78:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7e:	d01a      	beq.n	8004bb6 <SAI_DMATxCplt+0x42>
  {
    hsai->XferCount = 0;
 8004b80:	2300      	movs	r3, #0

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004b82:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 8004b84:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004b88:	6813      	ldr	r3, [r2, #0]
 8004b8a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b8e:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004b90:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b92:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004b94:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004b96:	d011      	beq.n	8004bbc <SAI_DMATxCplt+0x48>
 8004b98:	f06f 0561 	mvn.w	r5, #97	; 0x61
 8004b9c:	f06f 0205 	mvn.w	r2, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004ba0:	3b02      	subs	r3, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004ba2:	6801      	ldr	r1, [r0, #0]

    hsai->State = HAL_SAI_STATE_READY;
 8004ba4:	2401      	movs	r4, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004ba6:	42a3      	cmp	r3, r4
 8004ba8:	bf98      	it	ls
 8004baa:	462a      	movls	r2, r5
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004bac:	690b      	ldr	r3, [r1, #16]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8004bb2:	f880 4091 	strb.w	r4, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8004bb6:	f005 fab3 	bl	800a120 <HAL_SAI_TxCpltCallback>
#endif
}
 8004bba:	bd38      	pop	{r3, r4, r5, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004bbc:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004bc0:	2a01      	cmp	r2, #1
 8004bc2:	bf0b      	itete	eq
 8004bc4:	f06f 0571 	mvneq.w	r5, #113	; 0x71
 8004bc8:	f06f 0561 	mvnne.w	r5, #97	; 0x61
 8004bcc:	f06f 0215 	mvneq.w	r2, #21
 8004bd0:	f06f 0205 	mvnne.w	r2, #5
 8004bd4:	e7e4      	b.n	8004ba0 <SAI_DMATxCplt+0x2c>
 8004bd6:	bf00      	nop

08004bd8 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bd8:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8004bda:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004bdc:	f005 faa2 	bl	800a124 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8004be0:	bd08      	pop	{r3, pc}
 8004be2:	bf00      	nop

08004be4 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8004be4:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004be6:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004be8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bee:	d01a      	beq.n	8004c26 <SAI_DMARxCplt+0x42>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004bf0:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 8004bf2:	2100      	movs	r1, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004bf4:	6813      	ldr	r3, [r2, #0]
 8004bf6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004bfa:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004bfc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    hsai->XferCount = 0;
 8004bfe:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004c02:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004c04:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004c06:	d011      	beq.n	8004c2c <SAI_DMARxCplt+0x48>
 8004c08:	f06f 0561 	mvn.w	r5, #97	; 0x61
 8004c0c:	f06f 0205 	mvn.w	r2, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004c10:	3b02      	subs	r3, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004c12:	6801      	ldr	r1, [r0, #0]

    hsai->State = HAL_SAI_STATE_READY;
 8004c14:	2401      	movs	r4, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004c16:	42a3      	cmp	r3, r4
 8004c18:	bf98      	it	ls
 8004c1a:	462a      	movls	r2, r5
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004c1c:	690b      	ldr	r3, [r1, #16]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8004c22:	f880 4091 	strb.w	r4, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8004c26:	f005 fa7f 	bl	800a128 <HAL_SAI_RxCpltCallback>
#endif
}
 8004c2a:	bd38      	pop	{r3, r4, r5, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004c2c:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004c30:	2a01      	cmp	r2, #1
 8004c32:	bf0b      	itete	eq
 8004c34:	f06f 0571 	mvneq.w	r5, #113	; 0x71
 8004c38:	f06f 0561 	mvnne.w	r5, #97	; 0x61
 8004c3c:	f06f 0215 	mvneq.w	r2, #21
 8004c40:	f06f 0205 	mvnne.w	r2, #5
 8004c44:	e7e4      	b.n	8004c10 <SAI_DMARxCplt+0x2c>
 8004c46:	bf00      	nop

08004c48 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c48:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8004c4a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004c4c:	f005 fa70 	bl	800a130 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8004c50:	bd08      	pop	{r3, pc}
 8004c52:	bf00      	nop

08004c54 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c54:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c56:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004c58:	f7fd f850 	bl	8001cfc <HAL_DMA_GetError>
 8004c5c:	2802      	cmp	r0, #2
 8004c5e:	d025      	beq.n	8004cac <SAI_DMAError+0x58>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004c60:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004c64:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004c66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004c6a:	4b14      	ldr	r3, [pc, #80]	; (8004cbc <SAI_DMAError+0x68>)
 8004c6c:	4814      	ldr	r0, [pc, #80]	; (8004cc0 <SAI_DMAError+0x6c>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004c6e:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004c72:	680a      	ldr	r2, [r1, #0]
 8004c74:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004c78:	600a      	str	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004c7a:	681b      	ldr	r3, [r3, #0]
  __HAL_SAI_DISABLE(hsai);
 8004c7c:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004c7e:	fba0 2303 	umull	r2, r3, r0, r3
  __HAL_SAI_DISABLE(hsai);
 8004c82:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004c84:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8004c86:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004c8a:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8004c8c:	600a      	str	r2, [r1, #0]
    if (count == 0U)
 8004c8e:	b173      	cbz	r3, 8004cae <SAI_DMAError+0x5a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004c90:	6822      	ldr	r2, [r4, #0]
    count--;
 8004c92:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004c94:	6812      	ldr	r2, [r2, #0]
 8004c96:	03d2      	lsls	r2, r2, #15
 8004c98:	d4f9      	bmi.n	8004c8e <SAI_DMAError+0x3a>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8004c9a:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8004c9c:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8004c9e:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 8004ca0:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 8004ca4:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 8004ca8:	f005 fa38 	bl	800a11c <HAL_SAI_ErrorCallback>
#endif
  }
}
 8004cac:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004cae:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cb6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
 8004cba:	e7ee      	b.n	8004c9a <SAI_DMAError+0x46>
 8004cbc:	20000b08 	.word	0x20000b08
 8004cc0:	95cbec1b 	.word	0x95cbec1b

08004cc4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cc8:	4605      	mov	r5, r0
 8004cca:	b086      	sub	sp, #24
 8004ccc:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004cce:	f7fb fb65 	bl	800039c <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004cd2:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8004cd4:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004cd6:	6828      	ldr	r0, [r5, #0]
 8004cd8:	f001 fd86 	bl	80067e8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8004cdc:	4604      	mov	r4, r0
 8004cde:	b118      	cbz	r0, 8004ce8 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	b006      	add	sp, #24
 8004ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004ce8:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8004cea:	6828      	ldr	r0, [r5, #0]
 8004cec:	0409      	lsls	r1, r1, #16
 8004cee:	f002 fac7 	bl	8007280 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	d1f3      	bne.n	8004ce0 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cfc:	2308      	movs	r3, #8
 8004cfe:	2030      	movs	r0, #48	; 0x30
 8004d00:	2102      	movs	r1, #2
 8004d02:	e9cd 2300 	strd	r2, r3, [sp]
 8004d06:	2200      	movs	r2, #0
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004d0e:	4669      	mov	r1, sp
 8004d10:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d12:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004d16:	f001 fd51 	bl	80067bc <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004d1a:	6828      	ldr	r0, [r5, #0]
 8004d1c:	f002 fc30 	bl	8007580 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8004d20:	4604      	mov	r4, r0
 8004d22:	2800      	cmp	r0, #0
 8004d24:	d1dc      	bne.n	8004ce0 <SD_FindSCR+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 8004d26:	4682      	mov	sl, r0
 8004d28:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8004d2a:	f240 582a 	movw	r8, #1322	; 0x52a
 8004d2e:	e004      	b.n	8004d3a <SD_FindSCR+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004d30:	f7fb fb34 	bl	800039c <HAL_GetTick>
 8004d34:	1b83      	subs	r3, r0, r6
 8004d36:	3301      	adds	r3, #1
 8004d38:	d024      	beq.n	8004d84 <SD_FindSCR+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8004d3a:	6828      	ldr	r0, [r5, #0]
 8004d3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d3e:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8004d42:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8004d44:	d10c      	bne.n	8004d60 <SD_FindSCR+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8004d46:	0319      	lsls	r1, r3, #12
 8004d48:	d4f2      	bmi.n	8004d30 <SD_FindSCR+0x6c>
 8004d4a:	2c00      	cmp	r4, #0
 8004d4c:	d1f0      	bne.n	8004d30 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8004d4e:	f001 fd1b 	bl	8006788 <SDMMC_ReadFIFO>
 8004d52:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004d54:	6828      	ldr	r0, [r5, #0]
      index++;
 8004d56:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004d58:	f001 fd16 	bl	8006788 <SDMMC_ReadFIFO>
 8004d5c:	4682      	mov	sl, r0
      index++;
 8004d5e:	e7e7      	b.n	8004d30 <SD_FindSCR+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004d60:	071a      	lsls	r2, r3, #28
 8004d62:	d415      	bmi.n	8004d90 <SD_FindSCR+0xcc>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004d64:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d66:	079b      	lsls	r3, r3, #30
 8004d68:	d40f      	bmi.n	8004d8a <SD_FindSCR+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004d6a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004d6c:	f014 0420 	ands.w	r4, r4, #32
 8004d70:	d111      	bne.n	8004d96 <SD_FindSCR+0xd2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004d72:	fa9a f28a 	rev.w	r2, sl
 8004d76:	fa99 f389 	rev.w	r3, r9
 8004d7a:	4908      	ldr	r1, [pc, #32]	; (8004d9c <SD_FindSCR+0xd8>)
 8004d7c:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8004d7e:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 8004d82:	e7ad      	b.n	8004ce0 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8004d84:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004d88:	e7aa      	b.n	8004ce0 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004d8a:	2402      	movs	r4, #2
 8004d8c:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004d8e:	e7a7      	b.n	8004ce0 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004d90:	2408      	movs	r4, #8
 8004d92:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004d94:	e7a4      	b.n	8004ce0 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004d96:	2420      	movs	r4, #32
 8004d98:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8004d9a:	e7a1      	b.n	8004ce0 <SD_FindSCR+0x1c>
 8004d9c:	18000f3a 	.word	0x18000f3a

08004da0 <HAL_SD_ReadBlocks>:
{
 8004da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da4:	460c      	mov	r4, r1
 8004da6:	b087      	sub	sp, #28
 8004da8:	4683      	mov	fp, r0
 8004daa:	4691      	mov	r9, r2
 8004dac:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 8004dae:	f7fb faf5 	bl	800039c <HAL_GetTick>
  if (NULL == pData)
 8004db2:	2c00      	cmp	r4, #0
 8004db4:	f000 8087 	beq.w	8004ec6 <HAL_SD_ReadBlocks+0x126>
  if (hsd->State == HAL_SD_STATE_READY)
 8004db8:	f89b 3034 	ldrb.w	r3, [fp, #52]	; 0x34
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	fa5f f883 	uxtb.w	r8, r3
 8004dc2:	d16b      	bne.n	8004e9c <HAL_SD_ReadBlocks+0xfc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004dc4:	eb09 0306 	add.w	r3, r9, r6
 8004dc8:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004dcc:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004dce:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004dd0:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004dd4:	f200 8083 	bhi.w	8004ede <HAL_SD_ReadBlocks+0x13e>
    hsd->Instance->DCTRL = 0U;
 8004dd8:	f8db 3000 	ldr.w	r3, [fp]
    hsd->State = HAL_SD_STATE_BUSY;
 8004ddc:	2203      	movs	r2, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004dde:	f04f 0a02 	mov.w	sl, #2
 8004de2:	4605      	mov	r5, r0
    hsd->State = HAL_SD_STATE_BUSY;
 8004de4:	f88b 2034 	strb.w	r2, [fp, #52]	; 0x34
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004de8:	2290      	movs	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 8004dea:	62d9      	str	r1, [r3, #44]	; 0x2c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004dec:	0271      	lsls	r1, r6, #9
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004dee:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004df2:	9101      	str	r1, [sp, #4]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004df4:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004df6:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004dfc:	f8db 0000 	ldr.w	r0, [fp]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004e00:	9300      	str	r3, [sp, #0]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004e02:	f04f 0300 	mov.w	r3, #0
      add *= 512U;
 8004e06:	bf18      	it	ne
 8004e08:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004e0c:	9202      	str	r2, [sp, #8]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004e0e:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004e10:	e9cd a303 	strd	sl, r3, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004e14:	f001 fcd2 	bl	80067bc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8004e18:	f8db 2000 	ldr.w	r2, [fp]
    if (NumberOfBlocks > 1U)
 8004e1c:	2e01      	cmp	r6, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8004e1e:	68d3      	ldr	r3, [r2, #12]
 8004e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e24:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 8004e26:	d945      	bls.n	8004eb4 <HAL_SD_ReadBlocks+0x114>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004e28:	4649      	mov	r1, r9
 8004e2a:	f8db 0000 	ldr.w	r0, [fp]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004e2e:	f8cb a030 	str.w	sl, [fp, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004e32:	f001 fe21 	bl	8006a78 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 8004e36:	2800      	cmp	r0, #0
 8004e38:	d15b      	bne.n	8004ef2 <HAL_SD_ReadBlocks+0x152>
    dataremaining = config.DataLength;
 8004e3a:	f8dd a004 	ldr.w	sl, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004e3e:	e006      	b.n	8004e4e <HAL_SD_ReadBlocks+0xae>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8004e40:	f7fb faac 	bl	800039c <HAL_GetTick>
 8004e44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004e46:	1b40      	subs	r0, r0, r5
 8004e48:	4298      	cmp	r0, r3
 8004e4a:	f080 8087 	bcs.w	8004f5c <HAL_SD_ReadBlocks+0x1bc>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004e4e:	f8db 0000 	ldr.w	r0, [fp]
 8004e52:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004e54:	f413 7f95 	tst.w	r3, #298	; 0x12a
 8004e58:	d15b      	bne.n	8004f12 <HAL_SD_ReadBlocks+0x172>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8004e5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004e5c:	041a      	lsls	r2, r3, #16
 8004e5e:	d5ef      	bpl.n	8004e40 <HAL_SD_ReadBlocks+0xa0>
 8004e60:	f1ba 0f1f 	cmp.w	sl, #31
 8004e64:	d9ec      	bls.n	8004e40 <HAL_SD_ReadBlocks+0xa0>
 8004e66:	1d27      	adds	r7, r4, #4
 8004e68:	f104 0924 	add.w	r9, r4, #36	; 0x24
 8004e6c:	e001      	b.n	8004e72 <HAL_SD_ReadBlocks+0xd2>
 8004e6e:	f8db 0000 	ldr.w	r0, [fp]
          data = SDMMC_ReadFIFO(hsd->Instance);
 8004e72:	f001 fc89 	bl	8006788 <SDMMC_ReadFIFO>
 8004e76:	4602      	mov	r2, r0
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004e78:	0a00      	lsrs	r0, r0, #8
 8004e7a:	3704      	adds	r7, #4
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004e7c:	f807 2c08 	strb.w	r2, [r7, #-8]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004e80:	0c11      	lsrs	r1, r2, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004e82:	0e12      	lsrs	r2, r2, #24
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004e84:	f807 0c07 	strb.w	r0, [r7, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004e88:	f807 1c06 	strb.w	r1, [r7, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004e8c:	f807 2c05 	strb.w	r2, [r7, #-5]
        for (count = 0U; count < 8U; count++)
 8004e90:	454f      	cmp	r7, r9
 8004e92:	d1ec      	bne.n	8004e6e <HAL_SD_ReadBlocks+0xce>
 8004e94:	3420      	adds	r4, #32
        dataremaining -= 32U;
 8004e96:	f1aa 0a20 	sub.w	sl, sl, #32
 8004e9a:	e7d1      	b.n	8004e40 <HAL_SD_ReadBlocks+0xa0>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004e9c:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
    return HAL_ERROR;
 8004ea0:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004ea4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ea8:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
}
 8004eac:	4640      	mov	r0, r8
 8004eae:	b007      	add	sp, #28
 8004eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004eb4:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004eb6:	4649      	mov	r1, r9
 8004eb8:	f8db 0000 	ldr.w	r0, [fp]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004ebc:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004ec0:	f001 fd36 	bl	8006930 <SDMMC_CmdReadSingleBlock>
 8004ec4:	e7b7      	b.n	8004e36 <HAL_SD_ReadBlocks+0x96>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004ec6:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
    return HAL_ERROR;
 8004eca:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004ece:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 8004ed2:	4640      	mov	r0, r8
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004ed4:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
}
 8004ed8:	b007      	add	sp, #28
 8004eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004ede:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
}
 8004ee2:	4640      	mov	r0, r8
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004ee4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ee8:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
}
 8004eec:	b007      	add	sp, #28
 8004eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ef2:	f8db 3000 	ldr.w	r3, [fp]
          hsd->State = HAL_SD_STATE_READY;
 8004ef6:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ef8:	4c39      	ldr	r4, [pc, #228]	; (8004fe0 <HAL_SD_ReadBlocks+0x240>)
          hsd->Context = SD_CONTEXT_NONE;
 8004efa:	2200      	movs	r2, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004efc:	639c      	str	r4, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004efe:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 8004f02:	4318      	orrs	r0, r3
 8004f04:	f8cb 0038 	str.w	r0, [fp, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004f08:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004f0c:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
          return HAL_ERROR;
 8004f10:	e7cc      	b.n	8004eac <HAL_SD_ReadBlocks+0x10c>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8004f12:	68c3      	ldr	r3, [r0, #12]
 8004f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f18:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004f1a:	f8db 0000 	ldr.w	r0, [fp]
 8004f1e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004f20:	05db      	lsls	r3, r3, #23
 8004f22:	d501      	bpl.n	8004f28 <HAL_SD_ReadBlocks+0x188>
 8004f24:	2e01      	cmp	r6, #1
 8004f26:	d82c      	bhi.n	8004f82 <HAL_SD_ReadBlocks+0x1e2>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004f28:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004f2a:	f013 0308 	ands.w	r3, r3, #8
 8004f2e:	d141      	bne.n	8004fb4 <HAL_SD_ReadBlocks+0x214>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004f30:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8004f32:	f012 0202 	ands.w	r2, r2, #2
 8004f36:	d12f      	bne.n	8004f98 <HAL_SD_ReadBlocks+0x1f8>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004f38:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004f3a:	f013 0320 	ands.w	r3, r3, #32
 8004f3e:	d048      	beq.n	8004fd2 <HAL_SD_ReadBlocks+0x232>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f40:	4b27      	ldr	r3, [pc, #156]	; (8004fe0 <HAL_SD_ReadBlocks+0x240>)
      hsd->State = HAL_SD_STATE_READY;
 8004f42:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f44:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004f46:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 8004f4a:	f043 0320 	orr.w	r3, r3, #32
 8004f4e:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f52:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f56:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
      return HAL_ERROR;
 8004f5a:	e7a7      	b.n	8004eac <HAL_SD_ReadBlocks+0x10c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f5c:	f8db 3000 	ldr.w	r3, [fp]
        hsd->State = HAL_SD_STATE_READY;
 8004f60:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f62:	481f      	ldr	r0, [pc, #124]	; (8004fe0 <HAL_SD_ReadBlocks+0x240>)
        hsd->Context = SD_CONTEXT_NONE;
 8004f64:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 8004f66:	f04f 0803 	mov.w	r8, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f6a:	6398      	str	r0, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004f6c:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 8004f70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f74:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004f78:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004f7c:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
        return HAL_TIMEOUT;
 8004f80:	e794      	b.n	8004eac <HAL_SD_ReadBlocks+0x10c>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8004f82:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d0ce      	beq.n	8004f28 <HAL_SD_ReadBlocks+0x188>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004f8a:	f001 ff61 	bl	8006e50 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	d1af      	bne.n	8004ef2 <HAL_SD_ReadBlocks+0x152>
 8004f92:	f8db 0000 	ldr.w	r0, [fp]
 8004f96:	e7c7      	b.n	8004f28 <HAL_SD_ReadBlocks+0x188>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f98:	4a11      	ldr	r2, [pc, #68]	; (8004fe0 <HAL_SD_ReadBlocks+0x240>)
      hsd->State = HAL_SD_STATE_READY;
 8004f9a:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f9c:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004f9e:	f8db 2038 	ldr.w	r2, [fp, #56]	; 0x38
 8004fa2:	f042 0202 	orr.w	r2, r2, #2
 8004fa6:	f8cb 2038 	str.w	r2, [fp, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004faa:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004fae:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
      return HAL_ERROR;
 8004fb2:	e77b      	b.n	8004eac <HAL_SD_ReadBlocks+0x10c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004fb4:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <HAL_SD_ReadBlocks+0x240>)
      hsd->State = HAL_SD_STATE_READY;
 8004fb6:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 8004fb8:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004fba:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004fbc:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 8004fc0:	f043 0308 	orr.w	r3, r3, #8
 8004fc4:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004fc8:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004fcc:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
      return HAL_ERROR;
 8004fd0:	e76c      	b.n	8004eac <HAL_SD_ReadBlocks+0x10c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004fd2:	4904      	ldr	r1, [pc, #16]	; (8004fe4 <HAL_SD_ReadBlocks+0x244>)
    hsd->State = HAL_SD_STATE_READY;
 8004fd4:	2201      	movs	r2, #1
    return HAL_OK;
 8004fd6:	4698      	mov	r8, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004fd8:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004fda:	f88b 2034 	strb.w	r2, [fp, #52]	; 0x34
    return HAL_OK;
 8004fde:	e765      	b.n	8004eac <HAL_SD_ReadBlocks+0x10c>
 8004fe0:	1fe00fff 	.word	0x1fe00fff
 8004fe4:	18000f3a 	.word	0x18000f3a

08004fe8 <HAL_SD_WriteBlocks>:
{
 8004fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fec:	460d      	mov	r5, r1
 8004fee:	b089      	sub	sp, #36	; 0x24
 8004ff0:	4604      	mov	r4, r0
 8004ff2:	4692      	mov	sl, r2
 8004ff4:	461f      	mov	r7, r3
 8004ff6:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8004ffa:	f7fb f9cf 	bl	800039c <HAL_GetTick>
  if (NULL == pData)
 8004ffe:	2d00      	cmp	r5, #0
 8005000:	d069      	beq.n	80050d6 <HAL_SD_WriteBlocks+0xee>
  if (hsd->State == HAL_SD_STATE_READY)
 8005002:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005006:	2b01      	cmp	r3, #1
 8005008:	fa5f f983 	uxtb.w	r9, r3
 800500c:	d152      	bne.n	80050b4 <HAL_SD_WriteBlocks+0xcc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800500e:	eb0a 0307 	add.w	r3, sl, r7
 8005012:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005014:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005016:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005018:	63a1      	str	r1, [r4, #56]	; 0x38
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800501a:	d866      	bhi.n	80050ea <HAL_SD_WriteBlocks+0x102>
    hsd->Instance->DCTRL = 0U;
 800501c:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 800501e:	2203      	movs	r2, #3
 8005020:	4606      	mov	r6, r0
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005022:	0278      	lsls	r0, r7, #9
    hsd->State = HAL_SD_STATE_BUSY;
 8005024:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005028:	2290      	movs	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 800502a:	62d9      	str	r1, [r3, #44]	; 0x2c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800502c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005030:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005032:	9102      	str	r1, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005034:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005036:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005038:	f04f 0300 	mov.w	r3, #0
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800503c:	e9cd 0203 	strd	r0, r2, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005040:	6820      	ldr	r0, [r4, #0]
      add *= 512U;
 8005042:	bf18      	it	ne
 8005044:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005048:	9307      	str	r3, [sp, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800504a:	e9cd 3305 	strd	r3, r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800504e:	f001 fbb5 	bl	80067bc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005052:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 8005054:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005056:	68d3      	ldr	r3, [r2, #12]
 8005058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800505c:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 800505e:	d933      	bls.n	80050c8 <HAL_SD_WriteBlocks+0xe0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005060:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005062:	4651      	mov	r1, sl
 8005064:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005066:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005068:	f001 fe4e 	bl	8006d08 <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 800506c:	2800      	cmp	r0, #0
 800506e:	d144      	bne.n	80050fa <HAL_SD_WriteBlocks+0x112>
    dataremaining = config.DataLength;
 8005070:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8005074:	e004      	b.n	8005080 <HAL_SD_WriteBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005076:	f7fb f991 	bl	800039c <HAL_GetTick>
 800507a:	1b80      	subs	r0, r0, r6
 800507c:	4540      	cmp	r0, r8
 800507e:	d269      	bcs.n	8005154 <HAL_SD_WriteBlocks+0x16c>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8005080:	6820      	ldr	r0, [r4, #0]
 8005082:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005084:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 8005088:	d143      	bne.n	8005112 <HAL_SD_WriteBlocks+0x12a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800508a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800508c:	045a      	lsls	r2, r3, #17
 800508e:	d5f2      	bpl.n	8005076 <HAL_SD_WriteBlocks+0x8e>
 8005090:	f1bb 0f1f 	cmp.w	fp, #31
 8005094:	d9ef      	bls.n	8005076 <HAL_SD_WriteBlocks+0x8e>
 8005096:	f105 0a20 	add.w	sl, r5, #32
 800509a:	e000      	b.n	800509e <HAL_SD_WriteBlocks+0xb6>
 800509c:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800509e:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80050a2:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 80050a4:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80050a6:	f001 fb73 	bl	8006790 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80050aa:	4555      	cmp	r5, sl
 80050ac:	d1f6      	bne.n	800509c <HAL_SD_WriteBlocks+0xb4>
        dataremaining -= 32U;
 80050ae:	f1ab 0b20 	sub.w	fp, fp, #32
 80050b2:	e7e0      	b.n	8005076 <HAL_SD_WriteBlocks+0x8e>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80050b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80050b6:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80050ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050be:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80050c0:	4648      	mov	r0, r9
 80050c2:	b009      	add	sp, #36	; 0x24
 80050c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80050c8:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80050ca:	4651      	mov	r1, sl
 80050cc:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80050ce:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80050d0:	f001 fd76 	bl	8006bc0 <SDMMC_CmdWriteSingleBlock>
 80050d4:	e7ca      	b.n	800506c <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80050d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80050d8:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80050dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 80050e0:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80050e2:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80050e4:	b009      	add	sp, #36	; 0x24
 80050e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80050ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 80050ec:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80050ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80050f2:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80050f4:	b009      	add	sp, #36	; 0x24
 80050f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80050fa:	6823      	ldr	r3, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 80050fc:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80050fe:	4d2f      	ldr	r5, [pc, #188]	; (80051bc <HAL_SD_WriteBlocks+0x1d4>)
          hsd->Context = SD_CONTEXT_NONE;
 8005100:	2200      	movs	r2, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005102:	639d      	str	r5, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005104:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005106:	4318      	orrs	r0, r3
 8005108:	63a0      	str	r0, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800510a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800510e:	6322      	str	r2, [r4, #48]	; 0x30
          return HAL_ERROR;
 8005110:	e7d6      	b.n	80050c0 <HAL_SD_WriteBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005112:	68c3      	ldr	r3, [r0, #12]
 8005114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005118:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800511a:	6820      	ldr	r0, [r4, #0]
 800511c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800511e:	05db      	lsls	r3, r3, #23
 8005120:	d501      	bpl.n	8005126 <HAL_SD_WriteBlocks+0x13e>
 8005122:	2f01      	cmp	r7, #1
 8005124:	d823      	bhi.n	800516e <HAL_SD_WriteBlocks+0x186>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005126:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005128:	f013 0308 	ands.w	r3, r3, #8
 800512c:	d133      	bne.n	8005196 <HAL_SD_WriteBlocks+0x1ae>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800512e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005130:	f012 0202 	ands.w	r2, r2, #2
 8005134:	d124      	bne.n	8005180 <HAL_SD_WriteBlocks+0x198>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8005136:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005138:	f013 0310 	ands.w	r3, r3, #16
 800513c:	d037      	beq.n	80051ae <HAL_SD_WriteBlocks+0x1c6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800513e:	4b1f      	ldr	r3, [pc, #124]	; (80051bc <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8005140:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005142:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005144:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005146:	f043 0310 	orr.w	r3, r3, #16
 800514a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800514c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005150:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005152:	e7b5      	b.n	80050c0 <HAL_SD_WriteBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005154:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8005156:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005158:	4818      	ldr	r0, [pc, #96]	; (80051bc <HAL_SD_WriteBlocks+0x1d4>)
        hsd->Context = SD_CONTEXT_NONE;
 800515a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800515c:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005160:	6388      	str	r0, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005162:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005164:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005166:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800516a:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 800516c:	e7a8      	b.n	80050c0 <HAL_SD_WriteBlocks+0xd8>
      if (hsd->SdCard.CardType != CARD_SECURED)
 800516e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005170:	2b03      	cmp	r3, #3
 8005172:	d0d8      	beq.n	8005126 <HAL_SD_WriteBlocks+0x13e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005174:	f001 fe6c 	bl	8006e50 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8005178:	2800      	cmp	r0, #0
 800517a:	d1be      	bne.n	80050fa <HAL_SD_WriteBlocks+0x112>
 800517c:	6820      	ldr	r0, [r4, #0]
 800517e:	e7d2      	b.n	8005126 <HAL_SD_WriteBlocks+0x13e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005180:	4a0e      	ldr	r2, [pc, #56]	; (80051bc <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8005182:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005184:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005186:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005188:	f042 0202 	orr.w	r2, r2, #2
 800518c:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800518e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005192:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005194:	e794      	b.n	80050c0 <HAL_SD_WriteBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005196:	4b09      	ldr	r3, [pc, #36]	; (80051bc <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8005198:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 800519a:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800519c:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800519e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051a0:	f043 0308 	orr.w	r3, r3, #8
 80051a4:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80051a6:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80051aa:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 80051ac:	e788      	b.n	80050c0 <HAL_SD_WriteBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80051ae:	4904      	ldr	r1, [pc, #16]	; (80051c0 <HAL_SD_WriteBlocks+0x1d8>)
    hsd->State = HAL_SD_STATE_READY;
 80051b0:	2201      	movs	r2, #1
    return HAL_OK;
 80051b2:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80051b4:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80051b6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 80051ba:	e781      	b.n	80050c0 <HAL_SD_WriteBlocks+0xd8>
 80051bc:	1fe00fff 	.word	0x1fe00fff
 80051c0:	18000f3a 	.word	0x18000f3a

080051c4 <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop

080051c8 <HAL_SD_GetCardCSD>:
{
 80051c8:	b430      	push	{r4, r5}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80051ca:	6e02      	ldr	r2, [r0, #96]	; 0x60
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80051cc:	2400      	movs	r4, #0
{
 80051ce:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80051d0:	0f92      	lsrs	r2, r2, #30
 80051d2:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80051d4:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80051d6:	f3c2 6283 	ubfx	r2, r2, #26, #4
 80051da:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80051dc:	f890 2063 	ldrb.w	r2, [r0, #99]	; 0x63
 80051e0:	f002 0203 	and.w	r2, r2, #3
 80051e4:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80051e6:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
 80051ea:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80051ec:	f890 2061 	ldrb.w	r2, [r0, #97]	; 0x61
 80051f0:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80051f2:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
 80051f6:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80051f8:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80051fa:	0d12      	lsrs	r2, r2, #20
 80051fc:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80051fe:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
 8005202:	f002 020f 	and.w	r2, r2, #15
 8005206:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005208:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800520a:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800520e:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005210:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8005212:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8005216:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005218:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800521a:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800521e:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005220:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8005222:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8005226:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005228:	734c      	strb	r4, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 800522a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800522c:	2a00      	cmp	r2, #0
 800522e:	f040 8086 	bne.w	800533e <HAL_SD_GetCardCSD+0x176>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005232:	6e45      	ldr	r5, [r0, #100]	; 0x64
 8005234:	f640 72fc 	movw	r2, #4092	; 0xffc
 8005238:	6e80      	ldr	r0, [r0, #104]	; 0x68
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800523a:	2401      	movs	r4, #1
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800523c:	ea02 0285 	and.w	r2, r2, r5, lsl #2
    hsd->SdCard.LogBlockSize = 512U;
 8005240:	f44f 7500 	mov.w	r5, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005244:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8005248:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800524a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800524c:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8005250:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005252:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 8005256:	f002 0207 	and.w	r2, r2, #7
 800525a:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800525c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800525e:	f3c2 5242 	ubfx	r2, r2, #21, #3
 8005262:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005264:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005266:	f3c2 4282 	ubfx	r2, r2, #18, #3
 800526a:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800526c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800526e:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 8005272:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005274:	690a      	ldr	r2, [r1, #16]
 8005276:	4422      	add	r2, r4
 8005278:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800527a:	7e08      	ldrb	r0, [r1, #24]
 800527c:	f000 0007 	and.w	r0, r0, #7
 8005280:	3002      	adds	r0, #2
 8005282:	4082      	lsls	r2, r0
 8005284:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005286:	7a08      	ldrb	r0, [r1, #8]
    hsd->SdCard.LogBlockSize = 512U;
 8005288:	659d      	str	r5, [r3, #88]	; 0x58
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800528a:	f000 000f 	and.w	r0, r0, #15
 800528e:	fa04 f000 	lsl.w	r0, r4, r0
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005292:	0a44      	lsrs	r4, r0, #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005294:	6518      	str	r0, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005296:	fb02 f204 	mul.w	r2, r2, r4
 800529a:	655a      	str	r2, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800529c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  pCSD->Reserved3 = 0;
 800529e:	2500      	movs	r5, #0
  pCSD->Reserved4 = 1;
 80052a0:	2401      	movs	r4, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80052a2:	f3c2 3280 	ubfx	r2, r2, #14, #1
  return HAL_OK;
 80052a6:	4628      	mov	r0, r5
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80052a8:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80052aa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80052ac:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 80052b0:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80052b2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80052b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052b8:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80052ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80052bc:	0fd2      	lsrs	r2, r2, #31
 80052be:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80052c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80052c2:	f3c2 7241 	ubfx	r2, r2, #29, #2
 80052c6:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80052c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80052ca:	f3c2 6282 	ubfx	r2, r2, #26, #3
 80052ce:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80052d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80052d2:	f3c2 5283 	ubfx	r2, r2, #22, #4
 80052d6:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80052d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80052da:	f3c2 5240 	ubfx	r2, r2, #21, #1
 80052de:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 80052e2:	f881 5021 	strb.w	r5, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80052e6:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 80052ea:	4022      	ands	r2, r4
 80052ec:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80052f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80052f2:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80052f6:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80052fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80052fc:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8005300:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005304:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005306:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800530a:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800530e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005310:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8005314:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005318:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800531a:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800531e:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005322:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005324:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8005328:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800532c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800532e:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8005332:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8005336:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
}
 800533a:	bc30      	pop	{r4, r5}
 800533c:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800533e:	2a01      	cmp	r2, #1
 8005340:	d111      	bne.n	8005366 <HAL_SD_GetCardCSD+0x19e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005342:	6e42      	ldr	r2, [r0, #100]	; 0x64
    hsd->SdCard.BlockSize = 512U;
 8005344:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005348:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
 800534c:	0412      	lsls	r2, r2, #16
 800534e:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 8005352:	4322      	orrs	r2, r4
 8005354:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005356:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 8005358:	6518      	str	r0, [r3, #80]	; 0x50
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800535a:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800535c:	6598      	str	r0, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800535e:	0292      	lsls	r2, r2, #10
 8005360:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005362:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005364:	e79a      	b.n	800529c <HAL_SD_GetCardCSD+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005366:	6802      	ldr	r2, [r0, #0]
    hsd->State = HAL_SD_STATE_READY;
 8005368:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800536a:	4c05      	ldr	r4, [pc, #20]	; (8005380 <HAL_SD_GetCardCSD+0x1b8>)
    return HAL_ERROR;
 800536c:	4608      	mov	r0, r1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800536e:	6394      	str	r4, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005372:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005376:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005378:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 800537c:	bc30      	pop	{r4, r5}
 800537e:	4770      	bx	lr
 8005380:	1fe00fff 	.word	0x1fe00fff

08005384 <HAL_SD_InitCard>:
{
 8005384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005388:	2200      	movs	r2, #0
{
 800538a:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800538c:	2300      	movs	r3, #0
{
 800538e:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005390:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005394:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005398:	e9cd 2308 	strd	r2, r3, [sp, #32]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800539c:	f7fe fe52 	bl	8004044 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 80053a0:	2800      	cmp	r0, #0
 80053a2:	d06b      	beq.n	800547c <HAL_SD_InitCard+0xf8>
  Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 80053a4:	69a3      	ldr	r3, [r4, #24]
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80053a6:	0a06      	lsrs	r6, r0, #8
 80053a8:	4aae      	ldr	r2, [pc, #696]	; (8005664 <HAL_SD_InitCard+0x2e0>)
 80053aa:	4605      	mov	r5, r0
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80053ac:	2b02      	cmp	r3, #2
  Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 80053ae:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80053b0:	fba2 2606 	umull	r2, r6, r2, r6
 80053b4:	ea4f 1616 	mov.w	r6, r6, lsr #4
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80053b8:	d05a      	beq.n	8005470 <HAL_SD_InitCard+0xec>
  (void)SDMMC_Init(hsd->Instance, Init);
 80053ba:	aa09      	add	r2, sp, #36	; 0x24
 80053bc:	960a      	str	r6, [sp, #40]	; 0x28
 80053be:	ab06      	add	r3, sp, #24
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80053c0:	0076      	lsls	r6, r6, #1
  (void)SDMMC_Init(hsd->Instance, Init);
 80053c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80053c4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80053c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053ca:	6820      	ldr	r0, [r4, #0]
 80053cc:	f001 f9c2 	bl	8006754 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80053d0:	6820      	ldr	r0, [r4, #0]
 80053d2:	f001 f9e3 	bl	800679c <SDMMC_PowerState_ON>
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80053d6:	48a4      	ldr	r0, [pc, #656]	; (8005668 <HAL_SD_InitCard+0x2e4>)
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80053d8:	fbb5 f5f6 	udiv	r5, r5, r6
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80053dc:	fbb0 f0f5 	udiv	r0, r0, r5
 80053e0:	3001      	adds	r0, #1
 80053e2:	f7fa ffe1 	bl	80003a8 <HAL_Delay>
  __IO uint32_t count = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	9305      	str	r3, [sp, #20]
  uint32_t tickstart = HAL_GetTick();
 80053ea:	f7fa ffd7 	bl	800039c <HAL_GetTick>
 80053ee:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80053f0:	6820      	ldr	r0, [r4, #0]
 80053f2:	f001 fedb 	bl	80071ac <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 80053f6:	4605      	mov	r5, r0
 80053f8:	b148      	cbz	r0, 800540e <HAL_SD_InitCard+0x8a>
    hsd->State = HAL_SD_STATE_READY;
 80053fa:	2601      	movs	r6, #1
 80053fc:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005400:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005402:	4328      	orrs	r0, r5
 8005404:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8005406:	4630      	mov	r0, r6
 8005408:	b018      	add	sp, #96	; 0x60
 800540a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800540e:	6820      	ldr	r0, [r4, #0]
 8005410:	f001 fef8 	bl	8007204 <SDMMC_CmdOperCond>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005414:	2800      	cmp	r0, #0
 8005416:	f040 80d3 	bne.w	80055c0 <HAL_SD_InitCard+0x23c>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800541a:	2301      	movs	r3, #1
 800541c:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800541e:	2100      	movs	r1, #0
 8005420:	6820      	ldr	r0, [r4, #0]
 8005422:	f001 ff2d 	bl	8007280 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005426:	2800      	cmp	r0, #0
 8005428:	d132      	bne.n	8005490 <HAL_SD_InitCard+0x10c>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800542a:	9b05      	ldr	r3, [sp, #20]
 800542c:	f64f 77fe 	movw	r7, #65534	; 0xfffe
 8005430:	42bb      	cmp	r3, r7
 8005432:	f200 811f 	bhi.w	8005674 <HAL_SD_InitCard+0x2f0>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8005436:	f8df 8238 	ldr.w	r8, [pc, #568]	; 8005670 <HAL_SD_InitCard+0x2ec>
 800543a:	e010      	b.n	800545e <HAL_SD_InitCard+0xda>
 800543c:	6820      	ldr	r0, [r4, #0]
 800543e:	f001 ffc3 	bl	80073c8 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005442:	4601      	mov	r1, r0
 8005444:	bb20      	cbnz	r0, 8005490 <HAL_SD_InitCard+0x10c>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005446:	6820      	ldr	r0, [r4, #0]
 8005448:	f001 f9b4 	bl	80067b4 <SDMMC_GetResponse>
    count++;
 800544c:	9b05      	ldr	r3, [sp, #20]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800544e:	2800      	cmp	r0, #0
    count++;
 8005450:	f103 0301 	add.w	r3, r3, #1
 8005454:	9305      	str	r3, [sp, #20]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005456:	9b05      	ldr	r3, [sp, #20]
 8005458:	db1d      	blt.n	8005496 <HAL_SD_InitCard+0x112>
 800545a:	42bb      	cmp	r3, r7
 800545c:	d81b      	bhi.n	8005496 <HAL_SD_InitCard+0x112>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800545e:	2100      	movs	r1, #0
 8005460:	6820      	ldr	r0, [r4, #0]
 8005462:	f001 ff0d 	bl	8007280 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8005466:	4641      	mov	r1, r8
    if (errorstate != HAL_SD_ERROR_NONE)
 8005468:	4605      	mov	r5, r0
 800546a:	2800      	cmp	r0, #0
 800546c:	d0e6      	beq.n	800543c <HAL_SD_InitCard+0xb8>
 800546e:	e7c4      	b.n	80053fa <HAL_SD_InitCard+0x76>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005470:	6822      	ldr	r2, [r4, #0]
 8005472:	6813      	ldr	r3, [r2, #0]
 8005474:	f043 0310 	orr.w	r3, r3, #16
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	e79e      	b.n	80053ba <HAL_SD_InitCard+0x36>
    hsd->State = HAL_SD_STATE_READY;
 800547c:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800547e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
}
 8005482:	4630      	mov	r0, r6
    hsd->State = HAL_SD_STATE_READY;
 8005484:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005488:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800548a:	b018      	add	sp, #96	; 0x60
 800548c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005490:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005494:	e7b1      	b.n	80053fa <HAL_SD_InitCard+0x76>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8005496:	9a05      	ldr	r2, [sp, #20]
 8005498:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800549c:	429a      	cmp	r2, r3
 800549e:	f200 80ed 	bhi.w	800567c <HAL_SD_InitCard+0x2f8>
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80054a2:	0043      	lsls	r3, r0, #1
 80054a4:	d505      	bpl.n	80054b2 <HAL_SD_InitCard+0x12e>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80054a6:	69a3      	ldr	r3, [r4, #24]
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80054a8:	2201      	movs	r2, #1
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80054aa:	2b02      	cmp	r3, #2
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80054ac:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80054ae:	f000 8094 	beq.w	80055da <HAL_SD_InitCard+0x256>
  uint16_t sd_rca = 1U;
 80054b2:	2301      	movs	r3, #1
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80054b4:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 80054b6:	f8ad 3012 	strh.w	r3, [sp, #18]
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80054ba:	f001 f977 	bl	80067ac <SDMMC_GetPowerState>
 80054be:	b348      	cbz	r0, 8005514 <HAL_SD_InitCard+0x190>
  if (hsd->SdCard.CardType != CARD_SECURED)
 80054c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d132      	bne.n	800552c <HAL_SD_InitCard+0x1a8>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80054c6:	2104      	movs	r1, #4
 80054c8:	6820      	ldr	r0, [r4, #0]
 80054ca:	f001 f973 	bl	80067b4 <SDMMC_GetResponse>
 80054ce:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80054d0:	a90d      	add	r1, sp, #52	; 0x34
 80054d2:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80054d4:	0d1b      	lsrs	r3, r3, #20
 80054d6:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80054d8:	f7ff fe76 	bl	80051c8 <HAL_SD_GetCardCSD>
 80054dc:	4606      	mov	r6, r0
 80054de:	2800      	cmp	r0, #0
 80054e0:	f040 80bd 	bne.w	800565e <HAL_SD_InitCard+0x2da>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80054e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80054e6:	6820      	ldr	r0, [r4, #0]
 80054e8:	0409      	lsls	r1, r1, #16
 80054ea:	f001 fdbb 	bl	8007064 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 80054ee:	b998      	cbnz	r0, 8005518 <HAL_SD_InitCard+0x194>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80054f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054f4:	6820      	ldr	r0, [r4, #0]
 80054f6:	f001 f977 	bl	80067e8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80054fa:	2800      	cmp	r0, #0
 80054fc:	d083      	beq.n	8005406 <HAL_SD_InitCard+0x82>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054fe:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8005500:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005502:	495a      	ldr	r1, [pc, #360]	; (800566c <HAL_SD_InitCard+0x2e8>)
    return HAL_ERROR;
 8005504:	4616      	mov	r6, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005506:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005508:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800550a:	4318      	orrs	r0, r3
 800550c:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800550e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_ERROR;
 8005512:	e778      	b.n	8005406 <HAL_SD_InitCard+0x82>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005514:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 8005518:	2601      	movs	r6, #1
 800551a:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800551e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005520:	4308      	orrs	r0, r1
 8005522:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8005524:	4630      	mov	r0, r6
 8005526:	b018      	add	sp, #96	; 0x60
 8005528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800552c:	6820      	ldr	r0, [r4, #0]
 800552e:	f002 f8cd 	bl	80076cc <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005532:	2800      	cmp	r0, #0
 8005534:	d1f0      	bne.n	8005518 <HAL_SD_InitCard+0x194>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005536:	4601      	mov	r1, r0
 8005538:	6820      	ldr	r0, [r4, #0]
 800553a:	f001 f93b 	bl	80067b4 <SDMMC_GetResponse>
 800553e:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005540:	2104      	movs	r1, #4
 8005542:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005544:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005546:	f001 f935 	bl	80067b4 <SDMMC_GetResponse>
 800554a:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800554c:	2108      	movs	r1, #8
 800554e:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005550:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005552:	f001 f92f 	bl	80067b4 <SDMMC_GetResponse>
 8005556:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005558:	210c      	movs	r1, #12
 800555a:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800555c:	67a3      	str	r3, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800555e:	f001 f929 	bl	80067b4 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8005562:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005564:	67e0      	str	r0, [r4, #124]	; 0x7c
  if (hsd->SdCard.CardType != CARD_SECURED)
 8005566:	2b03      	cmp	r3, #3
 8005568:	d0ad      	beq.n	80054c6 <HAL_SD_InitCard+0x142>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800556a:	f10d 0112 	add.w	r1, sp, #18
 800556e:	6820      	ldr	r0, [r4, #0]
 8005570:	f002 f922 	bl	80077b8 <SDMMC_CmdSetRelAdd>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005574:	2800      	cmp	r0, #0
 8005576:	d1cf      	bne.n	8005518 <HAL_SD_InitCard+0x194>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8005578:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800557a:	2b03      	cmp	r3, #3
 800557c:	d0a3      	beq.n	80054c6 <HAL_SD_InitCard+0x142>
    hsd->SdCard.RelCardAdd = sd_rca;
 800557e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005582:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 8005584:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005586:	0409      	lsls	r1, r1, #16
 8005588:	f002 f8dc 	bl	8007744 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 800558c:	2800      	cmp	r0, #0
 800558e:	d1c3      	bne.n	8005518 <HAL_SD_InitCard+0x194>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005590:	4601      	mov	r1, r0
 8005592:	6820      	ldr	r0, [r4, #0]
 8005594:	f001 f90e 	bl	80067b4 <SDMMC_GetResponse>
 8005598:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800559a:	2104      	movs	r1, #4
 800559c:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800559e:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80055a0:	f001 f908 	bl	80067b4 <SDMMC_GetResponse>
 80055a4:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80055a6:	2108      	movs	r1, #8
 80055a8:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80055aa:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80055ac:	f001 f902 	bl	80067b4 <SDMMC_GetResponse>
 80055b0:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80055b2:	210c      	movs	r1, #12
 80055b4:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80055b6:	66a3      	str	r3, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80055b8:	f001 f8fc 	bl	80067b4 <SDMMC_GetResponse>
 80055bc:	66e0      	str	r0, [r4, #108]	; 0x6c
 80055be:	e782      	b.n	80054c6 <HAL_SD_InitCard+0x142>
    hsd->SdCard.CardVersion = CARD_V1_X;
 80055c0:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80055c2:	6820      	ldr	r0, [r4, #0]
 80055c4:	f001 fdf2 	bl	80071ac <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 80055c8:	4605      	mov	r5, r0
 80055ca:	2800      	cmp	r0, #0
 80055cc:	f47f af15 	bne.w	80053fa <HAL_SD_InitCard+0x76>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80055d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	f47f af29 	bne.w	800542a <HAL_SD_InitCard+0xa6>
 80055d8:	e721      	b.n	800541e <HAL_SD_InitCard+0x9a>
      if ((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80055da:	01c7      	lsls	r7, r0, #7
 80055dc:	f57f af69 	bpl.w	80054b2 <HAL_SD_InitCard+0x12e>
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80055e0:	6822      	ldr	r2, [r4, #0]
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80055e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055e6:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80055e8:	6813      	ldr	r3, [r2, #0]
 80055ea:	f043 0308 	orr.w	r3, r3, #8
 80055ee:	6013      	str	r3, [r2, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80055f0:	6820      	ldr	r0, [r4, #0]
 80055f2:	f002 fa81 	bl	8007af8 <SDMMC_CmdVoltageSwitch>
        if (errorstate != HAL_SD_ERROR_NONE)
 80055f6:	4605      	mov	r5, r0
 80055f8:	b128      	cbz	r0, 8005606 <HAL_SD_InitCard+0x282>
 80055fa:	e6fe      	b.n	80053fa <HAL_SD_InitCard+0x76>
          if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80055fc:	f7fa fece 	bl	800039c <HAL_GetTick>
 8005600:	1b80      	subs	r0, r0, r6
 8005602:	3001      	adds	r0, #1
 8005604:	d03d      	beq.n	8005682 <HAL_SD_InitCard+0x2fe>
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800560a:	0155      	lsls	r5, r2, #5
 800560c:	d5f6      	bpl.n	80055fc <HAL_SD_InitCard+0x278>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800560e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005612:	639a      	str	r2, [r3, #56]	; 0x38
        if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005618:	02d8      	lsls	r0, r3, #11
 800561a:	f57f af39 	bpl.w	8005490 <HAL_SD_InitCard+0x10c>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800561e:	2001      	movs	r0, #1
 8005620:	f7ff fdd0 	bl	80051c4 <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8005624:	6822      	ldr	r2, [r4, #0]
 8005626:	6813      	ldr	r3, [r2, #0]
 8005628:	f043 0304 	orr.w	r3, r3, #4
 800562c:	6013      	str	r3, [r2, #0]
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800562e:	e004      	b.n	800563a <HAL_SD_InitCard+0x2b6>
            if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005630:	f7fa feb4 	bl	800039c <HAL_GetTick>
 8005634:	1b80      	subs	r0, r0, r6
 8005636:	3001      	adds	r0, #1
 8005638:	d023      	beq.n	8005682 <HAL_SD_InitCard+0x2fe>
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800563e:	0191      	lsls	r1, r2, #6
 8005640:	d5f6      	bpl.n	8005630 <HAL_SD_InitCard+0x2ac>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8005642:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005646:	639a      	str	r2, [r3, #56]	; 0x38
          if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800564c:	02d2      	lsls	r2, r2, #11
 800564e:	d415      	bmi.n	800567c <HAL_SD_InitCard+0x2f8>
          hsd->Instance->POWER = 0x13U;
 8005650:	2113      	movs	r1, #19
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8005652:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
          hsd->Instance->POWER = 0x13U;
 8005656:	6019      	str	r1, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	639a      	str	r2, [r3, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800565c:	e729      	b.n	80054b2 <HAL_SD_InitCard+0x12e>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800565e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005662:	e759      	b.n	8005518 <HAL_SD_InitCard+0x194>
 8005664:	014f8b59 	.word	0x014f8b59
 8005668:	00012110 	.word	0x00012110
 800566c:	1fe00fff 	.word	0x1fe00fff
 8005670:	c1100000 	.word	0xc1100000
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8005674:	9b05      	ldr	r3, [sp, #20]
 8005676:	42bb      	cmp	r3, r7
 8005678:	f67f af1b 	bls.w	80054b2 <HAL_SD_InitCard+0x12e>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800567c:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8005680:	e6bb      	b.n	80053fa <HAL_SD_InitCard+0x76>
            return HAL_SD_ERROR_TIMEOUT;
 8005682:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8005686:	e6b8      	b.n	80053fa <HAL_SD_InitCard+0x76>

08005688 <HAL_SD_GetCardStatus>:
{
 8005688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800568c:	4604      	mov	r4, r0
 800568e:	b097      	sub	sp, #92	; 0x5c
 8005690:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8005692:	f7fa fe83 	bl	800039c <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005696:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 8005698:	4606      	mov	r6, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800569a:	6820      	ldr	r0, [r4, #0]
 800569c:	f001 f88a 	bl	80067b4 <SDMMC_GetResponse>
 80056a0:	0181      	lsls	r1, r0, #6
 80056a2:	d45a      	bmi.n	800575a <HAL_SD_GetCardStatus+0xd2>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80056a4:	2140      	movs	r1, #64	; 0x40
 80056a6:	6820      	ldr	r0, [r4, #0]
 80056a8:	f001 f89e 	bl	80067e8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80056ac:	b1e8      	cbz	r0, 80056ea <HAL_SD_GetCardStatus+0x62>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80056ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056b0:	63a3      	str	r3, [r4, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80056b2:	6823      	ldr	r3, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056b4:	495b      	ldr	r1, [pc, #364]	; (8005824 <HAL_SD_GetCardStatus+0x19c>)
    hsd->State = HAL_SD_STATE_READY;
 80056b6:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056b8:	6399      	str	r1, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80056ba:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
 80056bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056be:	4318      	orrs	r0, r3
 80056c0:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80056c2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80056c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056ca:	6820      	ldr	r0, [r4, #0]
 80056cc:	f001 f88c 	bl	80067e8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80056d0:	b138      	cbz	r0, 80056e2 <HAL_SD_GetCardStatus+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 80056d2:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056d4:	6822      	ldr	r2, [r4, #0]
 80056d6:	4953      	ldr	r1, [pc, #332]	; (8005824 <HAL_SD_GetCardStatus+0x19c>)
    status = HAL_ERROR;
 80056d8:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056da:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80056dc:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80056de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80056e2:	4630      	mov	r0, r6
 80056e4:	b017      	add	sp, #92	; 0x5c
 80056e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80056ea:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80056ec:	6820      	ldr	r0, [r4, #0]
 80056ee:	0409      	lsls	r1, r1, #16
 80056f0:	f001 fdc6 	bl	8007280 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d1da      	bne.n	80056ae <HAL_SD_GetCardStatus+0x26>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80056f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056fc:	2340      	movs	r3, #64	; 0x40
 80056fe:	2060      	movs	r0, #96	; 0x60
 8005700:	2102      	movs	r1, #2
 8005702:	e9cd 2300 	strd	r2, r3, [sp]
 8005706:	2200      	movs	r2, #0
 8005708:	2301      	movs	r3, #1
 800570a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800570e:	4669      	mov	r1, sp
 8005710:	6820      	ldr	r0, [r4, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005712:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005716:	f001 f851 	bl	80067bc <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800571a:	6820      	ldr	r0, [r4, #0]
 800571c:	f002 f946 	bl	80079ac <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005720:	2800      	cmp	r0, #0
 8005722:	d1c4      	bne.n	80056ae <HAL_SD_GetCardStatus+0x26>
  uint32_t *pData = pSDstatus;
 8005724:	af06      	add	r7, sp, #24
 8005726:	e004      	b.n	8005732 <HAL_SD_GetCardStatus+0xaa>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005728:	f7fa fe38 	bl	800039c <HAL_GetTick>
 800572c:	1b80      	subs	r0, r0, r6
 800572e:	3001      	adds	r0, #1
 8005730:	d017      	beq.n	8005762 <HAL_SD_GetCardStatus+0xda>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005736:	f412 7f95 	tst.w	r2, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800573a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800573c:	d114      	bne.n	8005768 <HAL_SD_GetCardStatus+0xe0>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800573e:	0412      	lsls	r2, r2, #16
 8005740:	d5f2      	bpl.n	8005728 <HAL_SD_GetCardStatus+0xa0>
 8005742:	f107 0820 	add.w	r8, r7, #32
 8005746:	e000      	b.n	800574a <HAL_SD_GetCardStatus+0xc2>
 8005748:	6823      	ldr	r3, [r4, #0]
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800574a:	4618      	mov	r0, r3
 800574c:	f001 f81c 	bl	8006788 <SDMMC_ReadFIFO>
 8005750:	f847 0b04 	str.w	r0, [r7], #4
      for (count = 0U; count < 8U; count++)
 8005754:	4547      	cmp	r7, r8
 8005756:	d1f7      	bne.n	8005748 <HAL_SD_GetCardStatus+0xc0>
 8005758:	e7e6      	b.n	8005728 <HAL_SD_GetCardStatus+0xa0>
  if (errorstate != HAL_SD_ERROR_NONE)
 800575a:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800575c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005760:	e7a8      	b.n	80056b4 <HAL_SD_GetCardStatus+0x2c>
      return HAL_SD_ERROR_TIMEOUT;
 8005762:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005766:	e7a4      	b.n	80056b2 <HAL_SD_GetCardStatus+0x2a>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005768:	0710      	lsls	r0, r2, #28
 800576a:	d455      	bmi.n	8005818 <HAL_SD_GetCardStatus+0x190>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800576c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800576e:	0791      	lsls	r1, r2, #30
 8005770:	d454      	bmi.n	800581c <HAL_SD_GetCardStatus+0x194>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005774:	0692      	lsls	r2, r2, #26
 8005776:	d50a      	bpl.n	800578e <HAL_SD_GetCardStatus+0x106>
 8005778:	e052      	b.n	8005820 <HAL_SD_GetCardStatus+0x198>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800577a:	f001 f805 	bl	8006788 <SDMMC_ReadFIFO>
 800577e:	f847 0b04 	str.w	r0, [r7], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005782:	f7fa fe0b 	bl	800039c <HAL_GetTick>
 8005786:	1b80      	subs	r0, r0, r6
 8005788:	3001      	adds	r0, #1
 800578a:	d0ea      	beq.n	8005762 <HAL_SD_GetCardStatus+0xda>
 800578c:	6823      	ldr	r3, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800578e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005790:	4618      	mov	r0, r3
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005792:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005796:	d1f0      	bne.n	800577a <HAL_SD_GetCardStatus+0xf2>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005798:	9f06      	ldr	r7, [sp, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800579a:	4616      	mov	r6, r2
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800579c:	9808      	ldr	r0, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800579e:	0a39      	lsrs	r1, r7, #8
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80057a0:	f3c7 1e81 	ubfx	lr, r7, #6, #2
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80057a4:	ea4f 4810 	mov.w	r8, r0, lsr #16
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80057a8:	f3c7 1c40 	ubfx	ip, r7, #5, #1
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80057ac:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80057b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80057b2:	ea41 6117 	orr.w	r1, r1, r7, lsr #24
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80057b6:	f028 07ff 	bic.w	r7, r8, #255	; 0xff
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80057ba:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8005828 <HAL_SD_GetCardStatus+0x1a0>
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80057be:	fa5f f982 	uxtb.w	r9, r2
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80057c2:	b289      	uxth	r1, r1
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80057c4:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80057c8:	fa5f f880 	uxtb.w	r8, r0
 80057cc:	9b07      	ldr	r3, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80057ce:	ea47 0709 	orr.w	r7, r7, r9
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80057d2:	f885 e000 	strb.w	lr, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80057d6:	f885 c001 	strb.w	ip, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80057da:	fa93 fe83 	rev.w	lr, r3
 80057de:	8069      	strh	r1, [r5, #2]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80057e0:	f3c0 5303 	ubfx	r3, r0, #20, #4
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80057e4:	f3c0 2107 	ubfx	r1, r0, #8, #8
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80057e8:	f8c5 e004 	str.w	lr, [r5, #4]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80057ec:	f3c2 2c85 	ubfx	ip, r2, #10, #6
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80057f0:	f885 8008 	strb.w	r8, [r5, #8]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80057f4:	f3c2 2001 	ubfx	r0, r2, #8, #2
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80057f8:	7269      	strb	r1, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80057fa:	72ab      	strb	r3, [r5, #10]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80057fc:	f3c2 1103 	ubfx	r1, r2, #4, #4
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005800:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005804:	f002 020f 	and.w	r2, r2, #15
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005808:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800580a:	f885 c00e 	strb.w	ip, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800580e:	73e8      	strb	r0, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8005810:	7429      	strb	r1, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005812:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005814:	74ab      	strb	r3, [r5, #18]
 8005816:	e756      	b.n	80056c6 <HAL_SD_GetCardStatus+0x3e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005818:	2008      	movs	r0, #8
 800581a:	e74b      	b.n	80056b4 <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800581c:	2002      	movs	r0, #2
 800581e:	e749      	b.n	80056b4 <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_RX_OVERRUN;
 8005820:	2020      	movs	r0, #32
 8005822:	e747      	b.n	80056b4 <HAL_SD_GetCardStatus+0x2c>
 8005824:	1fe00fff 	.word	0x1fe00fff
 8005828:	18000f3a 	.word	0x18000f3a

0800582c <HAL_SD_GetCardInfo>:
{
 800582c:	4603      	mov	r3, r0
}
 800582e:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005830:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005832:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005836:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800583a:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800583c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800583e:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005840:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005842:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005844:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005846:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005848:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800584a:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800584c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584e:	61cb      	str	r3, [r1, #28]
}
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop

08005854 <HAL_SD_ConfigWideBusOperation>:
{
 8005854:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8005856:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
 8005858:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 800585a:	b08b      	sub	sp, #44	; 0x2c
 800585c:	4604      	mov	r4, r0
  if (hsd->SdCard.CardType != CARD_SECURED)
 800585e:	4293      	cmp	r3, r2
{
 8005860:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8005862:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if (hsd->SdCard.CardType != CARD_SECURED)
 8005866:	d035      	beq.n	80058d4 <HAL_SD_ConfigWideBusOperation+0x80>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8005868:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800586c:	d032      	beq.n	80058d4 <HAL_SD_ConfigWideBusOperation+0x80>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800586e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005872:	f000 8087 	beq.w	8005984 <HAL_SD_ConfigWideBusOperation+0x130>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8005876:	2900      	cmp	r1, #0
 8005878:	d065      	beq.n	8005946 <HAL_SD_ConfigWideBusOperation+0xf2>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800587a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800587c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005880:	6383      	str	r3, [r0, #56]	; 0x38
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005882:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005884:	bb6b      	cbnz	r3, 80058e2 <HAL_SD_ConfigWideBusOperation+0x8e>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005886:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800588a:	f7fe fbdb 	bl	8004044 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 800588e:	2800      	cmp	r0, #0
 8005890:	d03e      	beq.n	8005910 <HAL_SD_ConfigWideBusOperation+0xbc>
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8005892:	4b5d      	ldr	r3, [pc, #372]	; (8005a08 <HAL_SD_ConfigWideBusOperation+0x1b4>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005894:	6867      	ldr	r7, [r4, #4]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8005896:	fba3 2300 	umull	r2, r3, r3, r0
 800589a:	6962      	ldr	r2, [r4, #20]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800589c:	68a6      	ldr	r6, [r4, #8]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800589e:	6921      	ldr	r1, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80058a0:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.BusWide             = WideMode;
 80058a4:	9506      	str	r5, [sp, #24]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80058a6:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80058aa:	9107      	str	r1, [sp, #28]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80058ac:	e9cd 7604 	strd	r7, r6, [sp, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80058b0:	d23a      	bcs.n	8005928 <HAL_SD_ConfigWideBusOperation+0xd4>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80058b2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80058b4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80058b8:	d036      	beq.n	8005928 <HAL_SD_ConfigWideBusOperation+0xd4>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80058ba:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80058be:	f000 8081 	beq.w	80059c4 <HAL_SD_ConfigWideBusOperation+0x170>
        if (hsd->Init.ClockDiv == 0U)
 80058c2:	2a00      	cmp	r2, #0
 80058c4:	f040 808c 	bne.w	80059e0 <HAL_SD_ConfigWideBusOperation+0x18c>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80058c8:	4b50      	ldr	r3, [pc, #320]	; (8005a0c <HAL_SD_ConfigWideBusOperation+0x1b8>)
 80058ca:	4298      	cmp	r0, r3
 80058cc:	f240 8095 	bls.w	80059fa <HAL_SD_ConfigWideBusOperation+0x1a6>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80058d0:	9508      	str	r5, [sp, #32]
 80058d2:	e02a      	b.n	800592a <HAL_SD_ConfigWideBusOperation+0xd6>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80058d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058da:	63a3      	str	r3, [r4, #56]	; 0x38
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80058dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d0d1      	beq.n	8005886 <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058e2:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 80058e4:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058e6:	4a4a      	ldr	r2, [pc, #296]	; (8005a10 <HAL_SD_ConfigWideBusOperation+0x1bc>)
 80058e8:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80058ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058ee:	6820      	ldr	r0, [r4, #0]
 80058f0:	f000 ff7a 	bl	80067e8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80058f4:	b130      	cbz	r0, 8005904 <HAL_SD_ConfigWideBusOperation+0xb0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058f6:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 80058f8:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058fa:	4a45      	ldr	r2, [pc, #276]	; (8005a10 <HAL_SD_ConfigWideBusOperation+0x1bc>)
 80058fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80058fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005900:	4318      	orrs	r0, r3
 8005902:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8005904:	2301      	movs	r3, #1
}
 8005906:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8005908:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800590c:	b00b      	add	sp, #44	; 0x2c
 800590e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8005910:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      status = HAL_ERROR;
 8005912:	2501      	movs	r5, #1
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8005914:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005918:	63a3      	str	r3, [r4, #56]	; 0x38
      status = HAL_ERROR;
 800591a:	e7e6      	b.n	80058ea <HAL_SD_ConfigWideBusOperation+0x96>
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800591c:	0051      	lsls	r1, r2, #1
 800591e:	4d3d      	ldr	r5, [pc, #244]	; (8005a14 <HAL_SD_ConfigWideBusOperation+0x1c0>)
 8005920:	fbb0 f0f1 	udiv	r0, r0, r1
 8005924:	42a8      	cmp	r0, r5
 8005926:	d852      	bhi.n	80059ce <HAL_SD_ConfigWideBusOperation+0x17a>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005928:	9208      	str	r2, [sp, #32]
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 800592a:	69a2      	ldr	r2, [r4, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
 800592c:	ab04      	add	r3, sp, #16
  HAL_StatusTypeDef status = HAL_OK;
 800592e:	2500      	movs	r5, #0
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 8005930:	9209      	str	r2, [sp, #36]	; 0x24
      (void)SDMMC_Init(hsd->Instance, Init);
 8005932:	aa0a      	add	r2, sp, #40	; 0x28
 8005934:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 8005938:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800593c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800593e:	6820      	ldr	r0, [r4, #0]
 8005940:	f000 ff08 	bl	8006754 <SDMMC_Init>
 8005944:	e7d1      	b.n	80058ea <HAL_SD_ConfigWideBusOperation+0x96>
  uint32_t scr[2U] = {0UL, 0UL};
 8005946:	2200      	movs	r2, #0
 8005948:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800594a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800594c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005950:	f000 ff30 	bl	80067b4 <SDMMC_GetResponse>
 8005954:	0182      	lsls	r2, r0, #6
 8005956:	d43d      	bmi.n	80059d4 <HAL_SD_ConfigWideBusOperation+0x180>
  errorstate = SD_FindSCR(hsd, scr);
 8005958:	a904      	add	r1, sp, #16
 800595a:	4620      	mov	r0, r4
 800595c:	f7ff f9b2 	bl	8004cc4 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005960:	b960      	cbnz	r0, 800597c <HAL_SD_ConfigWideBusOperation+0x128>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005962:	9b05      	ldr	r3, [sp, #20]
 8005964:	03db      	lsls	r3, r3, #15
 8005966:	d545      	bpl.n	80059f4 <HAL_SD_ConfigWideBusOperation+0x1a0>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005968:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800596a:	6820      	ldr	r0, [r4, #0]
 800596c:	0409      	lsls	r1, r1, #16
 800596e:	f001 fc87 	bl	8007280 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005972:	b918      	cbnz	r0, 800597c <HAL_SD_ConfigWideBusOperation+0x128>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005974:	4601      	mov	r1, r0
 8005976:	6820      	ldr	r0, [r4, #0]
 8005978:	f001 fd5e 	bl	8007438 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800597c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800597e:	4308      	orrs	r0, r1
 8005980:	63a0      	str	r0, [r4, #56]	; 0x38
 8005982:	e7ab      	b.n	80058dc <HAL_SD_ConfigWideBusOperation+0x88>
  uint32_t scr[2U] = {0UL, 0UL};
 8005984:	2200      	movs	r2, #0
 8005986:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005988:	2100      	movs	r1, #0
 800598a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800598c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005990:	f000 ff10 	bl	80067b4 <SDMMC_GetResponse>
 8005994:	0180      	lsls	r0, r0, #6
 8005996:	d420      	bmi.n	80059da <HAL_SD_ConfigWideBusOperation+0x186>
  errorstate = SD_FindSCR(hsd, scr);
 8005998:	a904      	add	r1, sp, #16
 800599a:	4620      	mov	r0, r4
 800599c:	f7ff f992 	bl	8004cc4 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 80059a0:	b960      	cbnz	r0, 80059bc <HAL_SD_ConfigWideBusOperation+0x168>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80059a2:	9b05      	ldr	r3, [sp, #20]
 80059a4:	0359      	lsls	r1, r3, #13
 80059a6:	d52b      	bpl.n	8005a00 <HAL_SD_ConfigWideBusOperation+0x1ac>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80059a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80059aa:	6820      	ldr	r0, [r4, #0]
 80059ac:	0409      	lsls	r1, r1, #16
 80059ae:	f001 fc67 	bl	8007280 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80059b2:	b918      	cbnz	r0, 80059bc <HAL_SD_ConfigWideBusOperation+0x168>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80059b4:	2102      	movs	r1, #2
 80059b6:	6820      	ldr	r0, [r4, #0]
 80059b8:	f001 fd3e 	bl	8007438 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80059bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80059be:	4318      	orrs	r0, r3
 80059c0:	63a0      	str	r0, [r4, #56]	; 0x38
 80059c2:	e78b      	b.n	80058dc <HAL_SD_ConfigWideBusOperation+0x88>
        if (hsd->Init.ClockDiv == 0U)
 80059c4:	2a00      	cmp	r2, #0
 80059c6:	d1a9      	bne.n	800591c <HAL_SD_ConfigWideBusOperation+0xc8>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80059c8:	4a12      	ldr	r2, [pc, #72]	; (8005a14 <HAL_SD_ConfigWideBusOperation+0x1c0>)
 80059ca:	4290      	cmp	r0, r2
 80059cc:	d915      	bls.n	80059fa <HAL_SD_ConfigWideBusOperation+0x1a6>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80059ce:	0e5b      	lsrs	r3, r3, #25
 80059d0:	9308      	str	r3, [sp, #32]
 80059d2:	e7aa      	b.n	800592a <HAL_SD_ConfigWideBusOperation+0xd6>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80059d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80059d8:	e7d0      	b.n	800597c <HAL_SD_ConfigWideBusOperation+0x128>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80059da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80059de:	e7ed      	b.n	80059bc <HAL_SD_ConfigWideBusOperation+0x168>
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80059e0:	0051      	lsls	r1, r2, #1
 80059e2:	4b0a      	ldr	r3, [pc, #40]	; (8005a0c <HAL_SD_ConfigWideBusOperation+0x1b8>)
 80059e4:	fbb0 f0f1 	udiv	r0, r0, r1
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80059e8:	4298      	cmp	r0, r3
 80059ea:	bf94      	ite	ls
 80059ec:	4610      	movls	r0, r2
 80059ee:	4628      	movhi	r0, r5
 80059f0:	9008      	str	r0, [sp, #32]
 80059f2:	e79a      	b.n	800592a <HAL_SD_ConfigWideBusOperation+0xd6>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80059f4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80059f8:	e7c0      	b.n	800597c <HAL_SD_ConfigWideBusOperation+0x128>
            Init.ClockDiv = hsd->Init.ClockDiv;
 80059fa:	2300      	movs	r3, #0
 80059fc:	9308      	str	r3, [sp, #32]
 80059fe:	e794      	b.n	800592a <HAL_SD_ConfigWideBusOperation+0xd6>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005a00:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005a04:	e7da      	b.n	80059bc <HAL_SD_ConfigWideBusOperation+0x168>
 8005a06:	bf00      	nop
 8005a08:	55e63b89 	.word	0x55e63b89
 8005a0c:	017d7840 	.word	0x017d7840
 8005a10:	1fe00fff 	.word	0x1fe00fff
 8005a14:	02faf080 	.word	0x02faf080

08005a18 <HAL_SD_Init>:
{
 8005a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a1a:	b087      	sub	sp, #28
  if (hsd == NULL)
 8005a1c:	b1a0      	cbz	r0, 8005a48 <HAL_SD_Init+0x30>
  if (hsd->State == HAL_SD_STATE_RESET)
 8005a1e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8005a22:	4604      	mov	r4, r0
 8005a24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a28:	b93b      	cbnz	r3, 8005a3a <HAL_SD_Init+0x22>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8005a2a:	6983      	ldr	r3, [r0, #24]
    hsd->Lock = HAL_UNLOCKED;
 8005a2c:	7702      	strb	r2, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8005a2e:	b90b      	cbnz	r3, 8005a34 <HAL_SD_Init+0x1c>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8005a30:	2302      	movs	r3, #2
 8005a32:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 8005a34:	4620      	mov	r0, r4
 8005a36:	f005 fac5 	bl	800afc4 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8005a3a:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005a3c:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8005a3e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005a42:	f7ff fc9f 	bl	8005384 <HAL_SD_InitCard>
 8005a46:	b118      	cbz	r0, 8005a50 <HAL_SD_Init+0x38>
    return HAL_ERROR;
 8005a48:	2601      	movs	r6, #1
}
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	b007      	add	sp, #28
 8005a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005a50:	a901      	add	r1, sp, #4
 8005a52:	4620      	mov	r0, r4
 8005a54:	f7ff fe18 	bl	8005688 <HAL_SD_GetCardStatus>
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	d1f5      	bne.n	8005a48 <HAL_SD_Init+0x30>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005a5c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 8005a5e:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005a62:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005a64:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 8005a68:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005a6a:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005a6c:	d024      	beq.n	8005ab8 <HAL_SD_Init+0xa0>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005a6e:	65e0      	str	r0, [r4, #92]	; 0x5c
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005a70:	68e1      	ldr	r1, [r4, #12]
 8005a72:	4620      	mov	r0, r4
 8005a74:	f7ff feee 	bl	8005854 <HAL_SD_ConfigWideBusOperation>
 8005a78:	4606      	mov	r6, r0
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	d1e4      	bne.n	8005a48 <HAL_SD_Init+0x30>
  tickstart = HAL_GetTick();
 8005a7e:	f7fa fc8d 	bl	800039c <HAL_GetTick>
 8005a82:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005a84:	e00c      	b.n	8005aa0 <HAL_SD_Init+0x88>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005a86:	6820      	ldr	r0, [r4, #0]
 8005a88:	4629      	mov	r1, r5
 8005a8a:	f000 fe93 	bl	80067b4 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005a8e:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005a92:	2804      	cmp	r0, #4
 8005a94:	d018      	beq.n	8005ac8 <HAL_SD_Init+0xb0>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005a96:	f7fa fc81 	bl	800039c <HAL_GetTick>
 8005a9a:	1bc3      	subs	r3, r0, r7
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	d019      	beq.n	8005ad4 <HAL_SD_Init+0xbc>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005aa0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005aa2:	6820      	ldr	r0, [r4, #0]
 8005aa4:	0409      	lsls	r1, r1, #16
 8005aa6:	f001 fedd 	bl	8007864 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005aaa:	4605      	mov	r5, r0
 8005aac:	2800      	cmp	r0, #0
 8005aae:	d0ea      	beq.n	8005a86 <HAL_SD_Init+0x6e>
    hsd->ErrorCode |= errorstate;
 8005ab0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005ab2:	4301      	orrs	r1, r0
 8005ab4:	63a1      	str	r1, [r4, #56]	; 0x38
  return (HAL_SD_CardStateTypeDef)cardstate;
 8005ab6:	e7ee      	b.n	8005a96 <HAL_SD_Init+0x7e>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005ab8:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005aba:	bf14      	ite	ne
 8005abc:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005ac0:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8005ac4:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005ac6:	e7d3      	b.n	8005a70 <HAL_SD_Init+0x58>
  hsd->State = HAL_SD_STATE_READY;
 8005ac8:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005aca:	63a5      	str	r5, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8005acc:	6325      	str	r5, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8005ace:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005ad2:	e7ba      	b.n	8005a4a <HAL_SD_Init+0x32>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005ad4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 8005ad8:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8005ada:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005adc:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ade:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 8005ae2:	e7b2      	b.n	8005a4a <HAL_SD_Init+0x32>

08005ae4 <HAL_SD_GetCardState>:
{
 8005ae4:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005ae6:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 8005ae8:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005aea:	6800      	ldr	r0, [r0, #0]
 8005aec:	0409      	lsls	r1, r1, #16
 8005aee:	f001 feb9 	bl	8007864 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005af2:	4601      	mov	r1, r0
 8005af4:	b120      	cbz	r0, 8005b00 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 8005af6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005af8:	2000      	movs	r0, #0
 8005afa:	4319      	orrs	r1, r3
 8005afc:	63a1      	str	r1, [r4, #56]	; 0x38
}
 8005afe:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005b00:	6820      	ldr	r0, [r4, #0]
 8005b02:	f000 fe57 	bl	80067b4 <SDMMC_GetResponse>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005b06:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8005b0a:	bd10      	pop	{r4, pc}

08005b0c <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005b0c:	b318      	cbz	r0, 8005b56 <HAL_SDRAM_Init+0x4a>
{
 8005b0e:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005b10:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005b14:	460d      	mov	r5, r1
 8005b16:	4604      	mov	r4, r0
 8005b18:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005b1c:	b1b3      	cbz	r3, 8005b4c <HAL_SDRAM_Init+0x40>
    HAL_SDRAM_MspInit(hsdram);
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005b1e:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005b20:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005b22:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005b26:	f851 0b04 	ldr.w	r0, [r1], #4
 8005b2a:	f000 fd67 	bl	80065fc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005b2e:	4629      	mov	r1, r5
 8005b30:	e9d4 0200 	ldrd	r0, r2, [r4]
 8005b34:	f000 fd9e 	bl	8006674 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8005b38:	4a08      	ldr	r2, [pc, #32]	; (8005b5c <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005b3a:	2101      	movs	r1, #1

  return HAL_OK;
 8005b3c:	2000      	movs	r0, #0
  __FMC_ENABLE();
 8005b3e:	6813      	ldr	r3, [r2, #0]
 8005b40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b44:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005b46:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8005b4c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8005b50:	f004 fc7a 	bl	800a448 <HAL_SDRAM_MspInit>
 8005b54:	e7e3      	b.n	8005b1e <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8005b56:	2001      	movs	r0, #1
}
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	52004000 	.word	0x52004000

08005b60 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005b60:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005b62:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8005b66:	4605      	mov	r5, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005b68:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005b6a:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8005b6c:	d004      	beq.n	8005b78 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005b6e:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8005b72:	2c01      	cmp	r4, #1
 8005b74:	d001      	beq.n	8005b7a <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 8005b76:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8005b78:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005b7e:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005b80:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005b84:	f000 fdc2 	bl	800670c <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005b88:	6833      	ldr	r3, [r6, #0]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d003      	beq.n	8005b96 <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 8005b8e:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005b90:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
}
 8005b94:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005b96:	2305      	movs	r3, #5
  return HAL_OK;
 8005b98:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005b9a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 8005b9e:	bd70      	pop	{r4, r5, r6, pc}

08005ba0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005ba0:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005ba2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8005ba6:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	b2d8      	uxtb	r0, r3
 8005bac:	d005      	beq.n	8005bba <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005bae:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	b2dd      	uxtb	r5, r3
 8005bb6:	d001      	beq.n	8005bbc <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8005bb8:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8005bba:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005bbc:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005bbe:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005bc0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005bc4:	f000 fdb8 	bl	8006738 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 8005bc8:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005bca:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8005bce:	bd38      	pop	{r3, r4, r5, pc}

08005bd0 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8005bd0:	6801      	ldr	r1, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8005bd2:	4a30      	ldr	r2, [pc, #192]	; (8005c94 <SPI_CloseTransfer+0xc4>)
{
 8005bd4:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 8005bd6:	694b      	ldr	r3, [r1, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005bd8:	698c      	ldr	r4, [r1, #24]
 8005bda:	f044 0408 	orr.w	r4, r4, #8
 8005bde:	618c      	str	r4, [r1, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005be0:	6804      	ldr	r4, [r0, #0]
 8005be2:	69a1      	ldr	r1, [r4, #24]
 8005be4:	f041 0110 	orr.w	r1, r1, #16
 8005be8:	61a1      	str	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8005bea:	6804      	ldr	r4, [r0, #0]
 8005bec:	6821      	ldr	r1, [r4, #0]
 8005bee:	f021 0101 	bic.w	r1, r1, #1
 8005bf2:	6021      	str	r1, [r4, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8005bf4:	6801      	ldr	r1, [r0, #0]
 8005bf6:	690c      	ldr	r4, [r1, #16]
 8005bf8:	4022      	ands	r2, r4
 8005bfa:	610a      	str	r2, [r1, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005bfc:	6801      	ldr	r1, [r0, #0]
 8005bfe:	688a      	ldr	r2, [r1, #8]
 8005c00:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005c04:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c06:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8005c0a:	2a04      	cmp	r2, #4
 8005c0c:	d001      	beq.n	8005c12 <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005c0e:	069c      	lsls	r4, r3, #26
 8005c10:	d433      	bmi.n	8005c7a <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005c12:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8005c16:	2a03      	cmp	r2, #3
 8005c18:	d001      	beq.n	8005c1e <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005c1a:	0659      	lsls	r1, r3, #25
 8005c1c:	d421      	bmi.n	8005c62 <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005c1e:	059a      	lsls	r2, r3, #22
 8005c20:	d50a      	bpl.n	8005c38 <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005c22:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005c26:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005c28:	f042 0201 	orr.w	r2, r2, #1
 8005c2c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005c30:	698a      	ldr	r2, [r1, #24]
 8005c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c36:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005c38:	05db      	lsls	r3, r3, #23
 8005c3a:	d50a      	bpl.n	8005c52 <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005c3c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005c40:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005c42:	f043 0308 	orr.w	r3, r3, #8
 8005c46:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005c4a:	6993      	ldr	r3, [r2, #24]
 8005c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c50:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005c52:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 8005c54:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 8005c58:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005c5c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8005c60:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005c62:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c66:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005c68:	f042 0204 	orr.w	r2, r2, #4
 8005c6c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c70:	698a      	ldr	r2, [r1, #24]
 8005c72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c76:	618a      	str	r2, [r1, #24]
 8005c78:	e7d1      	b.n	8005c1e <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005c7a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005c7e:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005c80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c84:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005c88:	698a      	ldr	r2, [r1, #24]
 8005c8a:	f042 0220 	orr.w	r2, r2, #32
 8005c8e:	618a      	str	r2, [r1, #24]
 8005c90:	e7bf      	b.n	8005c12 <SPI_CloseTransfer+0x42>
 8005c92:	bf00      	nop
 8005c94:	fffffc90 	.word	0xfffffc90

08005c98 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	f000 80a7 	beq.w	8005dec <HAL_SPI_Init+0x154>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005c9e:	4a56      	ldr	r2, [pc, #344]	; (8005df8 <HAL_SPI_Init+0x160>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ca0:	2100      	movs	r1, #0
{
 8005ca2:	b570      	push	{r4, r5, r6, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005ca4:	6803      	ldr	r3, [r0, #0]
 8005ca6:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ca8:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d015      	beq.n	8005cda <HAL_SPI_Init+0x42>
 8005cae:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d011      	beq.n	8005cda <HAL_SPI_Init+0x42>
 8005cb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	68c2      	ldr	r2, [r0, #12]
 8005cbe:	f000 808e 	beq.w	8005dde <HAL_SPI_Init+0x146>
 8005cc2:	2a0f      	cmp	r2, #15
 8005cc4:	d807      	bhi.n	8005cd6 <HAL_SPI_Init+0x3e>
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005cc6:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005cc8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8005cca:	08d2      	lsrs	r2, r2, #3
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005ccc:	0949      	lsrs	r1, r1, #5

  return data_size * fifo_threashold;
 8005cce:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005cd2:	2a08      	cmp	r2, #8
 8005cd4:	d913      	bls.n	8005cfe <HAL_SPI_Init+0x66>
    return HAL_ERROR;
 8005cd6:	2001      	movs	r0, #1
}
 8005cd8:	bd70      	pop	{r4, r5, r6, pc}
  data_size = (data_size + 7UL) / 8UL;
 8005cda:	68e1      	ldr	r1, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005cdc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8005cde:	3108      	adds	r1, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005ce0:	4e45      	ldr	r6, [pc, #276]	; (8005df8 <HAL_SPI_Init+0x160>)
 8005ce2:	4d46      	ldr	r5, [pc, #280]	; (8005dfc <HAL_SPI_Init+0x164>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005ce4:	0950      	lsrs	r0, r2, #5
  data_size = (data_size + 7UL) / 8UL;
 8005ce6:	08ca      	lsrs	r2, r1, #3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005ce8:	42ab      	cmp	r3, r5
 8005cea:	bf18      	it	ne
 8005cec:	42b3      	cmpne	r3, r6
  return data_size * fifo_threashold;
 8005cee:	fb00 2202 	mla	r2, r0, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005cf2:	d002      	beq.n	8005cfa <HAL_SPI_Init+0x62>
 8005cf4:	4942      	ldr	r1, [pc, #264]	; (8005e00 <HAL_SPI_Init+0x168>)
 8005cf6:	428b      	cmp	r3, r1
 8005cf8:	d101      	bne.n	8005cfe <HAL_SPI_Init+0x66>
 8005cfa:	2a10      	cmp	r2, #16
 8005cfc:	d8eb      	bhi.n	8005cd6 <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cfe:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8005d02:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8005d06:	2a00      	cmp	r2, #0
 8005d08:	d062      	beq.n	8005dd0 <HAL_SPI_Init+0x138>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	f022 0201 	bic.w	r2, r2, #1
 8005d16:	601a      	str	r2, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005d18:	69a3      	ldr	r3, [r4, #24]
 8005d1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d1e:	d047      	beq.n	8005db0 <HAL_SPI_Init+0x118>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005d20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005d22:	69e3      	ldr	r3, [r4, #28]
 8005d24:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005d26:	4313      	orrs	r3, r2
 8005d28:	68e1      	ldr	r1, [r4, #12]
 8005d2a:	6822      	ldr	r2, [r4, #0]
 8005d2c:	4303      	orrs	r3, r0
 8005d2e:	430b      	orrs	r3, r1
 8005d30:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8005d32:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005d34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d36:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	69a1      	ldr	r1, [r4, #24]
 8005d3c:	6922      	ldr	r2, [r4, #16]
 8005d3e:	4303      	orrs	r3, r0
 8005d40:	6965      	ldr	r5, [r4, #20]
 8005d42:	6a20      	ldr	r0, [r4, #32]
 8005d44:	430b      	orrs	r3, r1
 8005d46:	6861      	ldr	r1, [r4, #4]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005d4c:	432b      	orrs	r3, r5
 8005d4e:	68a5      	ldr	r5, [r4, #8]
 8005d50:	4303      	orrs	r3, r0
 8005d52:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005d54:	430b      	orrs	r3, r1
 8005d56:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	6822      	ldr	r2, [r4, #0]
 8005d5c:	432b      	orrs	r3, r5
 8005d5e:	4303      	orrs	r3, r0
 8005d60:	430b      	orrs	r3, r1
 8005d62:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005d64:	6863      	ldr	r3, [r4, #4]
 8005d66:	b96b      	cbnz	r3, 8005d84 <HAL_SPI_Init+0xec>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005d68:	6822      	ldr	r2, [r4, #0]
 8005d6a:	6893      	ldr	r3, [r2, #8]
 8005d6c:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8005d70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d74:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005d76:	6822      	ldr	r2, [r4, #0]
 8005d78:	6893      	ldr	r3, [r2, #8]
 8005d7a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d82:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d84:	6822      	ldr	r2, [r4, #0]
 8005d86:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005d88:	f023 0301 	bic.w	r3, r3, #1
 8005d8c:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005d8e:	6863      	ldr	r3, [r4, #4]
 8005d90:	025b      	lsls	r3, r3, #9
 8005d92:	d506      	bpl.n	8005da2 <HAL_SPI_Init+0x10a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005d94:	6822      	ldr	r2, [r4, #0]
 8005d96:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005d98:	68d3      	ldr	r3, [r2, #12]
 8005d9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d9e:	430b      	orrs	r3, r1
 8005da0:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005da2:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8005da4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005da6:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005daa:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8005dae:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005db0:	6863      	ldr	r3, [r4, #4]
 8005db2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005db6:	d01b      	beq.n	8005df0 <HAL_SPI_Init+0x158>
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1b1      	bne.n	8005d20 <HAL_SPI_Init+0x88>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005dbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005dbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dc2:	d1ad      	bne.n	8005d20 <HAL_SPI_Init+0x88>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005dc4:	6822      	ldr	r2, [r4, #0]
 8005dc6:	6813      	ldr	r3, [r2, #0]
 8005dc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	e7a7      	b.n	8005d20 <HAL_SPI_Init+0x88>
    HAL_SPI_MspInit(hspi);
 8005dd0:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8005dd2:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8005dd6:	f005 f9c5 	bl	800b164 <HAL_SPI_MspInit>
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	e795      	b.n	8005d0a <HAL_SPI_Init+0x72>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005dde:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8005de0:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005de2:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 8005de4:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 8005de6:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005dea:	e786      	b.n	8005cfa <HAL_SPI_Init+0x62>
    return HAL_ERROR;
 8005dec:	2001      	movs	r0, #1
}
 8005dee:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005df0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0e6      	beq.n	8005dc4 <HAL_SPI_Init+0x12c>
 8005df6:	e793      	b.n	8005d20 <HAL_SPI_Init+0x88>
 8005df8:	40013000 	.word	0x40013000
 8005dfc:	40003800 	.word	0x40003800
 8005e00:	40003c00 	.word	0x40003c00

08005e04 <HAL_SPI_TransmitReceive_DMA>:
{
 8005e04:	b570      	push	{r4, r5, r6, lr}
 8005e06:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8005e08:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	f000 80d5 	beq.w	8005fbc <HAL_SPI_TransmitReceive_DMA+0x1b8>
  tmp_state   = hspi->State;
 8005e12:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8005e16:	4604      	mov	r4, r0
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8005e18:	6840      	ldr	r0, [r0, #4]
  __HAL_LOCK(hspi);
 8005e1a:	2601      	movs	r6, #1
  tmp_state   = hspi->State;
 8005e1c:	b2db      	uxtb	r3, r3
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8005e1e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
  __HAL_LOCK(hspi);
 8005e22:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8005e26:	f000 8088 	beq.w	8005f3a <HAL_SPI_TransmitReceive_DMA+0x136>
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	f040 808f 	bne.w	8005f4e <HAL_SPI_TransmitReceive_DMA+0x14a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005e30:	2d00      	cmp	r5, #0
 8005e32:	bf18      	it	ne
 8005e34:	2a00      	cmpne	r2, #0
 8005e36:	d07b      	beq.n	8005f30 <HAL_SPI_TransmitReceive_DMA+0x12c>
 8005e38:	2900      	cmp	r1, #0
 8005e3a:	d079      	beq.n	8005f30 <HAL_SPI_TransmitReceive_DMA+0x12c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e3c:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	d002      	beq.n	8005e4a <HAL_SPI_TransmitReceive_DMA+0x46>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e44:	2305      	movs	r3, #5
 8005e46:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e4a:	2300      	movs	r3, #0
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005e4c:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e4e:	65e1      	str	r1, [r4, #92]	; 0x5c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e50:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->TxXferSize  = Size;
 8005e54:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005e58:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e5c:	6662      	str	r2, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005e5e:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->RxXferCount = Size;
 8005e62:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005e66:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005e6a:	6883      	ldr	r3, [r0, #8]
 8005e6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005e70:	6083      	str	r3, [r0, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8005e72:	68e3      	ldr	r3, [r4, #12]
 8005e74:	2b0f      	cmp	r3, #15
 8005e76:	d96f      	bls.n	8005f58 <HAL_SPI_TransmitReceive_DMA+0x154>
 8005e78:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005e7a:	699a      	ldr	r2, [r3, #24]
 8005e7c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005e80:	d156      	bne.n	8005f30 <HAL_SPI_TransmitReceive_DMA+0x12c>
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005e82:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8005e86:	2a04      	cmp	r2, #4
 8005e88:	f000 80a5 	beq.w	8005fd6 <HAL_SPI_TransmitReceive_DMA+0x1d2>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005e8c:	4968      	ldr	r1, [pc, #416]	; (8006030 <HAL_SPI_TransmitReceive_DMA+0x22c>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005e8e:	4a69      	ldr	r2, [pc, #420]	; (8006034 <HAL_SPI_TransmitReceive_DMA+0x230>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005e90:	6419      	str	r1, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005e92:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005e94:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005e96:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  hspi->hdmarx->XferAbortCallback = NULL;
 8005e98:	2200      	movs	r2, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005e9a:	4967      	ldr	r1, [pc, #412]	; (8006038 <HAL_SPI_TransmitReceive_DMA+0x234>)
 8005e9c:	64d9      	str	r1, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8005e9e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005ea0:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8005ea2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8005ea6:	6821      	ldr	r1, [r4, #0]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005eac:	3130      	adds	r1, #48	; 0x30
 8005eae:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005eb0:	f7fa fea4 	bl	8000bfc <HAL_DMA_Start_IT>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	f040 8083 	bne.w	8005fc0 <HAL_SPI_TransmitReceive_DMA+0x1bc>
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8005eba:	6822      	ldr	r2, [r4, #0]
 8005ebc:	6893      	ldr	r3, [r2, #8]
 8005ebe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ec2:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005ec4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005ec6:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005ec8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005eca:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005ecc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005ece:	64d8      	str	r0, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005ed0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005ed2:	6518      	str	r0, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 8005ed4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005ed8:	6822      	ldr	r2, [r4, #0]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005ede:	3220      	adds	r2, #32
 8005ee0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005ee2:	f7fa fe8b 	bl	8000bfc <HAL_DMA_Start_IT>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d16a      	bne.n	8005fc0 <HAL_SPI_TransmitReceive_DMA+0x1bc>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8005eea:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8005eec:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8005eee:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8005ef0:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8005ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8005ef6:	4b51      	ldr	r3, [pc, #324]	; (800603c <HAL_SPI_TransmitReceive_DMA+0x238>)
 8005ef8:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005efc:	bf18      	it	ne
 8005efe:	432b      	orrne	r3, r5
 8005f00:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8005f02:	6822      	ldr	r2, [r4, #0]
 8005f04:	6893      	ldr	r3, [r2, #8]
 8005f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f0a:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8005f0c:	6822      	ldr	r2, [r4, #0]
 8005f0e:	6913      	ldr	r3, [r2, #16]
 8005f10:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 8005f14:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 8005f16:	6822      	ldr	r2, [r4, #0]
 8005f18:	6813      	ldr	r3, [r2, #0]
 8005f1a:	f043 0301 	orr.w	r3, r3, #1
 8005f1e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f20:	6863      	ldr	r3, [r4, #4]
 8005f22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f26:	d05c      	beq.n	8005fe2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  __HAL_UNLOCK(hspi);
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8005f2e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hspi);
 8005f30:	2300      	movs	r3, #0
    return errorcode;
 8005f32:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 8005f34:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8005f38:	bd70      	pop	{r4, r5, r6, pc}
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8005f3a:	68a0      	ldr	r0, [r4, #8]
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	f47f af74 	bne.w	8005e2a <HAL_SPI_TransmitReceive_DMA+0x26>
 8005f42:	2b04      	cmp	r3, #4
 8005f44:	f43f af74 	beq.w	8005e30 <HAL_SPI_TransmitReceive_DMA+0x2c>
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	f43f af71 	beq.w	8005e30 <HAL_SPI_TransmitReceive_DMA+0x2c>
    __HAL_UNLOCK(hspi);
 8005f4e:	2300      	movs	r3, #0
    return errorcode;
 8005f50:	2002      	movs	r0, #2
    __HAL_UNLOCK(hspi);
 8005f52:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8005f56:	bd70      	pop	{r4, r5, r6, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8005f58:	2b07      	cmp	r3, #7
 8005f5a:	d848      	bhi.n	8005fee <HAL_SPI_TransmitReceive_DMA+0x1ea>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f5c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8005f5e:	6993      	ldr	r3, [r2, #24]
 8005f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f64:	d107      	bne.n	8005f76 <HAL_SPI_TransmitReceive_DMA+0x172>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8005f66:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	085b      	lsrs	r3, r3, #1
 8005f70:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8005f74:	6993      	ldr	r3, [r2, #24]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005f76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f7a:	d106      	bne.n	8005f8a <HAL_SPI_TransmitReceive_DMA+0x186>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8005f7c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	3303      	adds	r3, #3
 8005f84:	089b      	lsrs	r3, r3, #2
 8005f86:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f8a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005f92:	d107      	bne.n	8005fa4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8005f94:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8005f98:	b292      	uxth	r2, r2
 8005f9a:	3201      	adds	r2, #1
 8005f9c:	0852      	lsrs	r2, r2, #1
 8005f9e:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 8005fa2:	699a      	ldr	r2, [r3, #24]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005fa4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005fa8:	f47f af6b 	bne.w	8005e82 <HAL_SPI_TransmitReceive_DMA+0x7e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8005fac:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8005fb0:	b292      	uxth	r2, r2
 8005fb2:	3203      	adds	r2, #3
 8005fb4:	0892      	lsrs	r2, r2, #2
 8005fb6:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 8005fba:	e762      	b.n	8005e82 <HAL_SPI_TransmitReceive_DMA+0x7e>
  __HAL_LOCK(hspi);
 8005fbc:	2002      	movs	r0, #2
}
 8005fbe:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005fc0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8005fc4:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005fc6:	f043 0310 	orr.w	r3, r3, #16
    return errorcode;
 8005fca:	4610      	mov	r0, r2
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005fcc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8005fd0:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
}
 8005fd4:	bd70      	pop	{r4, r5, r6, pc}
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005fd6:	491a      	ldr	r1, [pc, #104]	; (8006040 <HAL_SPI_TransmitReceive_DMA+0x23c>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005fd8:	4a1a      	ldr	r2, [pc, #104]	; (8006044 <HAL_SPI_TransmitReceive_DMA+0x240>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005fda:	6419      	str	r1, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005fdc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005fde:	63da      	str	r2, [r3, #60]	; 0x3c
 8005fe0:	e759      	b.n	8005e96 <HAL_SPI_TransmitReceive_DMA+0x92>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005fe2:	6822      	ldr	r2, [r4, #0]
 8005fe4:	6813      	ldr	r3, [r2, #0]
 8005fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	e79c      	b.n	8005f28 <HAL_SPI_TransmitReceive_DMA+0x124>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8005fee:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005ff6:	d002      	beq.n	8005ffe <HAL_SPI_TransmitReceive_DMA+0x1fa>
 8005ff8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005ffc:	d198      	bne.n	8005f30 <HAL_SPI_TransmitReceive_DMA+0x12c>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005ffe:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8006000:	6989      	ldr	r1, [r1, #24]
 8006002:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8006006:	d107      	bne.n	8006018 <HAL_SPI_TransmitReceive_DMA+0x214>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006008:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800600c:	b292      	uxth	r2, r2
 800600e:	3201      	adds	r2, #1
 8006010:	0852      	lsrs	r2, r2, #1
 8006012:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 8006016:	699a      	ldr	r2, [r3, #24]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006018:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800601c:	f47f af31 	bne.w	8005e82 <HAL_SPI_TransmitReceive_DMA+0x7e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8006020:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8006024:	b292      	uxth	r2, r2
 8006026:	3201      	adds	r2, #1
 8006028:	0852      	lsrs	r2, r2, #1
 800602a:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800602e:	e728      	b.n	8005e82 <HAL_SPI_TransmitReceive_DMA+0x7e>
 8006030:	08006289 	.word	0x08006289
 8006034:	08006251 	.word	0x08006251
 8006038:	08006299 	.word	0x08006299
 800603c:	ffff0000 	.word	0xffff0000
 8006040:	08006279 	.word	0x08006279
 8006044:	08006225 	.word	0x08006225

08006048 <HAL_SPI_Receive_DMA>:
{
 8006048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800604c:	6886      	ldr	r6, [r0, #8]
{
 800604e:	4615      	mov	r5, r2
 8006050:	4604      	mov	r4, r0
 8006052:	460a      	mov	r2, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006054:	b926      	cbnz	r6, 8006060 <HAL_SPI_Receive_DMA+0x18>
 8006056:	6843      	ldr	r3, [r0, #4]
 8006058:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800605c:	f000 80ad 	beq.w	80061ba <HAL_SPI_Receive_DMA+0x172>
  __HAL_LOCK(hspi);
 8006060:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8006064:	2b01      	cmp	r3, #1
 8006066:	f000 80b0 	beq.w	80061ca <HAL_SPI_Receive_DMA+0x182>
 800606a:	2101      	movs	r1, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 800606c:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8006070:	428b      	cmp	r3, r1
 8006072:	b2df      	uxtb	r7, r3
  __HAL_LOCK(hspi);
 8006074:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 8006078:	f040 8092 	bne.w	80061a0 <HAL_SPI_Receive_DMA+0x158>
  if ((pData == NULL) || (Size == 0UL))
 800607c:	2a00      	cmp	r2, #0
 800607e:	f000 8089 	beq.w	8006194 <HAL_SPI_Receive_DMA+0x14c>
 8006082:	fab5 f385 	clz	r3, r5
 8006086:	095b      	lsrs	r3, r3, #5
 8006088:	2d00      	cmp	r5, #0
 800608a:	f000 8083 	beq.w	8006194 <HAL_SPI_Receive_DMA+0x14c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800608e:	2104      	movs	r1, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006090:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006094:	6662      	str	r2, [r4, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006096:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  hspi->RxXferSize  = Size;
 800609a:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800609e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 80060a2:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 80060a6:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80060aa:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->TxISR       = NULL;
 80060ae:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060b2:	d104      	bne.n	80060be <HAL_SPI_Receive_DMA+0x76>
    SPI_1LINE_RX(hspi);
 80060b4:	6822      	ldr	r2, [r4, #0]
 80060b6:	6813      	ldr	r3, [r2, #0]
 80060b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060bc:	6013      	str	r3, [r2, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80060be:	68e3      	ldr	r3, [r4, #12]
 80060c0:	2b0f      	cmp	r3, #15
 80060c2:	d874      	bhi.n	80061ae <HAL_SPI_Receive_DMA+0x166>
 80060c4:	2b07      	cmp	r3, #7
 80060c6:	d85d      	bhi.n	8006184 <HAL_SPI_Receive_DMA+0x13c>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80060c8:	6822      	ldr	r2, [r4, #0]
 80060ca:	6893      	ldr	r3, [r2, #8]
 80060cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060d0:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80060d2:	68e3      	ldr	r3, [r4, #12]
 80060d4:	2b07      	cmp	r3, #7
 80060d6:	d87c      	bhi.n	80061d2 <HAL_SPI_Receive_DMA+0x18a>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80060d8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80060da:	699a      	ldr	r2, [r3, #24]
 80060dc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80060e0:	d107      	bne.n	80060f2 <HAL_SPI_Receive_DMA+0xaa>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80060e2:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80060e6:	b292      	uxth	r2, r2
 80060e8:	3201      	adds	r2, #1
 80060ea:	0852      	lsrs	r2, r2, #1
 80060ec:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 80060f0:	699a      	ldr	r2, [r3, #24]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80060f2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80060f6:	d106      	bne.n	8006106 <HAL_SPI_Receive_DMA+0xbe>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80060f8:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80060fc:	b292      	uxth	r2, r2
 80060fe:	3203      	adds	r2, #3
 8006100:	0892      	lsrs	r2, r2, #2
 8006102:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006106:	4942      	ldr	r1, [pc, #264]	; (8006210 <HAL_SPI_Receive_DMA+0x1c8>)
  hspi->hdmarx->XferAbortCallback = NULL;
 8006108:	2200      	movs	r2, #0
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800610a:	4842      	ldr	r0, [pc, #264]	; (8006214 <HAL_SPI_Receive_DMA+0x1cc>)
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800610c:	6419      	str	r1, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800610e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006110:	4941      	ldr	r1, [pc, #260]	; (8006218 <HAL_SPI_Receive_DMA+0x1d0>)
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006112:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006114:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006116:	64d9      	str	r1, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8006118:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800611a:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800611c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006120:	6821      	ldr	r1, [r4, #0]
 8006122:	b29b      	uxth	r3, r3
 8006124:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006126:	3130      	adds	r1, #48	; 0x30
 8006128:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800612a:	f7fa fd67 	bl	8000bfc <HAL_DMA_Start_IT>
 800612e:	2800      	cmp	r0, #0
 8006130:	d15e      	bne.n	80061f0 <HAL_SPI_Receive_DMA+0x1a8>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006132:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800613a:	d063      	beq.n	8006204 <HAL_SPI_Receive_DMA+0x1bc>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	4a37      	ldr	r2, [pc, #220]	; (800621c <HAL_SPI_Receive_DMA+0x1d4>)
 8006140:	6859      	ldr	r1, [r3, #4]
 8006142:	400a      	ands	r2, r1
 8006144:	432a      	orrs	r2, r5
 8006146:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006148:	6822      	ldr	r2, [r4, #0]
 800614a:	6893      	ldr	r3, [r2, #8]
 800614c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006150:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006152:	6822      	ldr	r2, [r4, #0]
 8006154:	6913      	ldr	r3, [r2, #16]
 8006156:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800615a:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800615c:	6822      	ldr	r2, [r4, #0]
 800615e:	6813      	ldr	r3, [r2, #0]
 8006160:	f043 0301 	orr.w	r3, r3, #1
 8006164:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006166:	6863      	ldr	r3, [r4, #4]
 8006168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800616c:	d104      	bne.n	8006178 <HAL_SPI_Receive_DMA+0x130>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800616e:	6822      	ldr	r2, [r4, #0]
 8006170:	6813      	ldr	r3, [r2, #0]
 8006172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006176:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8006178:	2700      	movs	r7, #0
}
 800617a:	4638      	mov	r0, r7
  __HAL_UNLOCK(hspi);
 800617c:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
}
 8006180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8006184:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800618c:	d09c      	beq.n	80060c8 <HAL_SPI_Receive_DMA+0x80>
 800618e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006192:	d099      	beq.n	80060c8 <HAL_SPI_Receive_DMA+0x80>
    __HAL_UNLOCK(hspi);
 8006194:	2300      	movs	r3, #0
 8006196:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800619a:	4638      	mov	r0, r7
 800619c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_UNLOCK(hspi);
 80061a0:	2300      	movs	r3, #0
    return errorcode;
 80061a2:	2702      	movs	r7, #2
    __HAL_UNLOCK(hspi);
 80061a4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80061a8:	4638      	mov	r0, r7
 80061aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80061ae:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061b6:	d1ed      	bne.n	8006194 <HAL_SPI_Receive_DMA+0x14c>
 80061b8:	e786      	b.n	80060c8 <HAL_SPI_Receive_DMA+0x80>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80061ba:	2604      	movs	r6, #4
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80061bc:	462b      	mov	r3, r5
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80061be:	f880 6081 	strb.w	r6, [r0, #129]	; 0x81
}
 80061c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80061c6:	f7ff be1d 	b.w	8005e04 <HAL_SPI_TransmitReceive_DMA>
  __HAL_LOCK(hspi);
 80061ca:	2702      	movs	r7, #2
}
 80061cc:	4638      	mov	r0, r7
 80061ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80061d2:	2b0f      	cmp	r3, #15
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80061d4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80061d6:	d896      	bhi.n	8006106 <HAL_SPI_Receive_DMA+0xbe>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80061d8:	699a      	ldr	r2, [r3, #24]
 80061da:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80061de:	d192      	bne.n	8006106 <HAL_SPI_Receive_DMA+0xbe>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80061e0:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80061e4:	b292      	uxth	r2, r2
 80061e6:	3201      	adds	r2, #1
 80061e8:	0852      	lsrs	r2, r2, #1
 80061ea:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 80061ee:	e78a      	b.n	8006106 <HAL_SPI_Receive_DMA+0xbe>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80061f0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80061f4:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80061f6:	f043 0310 	orr.w	r3, r3, #16
 80061fa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80061fe:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 8006202:	e7ca      	b.n	800619a <HAL_SPI_Receive_DMA+0x152>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8006204:	6822      	ldr	r2, [r4, #0]
 8006206:	4b05      	ldr	r3, [pc, #20]	; (800621c <HAL_SPI_Receive_DMA+0x1d4>)
 8006208:	6851      	ldr	r1, [r2, #4]
 800620a:	400b      	ands	r3, r1
 800620c:	6053      	str	r3, [r2, #4]
 800620e:	e79b      	b.n	8006148 <HAL_SPI_Receive_DMA+0x100>
 8006210:	08006279 	.word	0x08006279
 8006214:	08006225 	.word	0x08006225
 8006218:	08006299 	.word	0x08006299
 800621c:	ffff0000 	.word	0xffff0000

08006220 <HAL_SPI_TxCpltCallback>:
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop

08006224 <SPI_DMAReceiveCplt>:
{
 8006224:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006226:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8006228:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800622c:	2b07      	cmp	r3, #7
 800622e:	d009      	beq.n	8006244 <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006230:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006238:	d005      	beq.n	8006246 <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800623a:	6802      	ldr	r2, [r0, #0]
 800623c:	6913      	ldr	r3, [r2, #16]
 800623e:	f043 0308 	orr.w	r3, r3, #8
 8006242:	6113      	str	r3, [r2, #16]
}
 8006244:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 8006246:	f003 fef9 	bl	800a03c <HAL_SPI_RxCpltCallback>
}
 800624a:	bd08      	pop	{r3, pc}

0800624c <HAL_SPI_TxRxCpltCallback>:
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop

08006250 <SPI_DMATransmitReceiveCplt>:
{
 8006250:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006252:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8006254:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006258:	2b07      	cmp	r3, #7
 800625a:	d009      	beq.n	8006270 <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800625c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800625e:	69db      	ldr	r3, [r3, #28]
 8006260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006264:	d005      	beq.n	8006272 <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8006266:	6802      	ldr	r2, [r0, #0]
 8006268:	6913      	ldr	r3, [r2, #16]
 800626a:	f043 0308 	orr.w	r3, r3, #8
 800626e:	6113      	str	r3, [r2, #16]
}
 8006270:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 8006272:	f7ff ffeb 	bl	800624c <HAL_SPI_TxRxCpltCallback>
}
 8006276:	bd08      	pop	{r3, pc}

08006278 <SPI_DMAHalfReceiveCplt>:
{
 8006278:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800627a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800627c:	f003 ff14 	bl	800a0a8 <HAL_SPI_RxHalfCpltCallback>
}
 8006280:	bd08      	pop	{r3, pc}
 8006282:	bf00      	nop

08006284 <HAL_SPI_TxRxHalfCpltCallback>:
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop

08006288 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8006288:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800628a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800628c:	f7ff fffa 	bl	8006284 <HAL_SPI_TxRxHalfCpltCallback>
}
 8006290:	bd08      	pop	{r3, pc}
 8006292:	bf00      	nop

08006294 <HAL_SPI_ErrorCallback>:
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop

08006298 <SPI_DMAError>:
{
 8006298:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800629a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800629c:	f7fb fd2e 	bl	8001cfc <HAL_DMA_GetError>
 80062a0:	2802      	cmp	r0, #2
 80062a2:	d100      	bne.n	80062a6 <SPI_DMAError+0xe>
}
 80062a4:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
 80062a6:	6821      	ldr	r1, [r4, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80062a8:	4a34      	ldr	r2, [pc, #208]	; (800637c <SPI_DMAError+0xe4>)
  uint32_t itflag = hspi->Instance->SR;
 80062aa:	694b      	ldr	r3, [r1, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80062ac:	6988      	ldr	r0, [r1, #24]
 80062ae:	f040 0008 	orr.w	r0, r0, #8
 80062b2:	6188      	str	r0, [r1, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80062b4:	6820      	ldr	r0, [r4, #0]
 80062b6:	6981      	ldr	r1, [r0, #24]
 80062b8:	f041 0110 	orr.w	r1, r1, #16
 80062bc:	6181      	str	r1, [r0, #24]
  __HAL_SPI_DISABLE(hspi);
 80062be:	6820      	ldr	r0, [r4, #0]
 80062c0:	6801      	ldr	r1, [r0, #0]
 80062c2:	f021 0101 	bic.w	r1, r1, #1
 80062c6:	6001      	str	r1, [r0, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80062c8:	6821      	ldr	r1, [r4, #0]
 80062ca:	6908      	ldr	r0, [r1, #16]
 80062cc:	4002      	ands	r2, r0
 80062ce:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80062d0:	6821      	ldr	r1, [r4, #0]
 80062d2:	688a      	ldr	r2, [r1, #8]
 80062d4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80062d8:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062da:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 80062de:	2a04      	cmp	r2, #4
 80062e0:	d001      	beq.n	80062e6 <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80062e2:	0698      	lsls	r0, r3, #26
 80062e4:	d43d      	bmi.n	8006362 <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80062e6:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 80062ea:	2a03      	cmp	r2, #3
 80062ec:	d001      	beq.n	80062f2 <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80062ee:	0659      	lsls	r1, r3, #25
 80062f0:	d42b      	bmi.n	800634a <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80062f2:	059a      	lsls	r2, r3, #22
 80062f4:	d50a      	bpl.n	800630c <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80062f6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80062fa:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80062fc:	f042 0201 	orr.w	r2, r2, #1
 8006300:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006304:	698a      	ldr	r2, [r1, #24]
 8006306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800630a:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800630c:	05db      	lsls	r3, r3, #23
 800630e:	d50a      	bpl.n	8006326 <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006310:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006314:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006316:	f043 0308 	orr.w	r3, r3, #8
 800631a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800631e:	6993      	ldr	r3, [r2, #24]
 8006320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006324:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 8006326:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 8006328:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 800632a:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 800632c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006330:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006334:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006338:	f043 0310 	orr.w	r3, r3, #16
 800633c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006340:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 8006344:	f7ff ffa6 	bl	8006294 <HAL_SPI_ErrorCallback>
}
 8006348:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800634a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800634e:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006350:	f042 0204 	orr.w	r2, r2, #4
 8006354:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006358:	698a      	ldr	r2, [r1, #24]
 800635a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800635e:	618a      	str	r2, [r1, #24]
 8006360:	e7c7      	b.n	80062f2 <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006362:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006366:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006368:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800636c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006370:	698a      	ldr	r2, [r1, #24]
 8006372:	f042 0220 	orr.w	r2, r2, #32
 8006376:	618a      	str	r2, [r1, #24]
 8006378:	e7b5      	b.n	80062e6 <SPI_DMAError+0x4e>
 800637a:	bf00      	nop
 800637c:	fffffc90 	.word	0xfffffc90

08006380 <HAL_SPI_IRQHandler>:
{
 8006380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 8006384:	6802      	ldr	r2, [r0, #0]
{
 8006386:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 8006388:	6911      	ldr	r1, [r2, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800638a:	6953      	ldr	r3, [r2, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800638c:	f8d2 c008 	ldr.w	ip, [r2, #8]
  uint32_t trigger  = itsource & itflag;
 8006390:	ea01 0503 	and.w	r5, r1, r3
  HAL_SPI_StateTypeDef State = hspi->State;
 8006394:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8006398:	f005 0764 	and.w	r7, r5, #100	; 0x64
 800639c:	2f04      	cmp	r7, #4
 800639e:	d032      	beq.n	8006406 <HAL_SPI_IRQHandler+0x86>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80063a0:	f005 0045 	and.w	r0, r5, #69	; 0x45
 80063a4:	2801      	cmp	r0, #1
 80063a6:	d037      	beq.n	8006418 <HAL_SPI_IRQHandler+0x98>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80063a8:	f005 0026 	and.w	r0, r5, #38	; 0x26
 80063ac:	2802      	cmp	r0, #2
 80063ae:	f000 80ee 	beq.w	800658e <HAL_SPI_IRQHandler+0x20e>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80063b2:	0728      	lsls	r0, r5, #28
 80063b4:	d577      	bpl.n	80064a6 <HAL_SPI_IRQHandler+0x126>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80063b6:	6993      	ldr	r3, [r2, #24]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 80063b8:	f41c 4f40 	tst.w	ip, #49152	; 0xc000
 80063bc:	b2f6      	uxtb	r6, r6
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80063be:	f043 0308 	orr.w	r3, r3, #8
 80063c2:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80063c4:	6821      	ldr	r1, [r4, #0]
 80063c6:	698b      	ldr	r3, [r1, #24]
 80063c8:	f043 0310 	orr.w	r3, r3, #16
 80063cc:	618b      	str	r3, [r1, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80063ce:	6821      	ldr	r1, [r4, #0]
 80063d0:	698b      	ldr	r3, [r1, #24]
 80063d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80063d6:	618b      	str	r3, [r1, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80063d8:	6821      	ldr	r1, [r4, #0]
 80063da:	690b      	ldr	r3, [r1, #16]
 80063dc:	f023 0308 	bic.w	r3, r3, #8
 80063e0:	610b      	str	r3, [r1, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 80063e2:	d023      	beq.n	800642c <HAL_SPI_IRQHandler+0xac>
 80063e4:	2e04      	cmp	r6, #4
 80063e6:	f000 80e7 	beq.w	80065b8 <HAL_SPI_IRQHandler+0x238>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 80063ea:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	b1eb      	cbz	r3, 800642c <HAL_SPI_IRQHandler+0xac>
 80063f0:	2e03      	cmp	r6, #3
 80063f2:	d054      	beq.n	800649e <HAL_SPI_IRQHandler+0x11e>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 80063f4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	b1c3      	cbz	r3, 800642c <HAL_SPI_IRQHandler+0xac>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80063fa:	2e05      	cmp	r6, #5
 80063fc:	d114      	bne.n	8006428 <HAL_SPI_IRQHandler+0xa8>
      HAL_SPI_TxRxCpltCallback(hspi);
 80063fe:	4620      	mov	r0, r4
 8006400:	f7ff ff24 	bl	800624c <HAL_SPI_TxRxCpltCallback>
 8006404:	e010      	b.n	8006428 <HAL_SPI_IRQHandler+0xa8>
    hspi->TxISR(hspi);
 8006406:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8006408:	4798      	blx	r3
    hspi->RxISR(hspi);
 800640a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800640c:	4620      	mov	r0, r4
 800640e:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006410:	f005 0345 	and.w	r3, r5, #69	; 0x45
 8006414:	2b01      	cmp	r3, #1
 8006416:	d102      	bne.n	800641e <HAL_SPI_IRQHandler+0x9e>
    hspi->RxISR(hspi);
 8006418:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800641a:	4620      	mov	r0, r4
 800641c:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800641e:	f005 0526 	and.w	r5, r5, #38	; 0x26
 8006422:	2d02      	cmp	r5, #2
 8006424:	f000 80b3 	beq.w	800658e <HAL_SPI_IRQHandler+0x20e>
}
 8006428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8006434:	d121      	bne.n	800647a <HAL_SPI_IRQHandler+0xfa>
        while (hspi->RxXferCount != 0UL)
 8006436:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800643a:	b29b      	uxth	r3, r3
 800643c:	b1eb      	cbz	r3, 800647a <HAL_SPI_IRQHandler+0xfa>
 800643e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006440:	e00f      	b.n	8006462 <HAL_SPI_IRQHandler+0xe2>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006446:	600b      	str	r3, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8006448:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800644a:	3104      	adds	r1, #4
 800644c:	6661      	str	r1, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800644e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006452:	3b01      	subs	r3, #1
 8006454:	b29b      	uxth	r3, r3
 8006456:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800645a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800645e:	b29b      	uxth	r3, r3
 8006460:	b15b      	cbz	r3, 800647a <HAL_SPI_IRQHandler+0xfa>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006462:	68e3      	ldr	r3, [r4, #12]
 8006464:	2b0f      	cmp	r3, #15
 8006466:	d8ec      	bhi.n	8006442 <HAL_SPI_IRQHandler+0xc2>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006468:	2b07      	cmp	r3, #7
 800646a:	f240 8098 	bls.w	800659e <HAL_SPI_IRQHandler+0x21e>
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800646e:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 8006470:	800b      	strh	r3, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8006472:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006474:	3102      	adds	r1, #2
 8006476:	6661      	str	r1, [r4, #100]	; 0x64
 8006478:	e7e9      	b.n	800644e <HAL_SPI_IRQHandler+0xce>
      SPI_CloseTransfer(hspi);
 800647a:	4620      	mov	r0, r4
 800647c:	f7ff fba8 	bl	8005bd0 <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 8006480:	2301      	movs	r3, #1
 8006482:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006486:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800648a:	2b00      	cmp	r3, #0
 800648c:	f040 8084 	bne.w	8006598 <HAL_SPI_IRQHandler+0x218>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006490:	2e05      	cmp	r6, #5
 8006492:	d0b4      	beq.n	80063fe <HAL_SPI_IRQHandler+0x7e>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8006494:	2e04      	cmp	r6, #4
 8006496:	f000 8094 	beq.w	80065c2 <HAL_SPI_IRQHandler+0x242>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800649a:	2e03      	cmp	r6, #3
 800649c:	d1c4      	bne.n	8006428 <HAL_SPI_IRQHandler+0xa8>
      HAL_SPI_TxCpltCallback(hspi);
 800649e:	4620      	mov	r0, r4
 80064a0:	f7ff febe 	bl	8006220 <HAL_SPI_TxCpltCallback>
 80064a4:	e7c0      	b.n	8006428 <HAL_SPI_IRQHandler+0xa8>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80064a6:	051f      	lsls	r7, r3, #20
 80064a8:	d501      	bpl.n	80064ae <HAL_SPI_IRQHandler+0x12e>
 80064aa:	070e      	lsls	r6, r1, #28
 80064ac:	d47f      	bmi.n	80065ae <HAL_SPI_IRQHandler+0x22e>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80064ae:	f415 7f58 	tst.w	r5, #864	; 0x360
 80064b2:	d0b9      	beq.n	8006428 <HAL_SPI_IRQHandler+0xa8>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80064b4:	0668      	lsls	r0, r5, #25
 80064b6:	d509      	bpl.n	80064cc <HAL_SPI_IRQHandler+0x14c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80064b8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80064bc:	f043 0304 	orr.w	r3, r3, #4
 80064c0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064c4:	6993      	ldr	r3, [r2, #24]
 80064c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ca:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80064cc:	05a9      	lsls	r1, r5, #22
 80064ce:	d50a      	bpl.n	80064e6 <HAL_SPI_IRQHandler+0x166>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80064d0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80064d4:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80064d6:	f043 0301 	orr.w	r3, r3, #1
 80064da:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80064de:	6993      	ldr	r3, [r2, #24]
 80064e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064e4:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80064e6:	05ea      	lsls	r2, r5, #23
 80064e8:	d50a      	bpl.n	8006500 <HAL_SPI_IRQHandler+0x180>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80064ea:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80064ee:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80064f0:	f043 0308 	orr.w	r3, r3, #8
 80064f4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80064f8:	6993      	ldr	r3, [r2, #24]
 80064fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064fe:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006500:	06ab      	lsls	r3, r5, #26
 8006502:	d50a      	bpl.n	800651a <HAL_SPI_IRQHandler+0x19a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006504:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006508:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800650a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800650e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006512:	6993      	ldr	r3, [r2, #24]
 8006514:	f043 0320 	orr.w	r3, r3, #32
 8006518:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800651a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800651e:	2b00      	cmp	r3, #0
 8006520:	d082      	beq.n	8006428 <HAL_SPI_IRQHandler+0xa8>
      __HAL_SPI_DISABLE(hspi);
 8006522:	6821      	ldr	r1, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006524:	f40c 4c40 	and.w	ip, ip, #49152	; 0xc000
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8006528:	4b2b      	ldr	r3, [pc, #172]	; (80065d8 <HAL_SPI_IRQHandler+0x258>)
      __HAL_SPI_DISABLE(hspi);
 800652a:	680a      	ldr	r2, [r1, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800652c:	f5bc 4f40 	cmp.w	ip, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 8006530:	f022 0201 	bic.w	r2, r2, #1
 8006534:	600a      	str	r2, [r1, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8006536:	6822      	ldr	r2, [r4, #0]
 8006538:	6911      	ldr	r1, [r2, #16]
 800653a:	ea03 0301 	and.w	r3, r3, r1
 800653e:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006540:	d143      	bne.n	80065ca <HAL_SPI_IRQHandler+0x24a>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006542:	6822      	ldr	r2, [r4, #0]
 8006544:	6893      	ldr	r3, [r2, #8]
 8006546:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800654a:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800654c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800654e:	b15b      	cbz	r3, 8006568 <HAL_SPI_IRQHandler+0x1e8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006550:	4a22      	ldr	r2, [pc, #136]	; (80065dc <HAL_SPI_IRQHandler+0x25c>)
 8006552:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006554:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006556:	f7fa fe1d 	bl	8001194 <HAL_DMA_Abort_IT>
 800655a:	b128      	cbz	r0, 8006568 <HAL_SPI_IRQHandler+0x1e8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800655c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006564:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 8006568:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800656a:	2b00      	cmp	r3, #0
 800656c:	f43f af5c 	beq.w	8006428 <HAL_SPI_IRQHandler+0xa8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006570:	4a1a      	ldr	r2, [pc, #104]	; (80065dc <HAL_SPI_IRQHandler+0x25c>)
 8006572:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006574:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006576:	f7fa fe0d 	bl	8001194 <HAL_DMA_Abort_IT>
 800657a:	2800      	cmp	r0, #0
 800657c:	f43f af54 	beq.w	8006428 <HAL_SPI_IRQHandler+0xa8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006580:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006588:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800658c:	e74c      	b.n	8006428 <HAL_SPI_IRQHandler+0xa8>
    hspi->TxISR(hspi);
 800658e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006590:	4620      	mov	r0, r4
}
 8006592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 8006596:	4718      	bx	r3
        HAL_SPI_ErrorCallback(hspi);
 8006598:	f7ff fe7c 	bl	8006294 <HAL_SPI_ErrorCallback>
        return;
 800659c:	e744      	b.n	8006428 <HAL_SPI_IRQHandler+0xa8>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800659e:	6823      	ldr	r3, [r4, #0]
 80065a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065a4:	700b      	strb	r3, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 80065a6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80065a8:	3101      	adds	r1, #1
 80065aa:	6661      	str	r1, [r4, #100]	; 0x64
 80065ac:	e74f      	b.n	800644e <HAL_SPI_IRQHandler+0xce>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80065ae:	6993      	ldr	r3, [r2, #24]
 80065b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80065b4:	6193      	str	r3, [r2, #24]
    return;
 80065b6:	e737      	b.n	8006428 <HAL_SPI_IRQHandler+0xa8>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 80065b8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f43f af35 	beq.w	800642c <HAL_SPI_IRQHandler+0xac>
      HAL_SPI_RxCpltCallback(hspi);
 80065c2:	4620      	mov	r0, r4
 80065c4:	f003 fd3a 	bl	800a03c <HAL_SPI_RxCpltCallback>
 80065c8:	e72e      	b.n	8006428 <HAL_SPI_IRQHandler+0xa8>
        hspi->State = HAL_SPI_STATE_READY;
 80065ca:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 80065cc:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 80065ce:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80065d2:	f7ff fe5f 	bl	8006294 <HAL_SPI_ErrorCallback>
 80065d6:	e727      	b.n	8006428 <HAL_SPI_IRQHandler+0xa8>
 80065d8:	fffffc94 	.word	0xfffffc94
 80065dc:	080065e1 	.word	0x080065e1

080065e0 <SPI_DMAAbortOnError>:
{
 80065e0:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
 80065e2:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065e4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80065ec:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 80065f0:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 80065f4:	f7ff fe4e 	bl	8006294 <HAL_SPI_ErrorCallback>
}
 80065f8:	bd08      	pop	{r3, pc}
 80065fa:	bf00      	nop

080065fc <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80065fc:	680b      	ldr	r3, [r1, #0]
{
 80065fe:	b470      	push	{r4, r5, r6}
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006600:	6802      	ldr	r2, [r0, #0]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006602:	b9c3      	cbnz	r3, 8006636 <FMC_SDRAM_Init+0x3a>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006604:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8006608:	684c      	ldr	r4, [r1, #4]
 800660a:	698e      	ldr	r6, [r1, #24]
 800660c:	4013      	ands	r3, r2
 800660e:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8006612:	4323      	orrs	r3, r4
 8006614:	690c      	ldr	r4, [r1, #16]
 8006616:	4313      	orrs	r3, r2
 8006618:	694a      	ldr	r2, [r1, #20]
 800661a:	432b      	orrs	r3, r5
 800661c:	69cd      	ldr	r5, [r1, #28]
 800661e:	4323      	orrs	r3, r4
 8006620:	4313      	orrs	r3, r2
 8006622:	4333      	orrs	r3, r6
 8006624:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 8006628:	432b      	orrs	r3, r5
 800662a:	4323      	orrs	r3, r4
 800662c:	4313      	orrs	r3, r2
 800662e:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8006630:	2000      	movs	r0, #0
 8006632:	bc70      	pop	{r4, r5, r6}
 8006634:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006636:	69cb      	ldr	r3, [r1, #28]
 8006638:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800663c:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
 8006640:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006642:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <FMC_SDRAM_Init+0x74>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006644:	432a      	orrs	r2, r5
 8006646:	4322      	orrs	r2, r4
 8006648:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800664a:	6842      	ldr	r2, [r0, #4]
 800664c:	684c      	ldr	r4, [r1, #4]
 800664e:	4013      	ands	r3, r2
 8006650:	690d      	ldr	r5, [r1, #16]
 8006652:	e9d1 2602 	ldrd	r2, r6, [r1, #8]
 8006656:	4323      	orrs	r3, r4
 8006658:	4313      	orrs	r3, r2
 800665a:	4333      	orrs	r3, r6
 800665c:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 8006660:	432b      	orrs	r3, r5
 8006662:	4323      	orrs	r3, r4
 8006664:	4313      	orrs	r3, r2
 8006666:	6043      	str	r3, [r0, #4]
}
 8006668:	2000      	movs	r0, #0
 800666a:	bc70      	pop	{r4, r5, r6}
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	ffff8000 	.word	0xffff8000

08006674 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006674:	b470      	push	{r4, r5, r6}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006676:	bb0a      	cbnz	r2, 80066bc <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006678:	684c      	ldr	r4, [r1, #4]
 800667a:	6882      	ldr	r2, [r0, #8]
 800667c:	680d      	ldr	r5, [r1, #0]
 800667e:	1e63      	subs	r3, r4, #1
 8006680:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006684:	688c      	ldr	r4, [r1, #8]
 8006686:	1e6e      	subs	r6, r5, #1
 8006688:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 800668c:	1e65      	subs	r5, r4, #1
 800668e:	68cc      	ldr	r4, [r1, #12]
 8006690:	4333      	orrs	r3, r6
 8006692:	690a      	ldr	r2, [r1, #16]
 8006694:	1e66      	subs	r6, r4, #1
 8006696:	694c      	ldr	r4, [r1, #20]
 8006698:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800669c:	1e55      	subs	r5, r2, #1
 800669e:	698a      	ldr	r2, [r1, #24]
 80066a0:	1e61      	subs	r1, r4, #1
 80066a2:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
 80066a6:	3a01      	subs	r2, #1
 80066a8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80066ac:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 80066b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80066b4:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 80066b6:	2000      	movs	r0, #0
 80066b8:	bc70      	pop	{r4, r5, r6}
 80066ba:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80066bc:	6882      	ldr	r2, [r0, #8]
 80066be:	68cc      	ldr	r4, [r1, #12]
 80066c0:	4b11      	ldr	r3, [pc, #68]	; (8006708 <FMC_SDRAM_Timing_Init+0x94>)
 80066c2:	3c01      	subs	r4, #1
 80066c4:	4013      	ands	r3, r2
 80066c6:	694a      	ldr	r2, [r1, #20]
 80066c8:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 80066cc:	3a01      	subs	r2, #1
 80066ce:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80066d2:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80066d4:	684c      	ldr	r4, [r1, #4]
 80066d6:	68c2      	ldr	r2, [r0, #12]
 80066d8:	680d      	ldr	r5, [r1, #0]
 80066da:	1e63      	subs	r3, r4, #1
 80066dc:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80066e0:	688c      	ldr	r4, [r1, #8]
 80066e2:	1e6e      	subs	r6, r5, #1
 80066e4:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 80066e8:	1e65      	subs	r5, r4, #1
 80066ea:	690c      	ldr	r4, [r1, #16]
 80066ec:	4333      	orrs	r3, r6
 80066ee:	698a      	ldr	r2, [r1, #24]
 80066f0:	1e61      	subs	r1, r4, #1
 80066f2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80066f6:	3a01      	subs	r2, #1
 80066f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80066fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006700:	60c3      	str	r3, [r0, #12]
}
 8006702:	2000      	movs	r0, #0
 8006704:	bc70      	pop	{r4, r5, r6}
 8006706:	4770      	bx	lr
 8006708:	ff0f0fff 	.word	0xff0f0fff

0800670c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800670c:	b470      	push	{r4, r5, r6}
 800670e:	4602      	mov	r2, r0
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8006710:	68ce      	ldr	r6, [r1, #12]
 8006712:	4c08      	ldr	r4, [pc, #32]	; (8006734 <FMC_SDRAM_SendCommand+0x28>)
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8006714:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8006716:	e9d1 3500 	ldrd	r3, r5, [r1]
 800671a:	6889      	ldr	r1, [r1, #8]
 800671c:	432b      	orrs	r3, r5
 800671e:	6915      	ldr	r5, [r2, #16]
 8006720:	3901      	subs	r1, #1
 8006722:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
 8006726:	402c      	ands	r4, r5
 8006728:	4323      	orrs	r3, r4
 800672a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800672e:	6113      	str	r3, [r2, #16]
}
 8006730:	bc70      	pop	{r4, r5, r6}
 8006732:	4770      	bx	lr
 8006734:	ffc00000 	.word	0xffc00000

08006738 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006738:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800673a:	4b05      	ldr	r3, [pc, #20]	; (8006750 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 800673c:	2000      	movs	r0, #0
{
 800673e:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006740:	6954      	ldr	r4, [r2, #20]
 8006742:	4023      	ands	r3, r4
 8006744:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8006748:	6151      	str	r1, [r2, #20]
}
 800674a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	ffffc001 	.word	0xffffc001

08006754 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006754:	b084      	sub	sp, #16
 8006756:	b470      	push	{r4, r5, r6}
 8006758:	ae04      	add	r6, sp, #16
 800675a:	4605      	mov	r5, r0
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
             Init.ClockPowerSave      | \
             Init.BusWide             | \
 800675c:	9c07      	ldr	r4, [sp, #28]

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);

  return HAL_OK;
}
 800675e:	2000      	movs	r0, #0
{
 8006760:	e886 000e 	stmia.w	r6, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 8006764:	460b      	mov	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006766:	686e      	ldr	r6, [r5, #4]
             Init.ClockPowerSave      | \
 8006768:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 800676c:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 800676e:	9908      	ldr	r1, [sp, #32]
             Init.ClockPowerSave      | \
 8006770:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006772:	4a04      	ldr	r2, [pc, #16]	; (8006784 <SDMMC_Init+0x30>)
             Init.BusWide             | \
 8006774:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006776:	4032      	ands	r2, r6
             Init.HardwareFlowControl | \
 8006778:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800677a:	4313      	orrs	r3, r2
 800677c:	606b      	str	r3, [r5, #4]
}
 800677e:	bc70      	pop	{r4, r5, r6}
 8006780:	b004      	add	sp, #16
 8006782:	4770      	bx	lr
 8006784:	ffc02c00 	.word	0xffc02c00

08006788 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8006788:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop

08006790 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8006790:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8006792:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 8006794:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 8006796:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800679a:	4770      	bx	lr

0800679c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800679c:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 800679e:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	f042 0203 	orr.w	r2, r2, #3
 80067a6:	601a      	str	r2, [r3, #0]
}
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop

080067ac <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80067ac:	6800      	ldr	r0, [r0, #0]
}
 80067ae:	f000 0003 	and.w	r0, r0, #3
 80067b2:	4770      	bx	lr

080067b4 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80067b4:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 80067b6:	5840      	ldr	r0, [r0, r1]
}
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop

080067bc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80067bc:	b430      	push	{r4, r5}
 80067be:	4602      	mov	r2, r0
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80067c0:	680b      	ldr	r3, [r1, #0]
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);

  return HAL_OK;

}
 80067c2:	2000      	movs	r0, #0
  SDMMCx->DTIMER = Data->DataTimeOut;
 80067c4:	6253      	str	r3, [r2, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 80067c6:	684b      	ldr	r3, [r1, #4]
 80067c8:	6293      	str	r3, [r2, #40]	; 0x28
                       Data->TransferDir   | \
 80067ca:	690d      	ldr	r5, [r1, #16]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80067cc:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 80067d0:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
 80067d2:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80067d4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                       Data->TransferDir   | \
 80067d6:	432b      	orrs	r3, r5
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80067d8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
                       Data->TransferMode  | \
 80067dc:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80067de:	430b      	orrs	r3, r1
 80067e0:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80067e2:	bc30      	pop	{r4, r5}
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop

080067e8 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80067e8:	4b4b      	ldr	r3, [pc, #300]	; (8006918 <SDMMC_CmdBlockLength+0x130>)
 80067ea:	f241 3288 	movw	r2, #5000	; 0x1388
{
 80067ee:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80067f0:	4d4a      	ldr	r5, [pc, #296]	; (800691c <SDMMC_CmdBlockLength+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80067f2:	f241 1410 	movw	r4, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80067f6:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 80067f8:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80067fa:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80067fe:	4948      	ldr	r1, [pc, #288]	; (8006920 <SDMMC_CmdBlockLength+0x138>)
 8006800:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006802:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006804:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006806:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800680a:	430c      	orrs	r4, r1
 800680c:	60c4      	str	r4, [r0, #12]

  do
  {
    if (count-- == 0U)
 800680e:	b14b      	cbz	r3, 8006824 <SDMMC_CmdBlockLength+0x3c>
 8006810:	1e5a      	subs	r2, r3, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8006812:	4944      	ldr	r1, [pc, #272]	; (8006924 <SDMMC_CmdBlockLength+0x13c>)
    sta_reg = SDMMCx->STA;
 8006814:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8006816:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006818:	420b      	tst	r3, r1
 800681a:	d001      	beq.n	8006820 <SDMMC_CmdBlockLength+0x38>
 800681c:	049c      	lsls	r4, r3, #18
 800681e:	d506      	bpl.n	800682e <SDMMC_CmdBlockLength+0x46>
    if (count-- == 0U)
 8006820:	1c55      	adds	r5, r2, #1
 8006822:	d1f7      	bne.n	8006814 <SDMMC_CmdBlockLength+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8006824:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8006828:	4618      	mov	r0, r3
 800682a:	bc30      	pop	{r4, r5}
 800682c:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800682e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006830:	075b      	lsls	r3, r3, #29
 8006832:	d43d      	bmi.n	80068b0 <SDMMC_CmdBlockLength+0xc8>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006834:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006836:	f013 0301 	ands.w	r3, r3, #1
 800683a:	d134      	bne.n	80068a6 <SDMMC_CmdBlockLength+0xbe>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800683c:	4b3a      	ldr	r3, [pc, #232]	; (8006928 <SDMMC_CmdBlockLength+0x140>)
 800683e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006840:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b10      	cmp	r3, #16
 8006846:	d131      	bne.n	80068ac <SDMMC_CmdBlockLength+0xc4>
  return (*(__IO uint32_t *) tmp);
 8006848:	6942      	ldr	r2, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800684a:	4b38      	ldr	r3, [pc, #224]	; (800692c <SDMMC_CmdBlockLength+0x144>)
 800684c:	4013      	ands	r3, r2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d0ea      	beq.n	8006828 <SDMMC_CmdBlockLength+0x40>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006852:	2a00      	cmp	r2, #0
 8006854:	db2f      	blt.n	80068b6 <SDMMC_CmdBlockLength+0xce>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006856:	0055      	lsls	r5, r2, #1
 8006858:	d430      	bmi.n	80068bc <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800685a:	0094      	lsls	r4, r2, #2
 800685c:	d430      	bmi.n	80068c0 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800685e:	00d0      	lsls	r0, r2, #3
 8006860:	d430      	bmi.n	80068c4 <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006862:	0111      	lsls	r1, r2, #4
 8006864:	d431      	bmi.n	80068ca <SDMMC_CmdBlockLength+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006866:	0155      	lsls	r5, r2, #5
 8006868:	d432      	bmi.n	80068d0 <SDMMC_CmdBlockLength+0xe8>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800686a:	01d4      	lsls	r4, r2, #7
 800686c:	d433      	bmi.n	80068d6 <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800686e:	0210      	lsls	r0, r2, #8
 8006870:	d434      	bmi.n	80068dc <SDMMC_CmdBlockLength+0xf4>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006872:	0251      	lsls	r1, r2, #9
 8006874:	d435      	bmi.n	80068e2 <SDMMC_CmdBlockLength+0xfa>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006876:	0295      	lsls	r5, r2, #10
 8006878:	d436      	bmi.n	80068e8 <SDMMC_CmdBlockLength+0x100>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800687a:	02d4      	lsls	r4, r2, #11
 800687c:	d437      	bmi.n	80068ee <SDMMC_CmdBlockLength+0x106>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800687e:	0350      	lsls	r0, r2, #13
 8006880:	d438      	bmi.n	80068f4 <SDMMC_CmdBlockLength+0x10c>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006882:	0391      	lsls	r1, r2, #14
 8006884:	d439      	bmi.n	80068fa <SDMMC_CmdBlockLength+0x112>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006886:	03d5      	lsls	r5, r2, #15
 8006888:	d43a      	bmi.n	8006900 <SDMMC_CmdBlockLength+0x118>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800688a:	0414      	lsls	r4, r2, #16
 800688c:	d43b      	bmi.n	8006906 <SDMMC_CmdBlockLength+0x11e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800688e:	0450      	lsls	r0, r2, #17
 8006890:	d43f      	bmi.n	8006912 <SDMMC_CmdBlockLength+0x12a>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006892:	0491      	lsls	r1, r2, #18
 8006894:	d43a      	bmi.n	800690c <SDMMC_CmdBlockLength+0x124>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006896:	f012 0f08 	tst.w	r2, #8
 800689a:	bf14      	ite	ne
 800689c:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80068a0:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80068a4:	e7c0      	b.n	8006828 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80068a6:	2201      	movs	r2, #1
 80068a8:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80068aa:	e7bd      	b.n	8006828 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e7bb      	b.n	8006828 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80068b0:	2304      	movs	r3, #4
 80068b2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80068b4:	e7b8      	b.n	8006828 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80068b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068ba:	e7b5      	b.n	8006828 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80068bc:	2340      	movs	r3, #64	; 0x40
 80068be:	e7b3      	b.n	8006828 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80068c0:	2380      	movs	r3, #128	; 0x80
 80068c2:	e7b1      	b.n	8006828 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80068c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068c8:	e7ae      	b.n	8006828 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80068ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068ce:	e7ab      	b.n	8006828 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80068d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068d4:	e7a8      	b.n	8006828 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80068d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80068da:	e7a5      	b.n	8006828 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80068dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068e0:	e7a2      	b.n	8006828 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80068e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80068e6:	e79f      	b.n	8006828 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80068e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068ec:	e79c      	b.n	8006828 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CC_ERR;
 80068ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068f2:	e799      	b.n	8006828 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80068f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068f8:	e796      	b.n	8006828 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80068fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80068fe:	e793      	b.n	8006828 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006900:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006904:	e790      	b.n	8006828 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006906:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800690a:	e78d      	b.n	8006828 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800690c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006910:	e78a      	b.n	8006828 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006912:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006916:	e787      	b.n	8006828 <SDMMC_CmdBlockLength+0x40>
 8006918:	20000b08 	.word	0x20000b08
 800691c:	10624dd3 	.word	0x10624dd3
 8006920:	fffee0c0 	.word	0xfffee0c0
 8006924:	00200045 	.word	0x00200045
 8006928:	002000c5 	.word	0x002000c5
 800692c:	fdffe008 	.word	0xfdffe008

08006930 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006930:	4b4b      	ldr	r3, [pc, #300]	; (8006a60 <SDMMC_CmdReadSingleBlock+0x130>)
 8006932:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8006936:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006938:	4d4a      	ldr	r5, [pc, #296]	; (8006a64 <SDMMC_CmdReadSingleBlock+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800693a:	f241 1411 	movw	r4, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800693e:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 8006940:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006942:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006946:	4948      	ldr	r1, [pc, #288]	; (8006a68 <SDMMC_CmdReadSingleBlock+0x138>)
 8006948:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800694a:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800694c:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800694e:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006952:	430c      	orrs	r4, r1
 8006954:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8006956:	b14b      	cbz	r3, 800696c <SDMMC_CmdReadSingleBlock+0x3c>
 8006958:	1e5a      	subs	r2, r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800695a:	4944      	ldr	r1, [pc, #272]	; (8006a6c <SDMMC_CmdReadSingleBlock+0x13c>)
    sta_reg = SDMMCx->STA;
 800695c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 800695e:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006960:	420b      	tst	r3, r1
 8006962:	d001      	beq.n	8006968 <SDMMC_CmdReadSingleBlock+0x38>
 8006964:	049c      	lsls	r4, r3, #18
 8006966:	d506      	bpl.n	8006976 <SDMMC_CmdReadSingleBlock+0x46>
    if (count-- == 0U)
 8006968:	1c55      	adds	r5, r2, #1
 800696a:	d1f7      	bne.n	800695c <SDMMC_CmdReadSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800696c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8006970:	4618      	mov	r0, r3
 8006972:	bc30      	pop	{r4, r5}
 8006974:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006976:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006978:	075b      	lsls	r3, r3, #29
 800697a:	d43d      	bmi.n	80069f8 <SDMMC_CmdReadSingleBlock+0xc8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800697c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800697e:	f013 0301 	ands.w	r3, r3, #1
 8006982:	d134      	bne.n	80069ee <SDMMC_CmdReadSingleBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006984:	4b3a      	ldr	r3, [pc, #232]	; (8006a70 <SDMMC_CmdReadSingleBlock+0x140>)
 8006986:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006988:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b11      	cmp	r3, #17
 800698e:	d131      	bne.n	80069f4 <SDMMC_CmdReadSingleBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 8006990:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006992:	4b38      	ldr	r3, [pc, #224]	; (8006a74 <SDMMC_CmdReadSingleBlock+0x144>)
 8006994:	4013      	ands	r3, r2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d0ea      	beq.n	8006970 <SDMMC_CmdReadSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800699a:	2a00      	cmp	r2, #0
 800699c:	db2f      	blt.n	80069fe <SDMMC_CmdReadSingleBlock+0xce>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800699e:	0055      	lsls	r5, r2, #1
 80069a0:	d430      	bmi.n	8006a04 <SDMMC_CmdReadSingleBlock+0xd4>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80069a2:	0094      	lsls	r4, r2, #2
 80069a4:	d430      	bmi.n	8006a08 <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80069a6:	00d0      	lsls	r0, r2, #3
 80069a8:	d430      	bmi.n	8006a0c <SDMMC_CmdReadSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80069aa:	0111      	lsls	r1, r2, #4
 80069ac:	d431      	bmi.n	8006a12 <SDMMC_CmdReadSingleBlock+0xe2>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80069ae:	0155      	lsls	r5, r2, #5
 80069b0:	d432      	bmi.n	8006a18 <SDMMC_CmdReadSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80069b2:	01d4      	lsls	r4, r2, #7
 80069b4:	d433      	bmi.n	8006a1e <SDMMC_CmdReadSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80069b6:	0210      	lsls	r0, r2, #8
 80069b8:	d434      	bmi.n	8006a24 <SDMMC_CmdReadSingleBlock+0xf4>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80069ba:	0251      	lsls	r1, r2, #9
 80069bc:	d435      	bmi.n	8006a2a <SDMMC_CmdReadSingleBlock+0xfa>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80069be:	0295      	lsls	r5, r2, #10
 80069c0:	d436      	bmi.n	8006a30 <SDMMC_CmdReadSingleBlock+0x100>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80069c2:	02d4      	lsls	r4, r2, #11
 80069c4:	d437      	bmi.n	8006a36 <SDMMC_CmdReadSingleBlock+0x106>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80069c6:	0350      	lsls	r0, r2, #13
 80069c8:	d438      	bmi.n	8006a3c <SDMMC_CmdReadSingleBlock+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80069ca:	0391      	lsls	r1, r2, #14
 80069cc:	d439      	bmi.n	8006a42 <SDMMC_CmdReadSingleBlock+0x112>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80069ce:	03d5      	lsls	r5, r2, #15
 80069d0:	d43a      	bmi.n	8006a48 <SDMMC_CmdReadSingleBlock+0x118>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80069d2:	0414      	lsls	r4, r2, #16
 80069d4:	d43b      	bmi.n	8006a4e <SDMMC_CmdReadSingleBlock+0x11e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80069d6:	0450      	lsls	r0, r2, #17
 80069d8:	d43f      	bmi.n	8006a5a <SDMMC_CmdReadSingleBlock+0x12a>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80069da:	0491      	lsls	r1, r2, #18
 80069dc:	d43a      	bmi.n	8006a54 <SDMMC_CmdReadSingleBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80069de:	f012 0f08 	tst.w	r2, #8
 80069e2:	bf14      	ite	ne
 80069e4:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80069e8:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80069ec:	e7c0      	b.n	8006970 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80069ee:	2201      	movs	r2, #1
 80069f0:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069f2:	e7bd      	b.n	8006970 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e7bb      	b.n	8006970 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80069f8:	2304      	movs	r3, #4
 80069fa:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80069fc:	e7b8      	b.n	8006970 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80069fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a02:	e7b5      	b.n	8006970 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006a04:	2340      	movs	r3, #64	; 0x40
 8006a06:	e7b3      	b.n	8006970 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006a08:	2380      	movs	r3, #128	; 0x80
 8006a0a:	e7b1      	b.n	8006970 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006a0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a10:	e7ae      	b.n	8006970 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006a12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a16:	e7ab      	b.n	8006970 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a1c:	e7a8      	b.n	8006970 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006a1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a22:	e7a5      	b.n	8006970 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a28:	e7a2      	b.n	8006970 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a2e:	e79f      	b.n	8006970 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006a30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a34:	e79c      	b.n	8006970 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8006a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a3a:	e799      	b.n	8006970 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006a3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a40:	e796      	b.n	8006970 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006a42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006a46:	e793      	b.n	8006970 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006a48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006a4c:	e790      	b.n	8006970 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006a4e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006a52:	e78d      	b.n	8006970 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8006a54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006a58:	e78a      	b.n	8006970 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006a5a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006a5e:	e787      	b.n	8006970 <SDMMC_CmdReadSingleBlock+0x40>
 8006a60:	20000b08 	.word	0x20000b08
 8006a64:	10624dd3 	.word	0x10624dd3
 8006a68:	fffee0c0 	.word	0xfffee0c0
 8006a6c:	00200045 	.word	0x00200045
 8006a70:	002000c5 	.word	0x002000c5
 8006a74:	fdffe008 	.word	0xfdffe008

08006a78 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006a78:	4b4b      	ldr	r3, [pc, #300]	; (8006ba8 <SDMMC_CmdReadMultiBlock+0x130>)
 8006a7a:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8006a7e:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006a80:	4d4a      	ldr	r5, [pc, #296]	; (8006bac <SDMMC_CmdReadMultiBlock+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006a82:	f241 1412 	movw	r4, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006a86:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 8006a88:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006a8a:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006a8e:	4948      	ldr	r1, [pc, #288]	; (8006bb0 <SDMMC_CmdReadMultiBlock+0x138>)
 8006a90:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006a92:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006a94:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006a96:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006a9a:	430c      	orrs	r4, r1
 8006a9c:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8006a9e:	b14b      	cbz	r3, 8006ab4 <SDMMC_CmdReadMultiBlock+0x3c>
 8006aa0:	1e5a      	subs	r2, r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8006aa2:	4944      	ldr	r1, [pc, #272]	; (8006bb4 <SDMMC_CmdReadMultiBlock+0x13c>)
    sta_reg = SDMMCx->STA;
 8006aa4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8006aa6:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006aa8:	420b      	tst	r3, r1
 8006aaa:	d001      	beq.n	8006ab0 <SDMMC_CmdReadMultiBlock+0x38>
 8006aac:	049c      	lsls	r4, r3, #18
 8006aae:	d506      	bpl.n	8006abe <SDMMC_CmdReadMultiBlock+0x46>
    if (count-- == 0U)
 8006ab0:	1c55      	adds	r5, r2, #1
 8006ab2:	d1f7      	bne.n	8006aa4 <SDMMC_CmdReadMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8006ab4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	bc30      	pop	{r4, r5}
 8006abc:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006abe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006ac0:	075b      	lsls	r3, r3, #29
 8006ac2:	d43d      	bmi.n	8006b40 <SDMMC_CmdReadMultiBlock+0xc8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006ac4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006ac6:	f013 0301 	ands.w	r3, r3, #1
 8006aca:	d134      	bne.n	8006b36 <SDMMC_CmdReadMultiBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006acc:	4b3a      	ldr	r3, [pc, #232]	; (8006bb8 <SDMMC_CmdReadMultiBlock+0x140>)
 8006ace:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006ad0:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b12      	cmp	r3, #18
 8006ad6:	d131      	bne.n	8006b3c <SDMMC_CmdReadMultiBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 8006ad8:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006ada:	4b38      	ldr	r3, [pc, #224]	; (8006bbc <SDMMC_CmdReadMultiBlock+0x144>)
 8006adc:	4013      	ands	r3, r2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d0ea      	beq.n	8006ab8 <SDMMC_CmdReadMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006ae2:	2a00      	cmp	r2, #0
 8006ae4:	db2f      	blt.n	8006b46 <SDMMC_CmdReadMultiBlock+0xce>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006ae6:	0055      	lsls	r5, r2, #1
 8006ae8:	d430      	bmi.n	8006b4c <SDMMC_CmdReadMultiBlock+0xd4>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006aea:	0094      	lsls	r4, r2, #2
 8006aec:	d430      	bmi.n	8006b50 <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006aee:	00d0      	lsls	r0, r2, #3
 8006af0:	d430      	bmi.n	8006b54 <SDMMC_CmdReadMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006af2:	0111      	lsls	r1, r2, #4
 8006af4:	d431      	bmi.n	8006b5a <SDMMC_CmdReadMultiBlock+0xe2>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006af6:	0155      	lsls	r5, r2, #5
 8006af8:	d432      	bmi.n	8006b60 <SDMMC_CmdReadMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006afa:	01d4      	lsls	r4, r2, #7
 8006afc:	d433      	bmi.n	8006b66 <SDMMC_CmdReadMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006afe:	0210      	lsls	r0, r2, #8
 8006b00:	d434      	bmi.n	8006b6c <SDMMC_CmdReadMultiBlock+0xf4>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006b02:	0251      	lsls	r1, r2, #9
 8006b04:	d435      	bmi.n	8006b72 <SDMMC_CmdReadMultiBlock+0xfa>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006b06:	0295      	lsls	r5, r2, #10
 8006b08:	d436      	bmi.n	8006b78 <SDMMC_CmdReadMultiBlock+0x100>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006b0a:	02d4      	lsls	r4, r2, #11
 8006b0c:	d437      	bmi.n	8006b7e <SDMMC_CmdReadMultiBlock+0x106>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006b0e:	0350      	lsls	r0, r2, #13
 8006b10:	d438      	bmi.n	8006b84 <SDMMC_CmdReadMultiBlock+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006b12:	0391      	lsls	r1, r2, #14
 8006b14:	d439      	bmi.n	8006b8a <SDMMC_CmdReadMultiBlock+0x112>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006b16:	03d5      	lsls	r5, r2, #15
 8006b18:	d43a      	bmi.n	8006b90 <SDMMC_CmdReadMultiBlock+0x118>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006b1a:	0414      	lsls	r4, r2, #16
 8006b1c:	d43b      	bmi.n	8006b96 <SDMMC_CmdReadMultiBlock+0x11e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006b1e:	0450      	lsls	r0, r2, #17
 8006b20:	d43f      	bmi.n	8006ba2 <SDMMC_CmdReadMultiBlock+0x12a>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006b22:	0491      	lsls	r1, r2, #18
 8006b24:	d43a      	bmi.n	8006b9c <SDMMC_CmdReadMultiBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006b26:	f012 0f08 	tst.w	r2, #8
 8006b2a:	bf14      	ite	ne
 8006b2c:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8006b30:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8006b34:	e7c0      	b.n	8006ab8 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006b36:	2201      	movs	r2, #1
 8006b38:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006b3a:	e7bd      	b.n	8006ab8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e7bb      	b.n	8006ab8 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006b40:	2304      	movs	r3, #4
 8006b42:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006b44:	e7b8      	b.n	8006ab8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b4a:	e7b5      	b.n	8006ab8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006b4c:	2340      	movs	r3, #64	; 0x40
 8006b4e:	e7b3      	b.n	8006ab8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006b50:	2380      	movs	r3, #128	; 0x80
 8006b52:	e7b1      	b.n	8006ab8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b58:	e7ae      	b.n	8006ab8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006b5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b5e:	e7ab      	b.n	8006ab8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b64:	e7a8      	b.n	8006ab8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006b66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b6a:	e7a5      	b.n	8006ab8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b70:	e7a2      	b.n	8006ab8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006b72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b76:	e79f      	b.n	8006ab8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006b78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b7c:	e79c      	b.n	8006ab8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8006b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b82:	e799      	b.n	8006ab8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006b84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b88:	e796      	b.n	8006ab8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006b8a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006b8e:	e793      	b.n	8006ab8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006b90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006b94:	e790      	b.n	8006ab8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006b96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006b9a:	e78d      	b.n	8006ab8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8006b9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006ba0:	e78a      	b.n	8006ab8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006ba2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006ba6:	e787      	b.n	8006ab8 <SDMMC_CmdReadMultiBlock+0x40>
 8006ba8:	20000b08 	.word	0x20000b08
 8006bac:	10624dd3 	.word	0x10624dd3
 8006bb0:	fffee0c0 	.word	0xfffee0c0
 8006bb4:	00200045 	.word	0x00200045
 8006bb8:	002000c5 	.word	0x002000c5
 8006bbc:	fdffe008 	.word	0xfdffe008

08006bc0 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006bc0:	4b4b      	ldr	r3, [pc, #300]	; (8006cf0 <SDMMC_CmdWriteSingleBlock+0x130>)
 8006bc2:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8006bc6:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006bc8:	4d4a      	ldr	r5, [pc, #296]	; (8006cf4 <SDMMC_CmdWriteSingleBlock+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006bca:	f241 1418 	movw	r4, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006bce:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 8006bd0:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006bd2:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006bd6:	4948      	ldr	r1, [pc, #288]	; (8006cf8 <SDMMC_CmdWriteSingleBlock+0x138>)
 8006bd8:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006bda:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006bdc:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006bde:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006be2:	430c      	orrs	r4, r1
 8006be4:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8006be6:	b14b      	cbz	r3, 8006bfc <SDMMC_CmdWriteSingleBlock+0x3c>
 8006be8:	1e5a      	subs	r2, r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8006bea:	4944      	ldr	r1, [pc, #272]	; (8006cfc <SDMMC_CmdWriteSingleBlock+0x13c>)
    sta_reg = SDMMCx->STA;
 8006bec:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8006bee:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006bf0:	420b      	tst	r3, r1
 8006bf2:	d001      	beq.n	8006bf8 <SDMMC_CmdWriteSingleBlock+0x38>
 8006bf4:	049c      	lsls	r4, r3, #18
 8006bf6:	d506      	bpl.n	8006c06 <SDMMC_CmdWriteSingleBlock+0x46>
    if (count-- == 0U)
 8006bf8:	1c55      	adds	r5, r2, #1
 8006bfa:	d1f7      	bne.n	8006bec <SDMMC_CmdWriteSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8006bfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	bc30      	pop	{r4, r5}
 8006c04:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006c06:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006c08:	075b      	lsls	r3, r3, #29
 8006c0a:	d43d      	bmi.n	8006c88 <SDMMC_CmdWriteSingleBlock+0xc8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006c0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006c0e:	f013 0301 	ands.w	r3, r3, #1
 8006c12:	d134      	bne.n	8006c7e <SDMMC_CmdWriteSingleBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006c14:	4b3a      	ldr	r3, [pc, #232]	; (8006d00 <SDMMC_CmdWriteSingleBlock+0x140>)
 8006c16:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006c18:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b18      	cmp	r3, #24
 8006c1e:	d131      	bne.n	8006c84 <SDMMC_CmdWriteSingleBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 8006c20:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006c22:	4b38      	ldr	r3, [pc, #224]	; (8006d04 <SDMMC_CmdWriteSingleBlock+0x144>)
 8006c24:	4013      	ands	r3, r2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d0ea      	beq.n	8006c00 <SDMMC_CmdWriteSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006c2a:	2a00      	cmp	r2, #0
 8006c2c:	db2f      	blt.n	8006c8e <SDMMC_CmdWriteSingleBlock+0xce>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006c2e:	0055      	lsls	r5, r2, #1
 8006c30:	d430      	bmi.n	8006c94 <SDMMC_CmdWriteSingleBlock+0xd4>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006c32:	0094      	lsls	r4, r2, #2
 8006c34:	d430      	bmi.n	8006c98 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006c36:	00d0      	lsls	r0, r2, #3
 8006c38:	d430      	bmi.n	8006c9c <SDMMC_CmdWriteSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006c3a:	0111      	lsls	r1, r2, #4
 8006c3c:	d431      	bmi.n	8006ca2 <SDMMC_CmdWriteSingleBlock+0xe2>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006c3e:	0155      	lsls	r5, r2, #5
 8006c40:	d432      	bmi.n	8006ca8 <SDMMC_CmdWriteSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006c42:	01d4      	lsls	r4, r2, #7
 8006c44:	d433      	bmi.n	8006cae <SDMMC_CmdWriteSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006c46:	0210      	lsls	r0, r2, #8
 8006c48:	d434      	bmi.n	8006cb4 <SDMMC_CmdWriteSingleBlock+0xf4>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006c4a:	0251      	lsls	r1, r2, #9
 8006c4c:	d435      	bmi.n	8006cba <SDMMC_CmdWriteSingleBlock+0xfa>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006c4e:	0295      	lsls	r5, r2, #10
 8006c50:	d436      	bmi.n	8006cc0 <SDMMC_CmdWriteSingleBlock+0x100>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006c52:	02d4      	lsls	r4, r2, #11
 8006c54:	d437      	bmi.n	8006cc6 <SDMMC_CmdWriteSingleBlock+0x106>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006c56:	0350      	lsls	r0, r2, #13
 8006c58:	d438      	bmi.n	8006ccc <SDMMC_CmdWriteSingleBlock+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006c5a:	0391      	lsls	r1, r2, #14
 8006c5c:	d439      	bmi.n	8006cd2 <SDMMC_CmdWriteSingleBlock+0x112>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006c5e:	03d5      	lsls	r5, r2, #15
 8006c60:	d43a      	bmi.n	8006cd8 <SDMMC_CmdWriteSingleBlock+0x118>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006c62:	0414      	lsls	r4, r2, #16
 8006c64:	d43b      	bmi.n	8006cde <SDMMC_CmdWriteSingleBlock+0x11e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006c66:	0450      	lsls	r0, r2, #17
 8006c68:	d43f      	bmi.n	8006cea <SDMMC_CmdWriteSingleBlock+0x12a>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006c6a:	0491      	lsls	r1, r2, #18
 8006c6c:	d43a      	bmi.n	8006ce4 <SDMMC_CmdWriteSingleBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006c6e:	f012 0f08 	tst.w	r2, #8
 8006c72:	bf14      	ite	ne
 8006c74:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8006c78:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8006c7c:	e7c0      	b.n	8006c00 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006c7e:	2201      	movs	r2, #1
 8006c80:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c82:	e7bd      	b.n	8006c00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e7bb      	b.n	8006c00 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006c88:	2304      	movs	r3, #4
 8006c8a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006c8c:	e7b8      	b.n	8006c00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006c8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c92:	e7b5      	b.n	8006c00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006c94:	2340      	movs	r3, #64	; 0x40
 8006c96:	e7b3      	b.n	8006c00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006c98:	2380      	movs	r3, #128	; 0x80
 8006c9a:	e7b1      	b.n	8006c00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ca0:	e7ae      	b.n	8006c00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ca6:	e7ab      	b.n	8006c00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cac:	e7a8      	b.n	8006c00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006cae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006cb2:	e7a5      	b.n	8006c00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cb8:	e7a2      	b.n	8006c00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006cba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006cbe:	e79f      	b.n	8006c00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006cc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006cc4:	e79c      	b.n	8006c00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8006cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cca:	e799      	b.n	8006c00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006ccc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cd0:	e796      	b.n	8006c00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006cd2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006cd6:	e793      	b.n	8006c00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006cd8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006cdc:	e790      	b.n	8006c00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006cde:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006ce2:	e78d      	b.n	8006c00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8006ce4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006ce8:	e78a      	b.n	8006c00 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006cea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006cee:	e787      	b.n	8006c00 <SDMMC_CmdWriteSingleBlock+0x40>
 8006cf0:	20000b08 	.word	0x20000b08
 8006cf4:	10624dd3 	.word	0x10624dd3
 8006cf8:	fffee0c0 	.word	0xfffee0c0
 8006cfc:	00200045 	.word	0x00200045
 8006d00:	002000c5 	.word	0x002000c5
 8006d04:	fdffe008 	.word	0xfdffe008

08006d08 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006d08:	4b4b      	ldr	r3, [pc, #300]	; (8006e38 <SDMMC_CmdWriteMultiBlock+0x130>)
 8006d0a:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8006d0e:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006d10:	4d4a      	ldr	r5, [pc, #296]	; (8006e3c <SDMMC_CmdWriteMultiBlock+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006d12:	f241 1419 	movw	r4, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006d16:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 8006d18:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006d1a:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006d1e:	4948      	ldr	r1, [pc, #288]	; (8006e40 <SDMMC_CmdWriteMultiBlock+0x138>)
 8006d20:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006d22:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006d24:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006d26:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006d2a:	430c      	orrs	r4, r1
 8006d2c:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8006d2e:	b14b      	cbz	r3, 8006d44 <SDMMC_CmdWriteMultiBlock+0x3c>
 8006d30:	1e5a      	subs	r2, r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8006d32:	4944      	ldr	r1, [pc, #272]	; (8006e44 <SDMMC_CmdWriteMultiBlock+0x13c>)
    sta_reg = SDMMCx->STA;
 8006d34:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8006d36:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006d38:	420b      	tst	r3, r1
 8006d3a:	d001      	beq.n	8006d40 <SDMMC_CmdWriteMultiBlock+0x38>
 8006d3c:	049c      	lsls	r4, r3, #18
 8006d3e:	d506      	bpl.n	8006d4e <SDMMC_CmdWriteMultiBlock+0x46>
    if (count-- == 0U)
 8006d40:	1c55      	adds	r5, r2, #1
 8006d42:	d1f7      	bne.n	8006d34 <SDMMC_CmdWriteMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8006d44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	bc30      	pop	{r4, r5}
 8006d4c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006d4e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006d50:	075b      	lsls	r3, r3, #29
 8006d52:	d43d      	bmi.n	8006dd0 <SDMMC_CmdWriteMultiBlock+0xc8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006d54:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006d56:	f013 0301 	ands.w	r3, r3, #1
 8006d5a:	d134      	bne.n	8006dc6 <SDMMC_CmdWriteMultiBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006d5c:	4b3a      	ldr	r3, [pc, #232]	; (8006e48 <SDMMC_CmdWriteMultiBlock+0x140>)
 8006d5e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006d60:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b19      	cmp	r3, #25
 8006d66:	d131      	bne.n	8006dcc <SDMMC_CmdWriteMultiBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 8006d68:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006d6a:	4b38      	ldr	r3, [pc, #224]	; (8006e4c <SDMMC_CmdWriteMultiBlock+0x144>)
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d0ea      	beq.n	8006d48 <SDMMC_CmdWriteMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006d72:	2a00      	cmp	r2, #0
 8006d74:	db2f      	blt.n	8006dd6 <SDMMC_CmdWriteMultiBlock+0xce>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006d76:	0055      	lsls	r5, r2, #1
 8006d78:	d430      	bmi.n	8006ddc <SDMMC_CmdWriteMultiBlock+0xd4>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006d7a:	0094      	lsls	r4, r2, #2
 8006d7c:	d430      	bmi.n	8006de0 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006d7e:	00d0      	lsls	r0, r2, #3
 8006d80:	d430      	bmi.n	8006de4 <SDMMC_CmdWriteMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006d82:	0111      	lsls	r1, r2, #4
 8006d84:	d431      	bmi.n	8006dea <SDMMC_CmdWriteMultiBlock+0xe2>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006d86:	0155      	lsls	r5, r2, #5
 8006d88:	d432      	bmi.n	8006df0 <SDMMC_CmdWriteMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006d8a:	01d4      	lsls	r4, r2, #7
 8006d8c:	d433      	bmi.n	8006df6 <SDMMC_CmdWriteMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006d8e:	0210      	lsls	r0, r2, #8
 8006d90:	d434      	bmi.n	8006dfc <SDMMC_CmdWriteMultiBlock+0xf4>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006d92:	0251      	lsls	r1, r2, #9
 8006d94:	d435      	bmi.n	8006e02 <SDMMC_CmdWriteMultiBlock+0xfa>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006d96:	0295      	lsls	r5, r2, #10
 8006d98:	d436      	bmi.n	8006e08 <SDMMC_CmdWriteMultiBlock+0x100>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006d9a:	02d4      	lsls	r4, r2, #11
 8006d9c:	d437      	bmi.n	8006e0e <SDMMC_CmdWriteMultiBlock+0x106>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006d9e:	0350      	lsls	r0, r2, #13
 8006da0:	d438      	bmi.n	8006e14 <SDMMC_CmdWriteMultiBlock+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006da2:	0391      	lsls	r1, r2, #14
 8006da4:	d439      	bmi.n	8006e1a <SDMMC_CmdWriteMultiBlock+0x112>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006da6:	03d5      	lsls	r5, r2, #15
 8006da8:	d43a      	bmi.n	8006e20 <SDMMC_CmdWriteMultiBlock+0x118>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006daa:	0414      	lsls	r4, r2, #16
 8006dac:	d43b      	bmi.n	8006e26 <SDMMC_CmdWriteMultiBlock+0x11e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006dae:	0450      	lsls	r0, r2, #17
 8006db0:	d43f      	bmi.n	8006e32 <SDMMC_CmdWriteMultiBlock+0x12a>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006db2:	0491      	lsls	r1, r2, #18
 8006db4:	d43a      	bmi.n	8006e2c <SDMMC_CmdWriteMultiBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006db6:	f012 0f08 	tst.w	r2, #8
 8006dba:	bf14      	ite	ne
 8006dbc:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8006dc0:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8006dc4:	e7c0      	b.n	8006d48 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006dca:	e7bd      	b.n	8006d48 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e7bb      	b.n	8006d48 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006dd0:	2304      	movs	r3, #4
 8006dd2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006dd4:	e7b8      	b.n	8006d48 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006dd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dda:	e7b5      	b.n	8006d48 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006ddc:	2340      	movs	r3, #64	; 0x40
 8006dde:	e7b3      	b.n	8006d48 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006de0:	2380      	movs	r3, #128	; 0x80
 8006de2:	e7b1      	b.n	8006d48 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006de8:	e7ae      	b.n	8006d48 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006dea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dee:	e7ab      	b.n	8006d48 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006df4:	e7a8      	b.n	8006d48 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006df6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006dfa:	e7a5      	b.n	8006d48 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e00:	e7a2      	b.n	8006d48 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006e02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e06:	e79f      	b.n	8006d48 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006e08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e0c:	e79c      	b.n	8006d48 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8006e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e12:	e799      	b.n	8006d48 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006e14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e18:	e796      	b.n	8006d48 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006e1a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e1e:	e793      	b.n	8006d48 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006e20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006e24:	e790      	b.n	8006d48 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006e26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006e2a:	e78d      	b.n	8006d48 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8006e2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006e30:	e78a      	b.n	8006d48 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006e32:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006e36:	e787      	b.n	8006d48 <SDMMC_CmdWriteMultiBlock+0x40>
 8006e38:	20000b08 	.word	0x20000b08
 8006e3c:	10624dd3 	.word	0x10624dd3
 8006e40:	fffee0c0 	.word	0xfffee0c0
 8006e44:	00200045 	.word	0x00200045
 8006e48:	002000c5 	.word	0x002000c5
 8006e4c:	fdffe008 	.word	0xfdffe008

08006e50 <SDMMC_CmdStopTransfer>:
{
 8006e50:	b470      	push	{r4, r5, r6}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8006e52:	68c2      	ldr	r2, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 8006e54:	2600      	movs	r6, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006e56:	4b7c      	ldr	r3, [pc, #496]	; (8007048 <SDMMC_CmdStopTransfer+0x1f8>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8006e58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006e5c:	497b      	ldr	r1, [pc, #492]	; (800704c <SDMMC_CmdStopTransfer+0x1fc>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8006e60:	60c2      	str	r2, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8006e62:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006e64:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006e68:	4c79      	ldr	r4, [pc, #484]	; (8007050 <SDMMC_CmdStopTransfer+0x200>)
 8006e6a:	f241 110c 	movw	r1, #4364	; 0x110c
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8006e6e:	f025 0540 	bic.w	r5, r5, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006e72:	0a5b      	lsrs	r3, r3, #9
 8006e74:	4a77      	ldr	r2, [pc, #476]	; (8007054 <SDMMC_CmdStopTransfer+0x204>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8006e76:	60c5      	str	r5, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 8006e78:	6086      	str	r6, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006e7a:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006e7c:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006e80:	402c      	ands	r4, r5
 8006e82:	4321      	orrs	r1, r4
 8006e84:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 8006e86:	b14b      	cbz	r3, 8006e9c <SDMMC_CmdStopTransfer+0x4c>
 8006e88:	1e5a      	subs	r2, r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8006e8a:	4973      	ldr	r1, [pc, #460]	; (8007058 <SDMMC_CmdStopTransfer+0x208>)
    sta_reg = SDMMCx->STA;
 8006e8c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8006e8e:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006e90:	420b      	tst	r3, r1
 8006e92:	d001      	beq.n	8006e98 <SDMMC_CmdStopTransfer+0x48>
 8006e94:	049c      	lsls	r4, r3, #18
 8006e96:	d50a      	bpl.n	8006eae <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 8006e98:	1c55      	adds	r5, r2, #1
 8006e9a:	d1f7      	bne.n	8006e8c <SDMMC_CmdStopTransfer+0x3c>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006e9c:	68c2      	ldr	r2, [r0, #12]
 8006e9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ea2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ea6:	60c2      	str	r2, [r0, #12]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	bc70      	pop	{r4, r5, r6}
 8006eac:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006eae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006eb0:	075a      	lsls	r2, r3, #29
 8006eb2:	d454      	bmi.n	8006f5e <SDMMC_CmdStopTransfer+0x10e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006eb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006eb6:	f013 0301 	ands.w	r3, r3, #1
 8006eba:	d13c      	bne.n	8006f36 <SDMMC_CmdStopTransfer+0xe6>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006ebc:	4a67      	ldr	r2, [pc, #412]	; (800705c <SDMMC_CmdStopTransfer+0x20c>)
 8006ebe:	6382      	str	r2, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006ec0:	6902      	ldr	r2, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006ec2:	b2d2      	uxtb	r2, r2
 8006ec4:	2a0c      	cmp	r2, #12
 8006ec6:	d144      	bne.n	8006f52 <SDMMC_CmdStopTransfer+0x102>
  return (*(__IO uint32_t *) tmp);
 8006ec8:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006eca:	4965      	ldr	r1, [pc, #404]	; (8007060 <SDMMC_CmdStopTransfer+0x210>)
 8006ecc:	4011      	ands	r1, r2
 8006ece:	2900      	cmp	r1, #0
 8006ed0:	d038      	beq.n	8006f44 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006ed2:	2a00      	cmp	r2, #0
 8006ed4:	db36      	blt.n	8006f44 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006ed6:	0053      	lsls	r3, r2, #1
 8006ed8:	d448      	bmi.n	8006f6c <SDMMC_CmdStopTransfer+0x11c>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006eda:	0096      	lsls	r6, r2, #2
 8006edc:	d44c      	bmi.n	8006f78 <SDMMC_CmdStopTransfer+0x128>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006ede:	00d5      	lsls	r5, r2, #3
 8006ee0:	d450      	bmi.n	8006f84 <SDMMC_CmdStopTransfer+0x134>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006ee2:	0114      	lsls	r4, r2, #4
 8006ee4:	d455      	bmi.n	8006f92 <SDMMC_CmdStopTransfer+0x142>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006ee6:	0151      	lsls	r1, r2, #5
 8006ee8:	d45a      	bmi.n	8006fa0 <SDMMC_CmdStopTransfer+0x150>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006eea:	01d3      	lsls	r3, r2, #7
 8006eec:	d45f      	bmi.n	8006fae <SDMMC_CmdStopTransfer+0x15e>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006eee:	0216      	lsls	r6, r2, #8
 8006ef0:	d464      	bmi.n	8006fbc <SDMMC_CmdStopTransfer+0x16c>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006ef2:	0255      	lsls	r5, r2, #9
 8006ef4:	d469      	bmi.n	8006fca <SDMMC_CmdStopTransfer+0x17a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006ef6:	0294      	lsls	r4, r2, #10
 8006ef8:	d46e      	bmi.n	8006fd8 <SDMMC_CmdStopTransfer+0x188>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006efa:	02d1      	lsls	r1, r2, #11
 8006efc:	d473      	bmi.n	8006fe6 <SDMMC_CmdStopTransfer+0x196>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006efe:	0353      	lsls	r3, r2, #13
 8006f00:	d478      	bmi.n	8006ff4 <SDMMC_CmdStopTransfer+0x1a4>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006f02:	0396      	lsls	r6, r2, #14
 8006f04:	d47d      	bmi.n	8007002 <SDMMC_CmdStopTransfer+0x1b2>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006f06:	03d5      	lsls	r5, r2, #15
 8006f08:	f100 8082 	bmi.w	8007010 <SDMMC_CmdStopTransfer+0x1c0>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006f0c:	0414      	lsls	r4, r2, #16
 8006f0e:	f100 8086 	bmi.w	800701e <SDMMC_CmdStopTransfer+0x1ce>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006f12:	0451      	lsls	r1, r2, #17
 8006f14:	f100 8091 	bmi.w	800703a <SDMMC_CmdStopTransfer+0x1ea>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006f18:	0493      	lsls	r3, r2, #18
 8006f1a:	f100 8087 	bmi.w	800702c <SDMMC_CmdStopTransfer+0x1dc>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006f1e:	f012 0f08 	tst.w	r2, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f22:	68c2      	ldr	r2, [r0, #12]
 8006f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006f28:	bf14      	ite	ne
 8006f2a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006f2e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f32:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006f34:	e7b8      	b.n	8006ea8 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006f36:	2201      	movs	r2, #1
 8006f38:	6382      	str	r2, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f3a:	68c2      	ldr	r2, [r0, #12]
 8006f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f40:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006f42:	e7b1      	b.n	8006ea8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f44:	68c2      	ldr	r2, [r0, #12]
 8006f46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f4a:	60c2      	str	r2, [r0, #12]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	bc70      	pop	{r4, r5, r6}
 8006f50:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f52:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f54:	2301      	movs	r3, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f5a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006f5c:	e7a4      	b.n	8006ea8 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006f5e:	2304      	movs	r3, #4
 8006f60:	6383      	str	r3, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f62:	68c2      	ldr	r2, [r0, #12]
 8006f64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f68:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006f6a:	e79d      	b.n	8006ea8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f6c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006f6e:	2340      	movs	r3, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f74:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006f76:	e797      	b.n	8006ea8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f78:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006f7a:	2380      	movs	r3, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f80:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006f82:	e791      	b.n	8006ea8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f84:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006f86:	f44f 7380 	mov.w	r3, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f8e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006f90:	e78a      	b.n	8006ea8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f92:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006f94:	f44f 7300 	mov.w	r3, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f9c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006f9e:	e783      	b.n	8006ea8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006fa0:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006fa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006faa:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006fac:	e77c      	b.n	8006ea8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006fae:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006fb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fb8:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006fba:	e775      	b.n	8006ea8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006fbc:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006fc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fc6:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006fc8:	e76e      	b.n	8006ea8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006fca:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006fcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006fd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fd4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006fd6:	e767      	b.n	8006ea8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006fd8:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006fda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006fde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fe2:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006fe4:	e760      	b.n	8006ea8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006fe6:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CC_ERR;
 8006fe8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006fec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ff0:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006ff2:	e759      	b.n	8006ea8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006ff4:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006ff6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006ffa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ffe:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8007000:	e752      	b.n	8006ea8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8007002:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007004:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8007008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800700c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800700e:	e74b      	b.n	8006ea8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8007010:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007012:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8007016:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800701a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800701c:	e744      	b.n	8006ea8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800701e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007020:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8007024:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007028:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800702a:	e73d      	b.n	8006ea8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800702c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_RESET;
 800702e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8007032:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007036:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8007038:	e736      	b.n	8006ea8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800703a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800703c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8007040:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007044:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8007046:	e72f      	b.n	8006ea8 <SDMMC_CmdStopTransfer+0x58>
 8007048:	20000b08 	.word	0x20000b08
 800704c:	10624dd3 	.word	0x10624dd3
 8007050:	fffee0c0 	.word	0xfffee0c0
 8007054:	05f5e100 	.word	0x05f5e100
 8007058:	00200045 	.word	0x00200045
 800705c:	002000c5 	.word	0x002000c5
 8007060:	fdffe008 	.word	0xfdffe008

08007064 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007064:	4b4b      	ldr	r3, [pc, #300]	; (8007194 <SDMMC_CmdSelDesel+0x130>)
 8007066:	f241 3288 	movw	r2, #5000	; 0x1388
{
 800706a:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800706c:	4d4a      	ldr	r5, [pc, #296]	; (8007198 <SDMMC_CmdSelDesel+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800706e:	f241 1407 	movw	r4, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007072:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 8007074:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007076:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800707a:	4948      	ldr	r1, [pc, #288]	; (800719c <SDMMC_CmdSelDesel+0x138>)
 800707c:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800707e:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007080:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007082:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007086:	430c      	orrs	r4, r1
 8007088:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800708a:	b14b      	cbz	r3, 80070a0 <SDMMC_CmdSelDesel+0x3c>
 800708c:	1e5a      	subs	r2, r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800708e:	4944      	ldr	r1, [pc, #272]	; (80071a0 <SDMMC_CmdSelDesel+0x13c>)
    sta_reg = SDMMCx->STA;
 8007090:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8007092:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007094:	420b      	tst	r3, r1
 8007096:	d001      	beq.n	800709c <SDMMC_CmdSelDesel+0x38>
 8007098:	049c      	lsls	r4, r3, #18
 800709a:	d506      	bpl.n	80070aa <SDMMC_CmdSelDesel+0x46>
    if (count-- == 0U)
 800709c:	1c55      	adds	r5, r2, #1
 800709e:	d1f7      	bne.n	8007090 <SDMMC_CmdSelDesel+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80070a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	bc30      	pop	{r4, r5}
 80070a8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80070aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80070ac:	075b      	lsls	r3, r3, #29
 80070ae:	d43d      	bmi.n	800712c <SDMMC_CmdSelDesel+0xc8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80070b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80070b2:	f013 0301 	ands.w	r3, r3, #1
 80070b6:	d134      	bne.n	8007122 <SDMMC_CmdSelDesel+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80070b8:	4b3a      	ldr	r3, [pc, #232]	; (80071a4 <SDMMC_CmdSelDesel+0x140>)
 80070ba:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80070bc:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b07      	cmp	r3, #7
 80070c2:	d131      	bne.n	8007128 <SDMMC_CmdSelDesel+0xc4>
  return (*(__IO uint32_t *) tmp);
 80070c4:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80070c6:	4b38      	ldr	r3, [pc, #224]	; (80071a8 <SDMMC_CmdSelDesel+0x144>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d0ea      	beq.n	80070a4 <SDMMC_CmdSelDesel+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80070ce:	2a00      	cmp	r2, #0
 80070d0:	db2f      	blt.n	8007132 <SDMMC_CmdSelDesel+0xce>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80070d2:	0055      	lsls	r5, r2, #1
 80070d4:	d430      	bmi.n	8007138 <SDMMC_CmdSelDesel+0xd4>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80070d6:	0094      	lsls	r4, r2, #2
 80070d8:	d430      	bmi.n	800713c <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80070da:	00d0      	lsls	r0, r2, #3
 80070dc:	d430      	bmi.n	8007140 <SDMMC_CmdSelDesel+0xdc>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80070de:	0111      	lsls	r1, r2, #4
 80070e0:	d431      	bmi.n	8007146 <SDMMC_CmdSelDesel+0xe2>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80070e2:	0155      	lsls	r5, r2, #5
 80070e4:	d432      	bmi.n	800714c <SDMMC_CmdSelDesel+0xe8>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80070e6:	01d4      	lsls	r4, r2, #7
 80070e8:	d433      	bmi.n	8007152 <SDMMC_CmdSelDesel+0xee>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80070ea:	0210      	lsls	r0, r2, #8
 80070ec:	d434      	bmi.n	8007158 <SDMMC_CmdSelDesel+0xf4>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80070ee:	0251      	lsls	r1, r2, #9
 80070f0:	d435      	bmi.n	800715e <SDMMC_CmdSelDesel+0xfa>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80070f2:	0295      	lsls	r5, r2, #10
 80070f4:	d436      	bmi.n	8007164 <SDMMC_CmdSelDesel+0x100>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80070f6:	02d4      	lsls	r4, r2, #11
 80070f8:	d437      	bmi.n	800716a <SDMMC_CmdSelDesel+0x106>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80070fa:	0350      	lsls	r0, r2, #13
 80070fc:	d438      	bmi.n	8007170 <SDMMC_CmdSelDesel+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80070fe:	0391      	lsls	r1, r2, #14
 8007100:	d439      	bmi.n	8007176 <SDMMC_CmdSelDesel+0x112>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007102:	03d5      	lsls	r5, r2, #15
 8007104:	d43a      	bmi.n	800717c <SDMMC_CmdSelDesel+0x118>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007106:	0414      	lsls	r4, r2, #16
 8007108:	d43b      	bmi.n	8007182 <SDMMC_CmdSelDesel+0x11e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800710a:	0450      	lsls	r0, r2, #17
 800710c:	d43f      	bmi.n	800718e <SDMMC_CmdSelDesel+0x12a>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800710e:	0491      	lsls	r1, r2, #18
 8007110:	d43a      	bmi.n	8007188 <SDMMC_CmdSelDesel+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007112:	f012 0f08 	tst.w	r2, #8
 8007116:	bf14      	ite	ne
 8007118:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800711c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8007120:	e7c0      	b.n	80070a4 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007122:	2201      	movs	r2, #1
 8007124:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007126:	e7bd      	b.n	80070a4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007128:	2301      	movs	r3, #1
 800712a:	e7bb      	b.n	80070a4 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800712c:	2304      	movs	r3, #4
 800712e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007130:	e7b8      	b.n	80070a4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007132:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007136:	e7b5      	b.n	80070a4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007138:	2340      	movs	r3, #64	; 0x40
 800713a:	e7b3      	b.n	80070a4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800713c:	2380      	movs	r3, #128	; 0x80
 800713e:	e7b1      	b.n	80070a4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007140:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007144:	e7ae      	b.n	80070a4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800714a:	e7ab      	b.n	80070a4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800714c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007150:	e7a8      	b.n	80070a4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007152:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007156:	e7a5      	b.n	80070a4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800715c:	e7a2      	b.n	80070a4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800715e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007162:	e79f      	b.n	80070a4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007164:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007168:	e79c      	b.n	80070a4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CC_ERR;
 800716a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800716e:	e799      	b.n	80070a4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007170:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007174:	e796      	b.n	80070a4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007176:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800717a:	e793      	b.n	80070a4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800717c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007180:	e790      	b.n	80070a4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007182:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007186:	e78d      	b.n	80070a4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8007188:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800718c:	e78a      	b.n	80070a4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800718e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007192:	e787      	b.n	80070a4 <SDMMC_CmdSelDesel+0x40>
 8007194:	20000b08 	.word	0x20000b08
 8007198:	10624dd3 	.word	0x10624dd3
 800719c:	fffee0c0 	.word	0xfffee0c0
 80071a0:	00200045 	.word	0x00200045
 80071a4:	002000c5 	.word	0x002000c5
 80071a8:	fdffe008 	.word	0xfdffe008

080071ac <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80071ac:	4b11      	ldr	r3, [pc, #68]	; (80071f4 <SDMMC_CmdGoIdleState+0x48>)
{
 80071ae:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80071b0:	4a11      	ldr	r2, [pc, #68]	; (80071f8 <SDMMC_CmdGoIdleState+0x4c>)
{
 80071b2:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80071b4:	4c11      	ldr	r4, [pc, #68]	; (80071fc <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 80071b6:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80071b8:	6818      	ldr	r0, [r3, #0]
 80071ba:	f241 3388 	movw	r3, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 80071be:	608d      	str	r5, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80071c0:	fba4 4000 	umull	r4, r0, r4, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80071c4:	68cc      	ldr	r4, [r1, #12]
 80071c6:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80071c8:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80071ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80071ce:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80071d2:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80071d4:	e002      	b.n	80071dc <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80071d6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80071d8:	0612      	lsls	r2, r2, #24
 80071da:	d405      	bmi.n	80071e8 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 80071dc:	3b01      	subs	r3, #1
 80071de:	d2fa      	bcs.n	80071d6 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80071e0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80071e4:	bc30      	pop	{r4, r5}
 80071e6:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80071e8:	4b05      	ldr	r3, [pc, #20]	; (8007200 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 80071ea:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80071ec:	638b      	str	r3, [r1, #56]	; 0x38
}
 80071ee:	bc30      	pop	{r4, r5}
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	20000b08 	.word	0x20000b08
 80071f8:	fffee0c0 	.word	0xfffee0c0
 80071fc:	10624dd3 	.word	0x10624dd3
 8007200:	002000c5 	.word	0x002000c5

08007204 <SDMMC_CmdOperCond>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007204:	4a1b      	ldr	r2, [pc, #108]	; (8007274 <SDMMC_CmdOperCond+0x70>)
{
 8007206:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007208:	491b      	ldr	r1, [pc, #108]	; (8007278 <SDMMC_CmdOperCond+0x74>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800720a:	f241 1008 	movw	r0, #4360	; 0x1108
{
 800720e:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8007210:	f44f 75d5 	mov.w	r5, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007214:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007216:	4c19      	ldr	r4, [pc, #100]	; (800727c <SDMMC_CmdOperCond+0x78>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007218:	fba1 1202 	umull	r1, r2, r1, r2
 800721c:	f241 3188 	movw	r1, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8007220:	609d      	str	r5, [r3, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007222:	68dd      	ldr	r5, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007224:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007226:	402c      	ands	r4, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007228:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800722c:	4320      	orrs	r0, r4
 800722e:	60d8      	str	r0, [r3, #12]
    if (count-- == 0U)
 8007230:	b14a      	cbz	r2, 8007246 <SDMMC_CmdOperCond+0x42>
 8007232:	1e51      	subs	r1, r2, #1
    sta_reg = SDMMCx->STA;
 8007234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 8007236:	3901      	subs	r1, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007238:	f012 0f45 	tst.w	r2, #69	; 0x45
 800723c:	d001      	beq.n	8007242 <SDMMC_CmdOperCond+0x3e>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800723e:	0490      	lsls	r0, r2, #18
 8007240:	d505      	bpl.n	800724e <SDMMC_CmdOperCond+0x4a>
    if (count-- == 0U)
 8007242:	1c4c      	adds	r4, r1, #1
 8007244:	d1f6      	bne.n	8007234 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8007246:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800724a:	bc30      	pop	{r4, r5}
 800724c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800724e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007250:	0751      	lsls	r1, r2, #29
 8007252:	d40c      	bmi.n	800726e <SDMMC_CmdOperCond+0x6a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007254:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007256:	f010 0001 	ands.w	r0, r0, #1
 800725a:	d105      	bne.n	8007268 <SDMMC_CmdOperCond+0x64>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800725c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800725e:	0652      	lsls	r2, r2, #25
 8007260:	d5f3      	bpl.n	800724a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007262:	2240      	movs	r2, #64	; 0x40
 8007264:	639a      	str	r2, [r3, #56]	; 0x38
 8007266:	e7f0      	b.n	800724a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007268:	2201      	movs	r2, #1
 800726a:	639a      	str	r2, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800726c:	e7ed      	b.n	800724a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800726e:	2004      	movs	r0, #4
 8007270:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007272:	e7ea      	b.n	800724a <SDMMC_CmdOperCond+0x46>
 8007274:	20000b08 	.word	0x20000b08
 8007278:	10624dd3 	.word	0x10624dd3
 800727c:	fffee0c0 	.word	0xfffee0c0

08007280 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007280:	4b4b      	ldr	r3, [pc, #300]	; (80073b0 <SDMMC_CmdAppCommand+0x130>)
 8007282:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8007286:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007288:	4d4a      	ldr	r5, [pc, #296]	; (80073b4 <SDMMC_CmdAppCommand+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800728a:	f241 1437 	movw	r4, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800728e:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 8007290:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007292:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007296:	4948      	ldr	r1, [pc, #288]	; (80073b8 <SDMMC_CmdAppCommand+0x138>)
 8007298:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800729a:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800729c:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800729e:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80072a2:	430c      	orrs	r4, r1
 80072a4:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80072a6:	b14b      	cbz	r3, 80072bc <SDMMC_CmdAppCommand+0x3c>
 80072a8:	1e5a      	subs	r2, r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80072aa:	4944      	ldr	r1, [pc, #272]	; (80073bc <SDMMC_CmdAppCommand+0x13c>)
    sta_reg = SDMMCx->STA;
 80072ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 80072ae:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80072b0:	420b      	tst	r3, r1
 80072b2:	d001      	beq.n	80072b8 <SDMMC_CmdAppCommand+0x38>
 80072b4:	049c      	lsls	r4, r3, #18
 80072b6:	d506      	bpl.n	80072c6 <SDMMC_CmdAppCommand+0x46>
    if (count-- == 0U)
 80072b8:	1c55      	adds	r5, r2, #1
 80072ba:	d1f7      	bne.n	80072ac <SDMMC_CmdAppCommand+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80072bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	bc30      	pop	{r4, r5}
 80072c4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80072c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80072c8:	075b      	lsls	r3, r3, #29
 80072ca:	d43d      	bmi.n	8007348 <SDMMC_CmdAppCommand+0xc8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80072cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80072ce:	f013 0301 	ands.w	r3, r3, #1
 80072d2:	d134      	bne.n	800733e <SDMMC_CmdAppCommand+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80072d4:	4b3a      	ldr	r3, [pc, #232]	; (80073c0 <SDMMC_CmdAppCommand+0x140>)
 80072d6:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80072d8:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b37      	cmp	r3, #55	; 0x37
 80072de:	d131      	bne.n	8007344 <SDMMC_CmdAppCommand+0xc4>
  return (*(__IO uint32_t *) tmp);
 80072e0:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80072e2:	4b38      	ldr	r3, [pc, #224]	; (80073c4 <SDMMC_CmdAppCommand+0x144>)
 80072e4:	4013      	ands	r3, r2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d0ea      	beq.n	80072c0 <SDMMC_CmdAppCommand+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80072ea:	2a00      	cmp	r2, #0
 80072ec:	db2f      	blt.n	800734e <SDMMC_CmdAppCommand+0xce>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80072ee:	0055      	lsls	r5, r2, #1
 80072f0:	d430      	bmi.n	8007354 <SDMMC_CmdAppCommand+0xd4>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80072f2:	0094      	lsls	r4, r2, #2
 80072f4:	d430      	bmi.n	8007358 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80072f6:	00d0      	lsls	r0, r2, #3
 80072f8:	d430      	bmi.n	800735c <SDMMC_CmdAppCommand+0xdc>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80072fa:	0111      	lsls	r1, r2, #4
 80072fc:	d431      	bmi.n	8007362 <SDMMC_CmdAppCommand+0xe2>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80072fe:	0155      	lsls	r5, r2, #5
 8007300:	d432      	bmi.n	8007368 <SDMMC_CmdAppCommand+0xe8>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007302:	01d4      	lsls	r4, r2, #7
 8007304:	d433      	bmi.n	800736e <SDMMC_CmdAppCommand+0xee>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007306:	0210      	lsls	r0, r2, #8
 8007308:	d434      	bmi.n	8007374 <SDMMC_CmdAppCommand+0xf4>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800730a:	0251      	lsls	r1, r2, #9
 800730c:	d435      	bmi.n	800737a <SDMMC_CmdAppCommand+0xfa>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800730e:	0295      	lsls	r5, r2, #10
 8007310:	d436      	bmi.n	8007380 <SDMMC_CmdAppCommand+0x100>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007312:	02d4      	lsls	r4, r2, #11
 8007314:	d437      	bmi.n	8007386 <SDMMC_CmdAppCommand+0x106>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007316:	0350      	lsls	r0, r2, #13
 8007318:	d438      	bmi.n	800738c <SDMMC_CmdAppCommand+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800731a:	0391      	lsls	r1, r2, #14
 800731c:	d439      	bmi.n	8007392 <SDMMC_CmdAppCommand+0x112>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800731e:	03d5      	lsls	r5, r2, #15
 8007320:	d43a      	bmi.n	8007398 <SDMMC_CmdAppCommand+0x118>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007322:	0414      	lsls	r4, r2, #16
 8007324:	d43b      	bmi.n	800739e <SDMMC_CmdAppCommand+0x11e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007326:	0450      	lsls	r0, r2, #17
 8007328:	d43f      	bmi.n	80073aa <SDMMC_CmdAppCommand+0x12a>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800732a:	0491      	lsls	r1, r2, #18
 800732c:	d43a      	bmi.n	80073a4 <SDMMC_CmdAppCommand+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800732e:	f012 0f08 	tst.w	r2, #8
 8007332:	bf14      	ite	ne
 8007334:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8007338:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800733c:	e7c0      	b.n	80072c0 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800733e:	2201      	movs	r2, #1
 8007340:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007342:	e7bd      	b.n	80072c0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007344:	2301      	movs	r3, #1
 8007346:	e7bb      	b.n	80072c0 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007348:	2304      	movs	r3, #4
 800734a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800734c:	e7b8      	b.n	80072c0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800734e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007352:	e7b5      	b.n	80072c0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007354:	2340      	movs	r3, #64	; 0x40
 8007356:	e7b3      	b.n	80072c0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007358:	2380      	movs	r3, #128	; 0x80
 800735a:	e7b1      	b.n	80072c0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800735c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007360:	e7ae      	b.n	80072c0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007362:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007366:	e7ab      	b.n	80072c0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800736c:	e7a8      	b.n	80072c0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800736e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007372:	e7a5      	b.n	80072c0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007378:	e7a2      	b.n	80072c0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800737a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800737e:	e79f      	b.n	80072c0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007380:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007384:	e79c      	b.n	80072c0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CC_ERR;
 8007386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800738a:	e799      	b.n	80072c0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800738c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007390:	e796      	b.n	80072c0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007392:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007396:	e793      	b.n	80072c0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007398:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800739c:	e790      	b.n	80072c0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800739e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80073a2:	e78d      	b.n	80072c0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80073a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80073a8:	e78a      	b.n	80072c0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80073aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80073ae:	e787      	b.n	80072c0 <SDMMC_CmdAppCommand+0x40>
 80073b0:	20000b08 	.word	0x20000b08
 80073b4:	10624dd3 	.word	0x10624dd3
 80073b8:	fffee0c0 	.word	0xfffee0c0
 80073bc:	00200045 	.word	0x00200045
 80073c0:	002000c5 	.word	0x002000c5
 80073c4:	fdffe008 	.word	0xfdffe008

080073c8 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80073c8:	4b17      	ldr	r3, [pc, #92]	; (8007428 <SDMMC_CmdAppOperCommand+0x60>)
 80073ca:	f241 3288 	movw	r2, #5000	; 0x1388
{
 80073ce:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80073d0:	4d16      	ldr	r5, [pc, #88]	; (800742c <SDMMC_CmdAppOperCommand+0x64>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80073d2:	f241 1429 	movw	r4, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80073d6:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 80073d8:	6081      	str	r1, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80073da:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80073de:	4914      	ldr	r1, [pc, #80]	; (8007430 <SDMMC_CmdAppOperCommand+0x68>)
 80073e0:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80073e2:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80073e4:	4029      	ands	r1, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80073e6:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80073ea:	430c      	orrs	r4, r1
 80073ec:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80073ee:	b14b      	cbz	r3, 8007404 <SDMMC_CmdAppOperCommand+0x3c>
 80073f0:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 80073f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 80073f4:	3a01      	subs	r2, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80073f6:	f013 0f45 	tst.w	r3, #69	; 0x45
 80073fa:	d001      	beq.n	8007400 <SDMMC_CmdAppOperCommand+0x38>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80073fc:	049b      	lsls	r3, r3, #18
 80073fe:	d506      	bpl.n	800740e <SDMMC_CmdAppOperCommand+0x46>
    if (count-- == 0U)
 8007400:	1c51      	adds	r1, r2, #1
 8007402:	d1f6      	bne.n	80073f2 <SDMMC_CmdAppOperCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8007404:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8007408:	4618      	mov	r0, r3
 800740a:	bc30      	pop	{r4, r5}
 800740c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800740e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007410:	f013 0304 	ands.w	r3, r3, #4
 8007414:	d104      	bne.n	8007420 <SDMMC_CmdAppOperCommand+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007416:	4a07      	ldr	r2, [pc, #28]	; (8007434 <SDMMC_CmdAppOperCommand+0x6c>)
 8007418:	6382      	str	r2, [r0, #56]	; 0x38
}
 800741a:	4618      	mov	r0, r3
 800741c:	bc30      	pop	{r4, r5}
 800741e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007420:	2304      	movs	r3, #4
 8007422:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007424:	e7f0      	b.n	8007408 <SDMMC_CmdAppOperCommand+0x40>
 8007426:	bf00      	nop
 8007428:	20000b08 	.word	0x20000b08
 800742c:	10624dd3 	.word	0x10624dd3
 8007430:	fffee0c0 	.word	0xfffee0c0
 8007434:	002000c5 	.word	0x002000c5

08007438 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007438:	4b4b      	ldr	r3, [pc, #300]	; (8007568 <SDMMC_CmdBusWidth+0x130>)
 800743a:	f241 3288 	movw	r2, #5000	; 0x1388
{
 800743e:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007440:	4d4a      	ldr	r5, [pc, #296]	; (800756c <SDMMC_CmdBusWidth+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007442:	f241 1406 	movw	r4, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007446:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 8007448:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800744a:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800744e:	4948      	ldr	r1, [pc, #288]	; (8007570 <SDMMC_CmdBusWidth+0x138>)
 8007450:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007452:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007454:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007456:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800745a:	430c      	orrs	r4, r1
 800745c:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800745e:	b14b      	cbz	r3, 8007474 <SDMMC_CmdBusWidth+0x3c>
 8007460:	1e5a      	subs	r2, r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8007462:	4944      	ldr	r1, [pc, #272]	; (8007574 <SDMMC_CmdBusWidth+0x13c>)
    sta_reg = SDMMCx->STA;
 8007464:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8007466:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007468:	420b      	tst	r3, r1
 800746a:	d001      	beq.n	8007470 <SDMMC_CmdBusWidth+0x38>
 800746c:	049c      	lsls	r4, r3, #18
 800746e:	d506      	bpl.n	800747e <SDMMC_CmdBusWidth+0x46>
    if (count-- == 0U)
 8007470:	1c55      	adds	r5, r2, #1
 8007472:	d1f7      	bne.n	8007464 <SDMMC_CmdBusWidth+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8007474:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8007478:	4618      	mov	r0, r3
 800747a:	bc30      	pop	{r4, r5}
 800747c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800747e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007480:	075b      	lsls	r3, r3, #29
 8007482:	d43d      	bmi.n	8007500 <SDMMC_CmdBusWidth+0xc8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007484:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007486:	f013 0301 	ands.w	r3, r3, #1
 800748a:	d134      	bne.n	80074f6 <SDMMC_CmdBusWidth+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800748c:	4b3a      	ldr	r3, [pc, #232]	; (8007578 <SDMMC_CmdBusWidth+0x140>)
 800748e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007490:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b06      	cmp	r3, #6
 8007496:	d131      	bne.n	80074fc <SDMMC_CmdBusWidth+0xc4>
  return (*(__IO uint32_t *) tmp);
 8007498:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800749a:	4b38      	ldr	r3, [pc, #224]	; (800757c <SDMMC_CmdBusWidth+0x144>)
 800749c:	4013      	ands	r3, r2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0ea      	beq.n	8007478 <SDMMC_CmdBusWidth+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80074a2:	2a00      	cmp	r2, #0
 80074a4:	db2f      	blt.n	8007506 <SDMMC_CmdBusWidth+0xce>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80074a6:	0055      	lsls	r5, r2, #1
 80074a8:	d430      	bmi.n	800750c <SDMMC_CmdBusWidth+0xd4>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80074aa:	0094      	lsls	r4, r2, #2
 80074ac:	d430      	bmi.n	8007510 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80074ae:	00d0      	lsls	r0, r2, #3
 80074b0:	d430      	bmi.n	8007514 <SDMMC_CmdBusWidth+0xdc>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80074b2:	0111      	lsls	r1, r2, #4
 80074b4:	d431      	bmi.n	800751a <SDMMC_CmdBusWidth+0xe2>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80074b6:	0155      	lsls	r5, r2, #5
 80074b8:	d432      	bmi.n	8007520 <SDMMC_CmdBusWidth+0xe8>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80074ba:	01d4      	lsls	r4, r2, #7
 80074bc:	d433      	bmi.n	8007526 <SDMMC_CmdBusWidth+0xee>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80074be:	0210      	lsls	r0, r2, #8
 80074c0:	d434      	bmi.n	800752c <SDMMC_CmdBusWidth+0xf4>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80074c2:	0251      	lsls	r1, r2, #9
 80074c4:	d435      	bmi.n	8007532 <SDMMC_CmdBusWidth+0xfa>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80074c6:	0295      	lsls	r5, r2, #10
 80074c8:	d436      	bmi.n	8007538 <SDMMC_CmdBusWidth+0x100>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80074ca:	02d4      	lsls	r4, r2, #11
 80074cc:	d437      	bmi.n	800753e <SDMMC_CmdBusWidth+0x106>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80074ce:	0350      	lsls	r0, r2, #13
 80074d0:	d438      	bmi.n	8007544 <SDMMC_CmdBusWidth+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80074d2:	0391      	lsls	r1, r2, #14
 80074d4:	d439      	bmi.n	800754a <SDMMC_CmdBusWidth+0x112>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80074d6:	03d5      	lsls	r5, r2, #15
 80074d8:	d43a      	bmi.n	8007550 <SDMMC_CmdBusWidth+0x118>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80074da:	0414      	lsls	r4, r2, #16
 80074dc:	d43b      	bmi.n	8007556 <SDMMC_CmdBusWidth+0x11e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80074de:	0450      	lsls	r0, r2, #17
 80074e0:	d43f      	bmi.n	8007562 <SDMMC_CmdBusWidth+0x12a>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80074e2:	0491      	lsls	r1, r2, #18
 80074e4:	d43a      	bmi.n	800755c <SDMMC_CmdBusWidth+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80074e6:	f012 0f08 	tst.w	r2, #8
 80074ea:	bf14      	ite	ne
 80074ec:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80074f0:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80074f4:	e7c0      	b.n	8007478 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80074f6:	2201      	movs	r2, #1
 80074f8:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074fa:	e7bd      	b.n	8007478 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e7bb      	b.n	8007478 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007500:	2304      	movs	r3, #4
 8007502:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007504:	e7b8      	b.n	8007478 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007506:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800750a:	e7b5      	b.n	8007478 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800750c:	2340      	movs	r3, #64	; 0x40
 800750e:	e7b3      	b.n	8007478 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007510:	2380      	movs	r3, #128	; 0x80
 8007512:	e7b1      	b.n	8007478 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007514:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007518:	e7ae      	b.n	8007478 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800751a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800751e:	e7ab      	b.n	8007478 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007524:	e7a8      	b.n	8007478 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007526:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800752a:	e7a5      	b.n	8007478 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800752c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007530:	e7a2      	b.n	8007478 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007532:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007536:	e79f      	b.n	8007478 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007538:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800753c:	e79c      	b.n	8007478 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CC_ERR;
 800753e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007542:	e799      	b.n	8007478 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007548:	e796      	b.n	8007478 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800754a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800754e:	e793      	b.n	8007478 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007550:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007554:	e790      	b.n	8007478 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007556:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800755a:	e78d      	b.n	8007478 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800755c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007560:	e78a      	b.n	8007478 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007562:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007566:	e787      	b.n	8007478 <SDMMC_CmdBusWidth+0x40>
 8007568:	20000b08 	.word	0x20000b08
 800756c:	10624dd3 	.word	0x10624dd3
 8007570:	fffee0c0 	.word	0xfffee0c0
 8007574:	00200045 	.word	0x00200045
 8007578:	002000c5 	.word	0x002000c5
 800757c:	fdffe008 	.word	0xfdffe008

08007580 <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007580:	4b4c      	ldr	r3, [pc, #304]	; (80076b4 <SDMMC_CmdSendSCR+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007582:	f241 1133 	movw	r1, #4403	; 0x1133
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007586:	4a4c      	ldr	r2, [pc, #304]	; (80076b8 <SDMMC_CmdSendSCR+0x138>)
{
 8007588:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 800758a:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800758c:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800758e:	4c4b      	ldr	r4, [pc, #300]	; (80076bc <SDMMC_CmdSendSCR+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007590:	fba2 2303 	umull	r2, r3, r2, r3
 8007594:	f241 3288 	movw	r2, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8007598:	6085      	str	r5, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800759a:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800759c:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800759e:	402c      	ands	r4, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80075a0:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80075a4:	4321      	orrs	r1, r4
 80075a6:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 80075a8:	b14b      	cbz	r3, 80075be <SDMMC_CmdSendSCR+0x3e>
 80075aa:	1e5a      	subs	r2, r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80075ac:	4944      	ldr	r1, [pc, #272]	; (80076c0 <SDMMC_CmdSendSCR+0x140>)
    sta_reg = SDMMCx->STA;
 80075ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 80075b0:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80075b2:	420b      	tst	r3, r1
 80075b4:	d001      	beq.n	80075ba <SDMMC_CmdSendSCR+0x3a>
 80075b6:	049c      	lsls	r4, r3, #18
 80075b8:	d506      	bpl.n	80075c8 <SDMMC_CmdSendSCR+0x48>
    if (count-- == 0U)
 80075ba:	1c55      	adds	r5, r2, #1
 80075bc:	d1f7      	bne.n	80075ae <SDMMC_CmdSendSCR+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 80075be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	bc30      	pop	{r4, r5}
 80075c6:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80075c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80075ca:	075b      	lsls	r3, r3, #29
 80075cc:	d43d      	bmi.n	800764a <SDMMC_CmdSendSCR+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80075ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80075d0:	f013 0301 	ands.w	r3, r3, #1
 80075d4:	d134      	bne.n	8007640 <SDMMC_CmdSendSCR+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80075d6:	4b3b      	ldr	r3, [pc, #236]	; (80076c4 <SDMMC_CmdSendSCR+0x144>)
 80075d8:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80075da:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b33      	cmp	r3, #51	; 0x33
 80075e0:	d131      	bne.n	8007646 <SDMMC_CmdSendSCR+0xc6>
  return (*(__IO uint32_t *) tmp);
 80075e2:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80075e4:	4b38      	ldr	r3, [pc, #224]	; (80076c8 <SDMMC_CmdSendSCR+0x148>)
 80075e6:	4013      	ands	r3, r2
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d0ea      	beq.n	80075c2 <SDMMC_CmdSendSCR+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80075ec:	2a00      	cmp	r2, #0
 80075ee:	db2f      	blt.n	8007650 <SDMMC_CmdSendSCR+0xd0>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80075f0:	0055      	lsls	r5, r2, #1
 80075f2:	d430      	bmi.n	8007656 <SDMMC_CmdSendSCR+0xd6>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80075f4:	0094      	lsls	r4, r2, #2
 80075f6:	d430      	bmi.n	800765a <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80075f8:	00d0      	lsls	r0, r2, #3
 80075fa:	d430      	bmi.n	800765e <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80075fc:	0111      	lsls	r1, r2, #4
 80075fe:	d431      	bmi.n	8007664 <SDMMC_CmdSendSCR+0xe4>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007600:	0155      	lsls	r5, r2, #5
 8007602:	d432      	bmi.n	800766a <SDMMC_CmdSendSCR+0xea>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007604:	01d4      	lsls	r4, r2, #7
 8007606:	d433      	bmi.n	8007670 <SDMMC_CmdSendSCR+0xf0>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007608:	0210      	lsls	r0, r2, #8
 800760a:	d434      	bmi.n	8007676 <SDMMC_CmdSendSCR+0xf6>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800760c:	0251      	lsls	r1, r2, #9
 800760e:	d435      	bmi.n	800767c <SDMMC_CmdSendSCR+0xfc>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007610:	0295      	lsls	r5, r2, #10
 8007612:	d436      	bmi.n	8007682 <SDMMC_CmdSendSCR+0x102>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007614:	02d4      	lsls	r4, r2, #11
 8007616:	d437      	bmi.n	8007688 <SDMMC_CmdSendSCR+0x108>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007618:	0350      	lsls	r0, r2, #13
 800761a:	d438      	bmi.n	800768e <SDMMC_CmdSendSCR+0x10e>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800761c:	0391      	lsls	r1, r2, #14
 800761e:	d439      	bmi.n	8007694 <SDMMC_CmdSendSCR+0x114>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007620:	03d5      	lsls	r5, r2, #15
 8007622:	d43a      	bmi.n	800769a <SDMMC_CmdSendSCR+0x11a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007624:	0414      	lsls	r4, r2, #16
 8007626:	d43b      	bmi.n	80076a0 <SDMMC_CmdSendSCR+0x120>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007628:	0450      	lsls	r0, r2, #17
 800762a:	d43f      	bmi.n	80076ac <SDMMC_CmdSendSCR+0x12c>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800762c:	0491      	lsls	r1, r2, #18
 800762e:	d43a      	bmi.n	80076a6 <SDMMC_CmdSendSCR+0x126>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007630:	f012 0f08 	tst.w	r2, #8
 8007634:	bf14      	ite	ne
 8007636:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800763a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800763e:	e7c0      	b.n	80075c2 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007640:	2201      	movs	r2, #1
 8007642:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007644:	e7bd      	b.n	80075c2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007646:	2301      	movs	r3, #1
 8007648:	e7bb      	b.n	80075c2 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800764a:	2304      	movs	r3, #4
 800764c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800764e:	e7b8      	b.n	80075c2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007650:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007654:	e7b5      	b.n	80075c2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007656:	2340      	movs	r3, #64	; 0x40
 8007658:	e7b3      	b.n	80075c2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800765a:	2380      	movs	r3, #128	; 0x80
 800765c:	e7b1      	b.n	80075c2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800765e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007662:	e7ae      	b.n	80075c2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007668:	e7ab      	b.n	80075c2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800766a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800766e:	e7a8      	b.n	80075c2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007670:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007674:	e7a5      	b.n	80075c2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800767a:	e7a2      	b.n	80075c2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800767c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007680:	e79f      	b.n	80075c2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007682:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007686:	e79c      	b.n	80075c2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CC_ERR;
 8007688:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800768c:	e799      	b.n	80075c2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800768e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007692:	e796      	b.n	80075c2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007694:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007698:	e793      	b.n	80075c2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800769a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800769e:	e790      	b.n	80075c2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80076a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80076a4:	e78d      	b.n	80075c2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 80076a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80076aa:	e78a      	b.n	80075c2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80076ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80076b0:	e787      	b.n	80075c2 <SDMMC_CmdSendSCR+0x42>
 80076b2:	bf00      	nop
 80076b4:	20000b08 	.word	0x20000b08
 80076b8:	10624dd3 	.word	0x10624dd3
 80076bc:	fffee0c0 	.word	0xfffee0c0
 80076c0:	00200045 	.word	0x00200045
 80076c4:	002000c5 	.word	0x002000c5
 80076c8:	fdffe008 	.word	0xfdffe008

080076cc <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80076cc:	4a19      	ldr	r2, [pc, #100]	; (8007734 <SDMMC_CmdSendCID+0x68>)
{
 80076ce:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80076d0:	4919      	ldr	r1, [pc, #100]	; (8007738 <SDMMC_CmdSendCID+0x6c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80076d2:	f241 3002 	movw	r0, #4866	; 0x1302
{
 80076d6:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 80076d8:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80076da:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80076dc:	4c17      	ldr	r4, [pc, #92]	; (800773c <SDMMC_CmdSendCID+0x70>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80076de:	fba1 1202 	umull	r1, r2, r1, r2
 80076e2:	f241 3188 	movw	r1, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 80076e6:	609d      	str	r5, [r3, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80076e8:	68dd      	ldr	r5, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80076ea:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80076ec:	402c      	ands	r4, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80076ee:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80076f2:	4320      	orrs	r0, r4
 80076f4:	60d8      	str	r0, [r3, #12]
    if (count-- == 0U)
 80076f6:	b14a      	cbz	r2, 800770c <SDMMC_CmdSendCID+0x40>
 80076f8:	1e51      	subs	r1, r2, #1
    sta_reg = SDMMCx->STA;
 80076fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 80076fc:	3901      	subs	r1, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80076fe:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007702:	d001      	beq.n	8007708 <SDMMC_CmdSendCID+0x3c>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007704:	0490      	lsls	r0, r2, #18
 8007706:	d505      	bpl.n	8007714 <SDMMC_CmdSendCID+0x48>
    if (count-- == 0U)
 8007708:	1c4c      	adds	r4, r1, #1
 800770a:	d1f6      	bne.n	80076fa <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800770c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007710:	bc30      	pop	{r4, r5}
 8007712:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007716:	0752      	lsls	r2, r2, #29
 8007718:	d408      	bmi.n	800772c <SDMMC_CmdSendCID+0x60>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800771a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800771c:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007720:	bf14      	ite	ne
 8007722:	2201      	movne	r2, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007724:	4a06      	ldreq	r2, [pc, #24]	; (8007740 <SDMMC_CmdSendCID+0x74>)
 8007726:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007728:	bc30      	pop	{r4, r5}
 800772a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800772c:	2004      	movs	r0, #4
 800772e:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007730:	e7ee      	b.n	8007710 <SDMMC_CmdSendCID+0x44>
 8007732:	bf00      	nop
 8007734:	20000b08 	.word	0x20000b08
 8007738:	10624dd3 	.word	0x10624dd3
 800773c:	fffee0c0 	.word	0xfffee0c0
 8007740:	002000c5 	.word	0x002000c5

08007744 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007744:	4a18      	ldr	r2, [pc, #96]	; (80077a8 <SDMMC_CmdSendCSD+0x64>)
{
 8007746:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007748:	f241 3088 	movw	r0, #5000	; 0x1388
{
 800774c:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800774e:	4d17      	ldr	r5, [pc, #92]	; (80077ac <SDMMC_CmdSendCSD+0x68>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007750:	f241 3409 	movw	r4, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007754:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8007756:	6099      	str	r1, [r3, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007758:	fba5 5202 	umull	r5, r2, r5, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800775c:	4914      	ldr	r1, [pc, #80]	; (80077b0 <SDMMC_CmdSendCSD+0x6c>)
 800775e:	68dd      	ldr	r5, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007760:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007762:	4029      	ands	r1, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007764:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007768:	430c      	orrs	r4, r1
 800776a:	60dc      	str	r4, [r3, #12]
    if (count-- == 0U)
 800776c:	b14a      	cbz	r2, 8007782 <SDMMC_CmdSendCSD+0x3e>
 800776e:	1e51      	subs	r1, r2, #1
    sta_reg = SDMMCx->STA;
 8007770:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 8007772:	3901      	subs	r1, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007774:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007778:	d001      	beq.n	800777e <SDMMC_CmdSendCSD+0x3a>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800777a:	0490      	lsls	r0, r2, #18
 800777c:	d505      	bpl.n	800778a <SDMMC_CmdSendCSD+0x46>
    if (count-- == 0U)
 800777e:	1c4c      	adds	r4, r1, #1
 8007780:	d1f6      	bne.n	8007770 <SDMMC_CmdSendCSD+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8007782:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007786:	bc30      	pop	{r4, r5}
 8007788:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800778a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800778c:	0752      	lsls	r2, r2, #29
 800778e:	d408      	bmi.n	80077a2 <SDMMC_CmdSendCSD+0x5e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007790:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007792:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007796:	bf14      	ite	ne
 8007798:	2201      	movne	r2, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800779a:	4a06      	ldreq	r2, [pc, #24]	; (80077b4 <SDMMC_CmdSendCSD+0x70>)
 800779c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800779e:	bc30      	pop	{r4, r5}
 80077a0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80077a2:	2004      	movs	r0, #4
 80077a4:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80077a6:	e7ee      	b.n	8007786 <SDMMC_CmdSendCSD+0x42>
 80077a8:	20000b08 	.word	0x20000b08
 80077ac:	10624dd3 	.word	0x10624dd3
 80077b0:	fffee0c0 	.word	0xfffee0c0
 80077b4:	002000c5 	.word	0x002000c5

080077b8 <SDMMC_CmdSetRelAdd>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80077b8:	4b26      	ldr	r3, [pc, #152]	; (8007854 <SDMMC_CmdSetRelAdd+0x9c>)
 80077ba:	4a27      	ldr	r2, [pc, #156]	; (8007858 <SDMMC_CmdSetRelAdd+0xa0>)
{
 80077bc:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 80077be:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80077c0:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80077c2:	4d26      	ldr	r5, [pc, #152]	; (800785c <SDMMC_CmdSetRelAdd+0xa4>)
  SDMMCx->ARG = Command->Argument;
 80077c4:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80077c6:	f241 1403 	movw	r4, #4355	; 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80077ca:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80077ce:	68c2      	ldr	r2, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80077d0:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80077d2:	4015      	ands	r5, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80077d4:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80077d8:	432c      	orrs	r4, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80077da:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80077de:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80077e0:	b14b      	cbz	r3, 80077f6 <SDMMC_CmdSetRelAdd+0x3e>
 80077e2:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 80077e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 80077e6:	3a01      	subs	r2, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80077e8:	f013 0f45 	tst.w	r3, #69	; 0x45
 80077ec:	d001      	beq.n	80077f2 <SDMMC_CmdSetRelAdd+0x3a>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80077ee:	049d      	lsls	r5, r3, #18
 80077f0:	d506      	bpl.n	8007800 <SDMMC_CmdSetRelAdd+0x48>
    if (count-- == 0U)
 80077f2:	1c53      	adds	r3, r2, #1
 80077f4:	d1f6      	bne.n	80077e4 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80077f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	bc30      	pop	{r4, r5}
 80077fe:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007800:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007802:	075c      	lsls	r4, r3, #29
 8007804:	d41c      	bmi.n	8007840 <SDMMC_CmdSetRelAdd+0x88>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007806:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007808:	f013 0301 	ands.w	r3, r3, #1
 800780c:	d113      	bne.n	8007836 <SDMMC_CmdSetRelAdd+0x7e>
  return (uint8_t)(SDMMCx->RESPCMD);
 800780e:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007810:	b2db      	uxtb	r3, r3
 8007812:	2b03      	cmp	r3, #3
 8007814:	d112      	bne.n	800783c <SDMMC_CmdSetRelAdd+0x84>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007816:	4b12      	ldr	r3, [pc, #72]	; (8007860 <SDMMC_CmdSetRelAdd+0xa8>)
 8007818:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800781a:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800781c:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
 8007820:	d014      	beq.n	800784c <SDMMC_CmdSetRelAdd+0x94>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007822:	0451      	lsls	r1, r2, #17
 8007824:	d40f      	bmi.n	8007846 <SDMMC_CmdSetRelAdd+0x8e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007826:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800782a:	bf14      	ite	ne
 800782c:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 8007830:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8007834:	e7e1      	b.n	80077fa <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007836:	2201      	movs	r2, #1
 8007838:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800783a:	e7de      	b.n	80077fa <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800783c:	2301      	movs	r3, #1
 800783e:	e7dc      	b.n	80077fa <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007840:	2304      	movs	r3, #4
 8007842:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007844:	e7d9      	b.n	80077fa <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800784a:	e7d6      	b.n	80077fa <SDMMC_CmdSetRelAdd+0x42>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800784c:	0c12      	lsrs	r2, r2, #16
 800784e:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
 8007850:	e7d3      	b.n	80077fa <SDMMC_CmdSetRelAdd+0x42>
 8007852:	bf00      	nop
 8007854:	20000b08 	.word	0x20000b08
 8007858:	10624dd3 	.word	0x10624dd3
 800785c:	fffee0c0 	.word	0xfffee0c0
 8007860:	002000c5 	.word	0x002000c5

08007864 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007864:	4b4b      	ldr	r3, [pc, #300]	; (8007994 <SDMMC_CmdSendStatus+0x130>)
 8007866:	f241 3288 	movw	r2, #5000	; 0x1388
{
 800786a:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800786c:	4d4a      	ldr	r5, [pc, #296]	; (8007998 <SDMMC_CmdSendStatus+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800786e:	f241 140d 	movw	r4, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007872:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 8007874:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007876:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800787a:	4948      	ldr	r1, [pc, #288]	; (800799c <SDMMC_CmdSendStatus+0x138>)
 800787c:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800787e:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007880:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007882:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007886:	430c      	orrs	r4, r1
 8007888:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800788a:	b14b      	cbz	r3, 80078a0 <SDMMC_CmdSendStatus+0x3c>
 800788c:	1e5a      	subs	r2, r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800788e:	4944      	ldr	r1, [pc, #272]	; (80079a0 <SDMMC_CmdSendStatus+0x13c>)
    sta_reg = SDMMCx->STA;
 8007890:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8007892:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007894:	420b      	tst	r3, r1
 8007896:	d001      	beq.n	800789c <SDMMC_CmdSendStatus+0x38>
 8007898:	049c      	lsls	r4, r3, #18
 800789a:	d506      	bpl.n	80078aa <SDMMC_CmdSendStatus+0x46>
    if (count-- == 0U)
 800789c:	1c55      	adds	r5, r2, #1
 800789e:	d1f7      	bne.n	8007890 <SDMMC_CmdSendStatus+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80078a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	bc30      	pop	{r4, r5}
 80078a8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80078aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80078ac:	075b      	lsls	r3, r3, #29
 80078ae:	d43d      	bmi.n	800792c <SDMMC_CmdSendStatus+0xc8>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80078b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80078b2:	f013 0301 	ands.w	r3, r3, #1
 80078b6:	d134      	bne.n	8007922 <SDMMC_CmdSendStatus+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80078b8:	4b3a      	ldr	r3, [pc, #232]	; (80079a4 <SDMMC_CmdSendStatus+0x140>)
 80078ba:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80078bc:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b0d      	cmp	r3, #13
 80078c2:	d131      	bne.n	8007928 <SDMMC_CmdSendStatus+0xc4>
  return (*(__IO uint32_t *) tmp);
 80078c4:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80078c6:	4b38      	ldr	r3, [pc, #224]	; (80079a8 <SDMMC_CmdSendStatus+0x144>)
 80078c8:	4013      	ands	r3, r2
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d0ea      	beq.n	80078a4 <SDMMC_CmdSendStatus+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80078ce:	2a00      	cmp	r2, #0
 80078d0:	db2f      	blt.n	8007932 <SDMMC_CmdSendStatus+0xce>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80078d2:	0055      	lsls	r5, r2, #1
 80078d4:	d430      	bmi.n	8007938 <SDMMC_CmdSendStatus+0xd4>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80078d6:	0094      	lsls	r4, r2, #2
 80078d8:	d430      	bmi.n	800793c <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80078da:	00d0      	lsls	r0, r2, #3
 80078dc:	d430      	bmi.n	8007940 <SDMMC_CmdSendStatus+0xdc>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80078de:	0111      	lsls	r1, r2, #4
 80078e0:	d431      	bmi.n	8007946 <SDMMC_CmdSendStatus+0xe2>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80078e2:	0155      	lsls	r5, r2, #5
 80078e4:	d432      	bmi.n	800794c <SDMMC_CmdSendStatus+0xe8>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80078e6:	01d4      	lsls	r4, r2, #7
 80078e8:	d433      	bmi.n	8007952 <SDMMC_CmdSendStatus+0xee>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80078ea:	0210      	lsls	r0, r2, #8
 80078ec:	d434      	bmi.n	8007958 <SDMMC_CmdSendStatus+0xf4>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80078ee:	0251      	lsls	r1, r2, #9
 80078f0:	d435      	bmi.n	800795e <SDMMC_CmdSendStatus+0xfa>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80078f2:	0295      	lsls	r5, r2, #10
 80078f4:	d436      	bmi.n	8007964 <SDMMC_CmdSendStatus+0x100>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80078f6:	02d4      	lsls	r4, r2, #11
 80078f8:	d437      	bmi.n	800796a <SDMMC_CmdSendStatus+0x106>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80078fa:	0350      	lsls	r0, r2, #13
 80078fc:	d438      	bmi.n	8007970 <SDMMC_CmdSendStatus+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80078fe:	0391      	lsls	r1, r2, #14
 8007900:	d439      	bmi.n	8007976 <SDMMC_CmdSendStatus+0x112>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007902:	03d5      	lsls	r5, r2, #15
 8007904:	d43a      	bmi.n	800797c <SDMMC_CmdSendStatus+0x118>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007906:	0414      	lsls	r4, r2, #16
 8007908:	d43b      	bmi.n	8007982 <SDMMC_CmdSendStatus+0x11e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800790a:	0450      	lsls	r0, r2, #17
 800790c:	d43f      	bmi.n	800798e <SDMMC_CmdSendStatus+0x12a>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800790e:	0491      	lsls	r1, r2, #18
 8007910:	d43a      	bmi.n	8007988 <SDMMC_CmdSendStatus+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007912:	f012 0f08 	tst.w	r2, #8
 8007916:	bf14      	ite	ne
 8007918:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800791c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8007920:	e7c0      	b.n	80078a4 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007922:	2201      	movs	r2, #1
 8007924:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007926:	e7bd      	b.n	80078a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007928:	2301      	movs	r3, #1
 800792a:	e7bb      	b.n	80078a4 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800792c:	2304      	movs	r3, #4
 800792e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007930:	e7b8      	b.n	80078a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007936:	e7b5      	b.n	80078a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007938:	2340      	movs	r3, #64	; 0x40
 800793a:	e7b3      	b.n	80078a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800793c:	2380      	movs	r3, #128	; 0x80
 800793e:	e7b1      	b.n	80078a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007940:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007944:	e7ae      	b.n	80078a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007946:	f44f 7300 	mov.w	r3, #512	; 0x200
 800794a:	e7ab      	b.n	80078a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800794c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007950:	e7a8      	b.n	80078a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007952:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007956:	e7a5      	b.n	80078a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800795c:	e7a2      	b.n	80078a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800795e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007962:	e79f      	b.n	80078a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007964:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007968:	e79c      	b.n	80078a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CC_ERR;
 800796a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800796e:	e799      	b.n	80078a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007970:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007974:	e796      	b.n	80078a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007976:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800797a:	e793      	b.n	80078a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800797c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007980:	e790      	b.n	80078a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007982:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007986:	e78d      	b.n	80078a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8007988:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800798c:	e78a      	b.n	80078a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800798e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007992:	e787      	b.n	80078a4 <SDMMC_CmdSendStatus+0x40>
 8007994:	20000b08 	.word	0x20000b08
 8007998:	10624dd3 	.word	0x10624dd3
 800799c:	fffee0c0 	.word	0xfffee0c0
 80079a0:	00200045 	.word	0x00200045
 80079a4:	002000c5 	.word	0x002000c5
 80079a8:	fdffe008 	.word	0xfdffe008

080079ac <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80079ac:	4b4c      	ldr	r3, [pc, #304]	; (8007ae0 <SDMMC_CmdStatusRegister+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80079ae:	f241 110d 	movw	r1, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80079b2:	4a4c      	ldr	r2, [pc, #304]	; (8007ae4 <SDMMC_CmdStatusRegister+0x138>)
{
 80079b4:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 80079b6:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80079b8:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80079ba:	4c4b      	ldr	r4, [pc, #300]	; (8007ae8 <SDMMC_CmdStatusRegister+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80079bc:	fba2 2303 	umull	r2, r3, r2, r3
 80079c0:	f241 3288 	movw	r2, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 80079c4:	6085      	str	r5, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80079c6:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80079c8:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80079ca:	402c      	ands	r4, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80079cc:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80079d0:	4321      	orrs	r1, r4
 80079d2:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 80079d4:	b14b      	cbz	r3, 80079ea <SDMMC_CmdStatusRegister+0x3e>
 80079d6:	1e5a      	subs	r2, r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80079d8:	4944      	ldr	r1, [pc, #272]	; (8007aec <SDMMC_CmdStatusRegister+0x140>)
    sta_reg = SDMMCx->STA;
 80079da:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 80079dc:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80079de:	420b      	tst	r3, r1
 80079e0:	d001      	beq.n	80079e6 <SDMMC_CmdStatusRegister+0x3a>
 80079e2:	049c      	lsls	r4, r3, #18
 80079e4:	d506      	bpl.n	80079f4 <SDMMC_CmdStatusRegister+0x48>
    if (count-- == 0U)
 80079e6:	1c55      	adds	r5, r2, #1
 80079e8:	d1f7      	bne.n	80079da <SDMMC_CmdStatusRegister+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 80079ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	bc30      	pop	{r4, r5}
 80079f2:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80079f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80079f6:	075b      	lsls	r3, r3, #29
 80079f8:	d43d      	bmi.n	8007a76 <SDMMC_CmdStatusRegister+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80079fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80079fc:	f013 0301 	ands.w	r3, r3, #1
 8007a00:	d134      	bne.n	8007a6c <SDMMC_CmdStatusRegister+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007a02:	4b3b      	ldr	r3, [pc, #236]	; (8007af0 <SDMMC_CmdStatusRegister+0x144>)
 8007a04:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007a06:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b0d      	cmp	r3, #13
 8007a0c:	d131      	bne.n	8007a72 <SDMMC_CmdStatusRegister+0xc6>
  return (*(__IO uint32_t *) tmp);
 8007a0e:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007a10:	4b38      	ldr	r3, [pc, #224]	; (8007af4 <SDMMC_CmdStatusRegister+0x148>)
 8007a12:	4013      	ands	r3, r2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d0ea      	beq.n	80079ee <SDMMC_CmdStatusRegister+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007a18:	2a00      	cmp	r2, #0
 8007a1a:	db2f      	blt.n	8007a7c <SDMMC_CmdStatusRegister+0xd0>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007a1c:	0055      	lsls	r5, r2, #1
 8007a1e:	d430      	bmi.n	8007a82 <SDMMC_CmdStatusRegister+0xd6>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007a20:	0094      	lsls	r4, r2, #2
 8007a22:	d430      	bmi.n	8007a86 <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007a24:	00d0      	lsls	r0, r2, #3
 8007a26:	d430      	bmi.n	8007a8a <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007a28:	0111      	lsls	r1, r2, #4
 8007a2a:	d431      	bmi.n	8007a90 <SDMMC_CmdStatusRegister+0xe4>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007a2c:	0155      	lsls	r5, r2, #5
 8007a2e:	d432      	bmi.n	8007a96 <SDMMC_CmdStatusRegister+0xea>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007a30:	01d4      	lsls	r4, r2, #7
 8007a32:	d433      	bmi.n	8007a9c <SDMMC_CmdStatusRegister+0xf0>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007a34:	0210      	lsls	r0, r2, #8
 8007a36:	d434      	bmi.n	8007aa2 <SDMMC_CmdStatusRegister+0xf6>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007a38:	0251      	lsls	r1, r2, #9
 8007a3a:	d435      	bmi.n	8007aa8 <SDMMC_CmdStatusRegister+0xfc>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007a3c:	0295      	lsls	r5, r2, #10
 8007a3e:	d436      	bmi.n	8007aae <SDMMC_CmdStatusRegister+0x102>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007a40:	02d4      	lsls	r4, r2, #11
 8007a42:	d437      	bmi.n	8007ab4 <SDMMC_CmdStatusRegister+0x108>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007a44:	0350      	lsls	r0, r2, #13
 8007a46:	d438      	bmi.n	8007aba <SDMMC_CmdStatusRegister+0x10e>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007a48:	0391      	lsls	r1, r2, #14
 8007a4a:	d439      	bmi.n	8007ac0 <SDMMC_CmdStatusRegister+0x114>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007a4c:	03d5      	lsls	r5, r2, #15
 8007a4e:	d43a      	bmi.n	8007ac6 <SDMMC_CmdStatusRegister+0x11a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007a50:	0414      	lsls	r4, r2, #16
 8007a52:	d43b      	bmi.n	8007acc <SDMMC_CmdStatusRegister+0x120>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007a54:	0450      	lsls	r0, r2, #17
 8007a56:	d43f      	bmi.n	8007ad8 <SDMMC_CmdStatusRegister+0x12c>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007a58:	0491      	lsls	r1, r2, #18
 8007a5a:	d43a      	bmi.n	8007ad2 <SDMMC_CmdStatusRegister+0x126>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007a5c:	f012 0f08 	tst.w	r2, #8
 8007a60:	bf14      	ite	ne
 8007a62:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8007a66:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8007a6a:	e7c0      	b.n	80079ee <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a70:	e7bd      	b.n	80079ee <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e7bb      	b.n	80079ee <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a76:	2304      	movs	r3, #4
 8007a78:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a7a:	e7b8      	b.n	80079ee <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007a7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a80:	e7b5      	b.n	80079ee <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007a82:	2340      	movs	r3, #64	; 0x40
 8007a84:	e7b3      	b.n	80079ee <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007a86:	2380      	movs	r3, #128	; 0x80
 8007a88:	e7b1      	b.n	80079ee <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a8e:	e7ae      	b.n	80079ee <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a94:	e7ab      	b.n	80079ee <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a9a:	e7a8      	b.n	80079ee <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007a9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007aa0:	e7a5      	b.n	80079ee <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007aa6:	e7a2      	b.n	80079ee <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007aa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007aac:	e79f      	b.n	80079ee <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007aae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007ab2:	e79c      	b.n	80079ee <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CC_ERR;
 8007ab4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ab8:	e799      	b.n	80079ee <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007aba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007abe:	e796      	b.n	80079ee <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007ac0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007ac4:	e793      	b.n	80079ee <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007ac6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007aca:	e790      	b.n	80079ee <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007acc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007ad0:	e78d      	b.n	80079ee <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 8007ad2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007ad6:	e78a      	b.n	80079ee <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007ad8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007adc:	e787      	b.n	80079ee <SDMMC_CmdStatusRegister+0x42>
 8007ade:	bf00      	nop
 8007ae0:	20000b08 	.word	0x20000b08
 8007ae4:	10624dd3 	.word	0x10624dd3
 8007ae8:	fffee0c0 	.word	0xfffee0c0
 8007aec:	00200045 	.word	0x00200045
 8007af0:	002000c5 	.word	0x002000c5
 8007af4:	fdffe008 	.word	0xfdffe008

08007af8 <SDMMC_CmdVoltageSwitch>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007af8:	4b4c      	ldr	r3, [pc, #304]	; (8007c2c <SDMMC_CmdVoltageSwitch+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007afa:	f241 110b 	movw	r1, #4363	; 0x110b
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007afe:	4a4c      	ldr	r2, [pc, #304]	; (8007c30 <SDMMC_CmdVoltageSwitch+0x138>)
{
 8007b00:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8007b02:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007b04:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007b06:	4c4b      	ldr	r4, [pc, #300]	; (8007c34 <SDMMC_CmdVoltageSwitch+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007b08:	fba2 2303 	umull	r2, r3, r2, r3
 8007b0c:	f241 3288 	movw	r2, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8007b10:	6085      	str	r5, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007b12:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007b14:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007b16:	402c      	ands	r4, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007b18:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007b1c:	4321      	orrs	r1, r4
 8007b1e:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 8007b20:	b14b      	cbz	r3, 8007b36 <SDMMC_CmdVoltageSwitch+0x3e>
 8007b22:	1e5a      	subs	r2, r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8007b24:	4944      	ldr	r1, [pc, #272]	; (8007c38 <SDMMC_CmdVoltageSwitch+0x140>)
    sta_reg = SDMMCx->STA;
 8007b26:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8007b28:	3a01      	subs	r2, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007b2a:	420b      	tst	r3, r1
 8007b2c:	d001      	beq.n	8007b32 <SDMMC_CmdVoltageSwitch+0x3a>
 8007b2e:	049c      	lsls	r4, r3, #18
 8007b30:	d506      	bpl.n	8007b40 <SDMMC_CmdVoltageSwitch+0x48>
    if (count-- == 0U)
 8007b32:	1c55      	adds	r5, r2, #1
 8007b34:	d1f7      	bne.n	8007b26 <SDMMC_CmdVoltageSwitch+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8007b36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	bc30      	pop	{r4, r5}
 8007b3e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007b40:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007b42:	075b      	lsls	r3, r3, #29
 8007b44:	d43d      	bmi.n	8007bc2 <SDMMC_CmdVoltageSwitch+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007b46:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007b48:	f013 0301 	ands.w	r3, r3, #1
 8007b4c:	d134      	bne.n	8007bb8 <SDMMC_CmdVoltageSwitch+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007b4e:	4b3b      	ldr	r3, [pc, #236]	; (8007c3c <SDMMC_CmdVoltageSwitch+0x144>)
 8007b50:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007b52:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b0b      	cmp	r3, #11
 8007b58:	d131      	bne.n	8007bbe <SDMMC_CmdVoltageSwitch+0xc6>
  return (*(__IO uint32_t *) tmp);
 8007b5a:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007b5c:	4b38      	ldr	r3, [pc, #224]	; (8007c40 <SDMMC_CmdVoltageSwitch+0x148>)
 8007b5e:	4013      	ands	r3, r2
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d0ea      	beq.n	8007b3a <SDMMC_CmdVoltageSwitch+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007b64:	2a00      	cmp	r2, #0
 8007b66:	db2f      	blt.n	8007bc8 <SDMMC_CmdVoltageSwitch+0xd0>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007b68:	0055      	lsls	r5, r2, #1
 8007b6a:	d430      	bmi.n	8007bce <SDMMC_CmdVoltageSwitch+0xd6>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007b6c:	0094      	lsls	r4, r2, #2
 8007b6e:	d430      	bmi.n	8007bd2 <SDMMC_CmdVoltageSwitch+0xda>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007b70:	00d0      	lsls	r0, r2, #3
 8007b72:	d430      	bmi.n	8007bd6 <SDMMC_CmdVoltageSwitch+0xde>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007b74:	0111      	lsls	r1, r2, #4
 8007b76:	d431      	bmi.n	8007bdc <SDMMC_CmdVoltageSwitch+0xe4>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007b78:	0155      	lsls	r5, r2, #5
 8007b7a:	d432      	bmi.n	8007be2 <SDMMC_CmdVoltageSwitch+0xea>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007b7c:	01d4      	lsls	r4, r2, #7
 8007b7e:	d433      	bmi.n	8007be8 <SDMMC_CmdVoltageSwitch+0xf0>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007b80:	0210      	lsls	r0, r2, #8
 8007b82:	d434      	bmi.n	8007bee <SDMMC_CmdVoltageSwitch+0xf6>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007b84:	0251      	lsls	r1, r2, #9
 8007b86:	d435      	bmi.n	8007bf4 <SDMMC_CmdVoltageSwitch+0xfc>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007b88:	0295      	lsls	r5, r2, #10
 8007b8a:	d436      	bmi.n	8007bfa <SDMMC_CmdVoltageSwitch+0x102>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007b8c:	02d4      	lsls	r4, r2, #11
 8007b8e:	d437      	bmi.n	8007c00 <SDMMC_CmdVoltageSwitch+0x108>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007b90:	0350      	lsls	r0, r2, #13
 8007b92:	d438      	bmi.n	8007c06 <SDMMC_CmdVoltageSwitch+0x10e>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007b94:	0391      	lsls	r1, r2, #14
 8007b96:	d439      	bmi.n	8007c0c <SDMMC_CmdVoltageSwitch+0x114>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007b98:	03d5      	lsls	r5, r2, #15
 8007b9a:	d43a      	bmi.n	8007c12 <SDMMC_CmdVoltageSwitch+0x11a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007b9c:	0414      	lsls	r4, r2, #16
 8007b9e:	d43b      	bmi.n	8007c18 <SDMMC_CmdVoltageSwitch+0x120>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007ba0:	0450      	lsls	r0, r2, #17
 8007ba2:	d43f      	bmi.n	8007c24 <SDMMC_CmdVoltageSwitch+0x12c>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007ba4:	0491      	lsls	r1, r2, #18
 8007ba6:	d43a      	bmi.n	8007c1e <SDMMC_CmdVoltageSwitch+0x126>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007ba8:	f012 0f08 	tst.w	r2, #8
 8007bac:	bf14      	ite	ne
 8007bae:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8007bb2:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8007bb6:	e7c0      	b.n	8007b3a <SDMMC_CmdVoltageSwitch+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007bb8:	2201      	movs	r2, #1
 8007bba:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bbc:	e7bd      	b.n	8007b3a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e7bb      	b.n	8007b3a <SDMMC_CmdVoltageSwitch+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007bc2:	2304      	movs	r3, #4
 8007bc4:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007bc6:	e7b8      	b.n	8007b3a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007bc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007bcc:	e7b5      	b.n	8007b3a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007bce:	2340      	movs	r3, #64	; 0x40
 8007bd0:	e7b3      	b.n	8007b3a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007bd2:	2380      	movs	r3, #128	; 0x80
 8007bd4:	e7b1      	b.n	8007b3a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bda:	e7ae      	b.n	8007b3a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007bdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007be0:	e7ab      	b.n	8007b3a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007be6:	e7a8      	b.n	8007b3a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007be8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007bec:	e7a5      	b.n	8007b3a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bf2:	e7a2      	b.n	8007b3a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bf8:	e79f      	b.n	8007b3a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007bfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007bfe:	e79c      	b.n	8007b3a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CC_ERR;
 8007c00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c04:	e799      	b.n	8007b3a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007c06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c0a:	e796      	b.n	8007b3a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007c0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007c10:	e793      	b.n	8007b3a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007c12:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c16:	e790      	b.n	8007b3a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007c18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007c1c:	e78d      	b.n	8007b3a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 8007c1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007c22:	e78a      	b.n	8007b3a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007c24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007c28:	e787      	b.n	8007b3a <SDMMC_CmdVoltageSwitch+0x42>
 8007c2a:	bf00      	nop
 8007c2c:	20000b08 	.word	0x20000b08
 8007c30:	10624dd3 	.word	0x10624dd3
 8007c34:	fffee0c0 	.word	0xfffee0c0
 8007c38:	00200045 	.word	0x00200045
 8007c3c:	002000c5 	.word	0x002000c5
 8007c40:	fdffe008 	.word	0xfdffe008

08007c44 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8007c44:	4b10      	ldr	r3, [pc, #64]	; (8007c88 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007c46:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(disk.nbr < _VOLUMES)
 8007c48:	7a5c      	ldrb	r4, [r3, #9]
 8007c4a:	b9dc      	cbnz	r4, 8007c84 <FATFS_LinkDriver+0x40>
    disk.is_initialized[disk.nbr] = 0;
 8007c4c:	f893 e009 	ldrb.w	lr, [r3, #9]
 8007c50:	4602      	mov	r2, r0
    disk.drv[disk.nbr] = drv;
 8007c52:	7a5e      	ldrb	r6, [r3, #9]
 8007c54:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    disk.lun[disk.nbr] = lun;
 8007c58:	7a5d      	ldrb	r5, [r3, #9]
    path[1] = ':';
 8007c5a:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    DiskNum = disk.nbr++;
 8007c5e:	7a5c      	ldrb	r4, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8007c60:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    path[2] = '/';
 8007c64:	272f      	movs	r7, #47	; 0x2f
    disk.lun[disk.nbr] = lun;
 8007c66:	441d      	add	r5, r3
    disk.drv[disk.nbr] = drv;
 8007c68:	6072      	str	r2, [r6, #4]
    DiskNum = disk.nbr++;
 8007c6a:	1c62      	adds	r2, r4, #1
    path[0] = DiskNum + '0';
 8007c6c:	3430      	adds	r4, #48	; 0x30
    disk.lun[disk.nbr] = lun;
 8007c6e:	7228      	strb	r0, [r5, #8]
    DiskNum = disk.nbr++;
 8007c70:	b2d2      	uxtb	r2, r2
    disk.is_initialized[disk.nbr] = 0;
 8007c72:	f803 000e 	strb.w	r0, [r3, lr]
    DiskNum = disk.nbr++;
 8007c76:	725a      	strb	r2, [r3, #9]
    path[0] = DiskNum + '0';
 8007c78:	700c      	strb	r4, [r1, #0]
    path[3] = 0;
 8007c7a:	70c8      	strb	r0, [r1, #3]
    path[1] = ':';
 8007c7c:	f881 c001 	strb.w	ip, [r1, #1]
    path[2] = '/';
 8007c80:	708f      	strb	r7, [r1, #2]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8007c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t ret = 1;
 8007c84:	2001      	movs	r0, #1
}
 8007c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c88:	20000b94 	.word	0x20000b94
 8007c8c:	00000000 	.word	0x00000000

08007c90 <audioInit>:
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}


void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8007c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8007c94:	4cee      	ldr	r4, [pc, #952]	; (8008050 <audioInit+0x3c0>)
{
 8007c96:	4607      	mov	r7, r0
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8007c98:	ed9f 0aee 	vldr	s0, [pc, #952]	; 8008054 <audioInit+0x3c4>
{
 8007c9c:	460e      	mov	r6, r1
 8007c9e:	4615      	mov	r5, r2
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	4bed      	ldr	r3, [pc, #948]	; (8008058 <audioInit+0x3c8>)
 8007ca4:	4aed      	ldr	r2, [pc, #948]	; (800805c <audioInit+0x3cc>)
 8007ca6:	49ee      	ldr	r1, [pc, #952]	; (8008060 <audioInit+0x3d0>)
{
 8007ca8:	ed2d 8b10 	vpush	{d8-d15}
 8007cac:	b089      	sub	sp, #36	; 0x24
 8007cae:	ee0e 7a90 	vmov	s29, r7
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8007cb2:	f005 fcd1 	bl	800d658 <LEAF_init>

	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 8007cb6:	4623      	mov	r3, r4
 8007cb8:	4aea      	ldr	r2, [pc, #936]	; (8008064 <audioInit+0x3d4>)
{
 8007cba:	ee0f 6a10 	vmov	s30, r6
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 8007cbe:	49ea      	ldr	r1, [pc, #936]	; (8008068 <audioInit+0x3d8>)
{
 8007cc0:	ee0f 5a90 	vmov	s31, r5
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 8007cc4:	48e9      	ldr	r0, [pc, #932]	; (800806c <audioInit+0x3dc>)
 8007cc6:	f004 feff 	bl	800cac8 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
 8007cca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007cce:	4623      	mov	r3, r4
 8007cd0:	49e7      	ldr	r1, [pc, #924]	; (8008070 <audioInit+0x3e0>)
 8007cd2:	48e8      	ldr	r0, [pc, #928]	; (8008074 <audioInit+0x3e4>)
 8007cd4:	f004 fef8 	bl	800cac8 <tMempool_init>

	leaf.clearOnAllocation = 1;
 8007cd8:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 8007cda:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8007cde:	eddf 1ae6 	vldr	s3, [pc, #920]	; 8008078 <audioInit+0x3e8>
 8007ce2:	eddf 0ae6 	vldr	s1, [pc, #920]	; 800807c <audioInit+0x3ec>
 8007ce6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007cea:	ed9f 0ae5 	vldr	s0, [pc, #916]	; 8008080 <audioInit+0x3f0>
 8007cee:	48e5      	ldr	r0, [pc, #916]	; (8008084 <audioInit+0x3f4>)
	leaf.clearOnAllocation = 1;
 8007cf0:	6163      	str	r3, [r4, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 8007cf2:	f004 fd27 	bl	800c744 <LEAF_generate_exp>

	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8007cf6:	2102      	movs	r1, #2
 8007cf8:	48e3      	ldr	r0, [pc, #908]	; (8008088 <audioInit+0x3f8>)
 8007cfa:	f7fa f927 	bl	8001f4c <HAL_GPIO_ReadPin>
 8007cfe:	4604      	mov	r4, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8007d00:	2120      	movs	r1, #32
 8007d02:	48e2      	ldr	r0, [pc, #904]	; (800808c <audioInit+0x3fc>)
 8007d04:	f7fa f922 	bl	8001f4c <HAL_GPIO_ReadPin>

	firstString = (bit0+(bit1 << 1)) * NUM_STRINGS_PER_BOARD;

	invNumOvertones = 1.0f / NUM_OVERTONES;
 8007d08:	4de1      	ldr	r5, [pc, #900]	; (8008090 <audioInit+0x400>)
	firstString = (bit0+(bit1 << 1)) * NUM_STRINGS_PER_BOARD;
 8007d0a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 8007d0e:	4ce1      	ldr	r4, [pc, #900]	; (8008094 <audioInit+0x404>)
 8007d10:	4ae1      	ldr	r2, [pc, #900]	; (8008098 <audioInit+0x408>)
	invNumOvertones = 1.0f / NUM_OVERTONES;
 8007d12:	49e2      	ldr	r1, [pc, #904]	; (800809c <audioInit+0x40c>)
	firstString = (bit0+(bit1 << 1)) * NUM_STRINGS_PER_BOARD;
 8007d14:	0080      	lsls	r0, r0, #2
 8007d16:	4626      	mov	r6, r4
 8007d18:	f104 0824 	add.w	r8, r4, #36	; 0x24
 8007d1c:	4fe0      	ldr	r7, [pc, #896]	; (80080a0 <audioInit+0x410>)
	invNumOvertones = 1.0f / NUM_OVERTONES;
 8007d1e:	600d      	str	r5, [r1, #0]
	firstString = (bit0+(bit1 << 1)) * NUM_STRINGS_PER_BOARD;
 8007d20:	6010      	str	r0, [r2, #0]
{
 8007d22:	46ba      	mov	sl, r7
 8007d24:	46b1      	mov	r9, r6


	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
 8007d26:	2500      	movs	r5, #0
 8007d28:	3501      	adds	r5, #1
		{
			stringFundamentalsMIDI[i][j] = LEAF_frequencyToMidi(stringFundamentals[i][j]);
 8007d2a:	ecb9 0a01 	vldmia	r9!, {s0}
 8007d2e:	f004 fce1 	bl	800c6f4 <LEAF_frequencyToMidi>
 8007d32:	ecaa 0a01 	vstmia	sl!, {s0}
		for (int j = 0; j < 3; j++)
 8007d36:	2d03      	cmp	r5, #3
 8007d38:	d1f6      	bne.n	8007d28 <audioInit+0x98>
	for (int i = 0; i < 3; i++)
 8007d3a:	360c      	adds	r6, #12
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	4546      	cmp	r6, r8
 8007d40:	d1ef      	bne.n	8007d22 <audioInit+0x92>
	}


	for (int i = 0; i < NUM_OVERTONES; i++)
	{
		totalGain[0] += partials[i];
 8007d42:	48d8      	ldr	r0, [pc, #864]	; (80080a4 <audioInit+0x414>)

	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 8007d44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
		totalGain[0] += partials[i];
 8007d48:	4ed7      	ldr	r6, [pc, #860]	; (80080a8 <audioInit+0x418>)
 8007d4a:	ed90 6a00 	vldr	s12, [r0]
 8007d4e:	4601      	mov	r1, r0
 8007d50:	edd6 3a00 	vldr	s7, [r6]
 8007d54:	ed90 7a01 	vldr	s14, [r0, #4]
 8007d58:	ee73 3a86 	vadd.f32	s7, s7, s12
 8007d5c:	edd0 7a02 	vldr	s15, [r0, #8]
		totalGain[1] += partialsHigh[i];
 8007d60:	4bd2      	ldr	r3, [pc, #840]	; (80080ac <audioInit+0x41c>)
		totalGain[0] += partials[i];
 8007d62:	ed90 6a03 	vldr	s12, [r0, #12]
 8007d66:	ee73 3a87 	vadd.f32	s7, s7, s14
		totalGain[1] += partialsHigh[i];
 8007d6a:	ed93 2a00 	vldr	s4, [r3]
 8007d6e:	ed96 4a01 	vldr	s8, [r6, #4]
		totalGain[0] += partials[i];
 8007d72:	edd0 2a04 	vldr	s5, [r0, #16]
 8007d76:	ee73 3aa7 	vadd.f32	s7, s7, s15
		totalGain[1] += partialsHigh[i];
 8007d7a:	edd3 5a01 	vldr	s11, [r3, #4]
 8007d7e:	ee34 4a02 	vadd.f32	s8, s8, s4
		totalGain[0] += partials[i];
 8007d82:	ed90 3a05 	vldr	s6, [r0, #20]
 8007d86:	ed90 5a06 	vldr	s10, [r0, #24]
 8007d8a:	ee73 3a86 	vadd.f32	s7, s7, s12
		totalGain[1] += partialsHigh[i];
 8007d8e:	ed93 6a02 	vldr	s12, [r3, #8]
 8007d92:	ee34 4a25 	vadd.f32	s8, s8, s11
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007d96:	4ac6      	ldr	r2, [pc, #792]	; (80080b0 <audioInit+0x420>)
 8007d98:	4dc6      	ldr	r5, [pc, #792]	; (80080b4 <audioInit+0x424>)
		totalGain[0] += partials[i];
 8007d9a:	ee73 3aa2 	vadd.f32	s7, s7, s5
		totalGain[1] += partialsHigh[i];
 8007d9e:	edd3 0a03 	vldr	s1, [r3, #12]
 8007da2:	ee34 4a06 	vadd.f32	s8, s8, s12
		totalGain[0] += partials[i];
 8007da6:	ed90 7a07 	vldr	s14, [r0, #28]
 8007daa:	edd0 1a08 	vldr	s3, [r0, #32]
 8007dae:	ee73 3a83 	vadd.f32	s7, s7, s6
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007db2:	ed95 3a00 	vldr	s6, [r5]
		totalGain[1] += partialsHigh[i];
 8007db6:	ee34 4a20 	vadd.f32	s8, s8, s1
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007dba:	edd2 0a00 	vldr	s1, [r2]
		totalGain[1] += partialsHigh[i];
 8007dbe:	ed93 1a04 	vldr	s2, [r3, #16]
		totalGain[0] += partials[i];
 8007dc2:	ee73 3a85 	vadd.f32	s7, s7, s10
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007dc6:	ed92 0a01 	vldr	s0, [r2, #4]
 8007dca:	ee33 3a20 	vadd.f32	s6, s6, s1
		totalGain[0] += partials[i];
 8007dce:	edd0 7a09 	vldr	s15, [r0, #36]	; 0x24
		totalGain[1] += partialsHigh[i];
 8007dd2:	ee34 4a01 	vadd.f32	s8, s8, s2
 8007dd6:	ed93 2a05 	vldr	s4, [r3, #20]
		totalGain[0] += partials[i];
 8007dda:	ee73 3a87 	vadd.f32	s7, s7, s14
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007dde:	ed92 7a02 	vldr	s14, [r2, #8]
 8007de2:	ee33 3a00 	vadd.f32	s6, s6, s0
		totalGain[0] += partials[i];
 8007de6:	edd0 4a0a 	vldr	s9, [r0, #40]	; 0x28
		totalGain[1] += partialsHigh[i];
 8007dea:	ee34 4a02 	vadd.f32	s8, s8, s4
 8007dee:	edd3 5a06 	vldr	s11, [r3, #24]
		totalGain[0] += partials[i];
 8007df2:	ee73 3aa1 	vadd.f32	s7, s7, s3
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007df6:	edd2 0a03 	vldr	s1, [r2, #12]
 8007dfa:	ee33 3a07 	vadd.f32	s6, s6, s14
		totalGain[1] += partialsHigh[i];
 8007dfe:	ed93 8a07 	vldr	s16, [r3, #28]
 8007e02:	edd3 2a08 	vldr	s5, [r3, #32]
 8007e06:	ee34 4a25 	vadd.f32	s8, s8, s11
		totalGain[0] += partials[i];
 8007e0a:	ee73 3aa7 	vadd.f32	s7, s7, s15
		totalGain[1] += partialsHigh[i];
 8007e0e:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 8007e12:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007e16:	ee33 3a20 	vadd.f32	s6, s6, s1
 8007e1a:	ed92 1a04 	vldr	s2, [r2, #16]
		totalGain[1] += partialsHigh[i];
 8007e1e:	ee34 4a08 	vadd.f32	s8, s8, s16
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007e22:	edd2 1a05 	vldr	s3, [r2, #20]
		totalGain[0] += partials[i];
 8007e26:	ee73 3aa4 	vadd.f32	s7, s7, s9
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007e2a:	ed92 0a06 	vldr	s0, [r2, #24]
 8007e2e:	ee33 3a01 	vadd.f32	s6, s6, s2
 8007e32:	ed92 2a07 	vldr	s4, [r2, #28]
		totalGain[1] += partialsHigh[i];
 8007e36:	ee34 4a22 	vadd.f32	s8, s8, s5
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007e3a:	edd2 0a0c 	vldr	s1, [r2, #48]	; 0x30
 8007e3e:	4618      	mov	r0, r3
 8007e40:	edd5 4a01 	vldr	s9, [r5, #4]
 8007e44:	ee33 3a21 	vadd.f32	s6, s6, s3
 8007e48:	ed92 8a0d 	vldr	s16, [r2, #52]	; 0x34
		totalGain[1] += partialsHigh[i];
 8007e4c:	ee34 4a06 	vadd.f32	s8, s8, s12
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007e50:	ee74 4aa0 	vadd.f32	s9, s9, s1
 8007e54:	edd2 9a0e 	vldr	s19, [r2, #56]	; 0x38
 8007e58:	ed92 9a0f 	vldr	s18, [r2, #60]	; 0x3c
 8007e5c:	ee33 3a00 	vadd.f32	s6, s6, s0
 8007e60:	edd2 0a10 	vldr	s1, [r2, #64]	; 0x40
		totalGain[1] += partialsHigh[i];
 8007e64:	ee34 4a05 	vadd.f32	s8, s8, s10
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007e68:	ee74 4a88 	vadd.f32	s9, s9, s16
 8007e6c:	edd2 7a08 	vldr	s15, [r2, #32]
 8007e70:	ee33 3a02 	vadd.f32	s6, s6, s4
 8007e74:	ed92 1a11 	vldr	s2, [r2, #68]	; 0x44
 8007e78:	ed95 5a02 	vldr	s10, [r5, #8]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	ee74 4aa9 	vadd.f32	s9, s9, s19
 8007e82:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 8007e86:	ee33 3a27 	vadd.f32	s6, s6, s15
 8007e8a:	edd2 8a12 	vldr	s17, [r2, #72]	; 0x48
 8007e8e:	ed92 0a19 	vldr	s0, [r2, #100]	; 0x64
 8007e92:	ee74 4a89 	vadd.f32	s9, s9, s18
 8007e96:	ed92 9a18 	vldr	s18, [r2, #96]	; 0x60
 8007e9a:	ee33 3a07 	vadd.f32	s6, s6, s14
 8007e9e:	edd2 5a0a 	vldr	s11, [r2, #40]	; 0x28
 8007ea2:	ee35 5a09 	vadd.f32	s10, s10, s18
 8007ea6:	ed92 8a13 	vldr	s16, [r2, #76]	; 0x4c
 8007eaa:	ee74 4aa0 	vadd.f32	s9, s9, s1
 8007eae:	ed92 2a1a 	vldr	s4, [r2, #104]	; 0x68
 8007eb2:	ee33 3a25 	vadd.f32	s6, s6, s11
 8007eb6:	edd5 5a03 	vldr	s11, [r5, #12]
 8007eba:	ee35 5a00 	vadd.f32	s10, s10, s0
 8007ebe:	edd2 1a14 	vldr	s3, [r2, #80]	; 0x50
 8007ec2:	ee74 4a81 	vadd.f32	s9, s9, s2
 8007ec6:	edd2 9a1b 	vldr	s19, [r2, #108]	; 0x6c
 8007eca:	edd2 2a15 	vldr	s5, [r2, #84]	; 0x54
 8007ece:	ee35 5a02 	vadd.f32	s10, s10, s4
 8007ed2:	ed92 9a1c 	vldr	s18, [r2, #112]	; 0x70
 8007ed6:	ee74 4aa8 	vadd.f32	s9, s9, s17
 8007eda:	edd2 8a24 	vldr	s17, [r2, #144]	; 0x90
 8007ede:	ed92 aa26 	vldr	s20, [r2, #152]	; 0x98
 8007ee2:	ee75 5aa8 	vadd.f32	s11, s11, s17
 8007ee6:	ed92 6a16 	vldr	s12, [r2, #88]	; 0x58
 8007eea:	ee74 4a88 	vadd.f32	s9, s9, s16
 8007eee:	ed92 8a25 	vldr	s16, [r2, #148]	; 0x94
 8007ef2:	ee35 5a29 	vadd.f32	s10, s10, s19
 8007ef6:	edd2 0a1d 	vldr	s1, [r2, #116]	; 0x74
 8007efa:	ee75 5a88 	vadd.f32	s11, s11, s16
 8007efe:	edd2 7a1e 	vldr	s15, [r2, #120]	; 0x78
 8007f02:	ee74 4aa1 	vadd.f32	s9, s9, s3
 8007f06:	ed92 0a1f 	vldr	s0, [r2, #124]	; 0x7c
 8007f0a:	ee35 5a09 	vadd.f32	s10, s10, s18
 8007f0e:	ed92 1a20 	vldr	s2, [r2, #128]	; 0x80
 8007f12:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8007f16:	ed92 2a21 	vldr	s4, [r2, #132]	; 0x84
 8007f1a:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8007f1e:	ed92 7a22 	vldr	s14, [r2, #136]	; 0x88
 8007f22:	edd2 9a27 	vldr	s19, [r2, #156]	; 0x9c
 8007f26:	ee35 5a20 	vadd.f32	s10, s10, s1
 8007f2a:	edd2 aa31 	vldr	s21, [r2, #196]	; 0xc4
 8007f2e:	ee74 4a86 	vadd.f32	s9, s9, s12
 8007f32:	ed95 6a04 	vldr	s12, [r5, #16]
 8007f36:	ee75 5aa9 	vadd.f32	s11, s11, s19
 8007f3a:	edd2 9a30 	vldr	s19, [r2, #192]	; 0xc0
 8007f3e:	ee35 5a27 	vadd.f32	s10, s10, s15
 8007f42:	ed92 9a28 	vldr	s18, [r2, #160]	; 0xa0
 8007f46:	ee36 6a29 	vadd.f32	s12, s12, s19
 8007f4a:	edd2 8a29 	vldr	s17, [r2, #164]	; 0xa4
 8007f4e:	ee75 5a89 	vadd.f32	s11, s11, s18
 8007f52:	ed92 aa33 	vldr	s20, [r2, #204]	; 0xcc
 8007f56:	ee35 5a00 	vadd.f32	s10, s10, s0
 8007f5a:	ed92 0a32 	vldr	s0, [r2, #200]	; 0xc8
 8007f5e:	ee36 6a2a 	vadd.f32	s12, s12, s21
 8007f62:	ed92 8a2a 	vldr	s16, [r2, #168]	; 0xa8
 8007f66:	ee75 5aa8 	vadd.f32	s11, s11, s17
 8007f6a:	edd2 9a34 	vldr	s19, [r2, #208]	; 0xd0
 8007f6e:	ee35 5a01 	vadd.f32	s10, s10, s2
 8007f72:	edd2 0a2b 	vldr	s1, [r2, #172]	; 0xac
 8007f76:	ee36 6a00 	vadd.f32	s12, s12, s0
 8007f7a:	ed92 9a35 	vldr	s18, [r2, #212]	; 0xd4
 8007f7e:	ee75 5a88 	vadd.f32	s11, s11, s16
 8007f82:	ed92 1a36 	vldr	s2, [r2, #216]	; 0xd8
 8007f86:	ee35 5a02 	vadd.f32	s10, s10, s4
 8007f8a:	edd2 1a2c 	vldr	s3, [r2, #176]	; 0xb0
 8007f8e:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8007f92:	ed92 2a37 	vldr	s4, [r2, #220]	; 0xdc
 8007f96:	ee75 5aa0 	vadd.f32	s11, s11, s1
 8007f9a:	edd2 0a3c 	vldr	s1, [r2, #240]	; 0xf0
 8007f9e:	ee35 5a07 	vadd.f32	s10, s10, s14
 8007fa2:	ed95 7a05 	vldr	s14, [r5, #20]
 8007fa6:	ee36 6a29 	vadd.f32	s12, s12, s19
 8007faa:	edd2 9a3d 	vldr	s19, [r2, #244]	; 0xf4
 8007fae:	ee77 0a20 	vadd.f32	s1, s14, s1
 8007fb2:	ed92 ba3e 	vldr	s22, [r2, #248]	; 0xf8
 8007fb6:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8007fba:	edd2 8a38 	vldr	s17, [r2, #224]	; 0xe0
 8007fbe:	ee36 6a09 	vadd.f32	s12, s12, s18
 8007fc2:	edd2 2a2d 	vldr	s5, [r2, #180]	; 0xb4
 8007fc6:	ee70 0aa9 	vadd.f32	s1, s1, s19
 8007fca:	edd2 aa3f 	vldr	s21, [r2, #252]	; 0xfc
 8007fce:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8007fd2:	edd2 7a2e 	vldr	s15, [r2, #184]	; 0xb8
 8007fd6:	ee36 6a01 	vadd.f32	s12, s12, s2
 8007fda:	ed92 8a39 	vldr	s16, [r2, #228]	; 0xe4
 8007fde:	ee70 0a8b 	vadd.f32	s1, s1, s22
 8007fe2:	ed92 7a40 	vldr	s14, [r2, #256]	; 0x100
 8007fe6:	ed92 0a3a 	vldr	s0, [r2, #232]	; 0xe8
 8007fea:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8007fee:	ee36 6a02 	vadd.f32	s12, s12, s4
 8007ff2:	ed92 aa41 	vldr	s20, [r2, #260]	; 0x104
 8007ff6:	ee70 0aaa 	vadd.f32	s1, s1, s21
 8007ffa:	edd2 9a42 	vldr	s19, [r2, #264]	; 0x108
 8007ffe:	ed92 9a43 	vldr	s18, [r2, #268]	; 0x10c
 8008002:	ee36 6a28 	vadd.f32	s12, s12, s17
 8008006:	ed92 1a44 	vldr	s2, [r2, #272]	; 0x110
 800800a:	edd2 1a45 	vldr	s3, [r2, #276]	; 0x114
 800800e:	ee70 0a87 	vadd.f32	s1, s1, s14
 8008012:	ed92 2a46 	vldr	s4, [r2, #280]	; 0x118
 8008016:	ee36 6a08 	vadd.f32	s12, s12, s16
 800801a:	edd5 2a06 	vldr	s5, [r5, #24]
 800801e:	edd2 7a48 	vldr	s15, [r2, #288]	; 0x120
 8008022:	ee70 0a8a 	vadd.f32	s1, s1, s20
 8008026:	edd2 8a54 	vldr	s17, [r2, #336]	; 0x150
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 800802a:	ee86 aa83 	vdiv.f32	s20, s13, s6
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 800802e:	ed95 7a07 	vldr	s14, [r5, #28]
 8008032:	ed92 8a60 	vldr	s16, [r2, #384]	; 0x180
 8008036:	ee72 2aa7 	vadd.f32	s5, s5, s15
 800803a:	edd5 7a08 	vldr	s15, [r5, #32]
 800803e:	ee36 6a00 	vadd.f32	s12, s12, s0
 8008042:	ed92 0a49 	vldr	s0, [r2, #292]	; 0x124
 8008046:	ee37 7a28 	vadd.f32	s14, s14, s17
 800804a:	edd2 8a5d 	vldr	s17, [r2, #372]	; 0x174
 800804e:	e033      	b.n	80080b8 <audioInit+0x428>
 8008050:	20000db8 	.word	0x20000db8
 8008054:	473b8000 	.word	0x473b8000
 8008058:	0800aa71 	.word	0x0800aa71
 800805c:	000160d8 	.word	0x000160d8
 8008060:	200015a4 	.word	0x200015a4
 8008064:	0007eb58 	.word	0x0007eb58
 8008068:	24000000 	.word	0x24000000
 800806c:	20017998 	.word	0x20017998
 8008070:	60000000 	.word	0x60000000
 8008074:	20017924 	.word	0x20017924
 8008078:	ba51b717 	.word	0xba51b717
 800807c:	00000000 	.word	0x00000000
 8008080:	3a83126f 	.word	0x3a83126f
 8008084:	20017b00 	.word	0x20017b00
 8008088:	58020400 	.word	0x58020400
 800808c:	58020800 	.word	0x58020800
 8008090:	3dba2e8c 	.word	0x3dba2e8c
 8008094:	2000072c 	.word	0x2000072c
 8008098:	20000bb4 	.word	0x20000bb4
 800809c:	20018b10 	.word	0x20018b10
 80080a0:	20017780 	.word	0x20017780
 80080a4:	2000012c 	.word	0x2000012c
 80080a8:	20000bd4 	.word	0x20000bd4
 80080ac:	20000174 	.word	0x20000174
 80080b0:	20000750 	.word	0x20000750
 80080b4:	200179f4 	.word	0x200179f4
 80080b8:	ee77 7a88 	vadd.f32	s15, s15, s16
 80080bc:	ed92 8a55 	vldr	s16, [r2, #340]	; 0x154
 80080c0:	ee72 2a80 	vadd.f32	s5, s5, s0
 80080c4:	ed92 0a61 	vldr	s0, [r2, #388]	; 0x184
 80080c8:	ee37 7a08 	vadd.f32	s14, s14, s16
 80080cc:	ed92 8a4a 	vldr	s16, [r2, #296]	; 0x128
 80080d0:	ee77 7a80 	vadd.f32	s15, s15, s0
 80080d4:	ed92 0a56 	vldr	s0, [r2, #344]	; 0x158
 80080d8:	ee72 2a88 	vadd.f32	s5, s5, s16
 80080dc:	ed92 8a62 	vldr	s16, [r2, #392]	; 0x188
 80080e0:	ee37 7a00 	vadd.f32	s14, s14, s0
 80080e4:	ed92 0a4b 	vldr	s0, [r2, #300]	; 0x12c
 80080e8:	ee77 7a88 	vadd.f32	s15, s15, s16
 80080ec:	ed92 8a57 	vldr	s16, [r2, #348]	; 0x15c
 80080f0:	ee72 2a80 	vadd.f32	s5, s5, s0
 80080f4:	ed92 0a63 	vldr	s0, [r2, #396]	; 0x18c
 80080f8:	ee37 7a08 	vadd.f32	s14, s14, s16
 80080fc:	ed92 8a4c 	vldr	s16, [r2, #304]	; 0x130
 8008100:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008104:	ed92 0a58 	vldr	s0, [r2, #352]	; 0x160
 8008108:	ee72 2a88 	vadd.f32	s5, s5, s16
 800810c:	ed92 8a64 	vldr	s16, [r2, #400]	; 0x190
 8008110:	ee37 7a00 	vadd.f32	s14, s14, s0
 8008114:	ed92 0a4d 	vldr	s0, [r2, #308]	; 0x134
 8008118:	ee77 7a88 	vadd.f32	s15, s15, s16
 800811c:	ed92 8a59 	vldr	s16, [r2, #356]	; 0x164
 8008120:	ee70 0aa9 	vadd.f32	s1, s1, s19
 8008124:	ee72 2a80 	vadd.f32	s5, s5, s0
 8008128:	ed92 0a65 	vldr	s0, [r2, #404]	; 0x194
 800812c:	ee37 7a08 	vadd.f32	s14, s14, s16
 8008130:	ed92 8a4e 	vldr	s16, [r2, #312]	; 0x138
 8008134:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008138:	ed92 0a5a 	vldr	s0, [r2, #360]	; 0x168
 800813c:	ee70 0a89 	vadd.f32	s1, s1, s18
 8008140:	ed92 9a51 	vldr	s18, [r2, #324]	; 0x144
 8008144:	ee72 2a88 	vadd.f32	s5, s5, s16
 8008148:	ed92 8a66 	vldr	s16, [r2, #408]	; 0x198
 800814c:	ee37 7a00 	vadd.f32	s14, s14, s0
 8008150:	ed92 0a4f 	vldr	s0, [r2, #316]	; 0x13c
 8008154:	ee30 1a81 	vadd.f32	s2, s1, s2
 8008158:	edd2 0a5b 	vldr	s1, [r2, #364]	; 0x16c
 800815c:	ee72 2a80 	vadd.f32	s5, s5, s0
 8008160:	ed92 0a52 	vldr	s0, [r2, #328]	; 0x148
 8008164:	ee77 7a88 	vadd.f32	s15, s15, s16
 8008168:	ed92 8a50 	vldr	s16, [r2, #320]	; 0x140
 800816c:	ee71 1a21 	vadd.f32	s3, s2, s3
 8008170:	ee72 2a88 	vadd.f32	s5, s5, s16
 8008174:	ed92 8a5c 	vldr	s16, [r2, #368]	; 0x170
 8008178:	ee37 7a20 	vadd.f32	s14, s14, s1
 800817c:	edd2 0a5e 	vldr	s1, [r2, #376]	; 0x178
 8008180:	ed92 1a67 	vldr	s2, [r2, #412]	; 0x19c
 8008184:	ee31 2a82 	vadd.f32	s4, s3, s4
 8008188:	ee72 2a89 	vadd.f32	s5, s5, s18
 800818c:	edd2 1a6a 	vldr	s3, [r2, #424]	; 0x1a8
 8008190:	ee77 7a81 	vadd.f32	s15, s15, s2
 8008194:	ed92 1a69 	vldr	s2, [r2, #420]	; 0x1a4
 8008198:	ee37 7a08 	vadd.f32	s14, s14, s16
 800819c:	ed92 8a68 	vldr	s16, [r2, #416]	; 0x1a0
 80081a0:	ee72 2a80 	vadd.f32	s5, s5, s0
 80081a4:	ed85 2a05 	vstr	s4, [r5, #20]
 80081a8:	ee77 7a88 	vadd.f32	s15, s15, s16
 80081ac:	ed85 3a00 	vstr	s6, [r5]
 80081b0:	ee37 7a28 	vadd.f32	s14, s14, s17
 80081b4:	edc6 3a00 	vstr	s7, [r6]
 80081b8:	edc5 2a06 	vstr	s5, [r5, #24]
		}
	}
	gainNormalizers[0] = 1.0f / totalGain[0];
 80081bc:	eec6 9aa3 	vdiv.f32	s19, s13, s7
 80081c0:	ed86 4a01 	vstr	s8, [r6, #4]
 80081c4:	f101 022c 	add.w	r2, r1, #44	; 0x2c
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 80081c8:	4eea      	ldr	r6, [pc, #936]	; (8008574 <audioInit+0x8e4>)
 80081ca:	edc5 4a01 	vstr	s9, [r5, #4]
 80081ce:	ed85 5a02 	vstr	s10, [r5, #8]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 80081d2:	ee77 7a81 	vadd.f32	s15, s15, s2
 80081d6:	edc5 5a03 	vstr	s11, [r5, #12]
 80081da:	ee37 7a20 	vadd.f32	s14, s14, s1
 80081de:	ed85 6a04 	vstr	s12, [r5, #16]
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 80081e2:	ee86 1a82 	vdiv.f32	s2, s13, s4
 80081e6:	ed86 aa00 	vstr	s20, [r6]
 80081ea:	ed85 7a07 	vstr	s14, [r5, #28]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 80081ee:	ee77 7aa1 	vadd.f32	s15, s15, s3
	gainNormalizers[1] = 1.0f / totalGain[1];
 80081f2:	ee86 9a84 	vdiv.f32	s18, s13, s8
 80081f6:	edc5 7a08 	vstr	s15, [r5, #32]
	gainNormalizers[0] = 1.0f / totalGain[0];
 80081fa:	4ddf      	ldr	r5, [pc, #892]	; (8008578 <audioInit+0x8e8>)
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 80081fc:	eec6 1aa2 	vdiv.f32	s3, s13, s5
	gainNormalizers[0] = 1.0f / totalGain[0];
 8008200:	edc5 9a00 	vstr	s19, [r5]
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 8008204:	eec6 8aa4 	vdiv.f32	s17, s13, s9
 8008208:	ed86 1a05 	vstr	s2, [r6, #20]
 800820c:	ee86 8a85 	vdiv.f32	s16, s13, s10
	gainNormalizers[1] = 1.0f / totalGain[1];
 8008210:	ed85 9a01 	vstr	s18, [r5, #4]
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 8008214:	ee86 0aa5 	vdiv.f32	s0, s13, s11
 8008218:	edc6 1a06 	vstr	s3, [r6, #24]
 800821c:	eec6 0a86 	vdiv.f32	s1, s13, s12
 8008220:	edc6 8a01 	vstr	s17, [r6, #4]
 8008224:	ee86 2a87 	vdiv.f32	s4, s13, s14
 8008228:	ed86 8a02 	vstr	s16, [r6, #8]
 800822c:	eec6 2aa7 	vdiv.f32	s5, s13, s15
 8008230:	ed86 0a03 	vstr	s0, [r6, #12]
 8008234:	edc6 0a04 	vstr	s1, [r6, #16]
 8008238:	ed86 2a07 	vstr	s4, [r6, #28]
 800823c:	edc6 2a08 	vstr	s5, [r6, #32]
		for (int j = 0; j < 3; j++)

		{
			for (int k = 0; k < 3; k++)
			{
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
 8008240:	edd3 6a00 	vldr	s13, [r3]
		partials[i] = partials[i] * gainNormalizers[0];
 8008244:	ed91 7a00 	vldr	s14, [r1]
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
 8008248:	ee6a 6a26 	vmul.f32	s13, s20, s13
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
 800824c:	edd0 7a00 	vldr	s15, [r0]
		partials[i] = partials[i] * gainNormalizers[0];
 8008250:	ee29 7a87 	vmul.f32	s14, s19, s14
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
 8008254:	ee69 7a27 	vmul.f32	s15, s18, s15
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
 8008258:	ece3 6a01 	vstmia	r3!, {s13}
 800825c:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
 8008260:	edd3 3a17 	vldr	s7, [r3, #92]	; 0x5c
 8008264:	ed93 4a23 	vldr	s8, [r3, #140]	; 0x8c
 8008268:	ee23 3a28 	vmul.f32	s6, s6, s17
 800826c:	edd3 4a2f 	vldr	s9, [r3, #188]	; 0xbc
 8008270:	ee63 3a88 	vmul.f32	s7, s7, s16
 8008274:	ed93 5a3b 	vldr	s10, [r3, #236]	; 0xec
 8008278:	ee24 4a00 	vmul.f32	s8, s8, s0
 800827c:	edd3 5a47 	vldr	s11, [r3, #284]	; 0x11c
 8008280:	ee64 4aa0 	vmul.f32	s9, s9, s1
 8008284:	ed93 6a53 	vldr	s12, [r3, #332]	; 0x14c
 8008288:	ee25 5a01 	vmul.f32	s10, s10, s2
 800828c:	edd3 6a5f 	vldr	s13, [r3, #380]	; 0x17c
 8008290:	ee65 5aa1 	vmul.f32	s11, s11, s3
 8008294:	ee26 6a02 	vmul.f32	s12, s12, s4
		partials[i] = partials[i] * gainNormalizers[0];
 8008298:	eca1 7a01 	vstmia	r1!, {s14}
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
 800829c:	ee66 6aa2 	vmul.f32	s13, s13, s5
	for (int i = 0; i < NUM_OVERTONES; i++)
 80082a0:	4291      	cmp	r1, r2
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
 80082a2:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
 80082a6:	edc3 3a17 	vstr	s7, [r3, #92]	; 0x5c
 80082aa:	ed83 4a23 	vstr	s8, [r3, #140]	; 0x8c
 80082ae:	edc3 4a2f 	vstr	s9, [r3, #188]	; 0xbc
 80082b2:	ed83 5a3b 	vstr	s10, [r3, #236]	; 0xec
 80082b6:	edc3 5a47 	vstr	s11, [r3, #284]	; 0x11c
 80082ba:	ed83 6a53 	vstr	s12, [r3, #332]	; 0x14c
 80082be:	edc3 6a5f 	vstr	s13, [r3, #380]	; 0x17c
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
 80082c2:	ece0 7a01 	vstmia	r0!, {s15}
	for (int i = 0; i < NUM_OVERTONES; i++)
 80082c6:	d1bb      	bne.n	8008240 <audioInit+0x5b0>
		  for (int j = 0; j < 3; j++)
		  {

			  for (int k = 0; k < 2; k++)
			  {
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
 80082c8:	ed94 8a01 	vldr	s16, [r4, #4]
 80082cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082d0:	edd4 9a00 	vldr	s19, [r4]
 80082d4:	ed94 0a04 	vldr	s0, [r4, #16]
 80082d8:	ee38 5a69 	vsub.f32	s10, s16, s19
 80082dc:	edd4 0a07 	vldr	s1, [r4, #28]
 80082e0:	edd4 5a02 	vldr	s11, [r4, #8]
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 80082e4:	eef0 7a47 	vmov.f32	s15, s14
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
 80082e8:	ed94 9a03 	vldr	s18, [r4, #12]
 80082ec:	ed94 6a05 	vldr	s12, [r4, #20]
 80082f0:	eec7 da05 	vdiv.f32	s27, s14, s10
 80082f4:	edd4 8a06 	vldr	s17, [r4, #24]
 80082f8:	edd4 6a08 	vldr	s13, [r4, #32]
 80082fc:	4c9f      	ldr	r4, [pc, #636]	; (800857c <audioInit+0x8ec>)
 80082fe:	f8df c308 	ldr.w	ip, [pc, #776]	; 8008608 <audioInit+0x978>
 8008302:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8008306:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800830a:	ee70 4a49 	vsub.f32	s9, s0, s18
 800830e:	4f9c      	ldr	r7, [pc, #624]	; (8008580 <audioInit+0x8f0>)
 8008310:	ee36 6a40 	vsub.f32	s12, s12, s0
 8008314:	4e9b      	ldr	r6, [pc, #620]	; (8008584 <audioInit+0x8f4>)
 8008316:	ee30 5ae8 	vsub.f32	s10, s1, s17
 800831a:	4d9b      	ldr	r5, [pc, #620]	; (8008588 <audioInit+0x8f8>)
 800831c:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8008320:	4b9a      	ldr	r3, [pc, #616]	; (800858c <audioInit+0x8fc>)
 8008322:	ee87 da25 	vdiv.f32	s26, s14, s11
 8008326:	489a      	ldr	r0, [pc, #616]	; (8008590 <audioInit+0x900>)
 8008328:	499a      	ldr	r1, [pc, #616]	; (8008594 <audioInit+0x904>)
 800832a:	4a9b      	ldr	r2, [pc, #620]	; (8008598 <audioInit+0x908>)
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 800832c:	eddf ca9b 	vldr	s25, [pc, #620]	; 800859c <audioInit+0x90c>
		  decayAf1[i] = decayAfParts[i] * 123.0f;
 8008330:	ed9f ca9b 	vldr	s24, [pc, #620]	; 80085a0 <audioInit+0x910>
 8008334:	eec7 ba24 	vdiv.f32	s23, s14, s9
 8008338:	ee87 ba06 	vdiv.f32	s22, s14, s12
 800833c:	eec7 aa05 	vdiv.f32	s21, s14, s10
 8008340:	ee87 aa26 	vdiv.f32	s20, s14, s13
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 8008344:	469e      	mov	lr, r3
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8008346:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 800834a:	ecf4 4a01 	vldmia	r4!, {s9}
 800834e:	3304      	adds	r3, #4
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8008350:	ed9e 7a00 	vldr	s14, [lr]
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 8008354:	ecb7 5a01 	vldmia	r7!, {s10}
	for (int i = 0; i < NUM_OVERTONES; i++)
 8008358:	45a0      	cmp	r8, r4
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 800835a:	ee87 1a87 	vdiv.f32	s2, s15, s14
 800835e:	edd3 3a17 	vldr	s7, [r3, #92]	; 0x5c
 8008362:	ed93 7a5f 	vldr	s14, [r3, #380]	; 0x17c
 8008366:	ed93 2a2f 	vldr	s4, [r3, #188]	; 0xbc
 800836a:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 800836e:	ed93 4a3b 	vldr	s8, [r3, #236]	; 0xec
 8008372:	edd3 2a53 	vldr	s5, [r3, #332]	; 0x14c
 8008376:	ee87 3a86 	vdiv.f32	s6, s15, s12
 800837a:	edd3 5a47 	vldr	s11, [r3, #284]	; 0x11c
 800837e:	eec7 1aa6 	vdiv.f32	s3, s15, s13
 8008382:	ee87 6aa3 	vdiv.f32	s12, s15, s7
 8008386:	eec7 6a84 	vdiv.f32	s13, s15, s8
 800838a:	eec7 3a82 	vdiv.f32	s7, s15, s4
 800838e:	ee87 4aa2 	vdiv.f32	s8, s15, s5
 8008392:	ee87 2aa5 	vdiv.f32	s4, s15, s11
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 8008396:	eec7 2a85 	vdiv.f32	s5, s15, s10
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 800839a:	eec7 5a87 	vdiv.f32	s11, s15, s14
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 800839e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 80083a2:	ee33 eae1 	vsub.f32	s28, s7, s3
 80083a6:	ee73 4a41 	vsub.f32	s9, s6, s2
 80083aa:	ee36 6a43 	vsub.f32	s12, s12, s6
 80083ae:	ee76 6ae3 	vsub.f32	s13, s13, s7
 80083b2:	ee34 5a42 	vsub.f32	s10, s8, s4
 80083b6:	ee64 4aad 	vmul.f32	s9, s9, s27
 80083ba:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80083be:	ee26 6a0d 	vmul.f32	s12, s12, s26
 80083c2:	ee2e ea2b 	vmul.f32	s28, s28, s23
 80083c6:	ece0 4a01 	vstmia	r0!, {s9}
 80083ca:	ee66 6a8b 	vmul.f32	s13, s13, s22
 80083ce:	ee25 5a2a 	vmul.f32	s10, s10, s21
 80083d2:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 80083d6:	ee37 7a62 	vsub.f32	s14, s14, s5
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 80083da:	ed80 ea17 	vstr	s28, [r0, #92]	; 0x5c
 80083de:	ee65 5a8a 	vmul.f32	s11, s11, s20
 80083e2:	edc0 6a23 	vstr	s13, [r0, #140]	; 0x8c

				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 80083e6:	ee69 4aa4 	vmul.f32	s9, s19, s9
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 80083ea:	ed80 5a2f 	vstr	s10, [r0, #188]	; 0xbc
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 80083ee:	ee27 7a2c 	vmul.f32	s14, s14, s25
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 80083f2:	ee28 6a06 	vmul.f32	s12, s16, s12
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 80083f6:	edc0 5a3b 	vstr	s11, [r0, #236]	; 0xec
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 80083fa:	ee29 ea0e 	vmul.f32	s28, s18, s28
 80083fe:	ece1 4a01 	vstmia	r1!, {s9}
 8008402:	ee60 6a26 	vmul.f32	s13, s0, s13
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 8008406:	ecac 7a01 	vstmia	ip!, {s14}
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 800840a:	ee28 5a85 	vmul.f32	s10, s17, s10
 800840e:	ed81 6a0b 	vstr	s12, [r1, #44]	; 0x2c
 8008412:	ee60 5aa5 	vmul.f32	s11, s1, s11
 8008416:	ed81 ea17 	vstr	s28, [r1, #92]	; 0x5c
		  decayAf1[i] = decayAfParts[i] * 123.0f;
 800841a:	ee27 7a0c 	vmul.f32	s14, s14, s24
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 800841e:	edc1 6a23 	vstr	s13, [r1, #140]	; 0x8c

				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 8008422:	ee71 4a64 	vsub.f32	s9, s2, s9
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 8008426:	ed81 5a2f 	vstr	s10, [r1, #188]	; 0xbc
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 800842a:	ee33 6a46 	vsub.f32	s12, s6, s12
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 800842e:	edc1 5a3b 	vstr	s11, [r1, #236]	; 0xec
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 8008432:	ee71 1ace 	vsub.f32	s3, s3, s28
		  decayAf1[i] = decayAfParts[i] * 123.0f;
 8008436:	eca6 7a01 	vstmia	r6!, {s14}
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 800843a:	ee73 6ae6 	vsub.f32	s13, s7, s13
 800843e:	ece2 4a01 	vstmia	r2!, {s9}
 8008442:	ee32 5a45 	vsub.f32	s10, s4, s10
 8008446:	ed82 6a0b 	vstr	s12, [r2, #44]	; 0x2c
 800844a:	ee74 5a65 	vsub.f32	s11, s8, s11
 800844e:	edc2 1a17 	vstr	s3, [r2, #92]	; 0x5c
		  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
 8008452:	ee32 7ac7 	vsub.f32	s14, s5, s14
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 8008456:	edc2 6a23 	vstr	s13, [r2, #140]	; 0x8c
 800845a:	ed82 5a2f 	vstr	s10, [r2, #188]	; 0xbc
 800845e:	edc2 5a3b 	vstr	s11, [r2, #236]	; 0xec
		  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
 8008462:	eca5 7a01 	vstmia	r5!, {s14}
	for (int i = 0; i < NUM_OVERTONES; i++)
 8008466:	f47f af6d 	bne.w	8008344 <audioInit+0x6b4>
 800846a:	4c4e      	ldr	r4, [pc, #312]	; (80085a4 <audioInit+0x914>)

	}

	for (int i = 0; i < 256; i++)
	{
		randomFactors[i] = randomNumber() + 0.5f;
 800846c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8008470:	f504 6580 	add.w	r5, r4, #1024	; 0x400
 8008474:	f002 fafc 	bl	800aa70 <randomNumber>
 8008478:	ee30 0a08 	vadd.f32	s0, s0, s16
 800847c:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 256; i++)
 8008480:	42ac      	cmp	r4, r5
 8008482:	d1f7      	bne.n	8008474 <audioInit+0x7e4>
 8008484:	4b48      	ldr	r3, [pc, #288]	; (80085a8 <audioInit+0x918>)
 8008486:	f04f 0800 	mov.w	r8, #0
 800848a:	f8df b180 	ldr.w	fp, [pc, #384]	; 800860c <audioInit+0x97c>
 800848e:	9306      	str	r3, [sp, #24]
 8008490:	4b46      	ldr	r3, [pc, #280]	; (80085ac <audioInit+0x91c>)
		//tWaveSynth_init(&wt[i], wtab[0], 2048, tableSizes[0], 20000.0f, &leaf);
		//tWaveSynth_setAntiAliasing(&wt[i], 1.0f);

		for (int j = 0; j < NUM_OVERTONES; j++)
		{
			tCycle_init(&additive[i][j], &leaf);
 8008492:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8008610 <audioInit+0x980>
 8008496:	9307      	str	r3, [sp, #28]
 8008498:	4b39      	ldr	r3, [pc, #228]	; (8008580 <audioInit+0x8f0>)
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 800849a:	4f45      	ldr	r7, [pc, #276]	; (80085b0 <audioInit+0x920>)
 800849c:	f103 092c 	add.w	r9, r3, #44	; 0x2c
 80084a0:	4b44      	ldr	r3, [pc, #272]	; (80085b4 <audioInit+0x924>)
 80084a2:	ed9f 8a45 	vldr	s16, [pc, #276]	; 80085b8 <audioInit+0x928>
 80084a6:	9303      	str	r3, [sp, #12]
 80084a8:	4b44      	ldr	r3, [pc, #272]	; (80085bc <audioInit+0x92c>)
		//tSawtooth_setFreq(&saws[i], 110.0f * ((float)i+1.0f));
		//tSimpleLivingString2_initToPool(&stringsS[i], 100.0f, .9f, 0.9999f, .0f, 0.01f, 0.01f, 0, &largePool);
		tLivingString2_initToPool(&strings[i], 100.0f, 0.6f, 0.3f, .9f, 0.0f, .9999f, .9999f, 0.0f, 0.05f, 0.05f, 1, &largePool);
		tLivingString2_setBrightness(&strings[i], .99f);
		tLivingString2_setPickPos(&strings[i], .5f);
		tLivingString2_setPrepPos(&strings[i], .4f);
 80084aa:	ed9f aa45 	vldr	s20, [pc, #276]	; 80085c0 <audioInit+0x930>
 80084ae:	9304      	str	r3, [sp, #16]
		tLivingString2_setPrepIndex(&strings[i], 0.0f);
		tLivingString2_setPickupPos(&strings[i], 1.0f);
		tExpSmooth_init(&smoother[i],0.0f, 0.002f, &leaf);
		tVZFilter_init(&filts[i], Lowpass, 8000.0f, 6.1f, &leaf);

		tADSRT_init(&fenvelopes[i], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80084b0:	eddf 9a44 	vldr	s19, [pc, #272]	; 80085c4 <audioInit+0x934>
 80084b4:	4b44      	ldr	r3, [pc, #272]	; (80085c8 <audioInit+0x938>)
		tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.01f, &leaf);
 80084b6:	eddf aa45 	vldr	s21, [pc, #276]	; 80085cc <audioInit+0x93c>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 80084ba:	f8cd 8008 	str.w	r8, [sp, #8]
 80084be:	9305      	str	r3, [sp, #20]
		for (int j = 0; j < NUM_OVERTONES; j++)
 80084c0:	9b02      	ldr	r3, [sp, #8]
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
 80084c2:	4e2f      	ldr	r6, [pc, #188]	; (8008580 <audioInit+0x8f0>)
 80084c4:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
 80084c8:	4b41      	ldr	r3, [pc, #260]	; (80085d0 <audioInit+0x940>)
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80084ca:	ed9f 9a42 	vldr	s18, [pc, #264]	; 80085d4 <audioInit+0x944>
 80084ce:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80084d2:	4b41      	ldr	r3, [pc, #260]	; (80085d8 <audioInit+0x948>)
 80084d4:	eddf 8a41 	vldr	s17, [pc, #260]	; 80085dc <audioInit+0x94c>
 80084d8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
			tCycle_init(&additive[i][j], &leaf);
 80084dc:	4628      	mov	r0, r5
 80084de:	4651      	mov	r1, sl
 80084e0:	f004 fb74 	bl	800cbcc <tCycle_init>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80084e4:	ecf6 0a01 	vldmia	r6!, {s1}
 80084e8:	4620      	mov	r0, r4
 80084ea:	eef0 1a68 	vmov.f32	s3, s17
 80084ee:	ee60 0a89 	vmul.f32	s1, s1, s18
 80084f2:	4653      	mov	r3, sl
 80084f4:	eeb0 1a48 	vmov.f32	s2, s16
 80084f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80084fc:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8008500:	4639      	mov	r1, r7
 8008502:	f003 fa29 	bl	800b958 <tADSRT_init>
		for (int j = 0; j < NUM_OVERTONES; j++)
 8008506:	454e      	cmp	r6, r9
 8008508:	f105 0504 	add.w	r5, r5, #4
 800850c:	f104 0404 	add.w	r4, r4, #4
 8008510:	d1e4      	bne.n	80084dc <audioInit+0x84c>
		tEfficientSVF_init(&filts2[i], SVFTypeLowpass, 4000, 0.5f, &leaf);
 8008512:	4833      	ldr	r0, [pc, #204]	; (80085e0 <audioInit+0x950>)
 8008514:	4653      	mov	r3, sl
 8008516:	4c33      	ldr	r4, [pc, #204]	; (80085e4 <audioInit+0x954>)
 8008518:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800851c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8008520:	2101      	movs	r1, #1
 8008522:	4440      	add	r0, r8
 8008524:	4444      	add	r4, r8
 8008526:	f003 fd8d 	bl	800c044 <tEfficientSVF_init>
		tLivingString2_initToPool(&strings[i], 100.0f, 0.6f, 0.3f, .9f, 0.0f, .9999f, .9999f, 0.0f, 0.05f, 0.05f, 1, &largePool);
 800852a:	eddf 4a2f 	vldr	s9, [pc, #188]	; 80085e8 <audioInit+0x958>
 800852e:	ed9f 3a2f 	vldr	s6, [pc, #188]	; 80085ec <audioInit+0x95c>
 8008532:	eef0 3a48 	vmov.f32	s7, s16
 8008536:	eeb0 4a64 	vmov.f32	s8, s9
 800853a:	ed9f 2a1f 	vldr	s4, [pc, #124]	; 80085b8 <audioInit+0x928>
 800853e:	eef0 2a43 	vmov.f32	s5, s6
 8008542:	eddf 1a2b 	vldr	s3, [pc, #172]	; 80085f0 <audioInit+0x960>
 8008546:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 80085f4 <audioInit+0x964>
 800854a:	2101      	movs	r1, #1
 800854c:	4a2a      	ldr	r2, [pc, #168]	; (80085f8 <audioInit+0x968>)
 800854e:	4620      	mov	r0, r4
 8008550:	eddf 0a2a 	vldr	s1, [pc, #168]	; 80085fc <audioInit+0x96c>
 8008554:	eb08 0548 	add.w	r5, r8, r8, lsl #1
 8008558:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8008600 <audioInit+0x970>
 800855c:	9e05      	ldr	r6, [sp, #20]
 800855e:	9401      	str	r4, [sp, #4]
 8008560:	f004 fc5c 	bl	800ce1c <tLivingString2_initToPool>
		tLivingString2_setBrightness(&strings[i], .99f);
 8008564:	9801      	ldr	r0, [sp, #4]
 8008566:	f1a6 040c 	sub.w	r4, r6, #12
 800856a:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8008604 <audioInit+0x974>
 800856e:	f004 fe03 	bl	800d178 <tLivingString2_setBrightness>
 8008572:	e04f      	b.n	8008614 <audioInit+0x984>
 8008574:	20017adc 	.word	0x20017adc
 8008578:	20000bb8 	.word	0x20000bb8
 800857c:	200000e4 	.word	0x200000e4
 8008580:	2000009c 	.word	0x2000009c
 8008584:	20000f84 	.word	0x20000f84
 8008588:	2001799c 	.word	0x2001799c
 800858c:	2000057c 	.word	0x2000057c
 8008590:	20018c34 	.word	0x20018c34
 8008594:	20018b14 	.word	0x20018b14
 8008598:	20000bfc 	.word	0x20000bfc
 800859c:	3b84a9fa 	.word	0x3b84a9fa
 80085a0:	42f60000 	.word	0x42f60000
 80085a4:	20018e1c 	.word	0x20018e1c
 80085a8:	2000006c 	.word	0x2000006c
 80085ac:	2000003c 	.word	0x2000003c
 80085b0:	20017b00 	.word	0x20017b00
 80085b4:	20000fd0 	.word	0x20000fd0
 80085b8:	00000000 	.word	0x00000000
 80085bc:	20017a48 	.word	0x20017a48
 80085c0:	3ecccccd 	.word	0x3ecccccd
 80085c4:	43480000 	.word	0x43480000
 80085c8:	200176a8 	.word	0x200176a8
 80085cc:	3c23d70a 	.word	0x3c23d70a
 80085d0:	20017804 	.word	0x20017804
 80085d4:	447a0000 	.word	0x447a0000
 80085d8:	20000e08 	.word	0x20000e08
 80085dc:	43160000 	.word	0x43160000
 80085e0:	2001767c 	.word	0x2001767c
 80085e4:	20017928 	.word	0x20017928
 80085e8:	3d4ccccd 	.word	0x3d4ccccd
 80085ec:	3f7ff972 	.word	0x3f7ff972
 80085f0:	3f666666 	.word	0x3f666666
 80085f4:	3e99999a 	.word	0x3e99999a
 80085f8:	20017924 	.word	0x20017924
 80085fc:	3f19999a 	.word	0x3f19999a
 8008600:	42c80000 	.word	0x42c80000
 8008604:	3f7d70a4 	.word	0x3f7d70a4
 8008608:	20017724 	.word	0x20017724
 800860c:	20018d60 	.word	0x20018d60
 8008610:	20000db8 	.word	0x20000db8
		tLivingString2_setPickPos(&strings[i], .5f);
 8008614:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8008618:	9801      	ldr	r0, [sp, #4]
 800861a:	f004 fd69 	bl	800d0f0 <tLivingString2_setPickPos>
		tLivingString2_setPrepPos(&strings[i], .4f);
 800861e:	eeb0 0a4a 	vmov.f32	s0, s20
 8008622:	9801      	ldr	r0, [sp, #4]
 8008624:	f004 fd76 	bl	800d114 <tLivingString2_setPrepPos>
		tLivingString2_setPrepIndex(&strings[i], 0.0f);
 8008628:	eeb0 0a48 	vmov.f32	s0, s16
 800862c:	9801      	ldr	r0, [sp, #4]
 800862e:	f004 fd95 	bl	800d15c <tLivingString2_setPrepIndex>
		tLivingString2_setPickupPos(&strings[i], 1.0f);
 8008632:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008636:	9801      	ldr	r0, [sp, #4]
 8008638:	f004 fd7e 	bl	800d138 <tLivingString2_setPickupPos>
		tExpSmooth_init(&smoother[i],0.0f, 0.002f, &leaf);
 800863c:	4be8      	ldr	r3, [pc, #928]	; (80089e0 <audioInit+0xd50>)
 800863e:	eeb0 0a48 	vmov.f32	s0, s16
 8008642:	4651      	mov	r1, sl
 8008644:	eb03 0008 	add.w	r0, r3, r8
 8008648:	eddf 0ae6 	vldr	s1, [pc, #920]	; 80089e4 <audioInit+0xd54>
 800864c:	f003 fc56 	bl	800befc <tExpSmooth_init>
		tVZFilter_init(&filts[i], Lowpass, 8000.0f, 6.1f, &leaf);
 8008650:	4be5      	ldr	r3, [pc, #916]	; (80089e8 <audioInit+0xd58>)
 8008652:	4652      	mov	r2, sl
 8008654:	eddf 0ae5 	vldr	s1, [pc, #916]	; 80089ec <audioInit+0xd5c>
 8008658:	eb03 0008 	add.w	r0, r3, r8
 800865c:	2101      	movs	r1, #1
 800865e:	ed9f 0ae4 	vldr	s0, [pc, #912]	; 80089f0 <audioInit+0xd60>
 8008662:	f003 ffed 	bl	800c640 <tVZFilter_init>
		tADSRT_init(&fenvelopes[i], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8008666:	48e3      	ldr	r0, [pc, #908]	; (80089f4 <audioInit+0xd64>)
 8008668:	eef0 1a69 	vmov.f32	s3, s19
 800866c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008670:	eeb0 1a48 	vmov.f32	s2, s16
 8008674:	4653      	mov	r3, sl
 8008676:	4639      	mov	r1, r7
 8008678:	eddf 0adf 	vldr	s1, [pc, #892]	; 80089f8 <audioInit+0xd68>
 800867c:	4440      	add	r0, r8
 800867e:	ed9f 0adf 	vldr	s0, [pc, #892]	; 80089fc <audioInit+0xd6c>
 8008682:	f003 f969 	bl	800b958 <tADSRT_init>
		tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.01f, &leaf);
 8008686:	4bde      	ldr	r3, [pc, #888]	; (8008a00 <audioInit+0xd70>)
 8008688:	eef0 0a6a 	vmov.f32	s1, s21
 800868c:	4651      	mov	r1, sl
 800868e:	eb03 0008 	add.w	r0, r3, r8
 8008692:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008696:	f003 fc31 	bl	800befc <tExpSmooth_init>
		tPBPulse_init(&pulseW[i], &leaf);
 800869a:	4bda      	ldr	r3, [pc, #872]	; (8008a04 <audioInit+0xd74>)
 800869c:	4651      	mov	r1, sl
 800869e:	eb03 0008 	add.w	r0, r3, r8
 80086a2:	f004 fae7 	bl	800cc74 <tPBPulse_init>
		for (int j = 0; j < NUM_LFOS; j++)
 80086a6:	4bd8      	ldr	r3, [pc, #864]	; (8008a08 <audioInit+0xd78>)
 80086a8:	441d      	add	r5, r3
		{
			tCycle_init(&LFOs[i][j], &leaf);
 80086aa:	4620      	mov	r0, r4
 80086ac:	4651      	mov	r1, sl
 80086ae:	3404      	adds	r4, #4
 80086b0:	f004 fa8c 	bl	800cbcc <tCycle_init>
			LFOdetunes[i][j] = randomNumber() * 0.4f;
 80086b4:	f002 f9dc 	bl	800aa70 <randomNumber>
 80086b8:	ee20 0a0a 	vmul.f32	s0, s0, s20
		for (int j = 0; j < NUM_LFOS; j++)
 80086bc:	42b4      	cmp	r4, r6
			LFOdetunes[i][j] = randomNumber() * 0.4f;
 80086be:	eca5 0a01 	vstmia	r5!, {s0}
		for (int j = 0; j < NUM_LFOS; j++)
 80086c2:	d1f2      	bne.n	80086aa <audioInit+0xa1a>
 80086c4:	f1ab 040c 	sub.w	r4, fp, #12
		}
		for (int j = 0; j < NUM_ENVS; j++)
		{
			tADSRT_init(&envelopes[i][j], 5.0f, 300.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80086c8:	ed9f 9ad0 	vldr	s18, [pc, #832]	; 8008a0c <audioInit+0xd7c>
			tADSRT_setLeakFactor(&envelopes[i][j], 0.999999f);
 80086cc:	eddf 8ad0 	vldr	s17, [pc, #832]	; 8008a10 <audioInit+0xd80>
			tADSRT_init(&envelopes[i][j], 5.0f, 300.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80086d0:	4620      	mov	r0, r4
 80086d2:	eef0 1a69 	vmov.f32	s3, s19
 80086d6:	eeb0 1a48 	vmov.f32	s2, s16
 80086da:	4653      	mov	r3, sl
 80086dc:	eef0 0a49 	vmov.f32	s1, s18
 80086e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086e4:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80086e8:	4639      	mov	r1, r7
 80086ea:	f003 f935 	bl	800b958 <tADSRT_init>
			tADSRT_setLeakFactor(&envelopes[i][j], 0.999999f);
 80086ee:	4620      	mov	r0, r4
 80086f0:	3404      	adds	r4, #4
 80086f2:	eeb0 0a68 	vmov.f32	s0, s17
 80086f6:	f003 f9b9 	bl	800ba6c <tADSRT_setLeakFactor>
		for (int j = 0; j < NUM_ENVS; j++)
 80086fa:	455c      	cmp	r4, fp
 80086fc:	d1e8      	bne.n	80086d0 <audioInit+0xa40>
 80086fe:	2400      	movs	r4, #0
		}
		for (int j = 0; j < 2; j++)
		{
			tCycle_init(&mySine[i][j], &leaf);
			tCycle_setFreq(&mySine[i][j], (randomNumber() * 0.1f) + 0.001f);
 8008700:	ed9f 9ac4 	vldr	s18, [pc, #784]	; 8008a14 <audioInit+0xd84>
 8008704:	eddf 8ac4 	vldr	s17, [pc, #784]	; 8008a18 <audioInit+0xd88>
 8008708:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
			tCycle_init(&mySine[i][j], &leaf);
 800870c:	1928      	adds	r0, r5, r4
 800870e:	4651      	mov	r1, sl
 8008710:	9001      	str	r0, [sp, #4]
 8008712:	f004 fa5b 	bl	800cbcc <tCycle_init>
			tCycle_setFreq(&mySine[i][j], (randomNumber() * 0.1f) + 0.001f);
 8008716:	f002 f9ab 	bl	800aa70 <randomNumber>
 800871a:	eef0 7a68 	vmov.f32	s15, s17
 800871e:	9801      	ldr	r0, [sp, #4]
 8008720:	eee0 7a09 	vfma.f32	s15, s0, s18
 8008724:	eeb0 0a67 	vmov.f32	s0, s15
 8008728:	f004 fa6c 	bl	800cc04 <tCycle_setFreq>
			tFeedbackLeveler_init(&levelers[i][j], 1.0f, 0.01f, 0.01f, 0, &leaf);
 800872c:	1930      	adds	r0, r6, r4
 800872e:	3404      	adds	r4, #4
 8008730:	eeb0 1a6a 	vmov.f32	s2, s21
 8008734:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008738:	4652      	mov	r2, sl
 800873a:	2100      	movs	r1, #0
 800873c:	eddf 0ab7 	vldr	s1, [pc, #732]	; 8008a1c <audioInit+0xd8c>
 8008740:	f003 f888 	bl	800b854 <tFeedbackLeveler_init>
		for (int j = 0; j < 2; j++)
 8008744:	2c08      	cmp	r4, #8
 8008746:	d1e1      	bne.n	800870c <audioInit+0xa7c>
		}
		openStringFrequencies[i] = mtof(openStringMidinotes[i]);
 8008748:	9b06      	ldr	r3, [sp, #24]
 800874a:	f108 0804 	add.w	r8, r8, #4
 800874e:	f10b 0b0c 	add.w	fp, fp, #12
 8008752:	ecb3 0a01 	vldmia	r3!, {s0}
 8008756:	9306      	str	r3, [sp, #24]
 8008758:	f004 f87e 	bl	800c858 <mtof>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 800875c:	9b02      	ldr	r3, [sp, #8]
 800875e:	f1b8 0f10 	cmp.w	r8, #16
 8008762:	f103 0301 	add.w	r3, r3, #1
 8008766:	9302      	str	r3, [sp, #8]
 8008768:	9b03      	ldr	r3, [sp, #12]
 800876a:	f103 0308 	add.w	r3, r3, #8
 800876e:	9303      	str	r3, [sp, #12]
 8008770:	9b04      	ldr	r3, [sp, #16]
 8008772:	f103 0308 	add.w	r3, r3, #8
 8008776:	9304      	str	r3, [sp, #16]
 8008778:	9b05      	ldr	r3, [sp, #20]
 800877a:	f103 030c 	add.w	r3, r3, #12
 800877e:	9305      	str	r3, [sp, #20]
		openStringFrequencies[i] = mtof(openStringMidinotes[i]);
 8008780:	9b07      	ldr	r3, [sp, #28]
 8008782:	eca3 0a01 	vstmia	r3!, {s0}
 8008786:	9307      	str	r3, [sp, #28]
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8008788:	f47f ae9a 	bne.w	80084c0 <audioInit+0x830>
	}
	tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
 800878c:	4aa4      	ldr	r2, [pc, #656]	; (8008a20 <audioInit+0xd90>)
 800878e:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8008792:	4ca4      	ldr	r4, [pc, #656]	; (8008a24 <audioInit+0xd94>)
 8008794:	2103      	movs	r1, #3
	tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
	for (int i = 0; i < 12; i++)
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.02f, &leaf);
 8008796:	4615      	mov	r5, r2
	tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
 8008798:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8008a28 <audioInit+0xd98>
 800879c:	48a3      	ldr	r0, [pc, #652]	; (8008a2c <audioInit+0xd9c>)
 800879e:	f104 0630 	add.w	r6, r4, #48	; 0x30
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.02f, &leaf);
 80087a2:	eddf 8aa3 	vldr	s17, [pc, #652]	; 8008a30 <audioInit+0xda0>
	tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
 80087a6:	f003 ff4b 	bl	800c640 <tVZFilter_init>
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.02f, &leaf);
 80087aa:	ed9f 8a94 	vldr	s16, [pc, #592]	; 80089fc <audioInit+0xd6c>
	tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
 80087ae:	462a      	mov	r2, r5
 80087b0:	2101      	movs	r1, #1
 80087b2:	eddf 0aa0 	vldr	s1, [pc, #640]	; 8008a34 <audioInit+0xda4>
 80087b6:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8008a38 <audioInit+0xda8>
 80087ba:	48a0      	ldr	r0, [pc, #640]	; (8008a3c <audioInit+0xdac>)
 80087bc:	f003 ff40 	bl	800c640 <tVZFilter_init>
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.02f, &leaf);
 80087c0:	4620      	mov	r0, r4
 80087c2:	3404      	adds	r4, #4
 80087c4:	eef0 0a68 	vmov.f32	s1, s17
 80087c8:	4629      	mov	r1, r5
 80087ca:	eeb0 0a48 	vmov.f32	s0, s16
 80087ce:	f003 fb95 	bl	800befc <tExpSmooth_init>
	for (int i = 0; i < 12; i++)
 80087d2:	42b4      	cmp	r4, r6
 80087d4:	d1f4      	bne.n	80087c0 <audioInit+0xb30>
 80087d6:	4c9a      	ldr	r4, [pc, #616]	; (8008a40 <audioInit+0xdb0>)
 80087d8:	4d9a      	ldr	r5, [pc, #616]	; (8008a44 <audioInit+0xdb4>)
 80087da:	f504 76f0 	add.w	r6, r4, #480	; 0x1e0
	}
	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < NUM_STRINGS; j++)
		{
			pedals[i][j] = pow(2.0, (pedalsInCents[i][j] / 1200.0));
 80087de:	ed9f 9b7c 	vldr	d9, [pc, #496]	; 80089d0 <audioInit+0xd40>
 80087e2:	ed9f 8b7d 	vldr	d8, [pc, #500]	; 80089d8 <audioInit+0xd48>
 80087e6:	ed94 0a00 	vldr	s0, [r4]
 80087ea:	3430      	adds	r4, #48	; 0x30
 80087ec:	3530      	adds	r5, #48	; 0x30
 80087ee:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80087f2:	ee20 0b09 	vmul.f64	d0, d0, d9
 80087f6:	ee20 0b08 	vmul.f64	d0, d0, d8
 80087fa:	f004 ff95 	bl	800d728 <exp>
 80087fe:	ed14 7a0b 	vldr	s14, [r4, #-44]	; 0xffffffd4
 8008802:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008806:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800880a:	ed05 0a0c 	vstr	s0, [r5, #-48]	; 0xffffffd0
 800880e:	ee27 0b09 	vmul.f64	d0, d7, d9
 8008812:	ee20 0b08 	vmul.f64	d0, d0, d8
 8008816:	f004 ff87 	bl	800d728 <exp>
 800881a:	ed14 7a0a 	vldr	s14, [r4, #-40]	; 0xffffffd8
 800881e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008822:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8008826:	ed05 0a0b 	vstr	s0, [r5, #-44]	; 0xffffffd4
 800882a:	ee27 0b09 	vmul.f64	d0, d7, d9
 800882e:	ee20 0b08 	vmul.f64	d0, d0, d8
 8008832:	f004 ff79 	bl	800d728 <exp>
 8008836:	ed14 7a09 	vldr	s14, [r4, #-36]	; 0xffffffdc
 800883a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800883e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8008842:	ed05 0a0a 	vstr	s0, [r5, #-40]	; 0xffffffd8
 8008846:	ee27 0b09 	vmul.f64	d0, d7, d9
 800884a:	ee20 0b08 	vmul.f64	d0, d0, d8
 800884e:	f004 ff6b 	bl	800d728 <exp>
 8008852:	ed14 7a08 	vldr	s14, [r4, #-32]	; 0xffffffe0
 8008856:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800885a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800885e:	ed05 0a09 	vstr	s0, [r5, #-36]	; 0xffffffdc
 8008862:	ee27 0b09 	vmul.f64	d0, d7, d9
 8008866:	ee20 0b08 	vmul.f64	d0, d0, d8
 800886a:	f004 ff5d 	bl	800d728 <exp>
 800886e:	ed14 7a07 	vldr	s14, [r4, #-28]	; 0xffffffe4
 8008872:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008876:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800887a:	ed05 0a08 	vstr	s0, [r5, #-32]	; 0xffffffe0
 800887e:	ee27 0b09 	vmul.f64	d0, d7, d9
 8008882:	ee20 0b08 	vmul.f64	d0, d0, d8
 8008886:	f004 ff4f 	bl	800d728 <exp>
 800888a:	ed14 7a06 	vldr	s14, [r4, #-24]	; 0xffffffe8
 800888e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008892:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8008896:	ed05 0a07 	vstr	s0, [r5, #-28]	; 0xffffffe4
 800889a:	ee27 0b09 	vmul.f64	d0, d7, d9
 800889e:	ee20 0b08 	vmul.f64	d0, d0, d8
 80088a2:	f004 ff41 	bl	800d728 <exp>
 80088a6:	ed14 7a05 	vldr	s14, [r4, #-20]	; 0xffffffec
 80088aa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80088ae:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80088b2:	ed05 0a06 	vstr	s0, [r5, #-24]	; 0xffffffe8
 80088b6:	ee27 0b09 	vmul.f64	d0, d7, d9
 80088ba:	ee20 0b08 	vmul.f64	d0, d0, d8
 80088be:	f004 ff33 	bl	800d728 <exp>
 80088c2:	ed14 7a04 	vldr	s14, [r4, #-16]
 80088c6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80088ca:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80088ce:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 80088d2:	ee27 0b09 	vmul.f64	d0, d7, d9
 80088d6:	ee20 0b08 	vmul.f64	d0, d0, d8
 80088da:	f004 ff25 	bl	800d728 <exp>
 80088de:	ed14 7a03 	vldr	s14, [r4, #-12]
 80088e2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80088e6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80088ea:	ed05 0a04 	vstr	s0, [r5, #-16]
 80088ee:	ee27 0b09 	vmul.f64	d0, d7, d9
 80088f2:	ee20 0b08 	vmul.f64	d0, d0, d8
 80088f6:	f004 ff17 	bl	800d728 <exp>
 80088fa:	ed14 7a02 	vldr	s14, [r4, #-8]
 80088fe:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008902:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8008906:	ed05 0a03 	vstr	s0, [r5, #-12]
 800890a:	ee27 0b09 	vmul.f64	d0, d7, d9
 800890e:	ee20 0b08 	vmul.f64	d0, d0, d8
 8008912:	f004 ff09 	bl	800d728 <exp>
 8008916:	ed14 7a01 	vldr	s14, [r4, #-4]
 800891a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800891e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8008922:	ed05 0a02 	vstr	s0, [r5, #-8]
 8008926:	ee27 0b09 	vmul.f64	d0, d7, d9
 800892a:	ee20 0b08 	vmul.f64	d0, d0, d8
 800892e:	f004 fefb 	bl	800d728 <exp>
	for (int i = 0; i < 10; i++)
 8008932:	42b4      	cmp	r4, r6
			pedals[i][j] = pow(2.0, (pedalsInCents[i][j] / 1200.0));
 8008934:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008938:	ed05 0a01 	vstr	s0, [r5, #-4]
	for (int i = 0; i < 10; i++)
 800893c:	f47f af53 	bne.w	80087e6 <audioInit+0xb56>
		}
	}
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 8008940:	4c41      	ldr	r4, [pc, #260]	; (8008a48 <audioInit+0xdb8>)
	for (int i = 0; i < 4; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8008942:	4e37      	ldr	r6, [pc, #220]	; (8008a20 <audioInit+0xd90>)
 8008944:	eddf 8a41 	vldr	s17, [pc, #260]	; 8008a4c <audioInit+0xdbc>
 8008948:	f104 0510 	add.w	r5, r4, #16
 800894c:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 80089fc <audioInit+0xd6c>
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 8008950:	4631      	mov	r1, r6
 8008952:	eef0 0a68 	vmov.f32	s1, s17
 8008956:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80089fc <audioInit+0xd6c>
 800895a:	483d      	ldr	r0, [pc, #244]	; (8008a50 <audioInit+0xdc0>)
 800895c:	f003 face 	bl	800befc <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8008960:	4620      	mov	r0, r4
 8008962:	3404      	adds	r4, #4
 8008964:	eef0 0a68 	vmov.f32	s1, s17
 8008968:	4631      	mov	r1, r6
 800896a:	eeb0 0a48 	vmov.f32	s0, s16
 800896e:	f003 fac5 	bl	800befc <tExpSmooth_init>
	for (int i = 0; i < 4; i++)
 8008972:	42ac      	cmp	r4, r5
 8008974:	d1f4      	bne.n	8008960 <audioInit+0xcd0>
	}
	//loadingPreset = 1;
	//previousPreset = PresetNil;
	tNoise_init(&myNoise, WhiteNoise, &leaf);
 8008976:	4a2a      	ldr	r2, [pc, #168]	; (8008a20 <audioInit+0xd90>)
 8008978:	2100      	movs	r1, #0
 800897a:	4836      	ldr	r0, [pc, #216]	; (8008a54 <audioInit+0xdc4>)
 800897c:	f004 f9ec 	bl	800cd58 <tNoise_init>



	//HAL_Delay(100 * firstString);

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8008980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008984:	2100      	movs	r1, #0
 8008986:	4834      	ldr	r0, [pc, #208]	; (8008a58 <audioInit+0xdc8>)
 8008988:	f004 fec4 	bl	800d714 <memset>
	{
		audioOutBuffer[i] = 0;
	}

	HAL_Delay(1000);
 800898c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008990:	f7f7 fd0a 	bl	80003a8 <HAL_Delay>

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8008994:	ee1f 0a10 	vmov	r0, s30
 8008998:	2280      	movs	r2, #128	; 0x80
 800899a:	492f      	ldr	r1, [pc, #188]	; (8008a58 <audioInit+0xdc8>)
 800899c:	f7fb ffdc 	bl	8004958 <HAL_SAI_Transmit_DMA>
 80089a0:	4b2e      	ldr	r3, [pc, #184]	; (8008a5c <audioInit+0xdcc>)
 80089a2:	4604      	mov	r4, r0
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 80089a4:	492e      	ldr	r1, [pc, #184]	; (8008a60 <audioInit+0xdd0>)
 80089a6:	ee1f 0a90 	vmov	r0, s31
 80089aa:	2280      	movs	r2, #128	; 0x80
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 80089ac:	701c      	strb	r4, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 80089ae:	f7fc f86f 	bl	8004a90 <HAL_SAI_Receive_DMA>
 80089b2:	4b2c      	ldr	r3, [pc, #176]	; (8008a64 <audioInit+0xdd4>)
 80089b4:	4602      	mov	r2, r0
	// with the CS4271 codec IC, the SAI Transmit and Receive must be happening before the chip will respond to
	// I2C setup messages (it seems to use the masterclock input as it's own internal clock for i2c data, etc)
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready

	//now to send all the necessary messages to the codec
	AudioCodec_init(hi2c);
 80089b6:	ee1e 0a90 	vmov	r0, s29
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 80089ba:	701a      	strb	r2, [r3, #0]
	AudioCodec_init(hi2c);
 80089bc:	f001 fc18 	bl	800a1f0 <AudioCodec_init>
	HAL_Delay(1);
 80089c0:	2001      	movs	r0, #1

}
 80089c2:	b009      	add	sp, #36	; 0x24
 80089c4:	ecbd 8b10 	vpop	{d8-d15}
 80089c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089cc:	e04c      	b.n	8008a68 <audioInit+0xdd8>
 80089ce:	bf00      	nop
 80089d0:	b4e81b4f 	.word	0xb4e81b4f
 80089d4:	3f4b4e81 	.word	0x3f4b4e81
 80089d8:	fefa39ef 	.word	0xfefa39ef
 80089dc:	3fe62e42 	.word	0x3fe62e42
 80089e0:	2001770c 	.word	0x2001770c
 80089e4:	3b03126f 	.word	0x3b03126f
 80089e8:	20000f28 	.word	0x20000f28
 80089ec:	40c33333 	.word	0x40c33333
 80089f0:	45fa0000 	.word	0x45fa0000
 80089f4:	2001921c 	.word	0x2001921c
 80089f8:	42480000 	.word	0x42480000
 80089fc:	00000000 	.word	0x00000000
 8008a00:	20000d24 	.word	0x20000d24
 8008a04:	2001768c 	.word	0x2001768c
 8008a08:	20017aa8 	.word	0x20017aa8
 8008a0c:	43960000 	.word	0x43960000
 8008a10:	3f7fffef 	.word	0x3f7fffef
 8008a14:	3dcccccd 	.word	0x3dcccccd
 8008a18:	3a83126f 	.word	0x3a83126f
 8008a1c:	3c23d70a 	.word	0x3c23d70a
 8008a20:	20000db8 	.word	0x20000db8
 8008a24:	20017a78 	.word	0x20017a78
 8008a28:	44bb8000 	.word	0x44bb8000
 8008a2c:	20000fcc 	.word	0x20000fcc
 8008a30:	3ca3d70a 	.word	0x3ca3d70a
 8008a34:	3f666666 	.word	0x3f666666
 8008a38:	44480000 	.word	0x44480000
 8008a3c:	20017988 	.word	0x20017988
 8008a40:	2000039c 	.word	0x2000039c
 8008a44:	200001bc 	.word	0x200001bc
 8008a48:	2001776c 	.word	0x2001776c
 8008a4c:	3a03126f 	.word	0x3a03126f
 8008a50:	20000d64 	.word	0x20000d64
 8008a54:	2001777c 	.word	0x2001777c
 8008a58:	30000000 	.word	0x30000000
 8008a5c:	2001771c 	.word	0x2001771c
 8008a60:	30000200 	.word	0x30000200
 8008a64:	20017994 	.word	0x20017994
	HAL_Delay(1);
 8008a68:	f7f7 bc9e 	b.w	80003a8 <HAL_Delay>

08008a6c <audioTick>:
}



uint32_t audioTick(float* samples)
{
 8008a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a70:	4681      	mov	r9, r0
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
	}
*/
	float audioInput = samples[0] + samples[1];

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 8008a72:	48d7      	ldr	r0, [pc, #860]	; (8008dd0 <audioTick+0x364>)

	for (int i = 0; i < 4; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8008a74:	4cd7      	ldr	r4, [pc, #860]	; (8008dd4 <audioTick+0x368>)
	}

	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{
		stringFrequencies[i] = tExpSmooth_tick(&stringFreqSmoothers[i]);
 8008a76:	4ed8      	ldr	r6, [pc, #864]	; (8008dd8 <audioTick+0x36c>)
	}

	int currentPluckBufferL = currentPluckBuffer;

	if (newPluck)
 8008a78:	f8df a3e4 	ldr.w	sl, [pc, #996]	; 8008e60 <audioTick+0x3f4>
{
 8008a7c:	ed2d 8b10 	vpush	{d8-d15}
	float audioInput = samples[0] + samples[1];
 8008a80:	edd9 7a01 	vldr	s15, [r9, #4]
{
 8008a84:	b08f      	sub	sp, #60	; 0x3c
	float audioInput = samples[0] + samples[1];
 8008a86:	edd9 ba00 	vldr	s23, [r9]
 8008a8a:	ee7b baa7 	vadd.f32	s23, s23, s15
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 8008a8e:	f003 fa91 	bl	800bfb4 <tExpSmooth_tick>
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8008a92:	48d2      	ldr	r0, [pc, #840]	; (8008ddc <audioTick+0x370>)
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 8008a94:	eef0 aa40 	vmov.f32	s21, s0
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8008a98:	f003 fa8c 	bl	800bfb4 <tExpSmooth_tick>
 8008a9c:	48d0      	ldr	r0, [pc, #832]	; (8008de0 <audioTick+0x374>)
 8008a9e:	ed84 0a00 	vstr	s0, [r4]
 8008aa2:	f003 fa87 	bl	800bfb4 <tExpSmooth_tick>
 8008aa6:	48cf      	ldr	r0, [pc, #828]	; (8008de4 <audioTick+0x378>)
 8008aa8:	ed84 0a01 	vstr	s0, [r4, #4]
 8008aac:	f003 fa82 	bl	800bfb4 <tExpSmooth_tick>
 8008ab0:	48cd      	ldr	r0, [pc, #820]	; (8008de8 <audioTick+0x37c>)
 8008ab2:	ed84 0a02 	vstr	s0, [r4, #8]
 8008ab6:	f003 fa7d 	bl	800bfb4 <tExpSmooth_tick>
		stringFrequencies[i] = tExpSmooth_tick(&stringFreqSmoothers[i]);
 8008aba:	48cc      	ldr	r0, [pc, #816]	; (8008dec <audioTick+0x380>)
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8008abc:	ed84 0a03 	vstr	s0, [r4, #12]
		stringFrequencies[i] = tExpSmooth_tick(&stringFreqSmoothers[i]);
 8008ac0:	f003 fa78 	bl	800bfb4 <tExpSmooth_tick>
 8008ac4:	48ca      	ldr	r0, [pc, #808]	; (8008df0 <audioTick+0x384>)
 8008ac6:	ed86 0a00 	vstr	s0, [r6]
 8008aca:	f003 fa73 	bl	800bfb4 <tExpSmooth_tick>
 8008ace:	48c9      	ldr	r0, [pc, #804]	; (8008df4 <audioTick+0x388>)
 8008ad0:	ed86 0a01 	vstr	s0, [r6, #4]
 8008ad4:	f003 fa6e 	bl	800bfb4 <tExpSmooth_tick>
 8008ad8:	48c7      	ldr	r0, [pc, #796]	; (8008df8 <audioTick+0x38c>)
 8008ada:	ed86 0a02 	vstr	s0, [r6, #8]
 8008ade:	f003 fa69 	bl	800bfb4 <tExpSmooth_tick>
	if (newPluck)
 8008ae2:	f8da 3000 	ldr.w	r3, [sl]
		stringFrequencies[i] = tExpSmooth_tick(&stringFreqSmoothers[i]);
 8008ae6:	ed86 0a03 	vstr	s0, [r6, #12]
	if (newPluck)
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f040 81bc 	bne.w	8008e68 <audioTick+0x3fc>
 8008af0:	4bc2      	ldr	r3, [pc, #776]	; (8008dfc <audioTick+0x390>)
 8008af2:	681c      	ldr	r4, [r3, #0]
 8008af4:	9301      	str	r3, [sp, #4]




	float filtNoise;
	if (voice != 3)
 8008af6:	2c03      	cmp	r4, #3
 8008af8:	d00f      	beq.n	8008b1a <audioTick+0xae>
	{
		filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
 8008afa:	48c1      	ldr	r0, [pc, #772]	; (8008e00 <audioTick+0x394>)
 8008afc:	f004 f93c 	bl	800cd78 <tNoise_tick>
 8008b00:	48c0      	ldr	r0, [pc, #768]	; (8008e04 <audioTick+0x398>)
 8008b02:	f003 fb9d 	bl	800c240 <tVZFilter_tickEfficient>
 8008b06:	eeb0 ba40 	vmov.f32	s22, s0
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
 8008b0a:	48bd      	ldr	r0, [pc, #756]	; (8008e00 <audioTick+0x394>)
 8008b0c:	f004 f934 	bl	800cd78 <tNoise_tick>
 8008b10:	48bd      	ldr	r0, [pc, #756]	; (8008e08 <audioTick+0x39c>)
 8008b12:	f003 fb95 	bl	800c240 <tVZFilter_tickEfficient>
 8008b16:	ee3b ba00 	vadd.f32	s22, s22, s0
	}
	samples[0]= 0.0f;
 8008b1a:	eddf 7abc 	vldr	s15, [pc, #752]	; 8008e0c <audioTick+0x3a0>
	//filtNoise= tNoise_tick(&myNoise);

	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8008b1e:	2400      	movs	r4, #0
 8008b20:	4bbb      	ldr	r3, [pc, #748]	; (8008e10 <audioTick+0x3a4>)
		}
		else if (voice == 1)
		{

			tEfficientSVF_setQ(&filts2[i], (params[13] * 10.0f) + 0.5f);
			tEfficientSVF_setFreq(&filts2[i], LEAF_clip(0, (knobScaled[0]*4095.0f) + (Env2 * knobScaled[1]* 4095.0f) + (stringMIDIPitches[i] * knobScaled[2] * 32.0f), 4095));
 8008b22:	eeb0 ca67 	vmov.f32	s24, s15
 8008b26:	4dbb      	ldr	r5, [pc, #748]	; (8008e14 <audioTick+0x3a8>)
 8008b28:	4fbb      	ldr	r7, [pc, #748]	; (8008e18 <audioTick+0x3ac>)
 8008b2a:	4eab      	ldr	r6, [pc, #684]	; (8008dd8 <audioTick+0x36c>)
			tempSamp = filtNoise * env;
			for (int j = 0; j < NUM_OVERTONES; j++)
			{

				float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
				float tempFreq = stringFrequencies[i] * (j+1) * ((params[0]* 0.001f * j) + 1.0f) * ((Env2 * params[1])+ 1.0f);
 8008b2c:	eddf 9abb 	vldr	s19, [pc, #748]	; 8008e1c <audioTick+0x3b0>

				if (tempFreq < 18000.0f)
 8008b30:	ed9f aabb 	vldr	s20, [pc, #748]	; 8008e20 <audioTick+0x3b4>
			tEfficientSVF_setFreq(&filts2[i], LEAF_clip(0, (knobScaled[0]*4095.0f) + (Env2 * knobScaled[1]* 4095.0f) + (stringMIDIPitches[i] * knobScaled[2] * 32.0f), 4095));
 8008b34:	eddf dabb 	vldr	s27, [pc, #748]	; 8008e24 <audioTick+0x3b8>
 8008b38:	ed9f dabb 	vldr	s26, [pc, #748]	; 8008e28 <audioTick+0x3bc>
			tPBPulse_setWidth(&pulseW[i], tCycle_tick(&LFOs[i][0]) * 0.4f + 0.5f);
 8008b3c:	eddf cabb 	vldr	s25, [pc, #748]	; 8008e2c <audioTick+0x3c0>
 8008b40:	9300      	str	r3, [sp, #0]
	samples[0]= 0.0f;
 8008b42:	edc9 7a00 	vstr	s15, [r9]
		Env1 = tADSRT_tick(&envelopes[i][0]);
 8008b46:	4628      	mov	r0, r5
 8008b48:	f002 ffbc 	bl	800bac4 <tADSRT_tick>
		Env2 = tADSRT_tick(&envelopes[i][1]);
 8008b4c:	1d28      	adds	r0, r5, #4
		Env1 = tADSRT_tick(&envelopes[i][0]);
 8008b4e:	eeb0 9a40 	vmov.f32	s18, s0
		Env2 = tADSRT_tick(&envelopes[i][1]);
 8008b52:	f002 ffb7 	bl	800bac4 <tADSRT_tick>
		env = tADSRT_tick(&fenvelopes[i]); //noise envelope
 8008b56:	4638      	mov	r0, r7
		Env2 = tADSRT_tick(&envelopes[i][1]);
 8008b58:	eef0 8a40 	vmov.f32	s17, s0
		env = tADSRT_tick(&fenvelopes[i]); //noise envelope
 8008b5c:	f002 ffb2 	bl	800bac4 <tADSRT_tick>
		if (voice == 0)
 8008b60:	9b01      	ldr	r3, [sp, #4]
		env = tADSRT_tick(&fenvelopes[i]); //noise envelope
 8008b62:	eeb0 8a40 	vmov.f32	s16, s0
		if (voice == 0)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f000 80dc 	beq.w	8008d26 <audioTick+0x2ba>
		else if (voice == 1)
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d052      	beq.n	8008c18 <audioTick+0x1ac>
		else if (voice == 2)
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	f000 81a9 	beq.w	8008eca <audioTick+0x45e>
		float tempSamp = 0.0f;
 8008b78:	ed9f 8aa4 	vldr	s16, [pc, #656]	; 8008e0c <audioTick+0x3a0>
			//tempSamp = tFeedbackLeveler_tick(&levelers[i][0], tempSamp);
			//tempSamp *= Env1;
		}


		samples[0] += tempSamp;
 8008b7c:	edd9 7a00 	vldr	s15, [r9]
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8008b80:	3401      	adds	r4, #1
		prevSamp[i] = tempSamp;
 8008b82:	9b00      	ldr	r3, [sp, #0]
 8008b84:	350c      	adds	r5, #12
		samples[0] += tempSamp;
 8008b86:	ee77 7a88 	vadd.f32	s15, s15, s16
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8008b8a:	2c04      	cmp	r4, #4
 8008b8c:	f107 0704 	add.w	r7, r7, #4
 8008b90:	f106 0604 	add.w	r6, r6, #4
		samples[0] += tempSamp;
 8008b94:	edc9 7a00 	vstr	s15, [r9]
		prevSamp[i] = tempSamp;
 8008b98:	eca3 8a01 	vstmia	r3!, {s16}
 8008b9c:	9300      	str	r3, [sp, #0]
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8008b9e:	d1d2      	bne.n	8008b46 <audioTick+0xda>

	//samples[0] = tEfficientSVF_tick(&filts2[firstString], samples[0]);


	//tempNum= (fasterdbtoa((volumeSmoothed*60.0f) - 60.0f) * 0.4f) + (volumeSmoothed * 0.6f);
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
 8008ba0:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8008e30 <audioTick+0x3c4>
 8008ba4:	eddf 7aa3 	vldr	s15, [pc, #652]	; 8008e34 <audioTick+0x3c8>
 8008ba8:	eef0 0a40 	vmov.f32	s1, s0
 8008bac:	ed9f 1aa2 	vldr	s2, [pc, #648]	; 8008e38 <audioTick+0x3cc>
 8008bb0:	eeea 0aa7 	vfma.f32	s1, s21, s15
 8008bb4:	f003 fdb2 	bl	800c71c <LEAF_clip>
	int volIdxInt = (int) volIdx;
 8008bb8:	eebd 6ac0 	vcvt.s32.f32	s12, s0
	//tCycle_setFreq(&sines[0], 342.54f);
	//tempNum =
	//samples[0] = tCycle_tick(&sines[0]);
	samples[0] *= out;
	//samples[0] =
	samples[0] = (samples[0] * 0.25f);
 8008bbc:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8008bc0:	edd9 7a00 	vldr	s15, [r9]
	float omAlpha = 1.0f - alpha;
 8008bc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	float out = volumeAmps128[volIdxInt] * omAlpha;
 8008bc8:	4a9c      	ldr	r2, [pc, #624]	; (8008e3c <audioTick+0x3d0>)
	int volIdxInt = (int) volIdx;
 8008bca:	ee16 3a10 	vmov	r3, s12
	//samples[0] = tanhf(samples[0] * 0.25f);
	//samples[0] *= 0.25f;
	samples[1] = samples[0];
	return 0;
}
 8008bce:	2000      	movs	r0, #0
	samples[0] = (samples[0] * 0.25f);
 8008bd0:	ee67 7aa6 	vmul.f32	s15, s15, s13
	int volIdxIntPlus = (volIdxInt + 1) & 127;
 8008bd4:	1c59      	adds	r1, r3, #1
	float alpha = volIdx-volIdxInt;
 8008bd6:	eef8 6ac6 	vcvt.f32.s32	s13, s12
	float omAlpha = 1.0f - alpha;
 8008bda:	ee37 7a40 	vsub.f32	s14, s14, s0
	float out = volumeAmps128[volIdxInt] * omAlpha;
 8008bde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	int volIdxIntPlus = (volIdxInt + 1) & 127;
 8008be2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float alpha = volIdx-volIdxInt;
 8008be6:	ee30 0a66 	vsub.f32	s0, s0, s13
	out += volumeAmps128[volIdxIntPlus] * alpha;
 8008bea:	ed93 6a00 	vldr	s12, [r3]
 8008bee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float omAlpha = 1.0f - alpha;
 8008bf2:	ee37 7a26 	vadd.f32	s14, s14, s13
	out += volumeAmps128[volIdxIntPlus] * alpha;
 8008bf6:	edd2 6a00 	vldr	s13, [r2]
 8008bfa:	ee20 0a26 	vmul.f32	s0, s0, s13
 8008bfe:	eea6 0a07 	vfma.f32	s0, s12, s14
	samples[0] = (samples[0] * 0.25f);
 8008c02:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008c06:	ed89 0a00 	vstr	s0, [r9]
	samples[1] = samples[0];
 8008c0a:	ed89 0a01 	vstr	s0, [r9, #4]
}
 8008c0e:	b00f      	add	sp, #60	; 0x3c
 8008c10:	ecbd 8b10 	vpop	{d8-d15}
 8008c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tEfficientSVF_setQ(&filts2[i], (params[13] * 10.0f) + 0.5f);
 8008c18:	eef6 ea00 	vmov.f32	s29, #96	; 0x3f000000  0.5
 8008c1c:	f8df a244 	ldr.w	sl, [pc, #580]	; 8008e64 <audioTick+0x3f8>
 8008c20:	4b87      	ldr	r3, [pc, #540]	; (8008e40 <audioTick+0x3d4>)
 8008c22:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8008c26:	ed9a 7a0d 	vldr	s14, [sl, #52]	; 0x34
 8008c2a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008c2e:	eeb0 0a6e 	vmov.f32	s0, s29
 8008c32:	eb03 0884 	add.w	r8, r3, r4, lsl #2
			tFeedbackLeveler_setStrength(&levelers[i][0], params[5] * 0.1f);
 8008c36:	ed9f ea83 	vldr	s28, [pc, #524]	; 8008e44 <audioTick+0x3d8>
			tEfficientSVF_setQ(&filts2[i], (params[13] * 10.0f) + 0.5f);
 8008c3a:	4640      	mov	r0, r8
 8008c3c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8008c40:	f003 fab0 	bl	800c1a4 <tEfficientSVF_setQ>
			tEfficientSVF_setFreq(&filts2[i], LEAF_clip(0, (knobScaled[0]*4095.0f) + (Env2 * knobScaled[1]* 4095.0f) + (stringMIDIPitches[i] * knobScaled[2] * 32.0f), 4095));
 8008c44:	4b63      	ldr	r3, [pc, #396]	; (8008dd4 <audioTick+0x368>)
 8008c46:	4980      	ldr	r1, [pc, #512]	; (8008e48 <audioTick+0x3dc>)
 8008c48:	eeb0 0a4c 	vmov.f32	s0, s24
 8008c4c:	edd3 0a02 	vldr	s1, [r3, #8]
 8008c50:	edd3 6a01 	vldr	s13, [r3, #4]
 8008c54:	4459      	add	r1, fp
 8008c56:	edd3 7a00 	vldr	s15, [r3]
 8008c5a:	ee60 0aad 	vmul.f32	s1, s1, s27
 8008c5e:	ed91 7a00 	vldr	s14, [r1]
 8008c62:	eee6 7aa8 	vfma.f32	s15, s13, s17
 8008c66:	ed9f 1a70 	vldr	s2, [pc, #448]	; 8008e28 <audioTick+0x3bc>
 8008c6a:	ee60 0a87 	vmul.f32	s1, s1, s14
 8008c6e:	eee7 0a8d 	vfma.f32	s1, s15, s26
 8008c72:	f003 fd53 	bl	800c71c <LEAF_clip>
 8008c76:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8008c7a:	4640      	mov	r0, r8
 8008c7c:	ee10 2a10 	vmov	r2, s0
 8008c80:	b291      	uxth	r1, r2
 8008c82:	f003 fa6b 	bl	800c15c <tEfficientSVF_setFreq>
			tPBPulse_setFreq(&pulseW[i], stringFrequencies[i]);
 8008c86:	4971      	ldr	r1, [pc, #452]	; (8008e4c <audioTick+0x3e0>)
 8008c88:	ed96 0a00 	vldr	s0, [r6]
 8008c8c:	448b      	add	fp, r1
 8008c8e:	4658      	mov	r0, fp
 8008c90:	f004 f854 	bl	800cd3c <tPBPulse_setFreq>
			tPBPulse_setWidth(&pulseW[i], tCycle_tick(&LFOs[i][0]) * 0.4f + 0.5f);
 8008c94:	496e      	ldr	r1, [pc, #440]	; (8008e50 <audioTick+0x3e4>)
 8008c96:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8008c9a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8008c9e:	f003 ffbd 	bl	800cc1c <tCycle_tick>
 8008ca2:	eef0 7a6e 	vmov.f32	s15, s29
 8008ca6:	4658      	mov	r0, fp
 8008ca8:	eee0 7a2c 	vfma.f32	s15, s0, s25
 8008cac:	eeb0 0a67 	vmov.f32	s0, s15
 8008cb0:	f004 f84e 	bl	800cd50 <tPBPulse_setWidth>
			tempSamp = tPBPulse_tick(&pulseW[i]);
 8008cb4:	4658      	mov	r0, fp
 8008cb6:	f003 fff1 	bl	800cc9c <tPBPulse_tick>
			tempSamp = tEfficientSVF_tick(&filts2[i], tempSamp);
 8008cba:	4640      	mov	r0, r8
 8008cbc:	eeab 0a08 	vfma.f32	s0, s22, s16
 8008cc0:	f003 f9fe 	bl	800c0c0 <tEfficientSVF_tick>
 8008cc4:	4863      	ldr	r0, [pc, #396]	; (8008e54 <audioTick+0x3e8>)
 8008cc6:	eeb0 8a40 	vmov.f32	s16, s0
			tFeedbackLeveler_setTargetLevel(&levelers[i][0], params[4]);
 8008cca:	ed9a 0a04 	vldr	s0, [sl, #16]
 8008cce:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8008cd2:	9002      	str	r0, [sp, #8]
 8008cd4:	f002 fe3c 	bl	800b950 <tFeedbackLeveler_setTargetLevel>
			tFeedbackLeveler_setStrength(&levelers[i][0], params[5] * 0.1f);
 8008cd8:	ed9a 0a05 	vldr	s0, [sl, #20]
 8008cdc:	9802      	ldr	r0, [sp, #8]
 8008cde:	ee20 0a0e 	vmul.f32	s0, s0, s28
 8008ce2:	f002 fe05 	bl	800b8f0 <tFeedbackLeveler_setStrength>
			tFeedbackLeveler_setFactor(&levelers[i][0], params[6] * 0.1f);
 8008ce6:	ed9a 0a06 	vldr	s0, [sl, #24]
 8008cea:	9802      	ldr	r0, [sp, #8]
 8008cec:	ee20 0a0e 	vmul.f32	s0, s0, s28
 8008cf0:	f002 fe02 	bl	800b8f8 <tFeedbackLeveler_setFactor>
			tFeedbackLeveler_setMode(&levelers[i][0], params[8] > 0.5f);
 8008cf4:	edda 7a08 	vldr	s15, [sl, #32]
 8008cf8:	9802      	ldr	r0, [sp, #8]
 8008cfa:	eef4 7aee 	vcmpe.f32	s15, s29
 8008cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d02:	bfcc      	ite	gt
 8008d04:	2101      	movgt	r1, #1
 8008d06:	2100      	movle	r1, #0
 8008d08:	f002 fdfa 	bl	800b900 <tFeedbackLeveler_setMode>
			tempSamp = tFeedbackLeveler_tick(&levelers[i][0], tempSamp);
 8008d0c:	eeb0 0a48 	vmov.f32	s0, s16
 8008d10:	9802      	ldr	r0, [sp, #8]
 8008d12:	f002 fdf9 	bl	800b908 <tFeedbackLeveler_tick>
			tempSamp *= Env1 * knobScaled[2];
 8008d16:	4b2f      	ldr	r3, [pc, #188]	; (8008dd4 <audioTick+0x368>)
 8008d18:	ed93 8a02 	vldr	s16, [r3, #8]
 8008d1c:	ee29 9a08 	vmul.f32	s18, s18, s16
 8008d20:	ee29 8a00 	vmul.f32	s16, s18, s0
 8008d24:	e72a      	b.n	8008b7c <audioTick+0x110>
			tLivingString2_setFreq(&strings[i], stringFrequencies[i]);
 8008d26:	484c      	ldr	r0, [pc, #304]	; (8008e58 <audioTick+0x3ec>)
 8008d28:	ed96 0a00 	vldr	s0, [r6]
 8008d2c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8008d30:	9002      	str	r0, [sp, #8]
 8008d32:	f004 f9bf 	bl	800d0b4 <tLivingString2_setFreq>
			if (neck == 0)
 8008d36:	4b49      	ldr	r3, [pc, #292]	; (8008e5c <audioTick+0x3f0>)
 8008d38:	9802      	ldr	r0, [sp, #8]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f000 80a4 	beq.w	8008e8a <audioTick+0x41e>
				tLivingString2_setPrepIndex(&strings[i], knobScaled[1]);
 8008d42:	4b24      	ldr	r3, [pc, #144]	; (8008dd4 <audioTick+0x368>)
 8008d44:	9002      	str	r0, [sp, #8]
 8008d46:	ed93 0a01 	vldr	s0, [r3, #4]
 8008d4a:	f004 fa07 	bl	800d15c <tLivingString2_setPrepIndex>
 8008d4e:	9802      	ldr	r0, [sp, #8]
			tempSamp = (tLivingString2_tick(&strings[i],(filtNoise * env) + (audioInput * 0.001f * params[5]) + (prevSamp[i] * (0.001f * params[5]))));//filtNoise * theEnv) * env);
 8008d50:	9b00      	ldr	r3, [sp, #0]
 8008d52:	f8df a110 	ldr.w	sl, [pc, #272]	; 8008e64 <audioTick+0x3f8>
 8008d56:	ed93 0a00 	vldr	s0, [r3]
 8008d5a:	edda 7a05 	vldr	s15, [sl, #20]
 8008d5e:	ee3b 0a80 	vadd.f32	s0, s23, s0
 8008d62:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008d66:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008d6a:	eeab 0a08 	vfma.f32	s0, s22, s16
 8008d6e:	f004 faa3 	bl	800d2b8 <tLivingString2_tick>
			prevSamp[i] = 0.0f;
 8008d72:	9b00      	ldr	r3, [sp, #0]
			tempSamp = (tLivingString2_tick(&strings[i],(filtNoise * env) + (audioInput * 0.001f * params[5]) + (prevSamp[i] * (0.001f * params[5]))));//filtNoise * theEnv) * env);
 8008d74:	eeb0 8a40 	vmov.f32	s16, s0
			prevSamp[i] = 0.0f;
 8008d78:	ed83 ca00 	vstr	s24, [r3]
				if (j != i) //put sympathetic resonance in all strings but yourself
 8008d7c:	2c00      	cmp	r4, #0
 8008d7e:	f000 808d 	beq.w	8008e9c <audioTick+0x430>
					prevSamp[j]+=tempSamp * volumeSmoothed;
 8008d82:	4b23      	ldr	r3, [pc, #140]	; (8008e10 <audioTick+0x3a4>)
 8008d84:	ee6a 7a80 	vmul.f32	s15, s21, s0
				if (j != i) //put sympathetic resonance in all strings but yourself
 8008d88:	2c01      	cmp	r4, #1
					prevSamp[j]+=tempSamp * volumeSmoothed;
 8008d8a:	ed93 7a00 	vldr	s14, [r3]
 8008d8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008d92:	ed83 7a00 	vstr	s14, [r3]
				if (j != i) //put sympathetic resonance in all strings but yourself
 8008d96:	f000 8383 	beq.w	80094a0 <audioTick+0xa34>
					prevSamp[j]+=tempSamp * volumeSmoothed;
 8008d9a:	ed93 7a01 	vldr	s14, [r3, #4]
				if (j != i) //put sympathetic resonance in all strings but yourself
 8008d9e:	2c02      	cmp	r4, #2
					prevSamp[j]+=tempSamp * volumeSmoothed;
 8008da0:	eeaa 7a80 	vfma.f32	s14, s21, s0
 8008da4:	ed83 7a01 	vstr	s14, [r3, #4]
				if (j != i) //put sympathetic resonance in all strings but yourself
 8008da8:	f000 8087 	beq.w	8008eba <audioTick+0x44e>
					prevSamp[j]+=tempSamp * volumeSmoothed;
 8008dac:	ed93 7a02 	vldr	s14, [r3, #8]
				if (j != i) //put sympathetic resonance in all strings but yourself
 8008db0:	2c03      	cmp	r4, #3
					prevSamp[j]+=tempSamp * volumeSmoothed;
 8008db2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008db6:	ed83 7a02 	vstr	s14, [r3, #8]
				if (j != i) //put sympathetic resonance in all strings but yourself
 8008dba:	d17e      	bne.n	8008eba <audioTick+0x44e>
		samples[0] += tempSamp;
 8008dbc:	edd9 7a00 	vldr	s15, [r9]
		prevSamp[i] = tempSamp;
 8008dc0:	4b13      	ldr	r3, [pc, #76]	; (8008e10 <audioTick+0x3a4>)
		samples[0] += tempSamp;
 8008dc2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008dc6:	edc9 7a00 	vstr	s15, [r9]
		prevSamp[i] = tempSamp;
 8008dca:	ed83 0a03 	vstr	s0, [r3, #12]
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8008dce:	e6e7      	b.n	8008ba0 <audioTick+0x134>
 8008dd0:	20000d64 	.word	0x20000d64
 8008dd4:	20017938 	.word	0x20017938
 8008dd8:	2001922c 	.word	0x2001922c
 8008ddc:	2001776c 	.word	0x2001776c
 8008de0:	20017770 	.word	0x20017770
 8008de4:	20017774 	.word	0x20017774
 8008de8:	20017778 	.word	0x20017778
 8008dec:	20000d24 	.word	0x20000d24
 8008df0:	20000d28 	.word	0x20000d28
 8008df4:	20000d2c 	.word	0x20000d2c
 8008df8:	20000d30 	.word	0x20000d30
 8008dfc:	20000bdc 	.word	0x20000bdc
 8008e00:	2001777c 	.word	0x2001777c
 8008e04:	20000fcc 	.word	0x20000fcc
 8008e08:	20017988 	.word	0x20017988
 8008e0c:	00000000 	.word	0x00000000
 8008e10:	20018dec 	.word	0x20018dec
 8008e14:	20018d54 	.word	0x20018d54
 8008e18:	2001921c 	.word	0x2001921c
 8008e1c:	3a83126f 	.word	0x3a83126f
 8008e20:	468ca000 	.word	0x468ca000
 8008e24:	42000000 	.word	0x42000000
 8008e28:	457ff000 	.word	0x457ff000
 8008e2c:	3ecccccd 	.word	0x3ecccccd
 8008e30:	423c0000 	.word	0x423c0000
 8008e34:	42a00000 	.word	0x42a00000
 8008e38:	42fe0000 	.word	0x42fe0000
 8008e3c:	20000900 	.word	0x20000900
 8008e40:	2001767c 	.word	0x2001767c
 8008e44:	3dcccccd 	.word	0x3dcccccd
 8008e48:	20017948 	.word	0x20017948
 8008e4c:	2001768c 	.word	0x2001768c
 8008e50:	2001769c 	.word	0x2001769c
 8008e54:	20017a48 	.word	0x20017a48
 8008e58:	20017928 	.word	0x20017928
 8008e5c:	20000bc0 	.word	0x20000bc0
 8008e60:	20000bcc 	.word	0x20000bcc
 8008e64:	20000d78 	.word	0x20000d78
	int currentPluckBufferL = currentPluckBuffer;
 8008e68:	4a7e      	ldr	r2, [pc, #504]	; (8009064 <audioTick+0x5f8>)
		if ((SPI_PLUCK_RX[0 + (26*currentPluckBufferL)] == 254) && (SPI_PLUCK_RX[25 + (26*currentPluckBufferL)] == 253))
 8008e6a:	231a      	movs	r3, #26
 8008e6c:	4f7e      	ldr	r7, [pc, #504]	; (8009068 <audioTick+0x5fc>)
	int currentPluckBufferL = currentPluckBuffer;
 8008e6e:	6812      	ldr	r2, [r2, #0]
		if ((SPI_PLUCK_RX[0 + (26*currentPluckBufferL)] == 254) && (SPI_PLUCK_RX[25 + (26*currentPluckBufferL)] == 253))
 8008e70:	fb03 fb02 	mul.w	fp, r3, r2
 8008e74:	f817 300b 	ldrb.w	r3, [r7, fp]
 8008e78:	2bfe      	cmp	r3, #254	; 0xfe
 8008e7a:	d07a      	beq.n	8008f72 <audioTick+0x506>
 8008e7c:	4b7b      	ldr	r3, [pc, #492]	; (800906c <audioTick+0x600>)
 8008e7e:	681c      	ldr	r4, [r3, #0]
 8008e80:	9301      	str	r3, [sp, #4]
		newPluck = 0;
 8008e82:	2300      	movs	r3, #0
 8008e84:	f8ca 3000 	str.w	r3, [sl]
 8008e88:	e635      	b.n	8008af6 <audioTick+0x8a>
				tLivingString2_setPrepIndex(&strings[i], knobScaled[1] * env);
 8008e8a:	4b79      	ldr	r3, [pc, #484]	; (8009070 <audioTick+0x604>)
 8008e8c:	ed93 0a01 	vldr	s0, [r3, #4]
 8008e90:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008e94:	f004 f962 	bl	800d15c <tLivingString2_setPrepIndex>
 8008e98:	9802      	ldr	r0, [sp, #8]
 8008e9a:	e759      	b.n	8008d50 <audioTick+0x2e4>
					prevSamp[j]+=tempSamp * volumeSmoothed;
 8008e9c:	4b75      	ldr	r3, [pc, #468]	; (8009074 <audioTick+0x608>)
 8008e9e:	ee6a 7a80 	vmul.f32	s15, s21, s0
 8008ea2:	ed93 7a01 	vldr	s14, [r3, #4]
 8008ea6:	edd3 6a02 	vldr	s13, [r3, #8]
 8008eaa:	eeaa 7a80 	vfma.f32	s14, s21, s0
 8008eae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008eb2:	edc3 6a02 	vstr	s13, [r3, #8]
 8008eb6:	ed83 7a01 	vstr	s14, [r3, #4]
 8008eba:	4b6e      	ldr	r3, [pc, #440]	; (8009074 <audioTick+0x608>)
 8008ebc:	ed93 7a03 	vldr	s14, [r3, #12]
 8008ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ec4:	edc3 7a03 	vstr	s15, [r3, #12]
 8008ec8:	e658      	b.n	8008b7c <audioTick+0x110>
			tempSamp = filtNoise * env;
 8008eca:	eb04 0bc4 	add.w	fp, r4, r4, lsl #3
 8008ece:	4b6a      	ldr	r3, [pc, #424]	; (8009078 <audioTick+0x60c>)
 8008ed0:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 80090bc <audioTick+0x650>
 8008ed4:	ee2b 8a00 	vmul.f32	s16, s22, s0
			for (int j = 0; j < NUM_OVERTONES; j++)
 8008ed8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008edc:	4967      	ldr	r1, [pc, #412]	; (800907c <audioTick+0x610>)
 8008ede:	9403      	str	r4, [sp, #12]
				float tempFreq = stringFrequencies[i] * (j+1) * ((params[0]* 0.001f * j) + 1.0f) * ((Env2 * params[1])+ 1.0f);
 8008ee0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8008ee4:	eb01 08cb 	add.w	r8, r1, fp, lsl #3
 8008ee8:	4654      	mov	r4, sl
			for (int j = 0; j < NUM_OVERTONES; j++)
 8008eea:	f04f 0b00 	mov.w	fp, #0
 8008eee:	469a      	mov	sl, r3
 8008ef0:	e002      	b.n	8008ef8 <audioTick+0x48c>
 8008ef2:	f1bb 0f0b 	cmp.w	fp, #11
 8008ef6:	d03a      	beq.n	8008f6e <audioTick+0x502>
				float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
 8008ef8:	4640      	mov	r0, r8
 8008efa:	f108 0804 	add.w	r8, r8, #4
 8008efe:	f002 ff37 	bl	800bd70 <tADSRT_tickNoInterp>
				float tempFreq = stringFrequencies[i] * (j+1) * ((params[0]* 0.001f * j) + 1.0f) * ((Env2 * params[1])+ 1.0f);
 8008f02:	eeb0 7a49 	vmov.f32	s14, s18
 8008f06:	edd4 7a01 	vldr	s15, [r4, #4]
 8008f0a:	ee06 ba10 	vmov	s12, fp
 8008f0e:	edd4 6a00 	vldr	s13, [r4]
 8008f12:	f10b 0b01 	add.w	fp, fp, #1
 8008f16:	eea7 7aa8 	vfma.f32	s14, s15, s17
 8008f1a:	edd6 7a00 	vldr	s15, [r6]
 8008f1e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008f22:	ee05 ba90 	vmov	s11, fp
				float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
 8008f26:	eeb0 ea40 	vmov.f32	s28, s0
				float tempFreq = stringFrequencies[i] * (j+1) * ((params[0]* 0.001f * j) + 1.0f) * ((Env2 * params[1])+ 1.0f);
 8008f2a:	ee66 6aa9 	vmul.f32	s13, s13, s19
 8008f2e:	eeb0 0a49 	vmov.f32	s0, s18
 8008f32:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8008f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f3a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008f3e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008f42:	ee27 0a80 	vmul.f32	s0, s15, s0
				if (tempFreq < 18000.0f)
 8008f46:	eeb4 0aca 	vcmpe.f32	s0, s20
 8008f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f4e:	d5d0      	bpl.n	8008ef2 <audioTick+0x486>
					tCycle_setFreq(&additive[i][j], tempFreq);
 8008f50:	f1aa 0004 	sub.w	r0, sl, #4
 8008f54:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 8008f58:	9002      	str	r0, [sp, #8]
 8008f5a:	f003 fe53 	bl	800cc04 <tCycle_setFreq>
					tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
 8008f5e:	9802      	ldr	r0, [sp, #8]
 8008f60:	f003 fe5c 	bl	800cc1c <tCycle_tick>
			for (int j = 0; j < NUM_OVERTONES; j++)
 8008f64:	f1bb 0f0b 	cmp.w	fp, #11
					tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
 8008f68:	eea0 8a0e 	vfma.f32	s16, s0, s28
			for (int j = 0; j < NUM_OVERTONES; j++)
 8008f6c:	d1c4      	bne.n	8008ef8 <audioTick+0x48c>
 8008f6e:	9c03      	ldr	r4, [sp, #12]
 8008f70:	e604      	b.n	8008b7c <audioTick+0x110>
		if ((SPI_PLUCK_RX[0 + (26*currentPluckBufferL)] == 254) && (SPI_PLUCK_RX[25 + (26*currentPluckBufferL)] == 253))
 8008f72:	eb07 030b 	add.w	r3, r7, fp
 8008f76:	7e5b      	ldrb	r3, [r3, #25]
 8008f78:	2bfd      	cmp	r3, #253	; 0xfd
 8008f7a:	f47f af7f 	bne.w	8008e7c <audioTick+0x410>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1 + (26*currentPluckBufferL)] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2 + (26*currentPluckBufferL)];
 8008f7e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8008f82:	493a      	ldr	r1, [pc, #232]	; (800906c <audioTick+0x600>)
								float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8008f84:	f8cd b010 	str.w	fp, [sp, #16]
			for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8008f88:	2500      	movs	r5, #0
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1 + (26*currentPluckBufferL)] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2 + (26*currentPluckBufferL)];
 8008f8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f8e:	4a3c      	ldr	r2, [pc, #240]	; (8009080 <audioTick+0x614>)
 8008f90:	680c      	ldr	r4, [r1, #0]
 8008f92:	9303      	str	r3, [sp, #12]
 8008f94:	4b3b      	ldr	r3, [pc, #236]	; (8009084 <audioTick+0x618>)
 8008f96:	9202      	str	r2, [sp, #8]
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	4a3b      	ldr	r2, [pc, #236]	; (8009088 <audioTick+0x61c>)
 8008f9c:	4b3b      	ldr	r3, [pc, #236]	; (800908c <audioTick+0x620>)
								float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8008f9e:	f8cd 9018 	str.w	r9, [sp, #24]
 8008fa2:	4690      	mov	r8, r2
						tLivingString2_setTargetLev(&strings[i], 0.0f);
 8008fa4:	eddf 9a3a 	vldr	s19, [pc, #232]	; 8009090 <audioTick+0x624>
								float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8008fa8:	469b      	mov	fp, r3
						tLivingString2_setDecay(&strings[i], 0.1f);
 8008faa:	ed9f da3a 	vldr	s26, [pc, #232]	; 8009094 <audioTick+0x628>
								float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8008fae:	46a1      	mov	r9, r4
					float amplitz = stringInputs[i] * 0.000125f;
 8008fb0:	ed9f ca39 	vldr	s24, [pc, #228]	; 8009098 <audioTick+0x62c>
								stringFade = (float)(thisString - 6.0f) * 0.2f;
 8008fb4:	eddf ca39 	vldr	s25, [pc, #228]	; 800909c <audioTick+0x630>
								float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8008fb8:	ed9f aa39 	vldr	s20, [pc, #228]	; 80090a0 <audioTick+0x634>
 8008fbc:	9101      	str	r1, [sp, #4]
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1 + (26*currentPluckBufferL)] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2 + (26*currentPluckBufferL)];
 8008fbe:	4b39      	ldr	r3, [pc, #228]	; (80090a4 <audioTick+0x638>)
				if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
 8008fc0:	f858 4b04 	ldr.w	r4, [r8], #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1 + (26*currentPluckBufferL)] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2 + (26*currentPluckBufferL)];
 8008fc4:	6819      	ldr	r1, [r3, #0]
 8008fc6:	681a      	ldr	r2, [r3, #0]
				if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
 8008fc8:	2c00      	cmp	r4, #0
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1 + (26*currentPluckBufferL)] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2 + (26*currentPluckBufferL)];
 8008fca:	9b03      	ldr	r3, [sp, #12]
 8008fcc:	4429      	add	r1, r5
 8008fce:	441a      	add	r2, r3
 8008fd0:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 8008fd4:	9b04      	ldr	r3, [sp, #16]
 8008fd6:	442a      	add	r2, r5
 8008fd8:	4419      	add	r1, r3
 8008fda:	9b02      	ldr	r3, [sp, #8]
 8008fdc:	f102 0201 	add.w	r2, r2, #1
 8008fe0:	7849      	ldrb	r1, [r1, #1]
 8008fe2:	f817 2012 	ldrb.w	r2, [r7, r2, lsl #1]
 8008fe6:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8008fea:	f843 2b04 	str.w	r2, [r3], #4
 8008fee:	9302      	str	r3, [sp, #8]
				if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
 8008ff0:	f040 822e 	bne.w	8009450 <audioTick+0x9e4>
 8008ff4:	2a00      	cmp	r2, #0
 8008ff6:	f000 8239 	beq.w	800946c <audioTick+0xa00>
					float amplitz = stringInputs[i] * 0.000125f;
 8008ffa:	ee07 2a90 	vmov	s15, r2
					stringOctave[i] = octave;
 8008ffe:	492a      	ldr	r1, [pc, #168]	; (80090a8 <audioTick+0x63c>)
 8009000:	482a      	ldr	r0, [pc, #168]	; (80090ac <audioTick+0x640>)
 8009002:	00ab      	lsls	r3, r5, #2
					float amplitz = stringInputs[i] * 0.000125f;
 8009004:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
					stringOctave[i] = octave;
 8009008:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800900c:	6800      	ldr	r0, [r0, #0]
 800900e:	9309      	str	r3, [sp, #36]	; 0x24
					float amplitz = stringInputs[i] * 0.000125f;
 8009010:	ee29 9a0c 	vmul.f32	s18, s18, s24
					stringOctave[i] = octave;
 8009014:	6008      	str	r0, [r1, #0]
					if (voice == 0)
 8009016:	f1b9 0f00 	cmp.w	r9, #0
 800901a:	f000 8276 	beq.w	800950a <audioTick+0xa9e>
					else if ((voice == 1) || (voice == 3))
 800901e:	f029 0102 	bic.w	r1, r9, #2
 8009022:	2901      	cmp	r1, #1
 8009024:	f000 831b 	beq.w	800965e <audioTick+0xbf2>
					else if (voice == 2)
 8009028:	f1b9 0f02 	cmp.w	r9, #2
 800902c:	f040 821e 	bne.w	800946c <audioTick+0xa00>
 8009030:	4912      	ldr	r1, [pc, #72]	; (800907c <audioTick+0x610>)
 8009032:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8009036:	00a8      	lsls	r0, r5, #2
 8009038:	4b1d      	ldr	r3, [pc, #116]	; (80090b0 <audioTick+0x644>)
 800903a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800903e:	491d      	ldr	r1, [pc, #116]	; (80090b4 <audioTick+0x648>)
 8009040:	4430      	add	r0, r6
							tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
 8009042:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8009046:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
							float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
 800904a:	eeb1 ea00 	vmov.f32	s28, #16	; 0x40800000  4.0
 800904e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80090c0 <audioTick+0x654>
							tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
 8009052:	469b      	mov	fp, r3
 8009054:	eddf da18 	vldr	s27, [pc, #96]	; 80090b8 <audioTick+0x64c>
 8009058:	4688      	mov	r8, r1
 800905a:	9008      	str	r0, [sp, #32]
 800905c:	9507      	str	r5, [sp, #28]
 800905e:	9205      	str	r2, [sp, #20]
 8009060:	e127      	b.n	80092b2 <audioTick+0x846>
 8009062:	bf00      	nop
 8009064:	20000ba8 	.word	0x20000ba8
 8009068:	30000420 	.word	0x30000420
 800906c:	20000bdc 	.word	0x20000bdc
 8009070:	20017938 	.word	0x20017938
 8009074:	20018dec 	.word	0x20018dec
 8009078:	20017804 	.word	0x20017804
 800907c:	20000e08 	.word	0x20000e08
 8009080:	20017a18 	.word	0x20017a18
 8009084:	20018d54 	.word	0x20018d54
 8009088:	200177a4 	.word	0x200177a4
 800908c:	20017928 	.word	0x20017928
 8009090:	00000000 	.word	0x00000000
 8009094:	3dcccccd 	.word	0x3dcccccd
 8009098:	3903126f 	.word	0x3903126f
 800909c:	3e4ccccd 	.word	0x3e4ccccd
 80090a0:	3ffeb852 	.word	0x3ffeb852
 80090a4:	20000bb4 	.word	0x20000bb4
 80090a8:	20000d34 	.word	0x20000d34
 80090ac:	20000038 	.word	0x20000038
 80090b0:	20018c34 	.word	0x20018c34
 80090b4:	20000bfc 	.word	0x20000bfc
 80090b8:	44fa0000 	.word	0x44fa0000
 80090bc:	20000d78 	.word	0x20000d78
 80090c0:	2000072c 	.word	0x2000072c
								stringFade = (float)thisString * 0.2f;
 80090c4:	ee07 3a90 	vmov	s15, r3
								float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
 80090c8:	ed99 7a06 	vldr	s14, [r9, #24]
 80090cc:	eeb0 1a4a 	vmov.f32	s2, s20
								float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 80090d0:	4dee      	ldr	r5, [pc, #952]	; (800948c <audioTick+0xa20>)
								stringFade = (float)thisString * 0.2f;
 80090d2:	eef8 8ae7 	vcvt.f32.s32	s17, s15
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80090d6:	edd9 7a08 	vldr	s15, [r9, #32]
 80090da:	ee78 6a47 	vsub.f32	s13, s16, s14
 80090de:	ee77 7ac7 	vsub.f32	s15, s15, s14
								float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
 80090e2:	eeb0 0a69 	vmov.f32	s0, s19
								float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 80090e6:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80090ea:	eec6 0aa7 	vdiv.f32	s1, s13, s15
								stringFade = (float)thisString * 0.2f;
 80090ee:	ee68 8aac 	vmul.f32	s17, s17, s25
								thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 80090f2:	ee7e fae8 	vsub.f32	s31, s29, s17
								float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
 80090f6:	ee70 0aa0 	vadd.f32	s1, s1, s1
 80090fa:	f003 fb0f 	bl	800c71c <LEAF_clip>
								float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 80090fe:	ed99 7a03 	vldr	s14, [r9, #12]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8009102:	edd9 7a05 	vldr	s15, [r9, #20]
								float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8009106:	eeb0 1a4a 	vmov.f32	s2, s20
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800910a:	ee78 6a47 	vsub.f32	s13, s16, s14
								float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
 800910e:	ed8d 0a0a 	vstr	s0, [sp, #40]	; 0x28
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8009112:	ee77 7ac7 	vsub.f32	s15, s15, s14
								float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8009116:	eeb0 0a69 	vmov.f32	s0, s19
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800911a:	eec6 0aa7 	vdiv.f32	s1, s13, s15
								float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 800911e:	ee70 0aa0 	vadd.f32	s1, s1, s1
 8009122:	f003 fafb 	bl	800c71c <LEAF_clip>
								int height2Int = floor(height2);
 8009126:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
 800912a:	ed8d 0a0b 	vstr	s0, [sp, #44]	; 0x2c
 800912e:	eeb7 7ac6 	vcvt.f64.f32	d7, s12
								float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8009132:	ee3e 5ac6 	vsub.f32	s10, s29, s12
								if (height2 < 1.0f)
 8009136:	eeb4 6aee 	vcmpe.f32	s12, s29
								int height2Int = floor(height2);
 800913a:	febb 7b47 	vrintm.f64	d7, d7
 800913e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
								if (height2 < 1.0f)
 8009142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
								int height2Int = floor(height2);
 8009146:	ee17 2a90 	vmov	r2, s15
								int height1Int = floor(height1);
 800914a:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
								float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 800914e:	f102 0101 	add.w	r1, r2, #1
								float height2Float = height2 - height2Int;
 8009152:	ee05 2a90 	vmov	s11, r2
								int height1Int = floor(height1);
 8009156:	febb 7b47 	vrintm.f64	d7, d7
 800915a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
								float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 800915e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
								float height2Float = height2 - height2Int;
 8009162:	eef8 4ae5 	vcvt.f32.s32	s9, s11
								float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8009166:	eb02 0242 	add.w	r2, r2, r2, lsl #1
								float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 800916a:	ee3e 7ac0 	vsub.f32	s14, s29, s0
								int height1Int = floor(height1);
 800916e:	ee17 3a90 	vmov	r3, s15
								float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8009172:	eb04 0081 	add.w	r0, r4, r1, lsl #2
								float height2Float = height2 - height2Int;
 8009176:	ee36 fa64 	vsub.f32	s30, s12, s9
								float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 800917a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
								float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 800917e:	f103 0101 	add.w	r1, r3, #1
								float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8009182:	eb05 0080 	add.w	r0, r5, r0, lsl #2
								float height1Float = height1 - height1Int;
 8009186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
								float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 800918a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800918e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
								float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8009192:	ee35 5a24 	vadd.f32	s10, s10, s9
 8009196:	edd0 4a48 	vldr	s9, [r0, #288]	; 0x120
 800919a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
								float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 800919e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80091a2:	ee37 7a27 	vadd.f32	s14, s14, s15
								float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 80091a6:	ee2f fa24 	vmul.f32	s30, s30, s9
								float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 80091aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80091ae:	eb05 0181 	add.w	r1, r5, r1, lsl #2
								float height1Float = height1 - height1Int;
 80091b2:	ee70 7a67 	vsub.f32	s15, s0, s15
								float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 80091b6:	ed92 4a48 	vldr	s8, [r2, #288]	; 0x120
								float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 80091ba:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80091be:	edd1 4a24 	vldr	s9, [r1, #144]	; 0x90
								float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 80091c2:	eea4 fa05 	vfma.f32	s30, s8, s10
								float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 80091c6:	ed93 5a24 	vldr	s10, [r3, #144]	; 0x90
 80091ca:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80091ce:	eee5 7a07 	vfma.f32	s15, s10, s14
								thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 80091d2:	ee2f fa8f 	vmul.f32	s30, s31, s30
 80091d6:	eea8 faa7 	vfma.f32	s30, s17, s15
								if (height2 < 1.0f)
 80091da:	f100 82b7 	bmi.w	800974c <audioTick+0xce0>
									d2 = 1.0f / ((dAp[2][1][j] * LEAF_clip(stringFundamentals[2][1], fakedFreq, stringFundamentals[2][2])) + dBs[2][1][j]);
 80091de:	ed9b 7a3c 	vldr	s14, [fp, #240]	; 0xf0
 80091e2:	eef0 0a48 	vmov.f32	s1, s16
 80091e6:	ed99 1a08 	vldr	s2, [r9, #32]
 80091ea:	ed99 0a07 	vldr	s0, [r9, #28]
 80091ee:	ed8d 7a0a 	vstr	s14, [sp, #40]	; 0x28
 80091f2:	f003 fa93 	bl	800c71c <LEAF_clip>
 80091f6:	edd8 7a3c 	vldr	s15, [r8, #240]	; 0xf0
 80091fa:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 80091fe:	eddd 6a0b 	vldr	s13, [sp, #44]	; 0x2c
 8009202:	eee7 7a00 	vfma.f32	s15, s14, s0
 8009206:	ee8e 6aa7 	vdiv.f32	s12, s29, s15
									d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
 800920a:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
								if (height1 < 1.0f)
 800920e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
									d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
 8009212:	eef0 0a48 	vmov.f32	s1, s16
								if (height1 < 1.0f)
 8009216:	eef4 6ae7 	vcmpe.f32	s13, s15
 800921a:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
 800921e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009222:	f100 8280 	bmi.w	8009726 <audioTick+0xcba>
									d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
 8009226:	ed99 1a05 	vldr	s2, [r9, #20]
 800922a:	ed99 0a04 	vldr	s0, [r9, #16]
 800922e:	ed9b 8a24 	vldr	s16, [fp, #144]	; 0x90
 8009232:	f003 fa73 	bl	800c71c <LEAF_clip>
 8009236:	ed98 7a24 	vldr	s14, [r8, #144]	; 0x90
 800923a:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 800923e:	eea8 7a00 	vfma.f32	s14, s16, s0
 8009242:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
 8009246:	eec7 6a87 	vdiv.f32	s13, s15, s14
							tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
 800924a:	4a91      	ldr	r2, [pc, #580]	; (8009490 <audioTick+0xa24>)
						for (int j = 0; j < NUM_OVERTONES; j++)
 800924c:	3401      	adds	r4, #1
							tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
 800924e:	4991      	ldr	r1, [pc, #580]	; (8009494 <audioTick+0xa28>)
 8009250:	f10b 0b04 	add.w	fp, fp, #4
 8009254:	7813      	ldrb	r3, [r2, #0]
 8009256:	4615      	mov	r5, r2
 8009258:	ed91 0a01 	vldr	s0, [r1, #4]
 800925c:	f108 0804 	add.w	r8, r8, #4
								thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
 8009260:	ee6f 7a86 	vmul.f32	s15, s31, s12
							tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
 8009264:	498c      	ldr	r1, [pc, #560]	; (8009498 <audioTick+0xa2c>)
 8009266:	ee20 0a2d 	vmul.f32	s0, s0, s27
 800926a:	9805      	ldr	r0, [sp, #20]
 800926c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
								thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
 8009270:	eee6 7aa8 	vfma.f32	s15, s13, s17
							tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
 8009274:	ed93 7a00 	vldr	s14, [r3]
 8009278:	ee20 0a07 	vmul.f32	s0, s0, s14
 800927c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009280:	f002 fbce 	bl	800ba20 <tADSRT_setDecay>
							tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain * (randomFactors[currentRandom])));
 8009284:	782b      	ldrb	r3, [r5, #0]
 8009286:	4984      	ldr	r1, [pc, #528]	; (8009498 <audioTick+0xa2c>)
 8009288:	9a05      	ldr	r2, [sp, #20]
 800928a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800928e:	4610      	mov	r0, r2
 8009290:	3204      	adds	r2, #4
 8009292:	ed93 0a00 	vldr	s0, [r3]
 8009296:	9205      	str	r2, [sp, #20]
 8009298:	ee29 0a00 	vmul.f32	s0, s18, s0
 800929c:	ee20 0a0f 	vmul.f32	s0, s0, s30
 80092a0:	f002 fbf6 	bl	800ba90 <tADSRT_on>
							currentRandom++;
 80092a4:	782b      	ldrb	r3, [r5, #0]
						for (int j = 0; j < NUM_OVERTONES; j++)
 80092a6:	2c0b      	cmp	r4, #11
							currentRandom++;
 80092a8:	f103 0301 	add.w	r3, r3, #1
 80092ac:	702b      	strb	r3, [r5, #0]
						for (int j = 0; j < NUM_OVERTONES; j++)
 80092ae:	f000 8275 	beq.w	800979c <audioTick+0xd30>
							float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
 80092b2:	4b78      	ldr	r3, [pc, #480]	; (8009494 <audioTick+0xa28>)
 80092b4:	9a08      	ldr	r2, [sp, #32]
 80092b6:	ed93 8a02 	vldr	s16, [r3, #8]
							int thisString = i + firstString;
 80092ba:	4b78      	ldr	r3, [pc, #480]	; (800949c <audioTick+0xa30>)
							float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
 80092bc:	edd2 7a00 	vldr	s15, [r2]
 80092c0:	ee28 8a0e 	vmul.f32	s16, s16, s28
							int thisString = i + firstString;
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	9a07      	ldr	r2, [sp, #28]
							float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
 80092c8:	ee28 8a27 	vmul.f32	s16, s16, s15
							int thisString = i + firstString;
 80092cc:	4413      	add	r3, r2
							if (thisString < 6)
 80092ce:	2b05      	cmp	r3, #5
 80092d0:	f77f aef8 	ble.w	80090c4 <audioTick+0x658>
								stringFade = (float)(thisString - 6.0f) * 0.2f;
 80092d4:	ee07 3a90 	vmov	s15, r3
								float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 80092d8:	ed99 7a03 	vldr	s14, [r9, #12]
 80092dc:	eeb0 1a4a 	vmov.f32	s2, s20
								float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 80092e0:	4d6a      	ldr	r5, [pc, #424]	; (800948c <audioTick+0xa20>)
								stringFade = (float)(thisString - 6.0f) * 0.2f;
 80092e2:	eef8 8ae7 	vcvt.f32.s32	s17, s15
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80092e6:	edd9 7a05 	vldr	s15, [r9, #20]
 80092ea:	ee78 6a47 	vsub.f32	s13, s16, s14
 80092ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
								stringFade = (float)(thisString - 6.0f) * 0.2f;
 80092f2:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
								float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 80092f6:	eeb0 0a69 	vmov.f32	s0, s19
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80092fa:	eec6 0aa7 	vdiv.f32	s1, s13, s15
								stringFade = (float)(thisString - 6.0f) * 0.2f;
 80092fe:	ee78 8ac7 	vsub.f32	s17, s17, s14
								thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 8009302:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
								stringFade = (float)(thisString - 6.0f) * 0.2f;
 8009306:	ee68 8aac 	vmul.f32	s17, s17, s25
								thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 800930a:	ee7e fae8 	vsub.f32	s31, s29, s17
								float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 800930e:	ee70 0aa0 	vadd.f32	s1, s1, s1
 8009312:	f003 fa03 	bl	800c71c <LEAF_clip>
								float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
 8009316:	ed99 7a00 	vldr	s14, [r9]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800931a:	edd9 7a02 	vldr	s15, [r9, #8]
								float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
 800931e:	eeb0 1a4a 	vmov.f32	s2, s20
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8009322:	ee78 6a47 	vsub.f32	s13, s16, s14
								float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8009326:	ed8d 0a0a 	vstr	s0, [sp, #40]	; 0x28
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800932a:	ee77 7ac7 	vsub.f32	s15, s15, s14
								float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
 800932e:	eeb0 0a69 	vmov.f32	s0, s19
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8009332:	eec6 0aa7 	vdiv.f32	s1, s13, s15
								float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
 8009336:	ee70 0aa0 	vadd.f32	s1, s1, s1
 800933a:	f003 f9ef 	bl	800c71c <LEAF_clip>
								int height2Int = floor(height2);
 800933e:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
								int height1Int = floor(height1);
 8009342:	eeb7 4ac0 	vcvt.f64.f32	d4, s0
 8009346:	ed8d 0a0b 	vstr	s0, [sp, #44]	; 0x2c
								int height2Int = floor(height2);
 800934a:	eeb7 7ac6 	vcvt.f64.f32	d7, s12
								if (height2 < 1.0f)
 800934e:	eeb4 6aee 	vcmpe.f32	s12, s29
								int height1Int = floor(height1);
 8009352:	febb 4b44 	vrintm.f64	d4, d4
								int height2Int = floor(height2);
 8009356:	febb 7b47 	vrintm.f64	d7, d7
 800935a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
								if (height2 < 1.0f)
 800935e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
								int height2Int = floor(height2);
 8009362:	ee17 1a90 	vmov	r1, s15
								int height1Int = floor(height1);
 8009366:	eefd 7bc4 	vcvt.s32.f64	s15, d4
								float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 800936a:	f101 0301 	add.w	r3, r1, #1
 800936e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
								int height1Int = floor(height1);
 8009372:	ee17 2a90 	vmov	r2, s15
								float height2Float = height2 - height2Int;
 8009376:	ee07 1a90 	vmov	s15, r1
								float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 800937a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
								float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 800937e:	f102 0101 	add.w	r1, r2, #1
								float height2Float = height2 - height2Int;
 8009382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
								float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8009386:	eb04 0383 	add.w	r3, r4, r3, lsl #2
								float height1Float = height1 - height1Int;
 800938a:	ee07 2a10 	vmov	s14, r2
								float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 800938e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
								float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8009392:	eb02 0242 	add.w	r2, r2, r2, lsl #1
								float height2Float = height2 - height2Int;
 8009396:	ee76 7a67 	vsub.f32	s15, s12, s15
								float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 800939a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
								float height1Float = height1 - height1Int;
 800939e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
								float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 80093a2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
								float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 80093a6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80093aa:	ed93 5a48 	vldr	s10, [r3, #288]	; 0x120
								float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 80093ae:	eb04 0181 	add.w	r1, r4, r1, lsl #2
								float height1Float = height1 - height1Int;
 80093b2:	ee30 7a47 	vsub.f32	s14, s0, s14
								float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 80093b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
								float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 80093ba:	ed90 fa24 	vldr	s30, [r0, #144]	; 0x90
								float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 80093be:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80093c2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
								float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 80093c6:	eea5 fa27 	vfma.f32	s30, s10, s15
								float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 80093ca:	ed92 5a24 	vldr	s10, [r2, #144]	; 0x90
 80093ce:	edd3 7a00 	vldr	s15, [r3]
 80093d2:	eee5 7a07 	vfma.f32	s15, s10, s14
								thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 80093d6:	ee2f fa8f 	vmul.f32	s30, s31, s30
 80093da:	eea8 faa7 	vfma.f32	s30, s17, s15
								if (height2 < 1.0f)
 80093de:	f100 818b 	bmi.w	80096f8 <audioTick+0xc8c>
									d2 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
 80093e2:	ed9b 7a24 	vldr	s14, [fp, #144]	; 0x90
 80093e6:	eef0 0a48 	vmov.f32	s1, s16
 80093ea:	ed99 1a05 	vldr	s2, [r9, #20]
 80093ee:	ed99 0a04 	vldr	s0, [r9, #16]
 80093f2:	ed8d 7a0a 	vstr	s14, [sp, #40]	; 0x28
 80093f6:	f003 f991 	bl	800c71c <LEAF_clip>
 80093fa:	edd8 7a24 	vldr	s15, [r8, #144]	; 0x90
 80093fe:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 8009402:	eddd 6a0b 	vldr	s13, [sp, #44]	; 0x2c
 8009406:	eee7 7a00 	vfma.f32	s15, s14, s0
 800940a:	ee8e 6aa7 	vdiv.f32	s12, s29, s15
									d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
 800940e:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
								if (height1 < 1.0f)
 8009412:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
									d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
 8009416:	eef0 0a48 	vmov.f32	s1, s16
								if (height1 < 1.0f)
 800941a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800941e:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
 8009422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009426:	f100 8154 	bmi.w	80096d2 <audioTick+0xc66>
									d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
 800942a:	ed99 1a02 	vldr	s2, [r9, #8]
 800942e:	ed99 0a01 	vldr	s0, [r9, #4]
 8009432:	ed9b 8a0c 	vldr	s16, [fp, #48]	; 0x30
 8009436:	f003 f971 	bl	800c71c <LEAF_clip>
 800943a:	ed98 7a0c 	vldr	s14, [r8, #48]	; 0x30
 800943e:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8009442:	eea8 7a00 	vfma.f32	s14, s16, s0
 8009446:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
 800944a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800944e:	e6fc      	b.n	800924a <audioTick+0x7de>
				else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
 8009450:	dd0c      	ble.n	800946c <audioTick+0xa00>
 8009452:	b95a      	cbnz	r2, 800946c <audioTick+0xa00>
					if (voice == 0)
 8009454:	f1b9 0f00 	cmp.w	r9, #0
 8009458:	d032      	beq.n	80094c0 <audioTick+0xa54>
					else if ((voice == 1)||(voice == 3))
 800945a:	f029 0202 	bic.w	r2, r9, #2
 800945e:	2a01      	cmp	r2, #1
 8009460:	d03c      	beq.n	80094dc <audioTick+0xa70>
					else if (voice == 2)
 8009462:	f1b9 0f02 	cmp.w	r9, #2
 8009466:	f000 81df 	beq.w	8009828 <audioTick+0xdbc>
 800946a:	2200      	movs	r2, #0
				previousStringInputs[i] = stringInputs[i];
 800946c:	9b00      	ldr	r3, [sp, #0]
			for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 800946e:	3501      	adds	r5, #1
 8009470:	f10b 0b04 	add.w	fp, fp, #4
				previousStringInputs[i] = stringInputs[i];
 8009474:	f848 2c04 	str.w	r2, [r8, #-4]
			for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8009478:	330c      	adds	r3, #12
 800947a:	2d04      	cmp	r5, #4
 800947c:	9300      	str	r3, [sp, #0]
 800947e:	f47f ad9e 	bne.w	8008fbe <audioTick+0x552>
 8009482:	464c      	mov	r4, r9
 8009484:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8009488:	e4fb      	b.n	8008e82 <audioTick+0x416>
 800948a:	bf00      	nop
 800948c:	20000750 	.word	0x20000750
 8009490:	2001771d 	.word	0x2001771d
 8009494:	20017938 	.word	0x20017938
 8009498:	20018e1c 	.word	0x20018e1c
 800949c:	20000bb4 	.word	0x20000bb4
					prevSamp[j]+=tempSamp * volumeSmoothed;
 80094a0:	4bd7      	ldr	r3, [pc, #860]	; (8009800 <audioTick+0xd94>)
 80094a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80094a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80094aa:	ed83 7a02 	vstr	s14, [r3, #8]
 80094ae:	4bd4      	ldr	r3, [pc, #848]	; (8009800 <audioTick+0xd94>)
 80094b0:	ed93 7a03 	vldr	s14, [r3, #12]
 80094b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094b8:	edc3 7a03 	vstr	s15, [r3, #12]
 80094bc:	f7ff bb5e 	b.w	8008b7c <audioTick+0x110>
						tLivingString2_setTargetLev(&strings[i], 0.0f);
 80094c0:	eeb0 0a69 	vmov.f32	s0, s19
 80094c4:	4658      	mov	r0, fp
 80094c6:	f003 fead 	bl	800d224 <tLivingString2_setTargetLev>
						tLivingString2_setLevMode(&strings[i], 0);
 80094ca:	4658      	mov	r0, fp
 80094cc:	4649      	mov	r1, r9
 80094ce:	f003 fee5 	bl	800d29c <tLivingString2_setLevMode>
						tLivingString2_setDecay(&strings[i], 0.1f);
 80094d2:	eeb0 0a4d 	vmov.f32	s0, s26
 80094d6:	4658      	mov	r0, fp
 80094d8:	f003 fe8e 	bl	800d1f8 <tLivingString2_setDecay>
						tADSRT_off(&envelopes[i][0]);
 80094dc:	9c00      	ldr	r4, [sp, #0]
 80094de:	4620      	mov	r0, r4
 80094e0:	f002 fae8 	bl	800bab4 <tADSRT_off>
						tADSRT_off(&envelopes[i][1]);
 80094e4:	1d20      	adds	r0, r4, #4
 80094e6:	f002 fae5 	bl	800bab4 <tADSRT_off>
						tADSRT_off(&envelopes[i][2]);
 80094ea:	f104 0008 	add.w	r0, r4, #8
 80094ee:	f002 fae1 	bl	800bab4 <tADSRT_off>
						tADSRT_off(&fenvelopes[i]);
 80094f2:	4bc4      	ldr	r3, [pc, #784]	; (8009804 <audioTick+0xd98>)
 80094f4:	eb03 0085 	add.w	r0, r3, r5, lsl #2
 80094f8:	f002 fadc 	bl	800bab4 <tADSRT_off>
 80094fc:	9b02      	ldr	r3, [sp, #8]
 80094fe:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8009502:	9b01      	ldr	r3, [sp, #4]
 8009504:	f8d3 9000 	ldr.w	r9, [r3]
 8009508:	e7b0      	b.n	800946c <audioTick+0xa00>
						tLivingString2_setLevMode(&strings[i], (params[2] > 0.5f));
 800950a:	4bbf      	ldr	r3, [pc, #764]	; (8009808 <audioTick+0xd9c>)
						tADSRT_on(&envelopes[i][0], amplitz);
 800950c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8009510:	4abe      	ldr	r2, [pc, #760]	; (800980c <audioTick+0xda0>)
 8009512:	eeb0 0a49 	vmov.f32	s0, s18
						tLivingString2_setLevMode(&strings[i], (params[2] > 0.5f));
 8009516:	9305      	str	r3, [sp, #20]
 8009518:	00ab      	lsls	r3, r5, #2
 800951a:	18d4      	adds	r4, r2, r3
						tADSRT_on(&envelopes[i][0], amplitz);
 800951c:	4abc      	ldr	r2, [pc, #752]	; (8009810 <audioTick+0xda4>)
 800951e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8009522:	ee08 4a10 	vmov	s16, r4
 8009526:	f002 fab3 	bl	800ba90 <tADSRT_on>
						tADSRT_on(&envelopes[i][1], amplitz);
 800952a:	9a00      	ldr	r2, [sp, #0]
 800952c:	eeb0 0a49 	vmov.f32	s0, s18
 8009530:	1d10      	adds	r0, r2, #4
 8009532:	f002 faad 	bl	800ba90 <tADSRT_on>
						tADSRT_on(&envelopes[i][2], amplitz);
 8009536:	9a00      	ldr	r2, [sp, #0]
 8009538:	eeb0 0a49 	vmov.f32	s0, s18
 800953c:	f102 0008 	add.w	r0, r2, #8
 8009540:	f002 faa6 	bl	800ba90 <tADSRT_on>
						tADSRT_on(&fenvelopes[i], 1.0f);
 8009544:	4aaf      	ldr	r2, [pc, #700]	; (8009804 <audioTick+0xd98>)
 8009546:	00ab      	lsls	r3, r5, #2
 8009548:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800954c:	18d0      	adds	r0, r2, r3
 800954e:	f002 fa9f 	bl	800ba90 <tADSRT_on>
						tLivingString2_setLevMode(&strings[i], (params[2] > 0.5f));
 8009552:	9b05      	ldr	r3, [sp, #20]
 8009554:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009558:	4620      	mov	r0, r4
 800955a:	ed93 7a02 	vldr	s14, [r3, #8]
 800955e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009566:	bfcc      	ite	gt
 8009568:	2101      	movgt	r1, #1
 800956a:	2100      	movle	r1, #0
 800956c:	f003 fe96 	bl	800d29c <tLivingString2_setLevMode>
						tLivingString2_setTargetLev(&strings[i], params[0]);
 8009570:	9b05      	ldr	r3, [sp, #20]
 8009572:	4620      	mov	r0, r4
 8009574:	ed93 0a00 	vldr	s0, [r3]
 8009578:	f003 fe54 	bl	800d224 <tLivingString2_setTargetLev>
						int delayLength = (int)strings[i]->waveLengthInSamples;
 800957c:	f8db 2000 	ldr.w	r2, [fp]
						int beforeLength = (delayLength * knobScaled[2]);
 8009580:	4ba4      	ldr	r3, [pc, #656]	; (8009814 <audioTick+0xda8>)
						float pluckAmp = amplitz * params[11] * 4.0f;
 8009582:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
						int delayLength = (int)strings[i]->waveLengthInSamples;
 8009586:	edd2 5a02 	vldr	s11, [r2, #8]
						int afterLength = (delayLength * (1.0f - knobScaled[2]));
 800958a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
						int beforeLength = (delayLength * knobScaled[2]);
 800958e:	edd3 6a02 	vldr	s13, [r3, #8]
						float pluckAmp = amplitz * params[11] * 4.0f;
 8009592:	9b05      	ldr	r3, [sp, #20]
						int delayLength = (int)strings[i]->waveLengthInSamples;
 8009594:	eefd 5ae5 	vcvt.s32.f32	s11, s11
						int afterLength = (delayLength * (1.0f - knobScaled[2]));
 8009598:	ee37 7a66 	vsub.f32	s14, s14, s13
						float pluckAmp = amplitz * params[11] * 4.0f;
 800959c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
						int delayLength = (int)strings[i]->waveLengthInSamples;
 80095a0:	ee15 ca90 	vmov	ip, s11
						float pluckAmp = amplitz * params[11] * 4.0f;
 80095a4:	ee67 7a86 	vmul.f32	s15, s15, s12
						int beforeLength = (delayLength * knobScaled[2]);
 80095a8:	eeb8 6ae5 	vcvt.f32.s32	s12, s11
						float pluckAmp = amplitz * params[11] * 4.0f;
 80095ac:	ee27 9a89 	vmul.f32	s18, s15, s18
						int beforeLength = (delayLength * knobScaled[2]);
 80095b0:	ee66 6a26 	vmul.f32	s13, s12, s13
						int afterLength = (delayLength * (1.0f - knobScaled[2]));
 80095b4:	ee67 7a06 	vmul.f32	s15, s14, s12
						int beforeLength = (delayLength * knobScaled[2]);
 80095b8:	eebd 7ae6 	vcvt.s32.f32	s14, s13
						int afterLength = (delayLength * (1.0f - knobScaled[2]));
 80095bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
						int beforeLength = (delayLength * knobScaled[2]);
 80095c0:	ee17 1a10 	vmov	r1, s14
						if (beforeLength > 0)
 80095c4:	2900      	cmp	r1, #0
 80095c6:	f340 8118 	ble.w	80097fa <audioTick+0xd8e>
							beforePickIncrement = pluckAmp / beforeLength;
 80095ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80095ce:	ee89 6a07 	vdiv.f32	s12, s18, s14
						if (afterLength > 0)
 80095d2:	ee17 0a90 	vmov	r0, s15
 80095d6:	2800      	cmp	r0, #0
 80095d8:	dd03      	ble.n	80095e2 <audioTick+0xb76>
							afterPickIncrement = pluckAmp / afterLength;
 80095da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095de:	ee89 9a27 	vdiv.f32	s18, s18, s15
						for (int j = 0; j < delayLength; j++)
 80095e2:	f1bc 0f00 	cmp.w	ip, #0
 80095e6:	f340 80c8 	ble.w	800977a <audioTick+0xd0e>
						float value = 0.0f;
 80095ea:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8009818 <audioTick+0xdac>
								strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
 80095ee:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80095f2:	e020      	b.n	8009636 <audioTick+0xbca>
								strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
 80095f4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
								value += beforePickIncrement;
 80095f6:	ee77 7a86 	vadd.f32	s15, s15, s12
								strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
 80095fa:	6982      	ldr	r2, [r0, #24]
 80095fc:	6884      	ldr	r4, [r0, #8]
 80095fe:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8009602:	444a      	add	r2, r9
 8009604:	6840      	ldr	r0, [r0, #4]
 8009606:	4022      	ands	r2, r4
 8009608:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800960c:	ed82 7a00 	vstr	s14, [r2]
								strings[i]->delLB->buff[(j+strings[i]->delLB->outPoint) & strings[i]->delLB->bufferMask] = value * 0.5f;
 8009610:	f8db 2000 	ldr.w	r2, [fp]
 8009614:	6b90      	ldr	r0, [r2, #56]	; 0x38
								strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
 8009616:	6982      	ldr	r2, [r0, #24]
 8009618:	6884      	ldr	r4, [r0, #8]
 800961a:	444a      	add	r2, r9
 800961c:	6840      	ldr	r0, [r0, #4]
						for (int j = 0; j < delayLength; j++)
 800961e:	f109 0901 	add.w	r9, r9, #1
								strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
 8009622:	4022      	ands	r2, r4
						for (int j = 0; j < delayLength; j++)
 8009624:	45cc      	cmp	ip, r9
								strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
 8009626:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800962a:	ed82 7a00 	vstr	s14, [r2]
						for (int j = 0; j < delayLength; j++)
 800962e:	f000 80a4 	beq.w	800977a <audioTick+0xd0e>
 8009632:	f8db 2000 	ldr.w	r2, [fp]
							if (j < beforeLength)
 8009636:	4549      	cmp	r1, r9
 8009638:	dcdc      	bgt.n	80095f4 <audioTick+0xb88>
								strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
 800963a:	6b10      	ldr	r0, [r2, #48]	; 0x30
								value -= afterPickIncrement;
 800963c:	ee77 7ac9 	vsub.f32	s15, s15, s18
								strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
 8009640:	6982      	ldr	r2, [r0, #24]
 8009642:	6884      	ldr	r4, [r0, #8]
 8009644:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8009648:	444a      	add	r2, r9
 800964a:	6840      	ldr	r0, [r0, #4]
 800964c:	4022      	ands	r2, r4
 800964e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009652:	ed82 7a00 	vstr	s14, [r2]
								strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
 8009656:	f8db 2000 	ldr.w	r2, [fp]
 800965a:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800965c:	e7db      	b.n	8009616 <audioTick+0xbaa>
						tADSRT_setDecay(&envelopes[i][0], 1.0f + (20000.0f * knobScaled[3]));
 800965e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8009662:	4b6c      	ldr	r3, [pc, #432]	; (8009814 <audioTick+0xda8>)
 8009664:	f8dd 9000 	ldr.w	r9, [sp]
 8009668:	edd3 7a03 	vldr	s15, [r3, #12]
 800966c:	eeb0 0a48 	vmov.f32	s0, s16
 8009670:	eddf 8a6a 	vldr	s17, [pc, #424]	; 800981c <audioTick+0xdb0>
 8009674:	4648      	mov	r0, r9
 8009676:	eea7 0aa8 	vfma.f32	s0, s15, s17
 800967a:	1d04      	adds	r4, r0, #4
 800967c:	f002 f9d0 	bl	800ba20 <tADSRT_setDecay>
						tADSRT_setDecay(&envelopes[i][1], 1.0f + (20000.0f * knobScaled[2]));
 8009680:	4b64      	ldr	r3, [pc, #400]	; (8009814 <audioTick+0xda8>)
 8009682:	eeb0 0a48 	vmov.f32	s0, s16
 8009686:	4620      	mov	r0, r4
 8009688:	edd3 7a02 	vldr	s15, [r3, #8]
 800968c:	eea7 0aa8 	vfma.f32	s0, s15, s17
 8009690:	f002 f9c6 	bl	800ba20 <tADSRT_setDecay>
						tADSRT_on(&envelopes[i][0], amplitz);
 8009694:	eeb0 0a49 	vmov.f32	s0, s18
 8009698:	4648      	mov	r0, r9
 800969a:	f002 f9f9 	bl	800ba90 <tADSRT_on>
						tADSRT_on(&envelopes[i][1], amplitz);
 800969e:	eeb0 0a49 	vmov.f32	s0, s18
 80096a2:	4620      	mov	r0, r4
 80096a4:	f002 f9f4 	bl	800ba90 <tADSRT_on>
						tADSRT_on(&envelopes[i][2], 1.0f);
 80096a8:	eeb0 0a48 	vmov.f32	s0, s16
 80096ac:	f109 0008 	add.w	r0, r9, #8
 80096b0:	f002 f9ee 	bl	800ba90 <tADSRT_on>
						tADSRT_on(&fenvelopes[i], 1.0f);
 80096b4:	eeb0 0a48 	vmov.f32	s0, s16
 80096b8:	00ab      	lsls	r3, r5, #2
 80096ba:	4618      	mov	r0, r3
 80096bc:	4b51      	ldr	r3, [pc, #324]	; (8009804 <audioTick+0xd98>)
 80096be:	4418      	add	r0, r3
						tADSRT_on(&envelopes[i][1],  params[2] * 0.1f);
 80096c0:	f002 f9e6 	bl	800ba90 <tADSRT_on>
 80096c4:	9b02      	ldr	r3, [sp, #8]
 80096c6:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80096ca:	9b01      	ldr	r3, [sp, #4]
 80096cc:	f8d3 9000 	ldr.w	r9, [r3]
 80096d0:	e6cc      	b.n	800946c <audioTick+0xa00>
									d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
 80096d2:	ed99 1a01 	vldr	s2, [r9, #4]
 80096d6:	ed99 0a00 	vldr	s0, [r9]
 80096da:	ed9b 8a00 	vldr	s16, [fp]
 80096de:	f003 f81d 	bl	800c71c <LEAF_clip>
 80096e2:	ed98 7a00 	vldr	s14, [r8]
 80096e6:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 80096ea:	eea8 7a00 	vfma.f32	s14, s16, s0
 80096ee:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
 80096f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80096f6:	e5a8      	b.n	800924a <audioTick+0x7de>
									d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
 80096f8:	ed9b 7a18 	vldr	s14, [fp, #96]	; 0x60
 80096fc:	eef0 0a48 	vmov.f32	s1, s16
 8009700:	ed99 1a04 	vldr	s2, [r9, #16]
 8009704:	ed99 0a03 	vldr	s0, [r9, #12]
 8009708:	ed8d 7a0a 	vstr	s14, [sp, #40]	; 0x28
 800970c:	f003 f806 	bl	800c71c <LEAF_clip>
 8009710:	edd8 7a18 	vldr	s15, [r8, #96]	; 0x60
 8009714:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 8009718:	eddd 6a0b 	vldr	s13, [sp, #44]	; 0x2c
 800971c:	eee7 7a00 	vfma.f32	s15, s14, s0
 8009720:	ee8e 6aa7 	vdiv.f32	s12, s29, s15
 8009724:	e673      	b.n	800940e <audioTick+0x9a2>
									d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
 8009726:	ed99 1a04 	vldr	s2, [r9, #16]
 800972a:	ed99 0a03 	vldr	s0, [r9, #12]
 800972e:	ed9b 8a18 	vldr	s16, [fp, #96]	; 0x60
 8009732:	f002 fff3 	bl	800c71c <LEAF_clip>
 8009736:	ed98 7a18 	vldr	s14, [r8, #96]	; 0x60
 800973a:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 800973e:	eea8 7a00 	vfma.f32	s14, s16, s0
 8009742:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
 8009746:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800974a:	e57e      	b.n	800924a <audioTick+0x7de>
									d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
 800974c:	ed9b 7a30 	vldr	s14, [fp, #192]	; 0xc0
 8009750:	eef0 0a48 	vmov.f32	s1, s16
 8009754:	ed99 1a07 	vldr	s2, [r9, #28]
 8009758:	ed99 0a06 	vldr	s0, [r9, #24]
 800975c:	ed8d 7a0a 	vstr	s14, [sp, #40]	; 0x28
 8009760:	f002 ffdc 	bl	800c71c <LEAF_clip>
 8009764:	edd8 7a30 	vldr	s15, [r8, #192]	; 0xc0
 8009768:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 800976c:	eddd 6a0b 	vldr	s13, [sp, #44]	; 0x2c
 8009770:	eee7 7a00 	vfma.f32	s15, s14, s0
 8009774:	ee8e 6aa7 	vdiv.f32	s12, s29, s15
 8009778:	e547      	b.n	800920a <audioTick+0x79e>
						tLivingString2_setDecay(&strings[i], params[1] * 80.0f);
 800977a:	ed93 0a01 	vldr	s0, [r3, #4]
 800977e:	ee18 0a10 	vmov	r0, s16
 8009782:	eddf 7a27 	vldr	s15, [pc, #156]	; 8009820 <audioTick+0xdb4>
 8009786:	ee20 0a27 	vmul.f32	s0, s0, s15
 800978a:	f003 fd35 	bl	800d1f8 <tLivingString2_setDecay>
 800978e:	9b02      	ldr	r3, [sp, #8]
 8009790:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8009794:	9b01      	ldr	r3, [sp, #4]
 8009796:	f8d3 9000 	ldr.w	r9, [r3]
 800979a:	e667      	b.n	800946c <audioTick+0xa00>
						tADSRT_setDecay(&fenvelopes[i], 250.0f * params[7] + 1.0f);
 800979c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80097a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097a2:	4b19      	ldr	r3, [pc, #100]	; (8009808 <audioTick+0xd9c>)
 80097a4:	4610      	mov	r0, r2
 80097a6:	4a17      	ldr	r2, [pc, #92]	; (8009804 <audioTick+0xd98>)
 80097a8:	eeb0 0a48 	vmov.f32	s0, s16
 80097ac:	ed93 7a07 	vldr	s14, [r3, #28]
 80097b0:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8009824 <audioTick+0xdb8>
 80097b4:	4410      	add	r0, r2
 80097b6:	9d07      	ldr	r5, [sp, #28]
 80097b8:	9307      	str	r3, [sp, #28]
 80097ba:	eea7 0a27 	vfma.f32	s0, s14, s15
 80097be:	9b00      	ldr	r3, [sp, #0]
 80097c0:	9005      	str	r0, [sp, #20]
 80097c2:	1d1c      	adds	r4, r3, #4
 80097c4:	e9dd b80c 	ldrd	fp, r8, [sp, #48]	; 0x30
 80097c8:	f002 f92a 	bl	800ba20 <tADSRT_setDecay>
						tADSRT_on(&fenvelopes[i],  amplitz);
 80097cc:	eeb0 0a49 	vmov.f32	s0, s18
 80097d0:	9805      	ldr	r0, [sp, #20]
 80097d2:	f002 f95d 	bl	800ba90 <tADSRT_on>
						tADSRT_setDecay(&envelopes[i][1], 2000.0f * params[1] + 1.0f);
 80097d6:	9b07      	ldr	r3, [sp, #28]
 80097d8:	eeb0 0a48 	vmov.f32	s0, s16
 80097dc:	4620      	mov	r0, r4
 80097de:	edd3 7a01 	vldr	s15, [r3, #4]
 80097e2:	9405      	str	r4, [sp, #20]
 80097e4:	eea7 0aad 	vfma.f32	s0, s15, s27
 80097e8:	f002 f91a 	bl	800ba20 <tADSRT_setDecay>
						tADSRT_on(&envelopes[i][1],  params[2] * 0.1f);
 80097ec:	9b07      	ldr	r3, [sp, #28]
 80097ee:	9805      	ldr	r0, [sp, #20]
 80097f0:	ed93 0a02 	vldr	s0, [r3, #8]
 80097f4:	ee20 0a0d 	vmul.f32	s0, s0, s26
 80097f8:	e762      	b.n	80096c0 <audioTick+0xc54>
							beforePickIncrement = pluckAmp;
 80097fa:	eeb0 6a49 	vmov.f32	s12, s18
 80097fe:	e6e8      	b.n	80095d2 <audioTick+0xb66>
 8009800:	20018dec 	.word	0x20018dec
 8009804:	2001921c 	.word	0x2001921c
 8009808:	20000d78 	.word	0x20000d78
 800980c:	20017928 	.word	0x20017928
 8009810:	20018d54 	.word	0x20018d54
 8009814:	20017938 	.word	0x20017938
 8009818:	00000000 	.word	0x00000000
 800981c:	469c4000 	.word	0x469c4000
 8009820:	42a00000 	.word	0x42a00000
 8009824:	437a0000 	.word	0x437a0000
 8009828:	4908      	ldr	r1, [pc, #32]	; (800984c <audioTick+0xde0>)
 800982a:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800982e:	f101 042c 	add.w	r4, r1, #44	; 0x2c
 8009832:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
 8009836:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
							tADSRT_off(&additiveEnv[i][j]);
 800983a:	4648      	mov	r0, r9
 800983c:	f109 0904 	add.w	r9, r9, #4
 8009840:	f002 f938 	bl	800bab4 <tADSRT_off>
						for (int j = 0; j < NUM_OVERTONES; j++)
 8009844:	45a1      	cmp	r9, r4
 8009846:	d1f8      	bne.n	800983a <audioTick+0xdce>
 8009848:	e73c      	b.n	80096c4 <audioTick+0xc58>
 800984a:	bf00      	nop
 800984c:	20000e08 	.word	0x20000e08

08009850 <audioFrame>:
	if (newBar)
 8009850:	4b73      	ldr	r3, [pc, #460]	; (8009a20 <audioFrame+0x1d0>)
{
 8009852:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009856:	ed2d 8b04 	vpush	{d8-d9}
	if (newBar)
 800985a:	6819      	ldr	r1, [r3, #0]
{
 800985c:	b089      	sub	sp, #36	; 0x24
 800985e:	4605      	mov	r5, r0
	if (newBar)
 8009860:	b151      	cbz	r1, 8009878 <audioFrame+0x28>
		int currentBarBufferL = currentBarBuffer;
 8009862:	4970      	ldr	r1, [pc, #448]	; (8009a24 <audioFrame+0x1d4>)
		if ((SPI_RX[6 + (8 * currentBarBufferL)] == 254) && (SPI_RX[7 + (8 * currentBarBufferL)] == 253))
 8009864:	4870      	ldr	r0, [pc, #448]	; (8009a28 <audioFrame+0x1d8>)
		int currentBarBufferL = currentBarBuffer;
 8009866:	680c      	ldr	r4, [r1, #0]
		if ((SPI_RX[6 + (8 * currentBarBufferL)] == 254) && (SPI_RX[7 + (8 * currentBarBufferL)] == 253))
 8009868:	eb00 01c4 	add.w	r1, r0, r4, lsl #3
 800986c:	798e      	ldrb	r6, [r1, #6]
 800986e:	2efe      	cmp	r6, #254	; 0xfe
 8009870:	f000 82c4 	beq.w	8009dfc <audioFrame+0x5ac>
		newBar = 0;
 8009874:	2100      	movs	r1, #0
 8009876:	6019      	str	r1, [r3, #0]
	if (newLevers)
 8009878:	4b6c      	ldr	r3, [pc, #432]	; (8009a2c <audioFrame+0x1dc>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	b15b      	cbz	r3, 8009896 <audioFrame+0x46>
		int currentLeverBufferL = currentLeverBuffer;
 800987e:	4b6c      	ldr	r3, [pc, #432]	; (8009a30 <audioFrame+0x1e0>)
		if ((SPI_LEVERS[72 + (currentLeverBufferL * 74)] == 254) && (SPI_LEVERS[73 + (currentLeverBufferL * 74)] == 253))
 8009880:	264a      	movs	r6, #74	; 0x4a
 8009882:	4f6c      	ldr	r7, [pc, #432]	; (8009a34 <audioFrame+0x1e4>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	fb06 f603 	mul.w	r6, r6, r3
 800988a:	19bb      	adds	r3, r7, r6
 800988c:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8009890:	29fe      	cmp	r1, #254	; 0xfe
 8009892:	f000 80f1 	beq.w	8009a78 <audioFrame+0x228>
 8009896:	4c68      	ldr	r4, [pc, #416]	; (8009a38 <audioFrame+0x1e8>)
	if ((voice == 0) ||  (voice == 1) || (voice == 2))
 8009898:	6821      	ldr	r1, [r4, #0]
 800989a:	2902      	cmp	r1, #2
 800989c:	f240 80a8 	bls.w	80099f0 <audioFrame+0x1a0>
				tLivingString2_setTargetLev(&strings[i], 0.0f);
 80098a0:	46a0      	mov	r8, r4
 80098a2:	460c      	mov	r4, r1
			for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 80098a4:	2700      	movs	r7, #0
			tLivingString2_setLevSmoothFactor(&strings[i], params[9] * 0.1f);
 80098a6:	ed9f 8a65 	vldr	s16, [pc, #404]	; 8009a3c <audioFrame+0x1ec>
			tLivingString2_setPrepPos(&strings[i], (knobScaled[0] * 0.8f) + 0.1f);
 80098aa:	ed9f 9a65 	vldr	s18, [pc, #404]	; 8009a40 <audioFrame+0x1f0>
				tLivingString2_setTargetLev(&strings[i], 0.0f);
 80098ae:	46a9      	mov	r9, r5
 80098b0:	eddf 8a64 	vldr	s17, [pc, #400]	; 8009a44 <audioFrame+0x1f4>
			if (stringInputs[i] > 0)
 80098b4:	4b64      	ldr	r3, [pc, #400]	; (8009a48 <audioFrame+0x1f8>)
		if (voice == 0)
 80098b6:	2c00      	cmp	r4, #0
 80098b8:	d13f      	bne.n	800993a <audioFrame+0xea>
				tLivingString2_setTargetLev(&strings[i], 0.0f);
 80098ba:	4e64      	ldr	r6, [pc, #400]	; (8009a4c <audioFrame+0x1fc>)
				tLivingString2_setLevMode(&strings[i], (params[2] > 0.5f));
 80098bc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
			if (stringInputs[i] > 0)
 80098c0:	58fb      	ldr	r3, [r7, r3]
				tLivingString2_setTargetLev(&strings[i], 0.0f);
 80098c2:	eeb0 0a68 	vmov.f32	s0, s17
 80098c6:	4632      	mov	r2, r6
 80098c8:	443e      	add	r6, r7
				tLivingString2_setLevMode(&strings[i], (params[2] > 0.5f));
 80098ca:	4d61      	ldr	r5, [pc, #388]	; (8009a50 <audioFrame+0x200>)
 80098cc:	4630      	mov	r0, r6
			if (stringInputs[i] > 0)
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d03e      	beq.n	8009950 <audioFrame+0x100>
				tLivingString2_setLevMode(&strings[i], (params[2] > 0.5f));
 80098d2:	ed95 7a02 	vldr	s14, [r5, #8]
 80098d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098de:	bfcc      	ite	gt
 80098e0:	2101      	movgt	r1, #1
 80098e2:	2100      	movle	r1, #0
 80098e4:	f003 fcda 	bl	800d29c <tLivingString2_setLevMode>
				tLivingString2_setTargetLev(&strings[i], params[0]);
 80098e8:	ed95 0a00 	vldr	s0, [r5]
 80098ec:	4630      	mov	r0, r6
 80098ee:	f003 fc99 	bl	800d224 <tLivingString2_setTargetLev>
			tLivingString2_setLevSmoothFactor(&strings[i], params[9] * 0.1f);
 80098f2:	ed95 0a09 	vldr	s0, [r5, #36]	; 0x24
 80098f6:	4630      	mov	r0, r6
			tLivingString2_setBrightness(&strings[i], knobScaled[3]);
 80098f8:	4c56      	ldr	r4, [pc, #344]	; (8009a54 <audioFrame+0x204>)
			tLivingString2_setLevSmoothFactor(&strings[i], params[9] * 0.1f);
 80098fa:	ee20 0a08 	vmul.f32	s0, s0, s16
 80098fe:	f003 fca5 	bl	800d24c <tLivingString2_setLevSmoothFactor>
			tLivingString2_setLevStrength(&strings[i], params[10] * 0.1f);
 8009902:	ed95 0a0a 	vldr	s0, [r5, #40]	; 0x28
 8009906:	4630      	mov	r0, r6
 8009908:	ee20 0a08 	vmul.f32	s0, s0, s16
 800990c:	f003 fcb2 	bl	800d274 <tLivingString2_setLevStrength>
			tLivingString2_setBrightness(&strings[i], knobScaled[3]);
 8009910:	ed94 0a03 	vldr	s0, [r4, #12]
 8009914:	4630      	mov	r0, r6
 8009916:	f003 fc2f 	bl	800d178 <tLivingString2_setBrightness>
			tLivingString2_setPickPos(&strings[i], knobScaled[2]);
 800991a:	ed94 0a02 	vldr	s0, [r4, #8]
 800991e:	4630      	mov	r0, r6
 8009920:	f003 fbe6 	bl	800d0f0 <tLivingString2_setPickPos>
			tLivingString2_setPrepPos(&strings[i], (knobScaled[0] * 0.8f) + 0.1f);
 8009924:	eeb0 0a48 	vmov.f32	s0, s16
 8009928:	edd4 7a00 	vldr	s15, [r4]
 800992c:	4630      	mov	r0, r6
 800992e:	eea7 0a89 	vfma.f32	s0, s15, s18
 8009932:	f003 fbef 	bl	800d114 <tLivingString2_setPrepPos>
 8009936:	f8d8 4000 	ldr.w	r4, [r8]
		if (voice == 3)
 800993a:	2c03      	cmp	r4, #3
 800993c:	d04e      	beq.n	80099dc <audioFrame+0x18c>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 800993e:	3704      	adds	r7, #4
 8009940:	2f10      	cmp	r7, #16
 8009942:	d00f      	beq.n	8009964 <audioFrame+0x114>
 8009944:	f8d8 4000 	ldr.w	r4, [r8]
			if (stringInputs[i] > 0)
 8009948:	4b3f      	ldr	r3, [pc, #252]	; (8009a48 <audioFrame+0x1f8>)
		if (voice == 0)
 800994a:	2c00      	cmp	r4, #0
 800994c:	d1f5      	bne.n	800993a <audioFrame+0xea>
 800994e:	e7b4      	b.n	80098ba <audioFrame+0x6a>
 8009950:	18be      	adds	r6, r7, r2
 8009952:	4d3f      	ldr	r5, [pc, #252]	; (8009a50 <audioFrame+0x200>)
				tLivingString2_setTargetLev(&strings[i], 0.0f);
 8009954:	4630      	mov	r0, r6
 8009956:	f003 fc65 	bl	800d224 <tLivingString2_setTargetLev>
				tLivingString2_setLevMode(&strings[i], 0);
 800995a:	4621      	mov	r1, r4
 800995c:	4630      	mov	r0, r6
 800995e:	f003 fc9d 	bl	800d29c <tLivingString2_setLevMode>
 8009962:	e7c6      	b.n	80098f2 <audioFrame+0xa2>
	if (codecReady)
 8009964:	4b3c      	ldr	r3, [pc, #240]	; (8009a58 <audioFrame+0x208>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	b39b      	cbz	r3, 80099d2 <audioFrame+0x182>
 800996a:	4c3c      	ldr	r4, [pc, #240]	; (8009a5c <audioFrame+0x20c>)
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 800996c:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 8009a60 <audioFrame+0x210>
 8009970:	eb04 0689 	add.w	r6, r4, r9, lsl #2
 8009974:	f504 7380 	add.w	r3, r4, #256	; 0x100
 8009978:	4634      	mov	r4, r6
 800997a:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 800997e:	f506 7601 	add.w	r6, r6, #516	; 0x204
 8009982:	f856 2c04 	ldr.w	r2, [r6, #-4]
			clipCatcher |= audioTick(theSamples);
 8009986:	a806      	add	r0, sp, #24
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 8009988:	f856 3b08 	ldr.w	r3, [r6], #8
 800998c:	3408      	adds	r4, #8
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 800998e:	0212      	lsls	r2, r2, #8
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 8009990:	021b      	lsls	r3, r3, #8
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 8009992:	ee07 2a10 	vmov	s14, r2
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 8009996:	ee07 3a90 	vmov	s15, r3
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 800999a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 800999e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 80099a2:	ee27 7a08 	vmul.f32	s14, s14, s16
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 80099a6:	ee67 7a88 	vmul.f32	s15, s15, s16
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 80099aa:	ed8d 7a06 	vstr	s14, [sp, #24]
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 80099ae:	edcd 7a07 	vstr	s15, [sp, #28]
			clipCatcher |= audioTick(theSamples);
 80099b2:	f7ff f85b 	bl	8008a6c <audioTick>
			audioOutBuffer[buffer_offset + i] = (int32_t)(theSamples[1] * TWO_TO_23);
 80099b6:	ed9d 7a07 	vldr	s14, [sp, #28]
			audioOutBuffer[buffer_offset + i + 1] = (int32_t)(theSamples[0] * TWO_TO_23);
 80099ba:	eddd 7a06 	vldr	s15, [sp, #24]
			audioOutBuffer[buffer_offset + i] = (int32_t)(theSamples[1] * TWO_TO_23);
 80099be:	eebe 7ae4 	vcvt.s32.f32	s14, s14, #23
			audioOutBuffer[buffer_offset + i + 1] = (int32_t)(theSamples[0] * TWO_TO_23);
 80099c2:	eefe 7ae4 	vcvt.s32.f32	s15, s15, #23
			audioOutBuffer[buffer_offset + i] = (int32_t)(theSamples[1] * TWO_TO_23);
 80099c6:	ed04 7a02 	vstr	s14, [r4, #-8]
			audioOutBuffer[buffer_offset + i + 1] = (int32_t)(theSamples[0] * TWO_TO_23);
 80099ca:	ed44 7a01 	vstr	s15, [r4, #-4]
		for (i = 0; i < (HALF_BUFFER_SIZE); i += 2)
 80099ce:	42ac      	cmp	r4, r5
 80099d0:	d1d7      	bne.n	8009982 <audioFrame+0x132>
}
 80099d2:	b009      	add	sp, #36	; 0x24
 80099d4:	ecbd 8b04 	vpop	{d8-d9}
 80099d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tADSRT_setSustain(&envelopes[i][0], params[14]);
 80099dc:	4d1c      	ldr	r5, [pc, #112]	; (8009a50 <audioFrame+0x200>)
 80099de:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80099e2:	4820      	ldr	r0, [pc, #128]	; (8009a64 <audioFrame+0x214>)
 80099e4:	ed95 0a0e 	vldr	s0, [r5, #56]	; 0x38
 80099e8:	4418      	add	r0, r3
 80099ea:	f002 f829 	bl	800ba40 <tADSRT_setSustain>
 80099ee:	e7a6      	b.n	800993e <audioFrame+0xee>
		tVZFilter_setFreq(&noiseFilt, faster_mtof(params[3] * 128.0f));
 80099f0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8009a50 <audioFrame+0x200>
 80099f4:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 8009a68 <audioFrame+0x218>
 80099f8:	ed98 0a03 	vldr	s0, [r8, #12]
 80099fc:	ee20 0a08 	vmul.f32	s0, s0, s16
 8009a00:	f002 ff54 	bl	800c8ac <faster_mtof>
 8009a04:	4819      	ldr	r0, [pc, #100]	; (8009a6c <audioFrame+0x21c>)
 8009a06:	f002 fe5d 	bl	800c6c4 <tVZFilter_setFreq>
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(params[4] * 128.0f));
 8009a0a:	ed98 0a04 	vldr	s0, [r8, #16]
 8009a0e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8009a12:	f002 ff4b 	bl	800c8ac <faster_mtof>
 8009a16:	4816      	ldr	r0, [pc, #88]	; (8009a70 <audioFrame+0x220>)
 8009a18:	f002 fe54 	bl	800c6c4 <tVZFilter_setFreq>
 8009a1c:	6821      	ldr	r1, [r4, #0]
 8009a1e:	e73f      	b.n	80098a0 <audioFrame+0x50>
 8009a20:	20000bc4 	.word	0x20000bc4
 8009a24:	20000ba4 	.word	0x20000ba4
 8009a28:	30000400 	.word	0x30000400
 8009a2c:	20000bc8 	.word	0x20000bc8
 8009a30:	20000bf0 	.word	0x20000bf0
 8009a34:	30000460 	.word	0x30000460
 8009a38:	20000bdc 	.word	0x20000bdc
 8009a3c:	3dcccccd 	.word	0x3dcccccd
 8009a40:	3f4ccccd 	.word	0x3f4ccccd
 8009a44:	00000000 	.word	0x00000000
 8009a48:	20017a18 	.word	0x20017a18
 8009a4c:	20017928 	.word	0x20017928
 8009a50:	20000d78 	.word	0x20000d78
 8009a54:	20017938 	.word	0x20017938
 8009a58:	20000ba0 	.word	0x20000ba0
 8009a5c:	30000000 	.word	0x30000000
 8009a60:	2ffffff6 	.word	0x2ffffff6
 8009a64:	20018d54 	.word	0x20018d54
 8009a68:	43000000 	.word	0x43000000
 8009a6c:	20000fcc 	.word	0x20000fcc
 8009a70:	20017988 	.word	0x20017988
 8009a74:	3b808081 	.word	0x3b808081
		if ((SPI_LEVERS[72 + (currentLeverBufferL * 74)] == 254) && (SPI_LEVERS[73 + (currentLeverBufferL * 74)] == 253))
 8009a78:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 8009a7c:	29fd      	cmp	r1, #253	; 0xfd
 8009a7e:	f47f af0a 	bne.w	8009896 <audioFrame+0x46>
				params[i] = SPI_LEVERS[(i + 56) + (currentLeverBuffer * 74)] * 0.003921568627451f; //scaled 0.0 to 1.0
 8009a82:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			whichTable = LEAF_clip(0, SPI_LEVERS[71 + (currentLeverBuffer * 74)] >> 2, 5);
 8009a86:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
				params[i] = SPI_LEVERS[(i + 56) + (currentLeverBuffer * 74)] * 0.003921568627451f; //scaled 0.0 to 1.0
 8009a8a:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 8009a74 <audioFrame+0x224>
			for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8009a8e:	f04f 0900 	mov.w	r9, #0
				params[i] = SPI_LEVERS[(i + 56) + (currentLeverBuffer * 74)] * 0.003921568627451f; //scaled 0.0 to 1.0
 8009a92:	ee09 2a10 	vmov	s18, r2
 8009a96:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8009a9a:	f8df 834c 	ldr.w	r8, [pc, #844]	; 8009de8 <audioFrame+0x598>
 8009a9e:	ee08 2a90 	vmov	s17, r2
 8009aa2:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8009aa6:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8009aaa:	4cbd      	ldr	r4, [pc, #756]	; (8009da0 <audioFrame+0x550>)
 8009aac:	ee00 2a10 	vmov	s0, r2
 8009ab0:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8009ab4:	eef8 8ae8 	vcvt.f32.s32	s17, s17
					tADSRT_setDecay(&fenvelopes[i], params[7] * 1000.0f);//noise env
 8009ab8:	eddf 9aba 	vldr	s19, [pc, #744]	; 8009da4 <audioFrame+0x554>
				params[i] = SPI_LEVERS[(i + 56) + (currentLeverBuffer * 74)] * 0.003921568627451f; //scaled 0.0 to 1.0
 8009abc:	ee01 2a90 	vmov	s3, r2
 8009ac0:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8009ac4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8009ac8:	f8df b320 	ldr.w	fp, [pc, #800]	; 8009dec <audioFrame+0x59c>
 8009acc:	ee02 2a10 	vmov	s4, r2
 8009ad0:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8009ad4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8009ad8:	ee02 2a90 	vmov	s5, r2
 8009adc:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8009ae0:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8009ae4:	ee03 2a10 	vmov	s6, r2
 8009ae8:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8009aec:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8009af0:	ee03 2a90 	vmov	s7, r2
 8009af4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009af8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8009afc:	ee04 2a10 	vmov	s8, r2
 8009b00:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8009b04:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8009b08:	ee04 2a90 	vmov	s9, r2
 8009b0c:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8009b10:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8009b14:	ee05 2a10 	vmov	s10, r2
 8009b18:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8009b1c:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8009b20:	ee05 2a90 	vmov	s11, r2
 8009b24:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009b28:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8009b2c:	ee06 2a10 	vmov	s12, r2
 8009b30:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009b34:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8009b38:	ee06 2a90 	vmov	s13, r2
 8009b3c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009b40:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009b44:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8009b48:	ee07 2a10 	vmov	s14, r2
 8009b4c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009b50:	ee00 3a90 	vmov	s1, r3
			whichTable = LEAF_clip(0, SPI_LEVERS[71 + (currentLeverBuffer * 74)] >> 2, 5);
 8009b54:	089b      	lsrs	r3, r3, #2
				params[i] = SPI_LEVERS[(i + 56) + (currentLeverBuffer * 74)] * 0.003921568627451f; //scaled 0.0 to 1.0
 8009b56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009b5a:	4a93      	ldr	r2, [pc, #588]	; (8009da8 <audioFrame+0x558>)
 8009b5c:	eeb8 8ae0 	vcvt.f32.s32	s16, s1
			whichTable = LEAF_clip(0, SPI_LEVERS[71 + (currentLeverBuffer * 74)] >> 2, 5);
 8009b60:	ee00 3a90 	vmov	s1, r3
				params[i] = SPI_LEVERS[(i + 56) + (currentLeverBuffer * 74)] * 0.003921568627451f; //scaled 0.0 to 1.0
 8009b64:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009b68:	9200      	str	r2, [sp, #0]
 8009b6a:	ee29 9a27 	vmul.f32	s18, s18, s15
 8009b6e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8009b72:	ee61 1aa7 	vmul.f32	s3, s3, s15
 8009b76:	ed88 0a02 	vstr	s0, [r8, #8]
 8009b7a:	ee22 2a27 	vmul.f32	s4, s4, s15
			whichTable = LEAF_clip(0, SPI_LEVERS[71 + (currentLeverBuffer * 74)] >> 2, 5);
 8009b7e:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 8009dac <audioFrame+0x55c>
				params[i] = SPI_LEVERS[(i + 56) + (currentLeverBuffer * 74)] * 0.003921568627451f; //scaled 0.0 to 1.0
 8009b82:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8009b86:	ed88 9a00 	vstr	s18, [r8]
 8009b8a:	ee23 3a27 	vmul.f32	s6, s6, s15
 8009b8e:	edc8 8a01 	vstr	s17, [r8, #4]
 8009b92:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8009b96:	edc8 1a03 	vstr	s3, [r8, #12]
 8009b9a:	ee24 4a27 	vmul.f32	s8, s8, s15
 8009b9e:	ed88 2a04 	vstr	s4, [r8, #16]
 8009ba2:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8009ba6:	edc8 2a05 	vstr	s5, [r8, #20]
 8009baa:	ee25 5a27 	vmul.f32	s10, s10, s15
 8009bae:	ed88 3a06 	vstr	s6, [r8, #24]
 8009bb2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8009bb6:	edc8 3a07 	vstr	s7, [r8, #28]
 8009bba:	ee26 6a27 	vmul.f32	s12, s12, s15
 8009bbe:	ed88 4a08 	vstr	s8, [r8, #32]
 8009bc2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009bc6:	edc8 4a09 	vstr	s9, [r8, #36]	; 0x24
 8009bca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009bce:	ed88 5a0a 	vstr	s10, [r8, #40]	; 0x28
 8009bd2:	ee68 7a27 	vmul.f32	s15, s16, s15
 8009bd6:	edc8 5a0b 	vstr	s11, [r8, #44]	; 0x2c
			whichTable = LEAF_clip(0, SPI_LEVERS[71 + (currentLeverBuffer * 74)] >> 2, 5);
 8009bda:	eef8 0ae0 	vcvt.f32.s32	s1, s1
				params[i] = SPI_LEVERS[(i + 56) + (currentLeverBuffer * 74)] * 0.003921568627451f; //scaled 0.0 to 1.0
 8009bde:	ed88 6a0c 	vstr	s12, [r8, #48]	; 0x30
 8009be2:	edc8 6a0d 	vstr	s13, [r8, #52]	; 0x34
 8009be6:	ed88 7a0e 	vstr	s14, [r8, #56]	; 0x38
 8009bea:	edc8 7a0f 	vstr	s15, [r8, #60]	; 0x3c
			whichTable = LEAF_clip(0, SPI_LEVERS[71 + (currentLeverBuffer * 74)] >> 2, 5);
 8009bee:	f002 fd95 	bl	800c71c <LEAF_clip>
 8009bf2:	4a6f      	ldr	r2, [pc, #444]	; (8009db0 <audioFrame+0x560>)
 8009bf4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009bf8:	9402      	str	r4, [sp, #8]
 8009bfa:	4c6e      	ldr	r4, [pc, #440]	; (8009db4 <audioFrame+0x564>)
 8009bfc:	496e      	ldr	r1, [pc, #440]	; (8009db8 <audioFrame+0x568>)
			prevTable = whichTable;
 8009bfe:	486f      	ldr	r0, [pc, #444]	; (8009dbc <audioFrame+0x56c>)
 8009c00:	9505      	str	r5, [sp, #20]
 8009c02:	4615      	mov	r5, r2
 8009c04:	9403      	str	r4, [sp, #12]
 8009c06:	4634      	mov	r4, r6
 8009c08:	f8cd 8010 	str.w	r8, [sp, #16]
 8009c0c:	4656      	mov	r6, sl
					myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)(i+firstString)) * 0.090909090909091f);
 8009c0e:	ed9f 9a6c 	vldr	s18, [pc, #432]	; 8009dc0 <audioFrame+0x570>
					tADSRT_setDecay(&envelopes[i][0], params[0] * 50000.0f);//other env
 8009c12:	eddf 8a6c 	vldr	s17, [pc, #432]	; 8009dc4 <audioFrame+0x574>
 8009c16:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 8009df0 <audioFrame+0x5a0>
 8009c1a:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8009df4 <audioFrame+0x5a4>
			whichTable = LEAF_clip(0, SPI_LEVERS[71 + (currentLeverBuffer * 74)] >> 2, 5);
 8009c1e:	edc1 7a00 	vstr	s15, [r1]
			prevTable = whichTable;
 8009c22:	edc0 7a00 	vstr	s15, [r0]
				if (dualSlider)
 8009c26:	4b68      	ldr	r3, [pc, #416]	; (8009dc8 <audioFrame+0x578>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	f040 8168 	bne.w	8009f00 <audioFrame+0x6b0>
					myMappedPos =  stringMappedPositions[0];
 8009c30:	9b02      	ldr	r3, [sp, #8]
 8009c32:	ed93 8a00 	vldr	s16, [r3]
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 8009c36:	f8db 0000 	ldr.w	r0, [fp]
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 8009c3a:	f8db 3000 	ldr.w	r3, [fp]
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 8009c3e:	eb00 0e09 	add.w	lr, r0, r9
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 8009c42:	f8db 0000 	ldr.w	r0, [fp]
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 8009c46:	eb03 0c09 	add.w	ip, r3, r9
				stringMIDIPitches[i] = tempBreak.f + stringOctave[i];
 8009c4a:	9b00      	ldr	r3, [sp, #0]
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 8009c4c:	eb07 0e8e 	add.w	lr, r7, lr, lsl #2
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 8009c50:	4448      	add	r0, r9
				stringMIDIPitches[i] = tempBreak.f + stringOctave[i];
 8009c52:	ecf3 7a01 	vldmia	r3!, {s15}
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 8009c56:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 8009c5a:	f81e e004 	ldrb.w	lr, [lr, r4]
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 8009c5e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
				stringMIDIPitches[i] = tempBreak.f + stringOctave[i];
 8009c62:	9300      	str	r3, [sp, #0]
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 8009c64:	44a4      	add	ip, r4
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 8009c66:	f8db 3000 	ldr.w	r3, [fp]
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 8009c6a:	f36e 0607 	bfi	r6, lr, #0, #8
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 8009c6e:	f89c c001 	ldrb.w	ip, [ip, #1]
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 8009c72:	4420      	add	r0, r4
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 8009c74:	444b      	add	r3, r9
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 8009c76:	f36c 260f 	bfi	r6, ip, #8, #8
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 8009c7a:	7880      	ldrb	r0, [r0, #2]
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 8009c7c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 8009c80:	f360 4617 	bfi	r6, r0, #16, #8
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 8009c84:	4423      	add	r3, r4
 8009c86:	78db      	ldrb	r3, [r3, #3]
 8009c88:	f363 661f 	bfi	r6, r3, #24, #8
				stringMIDIPitches[i] = tempBreak.f + stringOctave[i];
 8009c8c:	ee07 6a10 	vmov	s14, r6
 8009c90:	ee37 0a87 	vadd.f32	s0, s15, s14
 8009c94:	ed85 0a00 	vstr	s0, [r5]
				float tempFreq = (1.0 / myMappedPos) * mtof(stringMIDIPitches[i]);
 8009c98:	f002 fdde 	bl	800c858 <mtof>
 8009c9c:	eeb7 6ac8 	vcvt.f64.f32	d6, s16
 8009ca0:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
				tExpSmooth_setDest(&stringFreqSmoothers[i], tempFreq);
 8009ca4:	4640      	mov	r0, r8
 8009ca6:	f108 0804 	add.w	r8, r8, #4
				float tempFreq = (1.0 / myMappedPos) * mtof(stringMIDIPitches[i]);
 8009caa:	ee80 7b06 	vdiv.f64	d7, d0, d6
 8009cae:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
				tExpSmooth_setDest(&stringFreqSmoothers[i], tempFreq);
 8009cb2:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009cb6:	f002 f979 	bl	800bfac <tExpSmooth_setDest>
				stringMIDIPitches[i] = ftom(tempFreq);
 8009cba:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009cbe:	f002 fe19 	bl	800c8f4 <ftom>
				if (voice == 0)
 8009cc2:	9b03      	ldr	r3, [sp, #12]
				stringMIDIPitches[i] = ftom(tempFreq);
 8009cc4:	eca5 0a01 	vstmia	r5!, {s0}
				if (voice == 0)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f000 810d 	beq.w	8009eea <audioFrame+0x69a>
				if ((voice == 0) || (voice == 1))
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	f240 8128 	bls.w	8009f26 <audioFrame+0x6d6>
			for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8009cd6:	f109 0901 	add.w	r9, r9, #1
 8009cda:	f10a 0a0c 	add.w	sl, sl, #12
 8009cde:	f1b9 0f04 	cmp.w	r9, #4
 8009ce2:	d1a0      	bne.n	8009c26 <audioFrame+0x3d6>
 8009ce4:	4626      	mov	r6, r4
 8009ce6:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8009df8 <audioFrame+0x5a8>
 8009cea:	9d05      	ldr	r5, [sp, #20]
 8009cec:	f106 0a31 	add.w	sl, r6, #49	; 0x31
 8009cf0:	9c03      	ldr	r4, [sp, #12]
 8009cf2:	f108 0910 	add.w	r9, r8, #16
 8009cf6:	44ba      	add	sl, r7
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[(i + 49) + (currentLeverBufferL * 74)] * 0.0078125)); //   divided by 128
 8009cf8:	ed9f 8b27 	vldr	d8, [pc, #156]	; 8009d98 <audioFrame+0x548>
 8009cfc:	f81a 3b01 	ldrb.w	r3, [sl], #1
 8009d00:	4640      	mov	r0, r8
 8009d02:	f108 0804 	add.w	r8, r8, #4
 8009d06:	ee00 3a10 	vmov	s0, r3
 8009d0a:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8009d0e:	ee20 0b08 	vmul.f64	d0, d0, d8
 8009d12:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009d16:	f002 f949 	bl	800bfac <tExpSmooth_setDest>
			for (int i = 0; i < 4; i++)
 8009d1a:	45c8      	cmp	r8, r9
 8009d1c:	d1ee      	bne.n	8009cfc <audioFrame+0x4ac>
			int modeBit = SPI_LEVERS[48 + (currentLeverBufferL * 74)];
 8009d1e:	443e      	add	r6, r7
			volumePedalInt = ((uint16_t)SPI_LEVERS[53 + (currentLeverBufferL * 74)] << 8) + ((uint16_t)SPI_LEVERS[54 + (currentLeverBufferL * 74)] & 0xff);
 8009d20:	482a      	ldr	r0, [pc, #168]	; (8009dcc <audioFrame+0x57c>)
			octave = (((int32_t) (modeBit & 3) - 1 ) * 12.0f);
 8009d22:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
			volumePedal = volumePedalInt * 0.0002442002442f;
 8009d26:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8009dd0 <audioFrame+0x580>
			volumePedalInt = ((uint16_t)SPI_LEVERS[53 + (currentLeverBufferL * 74)] << 8) + ((uint16_t)SPI_LEVERS[54 + (currentLeverBufferL * 74)] & 0xff);
 8009d2a:	f896 2035 	ldrb.w	r2, [r6, #53]	; 0x35
 8009d2e:	f896 3036 	ldrb.w	r3, [r6, #54]	; 0x36
			int modeBit = SPI_LEVERS[48 + (currentLeverBufferL * 74)];
 8009d32:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
			volumePedalInt = ((uint16_t)SPI_LEVERS[53 + (currentLeverBufferL * 74)] << 8) + ((uint16_t)SPI_LEVERS[54 + (currentLeverBufferL * 74)] & 0xff);
 8009d36:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			voice = SPI_LEVERS[55 + (currentLeverBufferL * 74)];
 8009d3a:	f896 2037 	ldrb.w	r2, [r6, #55]	; 0x37
			neck = (modeBit >> 4) & 1;
 8009d3e:	f3c1 1600 	ubfx	r6, r1, #4, #1
			volumePedalInt = ((uint16_t)SPI_LEVERS[53 + (currentLeverBufferL * 74)] << 8) + ((uint16_t)SPI_LEVERS[54 + (currentLeverBufferL * 74)] & 0xff);
 8009d42:	b29b      	uxth	r3, r3
			voice = SPI_LEVERS[55 + (currentLeverBufferL * 74)];
 8009d44:	6022      	str	r2, [r4, #0]
			octave = (((int32_t) (modeBit & 3) - 1 ) * 12.0f);
 8009d46:	f001 0203 	and.w	r2, r1, #3
			volumePedalInt = ((uint16_t)SPI_LEVERS[53 + (currentLeverBufferL * 74)] << 8) + ((uint16_t)SPI_LEVERS[54 + (currentLeverBufferL * 74)] & 0xff);
 8009d4a:	8003      	strh	r3, [r0, #0]
			volumePedal = volumePedalInt * 0.0002442002442f;
 8009d4c:	8803      	ldrh	r3, [r0, #0]
			octave = (((int32_t) (modeBit & 3) - 1 ) * 12.0f);
 8009d4e:	3a01      	subs	r2, #1
			volumePedal = volumePedalInt * 0.0002442002442f;
 8009d50:	4820      	ldr	r0, [pc, #128]	; (8009dd4 <audioFrame+0x584>)
 8009d52:	b29b      	uxth	r3, r3
			octave = (((int32_t) (modeBit & 3) - 1 ) * 12.0f);
 8009d54:	ee07 2a90 	vmov	s15, r2
			neck = (modeBit >> 4) & 1;
 8009d58:	4a1f      	ldr	r2, [pc, #124]	; (8009dd8 <audioFrame+0x588>)
			volumePedal = volumePedalInt * 0.0002442002442f;
 8009d5a:	ee00 3a10 	vmov	s0, r3
			octave = (((int32_t) (modeBit & 3) - 1 ) * 12.0f);
 8009d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d62:	4b1e      	ldr	r3, [pc, #120]	; (8009ddc <audioFrame+0x58c>)
			volumePedal = volumePedalInt * 0.0002442002442f;
 8009d64:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
			neck = (modeBit >> 4) & 1;
 8009d68:	6016      	str	r6, [r2, #0]
			octave = (((int32_t) (modeBit & 3) - 1 ) * 12.0f);
 8009d6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
			dualSlider = (modeBit >> 3) & 1;
 8009d6e:	f3c1 02c0 	ubfx	r2, r1, #3, #1
 8009d72:	4e15      	ldr	r6, [pc, #84]	; (8009dc8 <audioFrame+0x578>)
			edit = (modeBit >> 2) & 1;
 8009d74:	f3c1 0180 	ubfx	r1, r1, #2, #1
			volumePedal = volumePedalInt * 0.0002442002442f;
 8009d78:	ee20 0a07 	vmul.f32	s0, s0, s14
			octave = (((int32_t) (modeBit & 3) - 1 ) * 12.0f);
 8009d7c:	edc3 7a00 	vstr	s15, [r3]
			edit = (modeBit >> 2) & 1;
 8009d80:	4b17      	ldr	r3, [pc, #92]	; (8009de0 <audioFrame+0x590>)
			volumePedal = volumePedalInt * 0.0002442002442f;
 8009d82:	ed80 0a00 	vstr	s0, [r0]
			tExpSmooth_setDest(&volumeSmoother,volumePedal);
 8009d86:	4817      	ldr	r0, [pc, #92]	; (8009de4 <audioFrame+0x594>)
			dualSlider = (modeBit >> 3) & 1;
 8009d88:	6032      	str	r2, [r6, #0]
			edit = (modeBit >> 2) & 1;
 8009d8a:	6019      	str	r1, [r3, #0]
			tExpSmooth_setDest(&volumeSmoother,volumePedal);
 8009d8c:	f002 f90e 	bl	800bfac <tExpSmooth_setDest>
 8009d90:	e582      	b.n	8009898 <audioFrame+0x48>
 8009d92:	bf00      	nop
 8009d94:	f3af 8000 	nop.w
 8009d98:	00000000 	.word	0x00000000
 8009d9c:	3f800000 	.word	0x3f800000
 8009da0:	20017958 	.word	0x20017958
 8009da4:	447a0000 	.word	0x447a0000
 8009da8:	20000d34 	.word	0x20000d34
 8009dac:	00000000 	.word	0x00000000
 8009db0:	20017948 	.word	0x20017948
 8009db4:	20000bdc 	.word	0x20000bdc
 8009db8:	20000be4 	.word	0x20000be4
 8009dbc:	20000bd0 	.word	0x20000bd0
 8009dc0:	3dba2e8c 	.word	0x3dba2e8c
 8009dc4:	47435000 	.word	0x47435000
 8009dc8:	20000bac 	.word	0x20000bac
 8009dcc:	20017ad8 	.word	0x20017ad8
 8009dd0:	39800801 	.word	0x39800801
 8009dd4:	20000be0 	.word	0x20000be0
 8009dd8:	20000bc0 	.word	0x20000bc0
 8009ddc:	20000038 	.word	0x20000038
 8009de0:	20000bb0 	.word	0x20000bb0
 8009de4:	20000d64 	.word	0x20000d64
 8009de8:	20000d78 	.word	0x20000d78
 8009dec:	20000bb4 	.word	0x20000bb4
 8009df0:	20018d54 	.word	0x20018d54
 8009df4:	20000d24 	.word	0x20000d24
 8009df8:	2001776c 	.word	0x2001776c
		if ((SPI_RX[6 + (8 * currentBarBufferL)] == 254) && (SPI_RX[7 + (8 * currentBarBufferL)] == 253))
 8009dfc:	79ce      	ldrb	r6, [r1, #7]
 8009dfe:	2efd      	cmp	r6, #253	; 0xfd
 8009e00:	f47f ad38 	bne.w	8009874 <audioFrame+0x24>
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL)] << 8) + ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL) + 1] & 0xff);
 8009e04:	f810 7034 	ldrb.w	r7, [r0, r4, lsl #3]
 8009e08:	00a6      	lsls	r6, r4, #2
 8009e0a:	7849      	ldrb	r1, [r1, #1]
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8009e0c:	f64f 7cff 	movw	ip, #65535	; 0xffff
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 8009e10:	4c82      	ldr	r4, [pc, #520]	; (800a01c <audioFrame+0x7cc>)
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL)] << 8) + ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL) + 1] & 0xff);
 8009e12:	eb01 2107 	add.w	r1, r1, r7, lsl #8
 8009e16:	4f82      	ldr	r7, [pc, #520]	; (800a020 <audioFrame+0x7d0>)
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 8009e18:	ed94 7a02 	vldr	s14, [r4, #8]
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 8009e1c:	edd4 6a01 	vldr	s13, [r4, #4]
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8009e20:	4561      	cmp	r1, ip
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8009e22:	edd4 7a03 	vldr	s15, [r4, #12]
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8009e26:	edd4 5a00 	vldr	s11, [r4]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8009e2a:	ee37 4a66 	vsub.f32	s8, s14, s13
 8009e2e:	ee37 6ac7 	vsub.f32	s12, s15, s14
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL)] << 8) + ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL) + 1] & 0xff);
 8009e32:	6039      	str	r1, [r7, #0]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8009e34:	ee76 3ae5 	vsub.f32	s7, s13, s11
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8009e38:	f000 80a4 	beq.w	8009f84 <audioFrame+0x734>
 8009e3c:	ee07 1a90 	vmov	s15, r1
 8009e40:	4c78      	ldr	r4, [pc, #480]	; (800a024 <audioFrame+0x7d4>)
 8009e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e46:	edd4 4a00 	vldr	s9, [r4]
 8009e4a:	eef4 4ae7 	vcmpe.f32	s9, s15
 8009e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e52:	f100 8097 	bmi.w	8009f84 <audioFrame+0x734>
				else if ((stringPositions[j] >= fretMeasurements[1][j]) && (stringPositions[j] <= fretMeasurements[0][j]))
 8009e56:	ed94 5a02 	vldr	s10, [r4, #8]
 8009e5a:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8009e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e62:	f240 80ad 	bls.w	8009fc0 <audioFrame+0x770>
				else if ((stringPositions[j] >= fretMeasurements[2][j]) && (stringPositions[j] < fretMeasurements[1][j]))
 8009e66:	edd4 4a04 	vldr	s9, [r4, #16]
 8009e6a:	eef4 4ae7 	vcmpe.f32	s9, s15
 8009e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e72:	f200 80b4 	bhi.w	8009fde <audioFrame+0x78e>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8009e76:	ee77 7ac5 	vsub.f32	s15, s15, s10
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 8009e7a:	4a6b      	ldr	r2, [pc, #428]	; (800a028 <audioFrame+0x7d8>)
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8009e7c:	ee34 5ac5 	vsub.f32	s10, s9, s10
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 8009e80:	9202      	str	r2, [sp, #8]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8009e82:	eec7 4a85 	vdiv.f32	s9, s15, s10
 8009e86:	eef0 7a66 	vmov.f32	s15, s13
 8009e8a:	eee4 7a24 	vfma.f32	s15, s8, s9
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 8009e8e:	edc2 7a00 	vstr	s15, [r2]
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL)] << 8) + ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL) + 1] & 0xff);
 8009e92:	1c71      	adds	r1, r6, #1
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8009e94:	f64f 74ff 	movw	r4, #65535	; 0xffff
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL)] << 8) + ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL) + 1] & 0xff);
 8009e98:	eb00 0641 	add.w	r6, r0, r1, lsl #1
 8009e9c:	f810 0011 	ldrb.w	r0, [r0, r1, lsl #1]
 8009ea0:	7871      	ldrb	r1, [r6, #1]
 8009ea2:	eb01 2100 	add.w	r1, r1, r0, lsl #8
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8009ea6:	42a1      	cmp	r1, r4
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL)] << 8) + ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL) + 1] & 0xff);
 8009ea8:	6079      	str	r1, [r7, #4]
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8009eaa:	d071      	beq.n	8009f90 <audioFrame+0x740>
 8009eac:	ee07 1a90 	vmov	s15, r1
 8009eb0:	485c      	ldr	r0, [pc, #368]	; (800a024 <audioFrame+0x7d4>)
 8009eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009eb6:	edd0 4a01 	vldr	s9, [r0, #4]
 8009eba:	eef4 7ae4 	vcmpe.f32	s15, s9
 8009ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ec2:	dc65      	bgt.n	8009f90 <audioFrame+0x740>
				else if ((stringPositions[j] >= fretMeasurements[1][j]) && (stringPositions[j] <= fretMeasurements[0][j]))
 8009ec4:	ed90 5a03 	vldr	s10, [r0, #12]
 8009ec8:	eef4 7ac5 	vcmpe.f32	s15, s10
 8009ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ed0:	db63      	blt.n	8009f9a <audioFrame+0x74a>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8009ed2:	ee77 7ae4 	vsub.f32	s15, s15, s9
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8009ed6:	9a02      	ldr	r2, [sp, #8]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8009ed8:	ee35 5a64 	vsub.f32	s10, s10, s9
 8009edc:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8009ee0:	eee3 5a87 	vfma.f32	s11, s7, s14
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8009ee4:	edc2 5a01 	vstr	s11, [r2, #4]
 8009ee8:	e4c4      	b.n	8009874 <audioFrame+0x24>
					tLivingString2_setPickupPos(&strings[i], params[6]);
 8009eea:	9b04      	ldr	r3, [sp, #16]
 8009eec:	484f      	ldr	r0, [pc, #316]	; (800a02c <audioFrame+0x7dc>)
 8009eee:	ed93 0a06 	vldr	s0, [r3, #24]
 8009ef2:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 8009ef6:	f003 f91f 	bl	800d138 <tLivingString2_setPickupPos>
 8009efa:	9b03      	ldr	r3, [sp, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	e6e7      	b.n	8009cd0 <audioFrame+0x480>
					myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)(i+firstString)) * 0.090909090909091f);
 8009f00:	f8db 3000 	ldr.w	r3, [fp]
 8009f04:	9a02      	ldr	r2, [sp, #8]
 8009f06:	444b      	add	r3, r9
 8009f08:	edd2 0a01 	vldr	s1, [r2, #4]
 8009f0c:	ee07 3a90 	vmov	s15, r3
 8009f10:	ed92 0a00 	vldr	s0, [r2]
 8009f14:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
 8009f18:	ee21 1a09 	vmul.f32	s2, s2, s18
 8009f1c:	f002 fc88 	bl	800c830 <LEAF_interpolation_linear>
 8009f20:	eeb0 8a40 	vmov.f32	s16, s0
 8009f24:	e687      	b.n	8009c36 <audioFrame+0x3e6>
					tADSRT_setDecay(&fenvelopes[i], params[7] * 1000.0f);//noise env
 8009f26:	9b04      	ldr	r3, [sp, #16]
 8009f28:	4841      	ldr	r0, [pc, #260]	; (800a030 <audioFrame+0x7e0>)
 8009f2a:	ed93 0a07 	vldr	s0, [r3, #28]
 8009f2e:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 8009f32:	ee20 0a29 	vmul.f32	s0, s0, s19
 8009f36:	f001 fd73 	bl	800ba20 <tADSRT_setDecay>
					tADSRT_setDecay(&envelopes[i][0], params[0] * 50000.0f);//other env
 8009f3a:	9b04      	ldr	r3, [sp, #16]
 8009f3c:	4650      	mov	r0, sl
 8009f3e:	ed93 0a00 	vldr	s0, [r3]
 8009f42:	ee20 0a28 	vmul.f32	s0, s0, s17
 8009f46:	f001 fd6b 	bl	800ba20 <tADSRT_setDecay>
					tADSRT_setDecay(&envelopes[i][1], params[2] * 50000.0f);//filter env
 8009f4a:	9b04      	ldr	r3, [sp, #16]
 8009f4c:	f10a 0004 	add.w	r0, sl, #4
 8009f50:	ed93 0a02 	vldr	s0, [r3, #8]
 8009f54:	ee20 0a28 	vmul.f32	s0, s0, s17
 8009f58:	f001 fd62 	bl	800ba20 <tADSRT_setDecay>
					tCycle_setFreq(&LFOs[i][0], (params[5 ] * 2.0f) + LFOdetunes[i][0]);
 8009f5c:	4a35      	ldr	r2, [pc, #212]	; (800a034 <audioFrame+0x7e4>)
 8009f5e:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8009f62:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009f66:	4834      	ldr	r0, [pc, #208]	; (800a038 <audioFrame+0x7e8>)
 8009f68:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8009f6c:	9a04      	ldr	r2, [sp, #16]
 8009f6e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009f72:	ed92 7a05 	vldr	s14, [r2, #20]
 8009f76:	ed9c 0a00 	vldr	s0, [ip]
 8009f7a:	eea7 0a27 	vfma.f32	s0, s14, s15
 8009f7e:	f002 fe41 	bl	800cc04 <tCycle_setFreq>
 8009f82:	e6a8      	b.n	8009cd6 <audioFrame+0x486>
					stringMappedPositions[j] = 1.0f;
 8009f84:	4a28      	ldr	r2, [pc, #160]	; (800a028 <audioFrame+0x7d8>)
 8009f86:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009f8a:	9202      	str	r2, [sp, #8]
 8009f8c:	6011      	str	r1, [r2, #0]
 8009f8e:	e780      	b.n	8009e92 <audioFrame+0x642>
 8009f90:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009f94:	9a02      	ldr	r2, [sp, #8]
 8009f96:	6051      	str	r1, [r2, #4]
 8009f98:	e46c      	b.n	8009874 <audioFrame+0x24>
				else if ((stringPositions[j] >= fretMeasurements[2][j]) && (stringPositions[j] < fretMeasurements[1][j]))
 8009f9a:	edd0 5a05 	vldr	s11, [r0, #20]
 8009f9e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8009fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fa6:	db2b      	blt.n	800a000 <audioFrame+0x7b0>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8009fa8:	ee77 7ac5 	vsub.f32	s15, s15, s10
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 8009fac:	9a02      	ldr	r2, [sp, #8]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8009fae:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8009fb2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8009fb6:	eee4 6a07 	vfma.f32	s13, s8, s14
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 8009fba:	edc2 6a01 	vstr	s13, [r2, #4]
 8009fbe:	e459      	b.n	8009874 <audioFrame+0x24>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8009fc0:	ee77 7ae4 	vsub.f32	s15, s15, s9
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8009fc4:	4a18      	ldr	r2, [pc, #96]	; (800a028 <audioFrame+0x7d8>)
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8009fc6:	ee35 5a64 	vsub.f32	s10, s10, s9
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8009fca:	9202      	str	r2, [sp, #8]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8009fcc:	eec7 4a85 	vdiv.f32	s9, s15, s10
 8009fd0:	eef0 7a65 	vmov.f32	s15, s11
 8009fd4:	eee3 7aa4 	vfma.f32	s15, s7, s9
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8009fd8:	edc2 7a00 	vstr	s15, [r2]
 8009fdc:	e759      	b.n	8009e92 <audioFrame+0x642>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8009fde:	ed94 5a06 	vldr	s10, [r4, #24]
 8009fe2:	ee77 7ae4 	vsub.f32	s15, s15, s9
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 8009fe6:	4a10      	ldr	r2, [pc, #64]	; (800a028 <audioFrame+0x7d8>)
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8009fe8:	ee75 4a64 	vsub.f32	s9, s10, s9
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 8009fec:	9202      	str	r2, [sp, #8]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8009fee:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 8009ff2:	eef0 7a47 	vmov.f32	s15, s14
 8009ff6:	eee6 7a05 	vfma.f32	s15, s12, s10
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 8009ffa:	edc2 7a00 	vstr	s15, [r2]
 8009ffe:	e748      	b.n	8009e92 <audioFrame+0x642>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800a000:	edd0 6a07 	vldr	s13, [r0, #28]
 800a004:	ee77 7ae5 	vsub.f32	s15, s15, s11
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 800a008:	9a02      	ldr	r2, [sp, #8]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800a00a:	ee76 5ae5 	vsub.f32	s11, s13, s11
 800a00e:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 800a012:	eea6 7a26 	vfma.f32	s14, s12, s13
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 800a016:	ed82 7a01 	vstr	s14, [r2, #4]
			for (int j = 0; j < 2; j++)
 800a01a:	e42b      	b.n	8009874 <audioFrame+0x24>
 800a01c:	20000028 	.word	0x20000028
 800a020:	20000d1c 	.word	0x20000d1c
 800a024:	20000008 	.word	0x20000008
 800a028:	20017958 	.word	0x20017958
 800a02c:	20017928 	.word	0x20017928
 800a030:	2001921c 	.word	0x2001921c
 800a034:	20017aa8 	.word	0x20017aa8
 800a038:	2001769c 	.word	0x2001769c

0800a03c <HAL_SPI_RxCpltCallback>:
volatile int testInt = 0;



void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a03c:	b538      	push	{r3, r4, r5, lr}
	if (hspi == &hspi5)
 800a03e:	4b10      	ldr	r3, [pc, #64]	; (800a080 <HAL_SPI_RxCpltCallback+0x44>)
{
 800a040:	4604      	mov	r4, r0
	if (hspi == &hspi5)
 800a042:	4298      	cmp	r0, r3
 800a044:	d012      	beq.n	800a06c <HAL_SPI_RxCpltCallback+0x30>
		*/
		newPluck = 1;
		currentPluckBuffer = 1;
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
	}
	if (hspi == &hspi2)
 800a046:	4b0f      	ldr	r3, [pc, #60]	; (800a084 <HAL_SPI_RxCpltCallback+0x48>)
 800a048:	429c      	cmp	r4, r3
 800a04a:	d009      	beq.n	800a060 <HAL_SPI_RxCpltCallback+0x24>
		*/
		newBar = 1;
		currentBarBuffer = 1;
	}

	if (hspi == &hspi1)
 800a04c:	4b0e      	ldr	r3, [pc, #56]	; (800a088 <HAL_SPI_RxCpltCallback+0x4c>)
 800a04e:	429c      	cmp	r4, r3
 800a050:	d000      	beq.n	800a054 <HAL_SPI_RxCpltCallback+0x18>
		}


	*/

}
 800a052:	bd38      	pop	{r3, r4, r5, pc}
		newLevers = 1;
 800a054:	2301      	movs	r3, #1
 800a056:	490d      	ldr	r1, [pc, #52]	; (800a08c <HAL_SPI_RxCpltCallback+0x50>)
		currentLeverBuffer = 1;
 800a058:	4a0d      	ldr	r2, [pc, #52]	; (800a090 <HAL_SPI_RxCpltCallback+0x54>)
		newLevers = 1;
 800a05a:	600b      	str	r3, [r1, #0]
		currentLeverBuffer = 1;
 800a05c:	6013      	str	r3, [r2, #0]
}
 800a05e:	bd38      	pop	{r3, r4, r5, pc}
		newBar = 1;
 800a060:	2301      	movs	r3, #1
 800a062:	490c      	ldr	r1, [pc, #48]	; (800a094 <HAL_SPI_RxCpltCallback+0x58>)
		currentBarBuffer = 1;
 800a064:	4a0c      	ldr	r2, [pc, #48]	; (800a098 <HAL_SPI_RxCpltCallback+0x5c>)
		newBar = 1;
 800a066:	600b      	str	r3, [r1, #0]
		currentBarBuffer = 1;
 800a068:	6013      	str	r3, [r2, #0]
 800a06a:	e7ef      	b.n	800a04c <HAL_SPI_RxCpltCallback+0x10>
		newPluck = 1;
 800a06c:	2301      	movs	r3, #1
 800a06e:	490b      	ldr	r1, [pc, #44]	; (800a09c <HAL_SPI_RxCpltCallback+0x60>)
		currentPluckBuffer = 1;
 800a070:	4d0b      	ldr	r5, [pc, #44]	; (800a0a0 <HAL_SPI_RxCpltCallback+0x64>)
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 800a072:	2234      	movs	r2, #52	; 0x34
		newPluck = 1;
 800a074:	600b      	str	r3, [r1, #0]
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 800a076:	490b      	ldr	r1, [pc, #44]	; (800a0a4 <HAL_SPI_RxCpltCallback+0x68>)
		currentPluckBuffer = 1;
 800a078:	602b      	str	r3, [r5, #0]
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 800a07a:	f7fb ffe5 	bl	8006048 <HAL_SPI_Receive_DMA>
 800a07e:	e7e2      	b.n	800a046 <HAL_SPI_RxCpltCallback+0xa>
 800a080:	20019a88 	.word	0x20019a88
 800a084:	20019a00 	.word	0x20019a00
 800a088:	20019c00 	.word	0x20019c00
 800a08c:	20000bc8 	.word	0x20000bc8
 800a090:	20000bf0 	.word	0x20000bf0
 800a094:	20000bc4 	.word	0x20000bc4
 800a098:	20000ba4 	.word	0x20000ba4
 800a09c:	20000bcc 	.word	0x20000bcc
 800a0a0:	20000ba8 	.word	0x20000ba8
 800a0a4:	30000420 	.word	0x30000420

0800a0a8 <HAL_SPI_RxHalfCpltCallback>:

void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
	if (hspi == &hspi5)
 800a0a8:	4b13      	ldr	r3, [pc, #76]	; (800a0f8 <HAL_SPI_RxHalfCpltCallback+0x50>)
 800a0aa:	4298      	cmp	r0, r3
{
 800a0ac:	b410      	push	{r4}
	if (hspi == &hspi5)
 800a0ae:	d008      	beq.n	800a0c2 <HAL_SPI_RxHalfCpltCallback+0x1a>
		}
		*/
		newPluck = 1;
		currentPluckBuffer = 0;
	}
	if (hspi == &hspi2)
 800a0b0:	4b12      	ldr	r3, [pc, #72]	; (800a0fc <HAL_SPI_RxHalfCpltCallback+0x54>)
 800a0b2:	4298      	cmp	r0, r3
 800a0b4:	d00e      	beq.n	800a0d4 <HAL_SPI_RxHalfCpltCallback+0x2c>
		}
		*/
		newBar = 1;
		currentBarBuffer = 0;
	}
	if (hspi == &hspi1)
 800a0b6:	4b12      	ldr	r3, [pc, #72]	; (800a100 <HAL_SPI_RxHalfCpltCallback+0x58>)
 800a0b8:	4298      	cmp	r0, r3
 800a0ba:	d014      	beq.n	800a0e6 <HAL_SPI_RxHalfCpltCallback+0x3e>
		}
		*/
		newLevers = 1;
		currentLeverBuffer = 0;
	}
}
 800a0bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0c0:	4770      	bx	lr
		currentPluckBuffer = 0;
 800a0c2:	4b10      	ldr	r3, [pc, #64]	; (800a104 <HAL_SPI_RxHalfCpltCallback+0x5c>)
 800a0c4:	2200      	movs	r2, #0
		newPluck = 1;
 800a0c6:	4910      	ldr	r1, [pc, #64]	; (800a108 <HAL_SPI_RxHalfCpltCallback+0x60>)
 800a0c8:	2401      	movs	r4, #1
		currentPluckBuffer = 0;
 800a0ca:	601a      	str	r2, [r3, #0]
	if (hspi == &hspi2)
 800a0cc:	4b0b      	ldr	r3, [pc, #44]	; (800a0fc <HAL_SPI_RxHalfCpltCallback+0x54>)
		newPluck = 1;
 800a0ce:	600c      	str	r4, [r1, #0]
	if (hspi == &hspi2)
 800a0d0:	4298      	cmp	r0, r3
 800a0d2:	d1f0      	bne.n	800a0b6 <HAL_SPI_RxHalfCpltCallback+0xe>
		currentBarBuffer = 0;
 800a0d4:	4b0d      	ldr	r3, [pc, #52]	; (800a10c <HAL_SPI_RxHalfCpltCallback+0x64>)
 800a0d6:	2200      	movs	r2, #0
		newBar = 1;
 800a0d8:	490d      	ldr	r1, [pc, #52]	; (800a110 <HAL_SPI_RxHalfCpltCallback+0x68>)
 800a0da:	2401      	movs	r4, #1
		currentBarBuffer = 0;
 800a0dc:	601a      	str	r2, [r3, #0]
	if (hspi == &hspi1)
 800a0de:	4b08      	ldr	r3, [pc, #32]	; (800a100 <HAL_SPI_RxHalfCpltCallback+0x58>)
		newBar = 1;
 800a0e0:	600c      	str	r4, [r1, #0]
	if (hspi == &hspi1)
 800a0e2:	4298      	cmp	r0, r3
 800a0e4:	d1ea      	bne.n	800a0bc <HAL_SPI_RxHalfCpltCallback+0x14>
		newLevers = 1;
 800a0e6:	490b      	ldr	r1, [pc, #44]	; (800a114 <HAL_SPI_RxHalfCpltCallback+0x6c>)
 800a0e8:	2001      	movs	r0, #1
		currentLeverBuffer = 0;
 800a0ea:	4b0b      	ldr	r3, [pc, #44]	; (800a118 <HAL_SPI_RxHalfCpltCallback+0x70>)
 800a0ec:	2200      	movs	r2, #0
		newLevers = 1;
 800a0ee:	6008      	str	r0, [r1, #0]
		currentLeverBuffer = 0;
 800a0f0:	601a      	str	r2, [r3, #0]
}
 800a0f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0f6:	4770      	bx	lr
 800a0f8:	20019a88 	.word	0x20019a88
 800a0fc:	20019a00 	.word	0x20019a00
 800a100:	20019c00 	.word	0x20019c00
 800a104:	20000ba8 	.word	0x20000ba8
 800a108:	20000bcc 	.word	0x20000bcc
 800a10c:	20000ba4 	.word	0x20000ba4
 800a110:	20000bc4 	.word	0x20000bc4
 800a114:	20000bc8 	.word	0x20000bc8
 800a118:	20000bf0 	.word	0x20000bf0

0800a11c <HAL_SAI_ErrorCallback>:
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop

0800a120 <HAL_SAI_TxCpltCallback>:
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop

0800a124 <HAL_SAI_TxHalfCpltCallback>:
}

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{

}
 800a124:	4770      	bx	lr
 800a126:	bf00      	nop

0800a128 <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
	audioFrame(HALF_BUFFER_SIZE);
 800a128:	2040      	movs	r0, #64	; 0x40
 800a12a:	f7ff bb91 	b.w	8009850 <audioFrame>
 800a12e:	bf00      	nop

0800a130 <HAL_SAI_RxHalfCpltCallback>:
}

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
	audioFrame(0);
 800a130:	2000      	movs	r0, #0
 800a132:	f7ff bb8d 	b.w	8009850 <audioFrame>
 800a136:	bf00      	nop

0800a138 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a138:	b530      	push	{r4, r5, lr}
 800a13a:	460d      	mov	r5, r1
 800a13c:	b083      	sub	sp, #12
 800a13e:	4614      	mov	r4, r2
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a140:	4601      	mov	r1, r0
 800a142:	9300      	str	r3, [sp, #0]
 800a144:	462a      	mov	r2, r5
 800a146:	4623      	mov	r3, r4
 800a148:	4803      	ldr	r0, [pc, #12]	; (800a158 <BSP_SD_ReadBlocks+0x20>)
 800a14a:	f7fa fe29 	bl	8004da0 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800a14e:	3800      	subs	r0, #0
 800a150:	bf18      	it	ne
 800a152:	2001      	movne	r0, #1
 800a154:	b003      	add	sp, #12
 800a156:	bd30      	pop	{r4, r5, pc}
 800a158:	20019980 	.word	0x20019980

0800a15c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a15c:	b530      	push	{r4, r5, lr}
 800a15e:	460d      	mov	r5, r1
 800a160:	b083      	sub	sp, #12
 800a162:	4614      	mov	r4, r2
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a164:	4601      	mov	r1, r0
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	462a      	mov	r2, r5
 800a16a:	4623      	mov	r3, r4
 800a16c:	4803      	ldr	r0, [pc, #12]	; (800a17c <BSP_SD_WriteBlocks+0x20>)
 800a16e:	f7fa ff3b 	bl	8004fe8 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800a172:	3800      	subs	r0, #0
 800a174:	bf18      	it	ne
 800a176:	2001      	movne	r0, #1
 800a178:	b003      	add	sp, #12
 800a17a:	bd30      	pop	{r4, r5, pc}
 800a17c:	20019980 	.word	0x20019980

0800a180 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a180:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a182:	4803      	ldr	r0, [pc, #12]	; (800a190 <BSP_SD_GetCardState+0x10>)
 800a184:	f7fb fcae 	bl	8005ae4 <HAL_SD_GetCardState>
}
 800a188:	3804      	subs	r0, #4
 800a18a:	bf18      	it	ne
 800a18c:	2001      	movne	r0, #1
 800a18e:	bd08      	pop	{r3, pc}
 800a190:	20019980 	.word	0x20019980

0800a194 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a194:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a196:	4801      	ldr	r0, [pc, #4]	; (800a19c <BSP_SD_GetCardInfo+0x8>)
 800a198:	f7fb bb48 	b.w	800582c <HAL_SD_GetCardInfo>
 800a19c:	20019980 	.word	0x20019980

0800a1a0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a1a0:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 800a1a2:	2301      	movs	r3, #1
{
 800a1a4:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 800a1a6:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a1aa:	f000 f903 	bl	800a3b4 <BSP_PlatformIsDetected>
 800a1ae:	b908      	cbnz	r0, 800a1b4 <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 800a1b0:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 800a1b4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800a1b8:	b003      	add	sp, #12
 800a1ba:	f85d fb04 	ldr.w	pc, [sp], #4
 800a1be:	bf00      	nop

0800a1c0 <BSP_SD_Init>:
{
 800a1c0:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a1c2:	f7ff ffed 	bl	800a1a0 <BSP_SD_IsDetected>
 800a1c6:	2801      	cmp	r0, #1
 800a1c8:	d001      	beq.n	800a1ce <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800a1ca:	2002      	movs	r0, #2
}
 800a1cc:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800a1ce:	4807      	ldr	r0, [pc, #28]	; (800a1ec <BSP_SD_Init+0x2c>)
 800a1d0:	f7fb fc22 	bl	8005a18 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	d1f9      	bne.n	800a1cc <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a1d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a1dc:	4803      	ldr	r0, [pc, #12]	; (800a1ec <BSP_SD_Init+0x2c>)
 800a1de:	f7fb fb39 	bl	8005854 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 800a1e2:	3800      	subs	r0, #0
 800a1e4:	bf18      	it	ne
 800a1e6:	2001      	movne	r0, #1
}
 800a1e8:	bd08      	pop	{r3, pc}
 800a1ea:	bf00      	nop
 800a1ec:	20019980 	.word	0x20019980

0800a1f0 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 800a1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800a1f4:	2201      	movs	r2, #1
void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	4605      	mov	r5, r0

	HAL_Delay(2);
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x03;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a1fa:	4f43      	ldr	r7, [pc, #268]	; (800a308 <AudioCodec_init+0x118>)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800a1fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a200:	4842      	ldr	r0, [pc, #264]	; (800a30c <AudioCodec_init+0x11c>)
 800a202:	f7f7 fea9 	bl	8001f58 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800a206:	2002      	movs	r0, #2
	myI2cData[0] = 0x07;
 800a208:	4c41      	ldr	r4, [pc, #260]	; (800a310 <AudioCodec_init+0x120>)
	HAL_Delay(2);
 800a20a:	f7f6 f8cd 	bl	80003a8 <HAL_Delay>
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a20e:	4e41      	ldr	r6, [pc, #260]	; (800a314 <AudioCodec_init+0x124>)
	myI2cData[0] = 0x07;
 800a210:	f240 3c07 	movw	ip, #775	; 0x307
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	4622      	mov	r2, r4
 800a218:	4628      	mov	r0, r5
 800a21a:	2120      	movs	r1, #32
 800a21c:	9300      	str	r3, [sp, #0]
 800a21e:	8833      	ldrh	r3, [r6, #0]
 800a220:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800a31c <AudioCodec_init+0x12c>
	myI2cData[0] = 0x07;
 800a224:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a228:	f7f7 ffb0 	bl	800218c <HAL_I2C_Master_Transmit>
	//HAL_Delay(2);

	myI2cData[0] = 0x01;
	myI2cData[1] = 0x41;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a22c:	683b      	ldr	r3, [r7, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a22e:	4601      	mov	r1, r0
	myI2cData[0] = 0x01;
 800a230:	f244 1c01 	movw	ip, #16641	; 0x4101
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a234:	4622      	mov	r2, r4
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	4628      	mov	r0, r5
 800a23a:	8833      	ldrh	r3, [r6, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a23c:	f888 1000 	strb.w	r1, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a240:	2120      	movs	r1, #32
	myI2cData[0] = 0x01;
 800a242:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a246:	f7f7 ffa1 	bl	800218c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
	myI2cData[1] = 0x00;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a24a:	683b      	ldr	r3, [r7, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a24c:	4686      	mov	lr, r0
	myI2cData[0] = 0x02;
 800a24e:	f04f 0c02 	mov.w	ip, #2
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a252:	4622      	mov	r2, r4
 800a254:	9300      	str	r3, [sp, #0]
 800a256:	4628      	mov	r0, r5
 800a258:	8833      	ldrh	r3, [r6, #0]
 800a25a:	2120      	movs	r1, #32
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a25c:	f888 e000 	strb.w	lr, [r8]
	myI2cData[0] = 0x02;
 800a260:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a264:	f7f7 ff92 	bl	800218c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
	myI2cData[1] = 0x79;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a268:	683b      	ldr	r3, [r7, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a26a:	4686      	mov	lr, r0
	myI2cData[0] = 0x03;
 800a26c:	f647 1c03 	movw	ip, #30979	; 0x7903
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a270:	4622      	mov	r2, r4
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	4628      	mov	r0, r5
 800a276:	8833      	ldrh	r3, [r6, #0]
 800a278:	2120      	movs	r1, #32
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a27a:	f888 e000 	strb.w	lr, [r8]
	myI2cData[0] = 0x03;
 800a27e:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a282:	f7f7 ff83 	bl	800218c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a286:	683b      	ldr	r3, [r7, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a288:	4686      	mov	lr, r0
	myI2cData[0] = 0x04;
 800a28a:	f44f 7c82 	mov.w	ip, #260	; 0x104
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a28e:	4622      	mov	r2, r4
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	4628      	mov	r0, r5
 800a294:	8833      	ldrh	r3, [r6, #0]
 800a296:	2120      	movs	r1, #32
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a298:	f888 e000 	strb.w	lr, [r8]
	myI2cData[0] = 0x04;
 800a29c:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a2a0:	f7f7 ff74 	bl	800218c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a2a4:	683b      	ldr	r3, [r7, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a2a6:	4686      	mov	lr, r0
	myI2cData[0] = 0x05;
 800a2a8:	f240 1c05 	movw	ip, #261	; 0x105
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a2ac:	4622      	mov	r2, r4
 800a2ae:	9300      	str	r3, [sp, #0]
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	8833      	ldrh	r3, [r6, #0]
 800a2b4:	2120      	movs	r1, #32
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a2b6:	f888 e000 	strb.w	lr, [r8]
	myI2cData[0] = 0x05;
 800a2ba:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a2be:	f7f7 ff65 	bl	800218c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
	myI2cData[1] = 0x10;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a2c2:	683b      	ldr	r3, [r7, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a2c4:	4686      	mov	lr, r0
	myI2cData[0] = 0x06;
 800a2c6:	f241 0c06 	movw	ip, #4102	; 0x1006
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a2ca:	4622      	mov	r2, r4
 800a2cc:	9300      	str	r3, [sp, #0]
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	8833      	ldrh	r3, [r6, #0]
 800a2d2:	2120      	movs	r1, #32
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a2d4:	f888 e000 	strb.w	lr, [r8]
	myI2cData[0] = 0x06;
 800a2d8:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a2dc:	f7f7 ff56 	bl	800218c <HAL_I2C_Master_Transmit>
	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x02;
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a2e0:	683b      	ldr	r3, [r7, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a2e2:	4684      	mov	ip, r0
	myI2cData[0] = 0x07;
 800a2e4:	f240 2707 	movw	r7, #519	; 0x207
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a2e8:	4622      	mov	r2, r4
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	8833      	ldrh	r3, [r6, #0]
 800a2f0:	2120      	movs	r1, #32
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a2f2:	f888 c000 	strb.w	ip, [r8]
	myI2cData[0] = 0x07;
 800a2f6:	8027      	strh	r7, [r4, #0]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800a2f8:	f7f7 ff48 	bl	800218c <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 800a2fc:	4b06      	ldr	r3, [pc, #24]	; (800a318 <AudioCodec_init+0x128>)
 800a2fe:	2201      	movs	r2, #1
 800a300:	601a      	str	r2, [r3, #0]

}
 800a302:	b002      	add	sp, #8
 800a304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a308:	20000b00 	.word	0x20000b00
 800a30c:	58020800 	.word	0x58020800
 800a310:	20000be8 	.word	0x20000be8
 800a314:	20000b04 	.word	0x20000b04
 800a318:	20000ba0 	.word	0x20000ba0
 800a31c:	2001925c 	.word	0x2001925c

0800a320 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a320:	4b1c      	ldr	r3, [pc, #112]	; (800a394 <MX_DMA_Init+0x74>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800a322:	2200      	movs	r2, #0
 800a324:	200b      	movs	r0, #11
 800a326:	4611      	mov	r1, r2
{
 800a328:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a32a:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 800a32e:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a330:	f044 0401 	orr.w	r4, r4, #1
 800a334:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 800a338:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a33c:	f003 0301 	and.w	r3, r3, #1
 800a340:	9301      	str	r3, [sp, #4]
 800a342:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800a344:	f7f6 f866 	bl	8000414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800a348:	200b      	movs	r0, #11
 800a34a:	f7f6 f89d 	bl	8000488 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 4, 0);
 800a34e:	2200      	movs	r2, #0
 800a350:	2104      	movs	r1, #4
 800a352:	200c      	movs	r0, #12
 800a354:	f7f6 f85e 	bl	8000414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800a358:	200c      	movs	r0, #12
 800a35a:	f7f6 f895 	bl	8000488 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800a35e:	2200      	movs	r2, #0
 800a360:	2105      	movs	r1, #5
 800a362:	200d      	movs	r0, #13
 800a364:	f7f6 f856 	bl	8000414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800a368:	200d      	movs	r0, #13
 800a36a:	f7f6 f88d 	bl	8000488 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800a36e:	2200      	movs	r2, #0
 800a370:	200e      	movs	r0, #14
 800a372:	4611      	mov	r1, r2
 800a374:	f7f6 f84e 	bl	8000414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800a378:	200e      	movs	r0, #14
 800a37a:	f7f6 f885 	bl	8000488 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800a37e:	2200      	movs	r2, #0
 800a380:	200f      	movs	r0, #15
 800a382:	4611      	mov	r1, r2
 800a384:	f7f6 f846 	bl	8000414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800a388:	200f      	movs	r0, #15

}
 800a38a:	b002      	add	sp, #8
 800a38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800a390:	f7f6 b87a 	b.w	8000488 <HAL_NVIC_EnableIRQ>
 800a394:	58024400 	.word	0x58024400

0800a398 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a398:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a39a:	4903      	ldr	r1, [pc, #12]	; (800a3a8 <MX_FATFS_Init+0x10>)
 800a39c:	4803      	ldr	r0, [pc, #12]	; (800a3ac <MX_FATFS_Init+0x14>)
 800a39e:	f7fd fc51 	bl	8007c44 <FATFS_LinkDriver>
 800a3a2:	4b03      	ldr	r3, [pc, #12]	; (800a3b0 <MX_FATFS_Init+0x18>)
 800a3a4:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800a3a6:	bd08      	pop	{r3, pc}
 800a3a8:	20019264 	.word	0x20019264
 800a3ac:	0800efd8 	.word	0x0800efd8
 800a3b0:	20019260 	.word	0x20019260

0800a3b4 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a3b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a3b8:	4803      	ldr	r0, [pc, #12]	; (800a3c8 <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
 800a3ba:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a3bc:	f7f7 fdc6 	bl	8001f4c <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 800a3c0:	fab0 f080 	clz	r0, r0
 800a3c4:	0940      	lsrs	r0, r0, #5
 800a3c6:	bd08      	pop	{r3, pc}
 800a3c8:	58020800 	.word	0x58020800

0800a3cc <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800a3cc:	481c      	ldr	r0, [pc, #112]	; (800a440 <MX_FMC_Init+0x74>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800a3ce:	2208      	movs	r2, #8
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800a3d0:	491c      	ldr	r1, [pc, #112]	; (800a444 <MX_FMC_Init+0x78>)
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800a3d2:	2310      	movs	r3, #16
{
 800a3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800a3d6:	2401      	movs	r4, #1
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800a3d8:	6001      	str	r1, [r0, #0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800a3da:	f44f 7180 	mov.w	r1, #256	; 0x100
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800a3de:	2540      	movs	r5, #64	; 0x40
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800a3e0:	6084      	str	r4, [r0, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800a3e2:	f44f 6440 	mov.w	r4, #3072	; 0xc00
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800a3e6:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800a3e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800a3ec:	6103      	str	r3, [r0, #16]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800a3ee:	2300      	movs	r3, #0
{
 800a3f0:	b089      	sub	sp, #36	; 0x24
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800a3f2:	6181      	str	r1, [r0, #24]
  SdramTiming.ExitSelfRefreshDelay = 6;
  SdramTiming.SelfRefreshTime = 4;
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 2;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;
 800a3f4:	2102      	movs	r1, #2
  SdramTiming.LoadToActiveDelay = 2;
 800a3f6:	2602      	movs	r6, #2
 800a3f8:	2706      	movs	r7, #6
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800a3fa:	6145      	str	r5, [r0, #20]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800a3fc:	6204      	str	r4, [r0, #32]
  SdramTiming.LoadToActiveDelay = 2;
 800a3fe:	2506      	movs	r5, #6
 800a400:	2404      	movs	r4, #4
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800a402:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800a404:	6043      	str	r3, [r0, #4]
  SdramTiming.LoadToActiveDelay = 2;
 800a406:	2202      	movs	r2, #2
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800a408:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800a40a:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 800a40c:	2302      	movs	r3, #2
  SdramTiming.RCDDelay = 2;
 800a40e:	9106      	str	r1, [sp, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800a410:	4669      	mov	r1, sp
  SdramTiming.LoadToActiveDelay = 2;
 800a412:	e9cd 6700 	strd	r6, r7, [sp]
 800a416:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a41a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800a41e:	f7fb fb75 	bl	8005b0c <HAL_SDRAM_Init>
 800a422:	b928      	cbnz	r0, 800a430 <MX_FMC_Init+0x64>
  {
    Error_Handler( );
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 800a424:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800a428:	f7f5 ffd6 	bl	80003d8 <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800a42c:	b009      	add	sp, #36	; 0x24
 800a42e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler( );
 800a430:	f000 fbf8 	bl	800ac24 <Error_Handler>
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 800a434:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800a438:	f7f5 ffce 	bl	80003d8 <HAL_SetFMCMemorySwappingConfig>
}
 800a43c:	b009      	add	sp, #36	; 0x24
 800a43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a440:	200196cc 	.word	0x200196cc
 800a444:	52004140 	.word	0x52004140

0800a448 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800a448:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  if (FMC_Initialized) {
 800a44c:	4d37      	ldr	r5, [pc, #220]	; (800a52c <HAL_SDRAM_MspInit+0xe4>)
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800a44e:	b0b6      	sub	sp, #216	; 0xd8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a450:	2300      	movs	r3, #0
  if (FMC_Initialized) {
 800a452:	682c      	ldr	r4, [r5, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a454:	9306      	str	r3, [sp, #24]
 800a456:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a45a:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (FMC_Initialized) {
 800a45e:	b114      	cbz	r4, 800a466 <HAL_SDRAM_MspInit+0x1e>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800a460:	b036      	add	sp, #216	; 0xd8
 800a462:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
  FMC_Initialized = 1;
 800a466:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a468:	22b8      	movs	r2, #184	; 0xb8
 800a46a:	4621      	mov	r1, r4
 800a46c:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 800a46e:	602b      	str	r3, [r5, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a470:	f003 f950 	bl	800d714 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800a474:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a478:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800a47a:	9418      	str	r4, [sp, #96]	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800a47c:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a47e:	f7f8 fe69 	bl	8003154 <HAL_RCCEx_PeriphCLKConfig>
 800a482:	2800      	cmp	r0, #0
 800a484:	d14e      	bne.n	800a524 <HAL_SDRAM_MspInit+0xdc>
  __HAL_RCC_FMC_CLK_ENABLE();
 800a486:	4b2a      	ldr	r3, [pc, #168]	; (800a530 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800a488:	2400      	movs	r4, #0
 800a48a:	2503      	movs	r5, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a48c:	260c      	movs	r6, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 800a48e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800a492:	f64f 083f 	movw	r8, #63551	; 0xf83f
 800a496:	f04f 0902 	mov.w	r9, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a49a:	a902      	add	r1, sp, #8
  __HAL_RCC_FMC_CLK_ENABLE();
 800a49c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a4a0:	4824      	ldr	r0, [pc, #144]	; (800a534 <HAL_SDRAM_MspInit+0xec>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800a4a2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800a4a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a4aa:	9606      	str	r6, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
 800a4ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a4b0:	9301      	str	r3, [sp, #4]
 800a4b2:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800a4b4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a4b8:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a4bc:	f7f7 fc20 	bl	8001d00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 800a4c0:	2219      	movs	r2, #25
 800a4c2:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a4c4:	a902      	add	r1, sp, #8
 800a4c6:	481c      	ldr	r0, [pc, #112]	; (800a538 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a4c8:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 800a4ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a4ce:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a4d2:	f7f7 fc15 	bl	8001d00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 800a4d6:	f248 1237 	movw	r2, #33079	; 0x8137
 800a4da:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a4dc:	a902      	add	r1, sp, #8
 800a4de:	4817      	ldr	r0, [pc, #92]	; (800a53c <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a4e0:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 800a4e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a4e6:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a4ea:	f7f7 fc09 	bl	8001d00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800a4ee:	f64f 7283 	movw	r2, #65411	; 0xff83
 800a4f2:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a4f4:	a902      	add	r1, sp, #8
 800a4f6:	4812      	ldr	r0, [pc, #72]	; (800a540 <HAL_SDRAM_MspInit+0xf8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a4f8:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800a4fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a4fe:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a502:	f7f7 fbfd 	bl	8001d00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800a506:	f24c 7203 	movw	r2, #50947	; 0xc703
 800a50a:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a50c:	a902      	add	r1, sp, #8
 800a50e:	480d      	ldr	r0, [pc, #52]	; (800a544 <HAL_SDRAM_MspInit+0xfc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a510:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800a512:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a516:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a51a:	f7f7 fbf1 	bl	8001d00 <HAL_GPIO_Init>
}
 800a51e:	b036      	add	sp, #216	; 0xd8
 800a520:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
      Error_Handler();
 800a524:	f000 fb7e 	bl	800ac24 <Error_Handler>
 800a528:	e7ad      	b.n	800a486 <HAL_SDRAM_MspInit+0x3e>
 800a52a:	bf00      	nop
 800a52c:	20000bec 	.word	0x20000bec
 800a530:	58024400 	.word	0x58024400
 800a534:	58021400 	.word	0x58021400
 800a538:	58020800 	.word	0x58020800
 800a53c:	58021800 	.word	0x58021800
 800a540:	58021000 	.word	0x58021000
 800a544:	58020c00 	.word	0x58020c00

0800a548 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 800a548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a54c:	4b82      	ldr	r3, [pc, #520]	; (800a758 <MX_GPIO_Init+0x210>)
{
 800a54e:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a550:	f04f 0900 	mov.w	r9, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a554:	f04f 0801 	mov.w	r8, #1
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800a558:	4c80      	ldr	r4, [pc, #512]	; (800a75c <MX_GPIO_Init+0x214>)
 800a55a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a55e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800a562:	464a      	mov	r2, r9
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a564:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800a568:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a56c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800a570:	f04f 0b00 	mov.w	fp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800a574:	4d7a      	ldr	r5, [pc, #488]	; (800a760 <MX_GPIO_Init+0x218>)
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800a576:	2600      	movs	r6, #0
 800a578:	2700      	movs	r7, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a57a:	e9cd 990b 	strd	r9, r9, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a57e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 800a582:	f040 0010 	orr.w	r0, r0, #16
 800a586:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800a58a:	4620      	mov	r0, r4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a58c:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800a590:	f00c 0c10 	and.w	ip, ip, #16
 800a594:	f8cd c000 	str.w	ip, [sp]
 800a598:	f8dd c000 	ldr.w	ip, [sp]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a59c:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800a5a0:	f04c 0c04 	orr.w	ip, ip, #4
 800a5a4:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800a5a8:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800a5ac:	f00c 0c04 	and.w	ip, ip, #4
 800a5b0:	f8cd c004 	str.w	ip, [sp, #4]
 800a5b4:	f8dd c004 	ldr.w	ip, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a5b8:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800a5bc:	f04c 0c20 	orr.w	ip, ip, #32
 800a5c0:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800a5c4:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800a5c8:	f00c 0c20 	and.w	ip, ip, #32
 800a5cc:	f8cd c008 	str.w	ip, [sp, #8]
 800a5d0:	f8dd c008 	ldr.w	ip, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a5d4:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800a5d8:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 800a5dc:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800a5e0:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800a5e4:	f00c 0c80 	and.w	ip, ip, #128	; 0x80
 800a5e8:	f8cd c00c 	str.w	ip, [sp, #12]
 800a5ec:	f8dd c00c 	ldr.w	ip, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5f0:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800a5f4:	ea4c 0c08 	orr.w	ip, ip, r8
 800a5f8:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800a5fc:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800a600:	ea0c 0c08 	and.w	ip, ip, r8
 800a604:	f8cd c010 	str.w	ip, [sp, #16]
 800a608:	f8dd c010 	ldr.w	ip, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a60c:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800a610:	f04c 0c02 	orr.w	ip, ip, #2
 800a614:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800a618:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800a61c:	f00c 0c02 	and.w	ip, ip, #2
 800a620:	f8cd c014 	str.w	ip, [sp, #20]
 800a624:	f8dd c014 	ldr.w	ip, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a628:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800a62c:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 800a630:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800a634:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800a638:	f00c 0c40 	and.w	ip, ip, #64	; 0x40
 800a63c:	f8cd c018 	str.w	ip, [sp, #24]
 800a640:	f8dd c018 	ldr.w	ip, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a644:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800a648:	f04c 0c08 	orr.w	ip, ip, #8
 800a64c:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800a650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a654:	f003 0308 	and.w	r3, r3, #8
 800a658:	9307      	str	r3, [sp, #28]
 800a65a:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800a65c:	f7f7 fc7c 	bl	8001f58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800a660:	464a      	mov	r2, r9
 800a662:	4628      	mov	r0, r5
 800a664:	2110      	movs	r1, #16
 800a666:	f7f7 fc77 	bl	8001f58 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a66a:	a908      	add	r1, sp, #32
 800a66c:	4620      	mov	r0, r4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a66e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800a672:	e9cd ab08 	strd	sl, fp, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800a676:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
 800a67a:	f04f 0b01 	mov.w	fp, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a67e:	f7f7 fb3f 	bl	8001d00 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a682:	a908      	add	r1, sp, #32
 800a684:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800a686:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800a68a:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a68e:	f7f7 fb37 	bl	8001d00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 800a692:	f248 02c6 	movw	r2, #32966	; 0x80c6
 800a696:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a698:	a908      	add	r1, sp, #32
 800a69a:	4620      	mov	r0, r4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a69c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 800a6a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a6a4:	f7f7 fb2c 	bl	8001d00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a6a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a6ac:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a6ae:	a908      	add	r1, sp, #32
 800a6b0:	482c      	ldr	r0, [pc, #176]	; (800a764 <MX_GPIO_Init+0x21c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6b2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a6b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a6ba:	f7f7 fb21 	bl	8001d00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800a6be:	f649 720f 	movw	r2, #40719	; 0x9f0f
 800a6c2:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6c4:	a908      	add	r1, sp, #32
 800a6c6:	4828      	ldr	r0, [pc, #160]	; (800a768 <MX_GPIO_Init+0x220>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6c8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800a6cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6d0:	f7f7 fb16 	bl	8001d00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800a6d4:	2220      	movs	r2, #32
 800a6d6:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a6d8:	4620      	mov	r0, r4
 800a6da:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a6dc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800a6e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a6e4:	f7f7 fb0c 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 800a6e8:	f240 32e5 	movw	r2, #997	; 0x3e5
 800a6ec:	2303      	movs	r3, #3
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a6ee:	a908      	add	r1, sp, #32
 800a6f0:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6f2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 800a6f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a6fa:	f7f7 fb01 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800a6fe:	2202      	movs	r2, #2
 800a700:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a702:	a908      	add	r1, sp, #32
 800a704:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a706:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800a70a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a70e:	f7f7 faf7 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 800a712:	f643 02f8 	movw	r2, #14584	; 0x38f8
 800a716:	2303      	movs	r3, #3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a718:	a908      	add	r1, sp, #32
 800a71a:	4814      	ldr	r0, [pc, #80]	; (800a76c <MX_GPIO_Init+0x224>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a71c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 800a720:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a724:	f7f7 faec 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 800a728:	f647 62c8 	movw	r2, #32456	; 0x7ec8
 800a72c:	2303      	movs	r3, #3
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a72e:	a908      	add	r1, sp, #32
 800a730:	480f      	ldr	r0, [pc, #60]	; (800a770 <MX_GPIO_Init+0x228>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a732:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 800a736:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a73a:	f7f7 fae1 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800a73e:	2210      	movs	r2, #16
 800a740:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a742:	a908      	add	r1, sp, #32
 800a744:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800a746:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 800a74a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a74e:	f7f7 fad7 	bl	8001d00 <HAL_GPIO_Init>

}
 800a752:	b00f      	add	sp, #60	; 0x3c
 800a754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a758:	58024400 	.word	0x58024400
 800a75c:	58020800 	.word	0x58020800
 800a760:	58020400 	.word	0x58020400
 800a764:	58021400 	.word	0x58021400
 800a768:	58020000 	.word	0x58020000
 800a76c:	58020c00 	.word	0x58020c00
 800a770:	58021800 	.word	0x58021800

0800a774 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800a774:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800a776:	4818      	ldr	r0, [pc, #96]	; (800a7d8 <MX_I2C2_Init+0x64>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
 800a778:	2300      	movs	r3, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a77a:	2201      	movs	r2, #1
  hi2c2.Instance = I2C2;
 800a77c:	4c17      	ldr	r4, [pc, #92]	; (800a7dc <MX_I2C2_Init+0x68>)
  hi2c2.Init.Timing = 0x00B03FDB;
 800a77e:	4918      	ldr	r1, [pc, #96]	; (800a7e0 <MX_I2C2_Init+0x6c>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a780:	6203      	str	r3, [r0, #32]
  hi2c2.Init.Timing = 0x00B03FDB;
 800a782:	e9c0 4100 	strd	r4, r1, [r0]
  hi2c2.Init.OwnAddress1 = 0;
 800a786:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c2.Init.OwnAddress2 = 0;
 800a78a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a78e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a792:	f7f7 fc9f 	bl	80020d4 <HAL_I2C_Init>
 800a796:	b950      	cbnz	r0, 800a7ae <MX_I2C2_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a798:	2100      	movs	r1, #0
 800a79a:	480f      	ldr	r0, [pc, #60]	; (800a7d8 <MX_I2C2_Init+0x64>)
 800a79c:	f7f7 fdd0 	bl	8002340 <HAL_I2CEx_ConfigAnalogFilter>
 800a7a0:	b968      	cbnz	r0, 800a7be <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800a7a2:	2100      	movs	r1, #0
 800a7a4:	480c      	ldr	r0, [pc, #48]	; (800a7d8 <MX_I2C2_Init+0x64>)
 800a7a6:	f7f7 fdfd 	bl	80023a4 <HAL_I2CEx_ConfigDigitalFilter>
 800a7aa:	b980      	cbnz	r0, 800a7ce <MX_I2C2_Init+0x5a>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800a7ac:	bd10      	pop	{r4, pc}
    Error_Handler();
 800a7ae:	f000 fa39 	bl	800ac24 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a7b2:	2100      	movs	r1, #0
 800a7b4:	4808      	ldr	r0, [pc, #32]	; (800a7d8 <MX_I2C2_Init+0x64>)
 800a7b6:	f7f7 fdc3 	bl	8002340 <HAL_I2CEx_ConfigAnalogFilter>
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	d0f1      	beq.n	800a7a2 <MX_I2C2_Init+0x2e>
    Error_Handler();
 800a7be:	f000 fa31 	bl	800ac24 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	4804      	ldr	r0, [pc, #16]	; (800a7d8 <MX_I2C2_Init+0x64>)
 800a7c6:	f7f7 fded 	bl	80023a4 <HAL_I2CEx_ConfigDigitalFilter>
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	d0ee      	beq.n	800a7ac <MX_I2C2_Init+0x38>
}
 800a7ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800a7d2:	f000 ba27 	b.w	800ac24 <Error_Handler>
 800a7d6:	bf00      	nop
 800a7d8:	20019700 	.word	0x20019700
 800a7dc:	40005800 	.word	0x40005800
 800a7e0:	00b03fdb 	.word	0x00b03fdb

0800a7e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a7e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7e8:	2400      	movs	r4, #0
{
 800a7ea:	b0b7      	sub	sp, #220	; 0xdc
 800a7ec:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a7ee:	22bc      	movs	r2, #188	; 0xbc
 800a7f0:	4621      	mov	r1, r4
 800a7f2:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7f4:	9406      	str	r4, [sp, #24]
 800a7f6:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800a7fa:	e9cd 4404 	strd	r4, r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a7fe:	f002 ff89 	bl	800d714 <memset>
  if(i2cHandle->Instance==I2C2)
 800a802:	682a      	ldr	r2, [r5, #0]
 800a804:	4b1e      	ldr	r3, [pc, #120]	; (800a880 <HAL_I2C_MspInit+0x9c>)
 800a806:	429a      	cmp	r2, r3
 800a808:	d002      	beq.n	800a810 <HAL_I2C_MspInit+0x2c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800a80a:	b037      	add	sp, #220	; 0xdc
 800a80c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800a810:	2308      	movs	r3, #8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a812:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800a814:	9427      	str	r4, [sp, #156]	; 0x9c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800a816:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a818:	f7f8 fc9c 	bl	8003154 <HAL_RCCEx_PeriphCLKConfig>
 800a81c:	bb60      	cbnz	r0, 800a878 <HAL_I2C_MspInit+0x94>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a81e:	4c19      	ldr	r4, [pc, #100]	; (800a884 <HAL_I2C_MspInit+0xa0>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a820:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a822:	f44f 6640 	mov.w	r6, #3072	; 0xc00
 800a826:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a828:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a82c:	f04f 0800 	mov.w	r8, #0
 800a830:	f04f 0903 	mov.w	r9, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a834:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a836:	f043 0302 	orr.w	r3, r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a83a:	4813      	ldr	r0, [pc, #76]	; (800a888 <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a83c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a840:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a844:	9206      	str	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a846:	f003 0302 	and.w	r3, r3, #2
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a84e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a852:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a856:	f7f7 fa53 	bl	8001d00 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a85a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800a85e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a862:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 800a866:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800a86a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a86e:	9301      	str	r3, [sp, #4]
 800a870:	9b01      	ldr	r3, [sp, #4]
}
 800a872:	b037      	add	sp, #220	; 0xdc
 800a874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 800a878:	f000 f9d4 	bl	800ac24 <Error_Handler>
 800a87c:	e7cf      	b.n	800a81e <HAL_I2C_MspInit+0x3a>
 800a87e:	bf00      	nop
 800a880:	40005800 	.word	0x40005800
 800a884:	58024400 	.word	0x58024400
 800a888:	58020400 	.word	0x58020400

0800a88c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a88c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a88e:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a890:	224c      	movs	r2, #76	; 0x4c
 800a892:	2100      	movs	r1, #0
 800a894:	a80a      	add	r0, sp, #40	; 0x28
 800a896:	f002 ff3d 	bl	800d714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a89a:	2220      	movs	r2, #32
 800a89c:	2100      	movs	r1, #0
 800a89e:	a802      	add	r0, sp, #8
 800a8a0:	f002 ff38 	bl	800d714 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800a8a4:	2002      	movs	r0, #2
 800a8a6:	f7f7 fdad 	bl	8002404 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800a8aa:	4b28      	ldr	r3, [pc, #160]	; (800a94c <SystemClock_Config+0xc0>)
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	4928      	ldr	r1, [pc, #160]	; (800a950 <SystemClock_Config+0xc4>)
 800a8b0:	9201      	str	r2, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a8b2:	461a      	mov	r2, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800a8b4:	6998      	ldr	r0, [r3, #24]
 800a8b6:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 800a8ba:	6198      	str	r0, [r3, #24]
 800a8bc:	699b      	ldr	r3, [r3, #24]
 800a8be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a8c2:	9301      	str	r3, [sp, #4]
 800a8c4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800a8c6:	f043 0301 	orr.w	r3, r3, #1
 800a8ca:	62cb      	str	r3, [r1, #44]	; 0x2c
 800a8cc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800a8ce:	f003 0301 	and.w	r3, r3, #1
 800a8d2:	9301      	str	r3, [sp, #4]
 800a8d4:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a8d6:	6993      	ldr	r3, [r2, #24]
 800a8d8:	049b      	lsls	r3, r3, #18
 800a8da:	d5fc      	bpl.n	800a8d6 <SystemClock_Config+0x4a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800a8dc:	491d      	ldr	r1, [pc, #116]	; (800a954 <SystemClock_Config+0xc8>)
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a8de:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800a8e0:	f04f 0c01 	mov.w	ip, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
 800a8e4:	2705      	movs	r7, #5
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800a8e6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 192;
 800a8e8:	26c0      	movs	r6, #192	; 0xc0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800a8ea:	2421      	movs	r4, #33	; 0x21
 800a8ec:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800a8f0:	f022 0203 	bic.w	r2, r2, #3
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a8f4:	a80a      	add	r0, sp, #40	; 0x28
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800a8f6:	431a      	orrs	r2, r3
 800a8f8:	628a      	str	r2, [r1, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800a8fa:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a8fc:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800a8fe:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 800a902:	9715      	str	r7, [sp, #84]	; 0x54
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a904:	2708      	movs	r7, #8
  RCC_OscInitStruct.PLL.PLLN = 192;
 800a906:	9616      	str	r6, [sp, #88]	; 0x58
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a908:	2600      	movs	r6, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a90a:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800a90e:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800a912:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800a914:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800a918:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800a91c:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a91e:	f7f7 fe1b 	bl	8002558 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a922:	223f      	movs	r2, #63	; 0x3f
 800a924:	2303      	movs	r3, #3
 800a926:	2440      	movs	r4, #64	; 0x40
 800a928:	2540      	movs	r5, #64	; 0x40
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a92a:	2104      	movs	r1, #4
 800a92c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a92e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a932:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a936:	2340      	movs	r3, #64	; 0x40
 800a938:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a93c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a940:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a944:	f7f8 f998 	bl	8002c78 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800a948:	b01f      	add	sp, #124	; 0x7c
 800a94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a94c:	58024800 	.word	0x58024800
 800a950:	58000400 	.word	0x58000400
 800a954:	58024400 	.word	0x58024400

0800a958 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800a958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a95a:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a95c:	2298      	movs	r2, #152	; 0x98
 800a95e:	2100      	movs	r1, #0

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 800a960:	f44f 76ac 	mov.w	r6, #344	; 0x158
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a964:	a809      	add	r0, sp, #36	; 0x24
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 800a966:	2707      	movs	r7, #7
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a968:	f002 fed4 	bl	800d714 <memset>
  PeriphClkInitStruct.PLL2.PLL2P = 7;
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
  PeriphClkInitStruct.PLL2.PLL2R = 2;
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800a96c:	2100      	movs	r1, #0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 800a96e:	4a0e      	ldr	r2, [pc, #56]	; (800a9a8 <PeriphCommonClock_Config+0x50>)
 800a970:	2319      	movs	r3, #25
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800a972:	9108      	str	r1, [sp, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800a974:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800a978:	2001      	movs	r0, #1
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 800a97a:	2402      	movs	r4, #2
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800a97c:	9113      	str	r1, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 800a97e:	2502      	movs	r5, #2
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800a980:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800a984:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a986:	4668      	mov	r0, sp
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800a988:	9117      	str	r1, [sp, #92]	; 0x5c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 800a98a:	e9cd 2300 	strd	r2, r3, [sp]
 800a98e:	2200      	movs	r2, #0
 800a990:	2300      	movs	r3, #0
 800a992:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a996:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a99a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a99e:	f7f8 fbd9 	bl	8003154 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800a9a2:	b031      	add	sp, #196	; 0xc4
 800a9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	00011100 	.word	0x00011100

0800a9ac <SDRAM_Initialization_sequence>:
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)

//#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)956)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)0x0569)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
void SDRAM_Initialization_sequence(void)
{
 800a9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 1;
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a9b0:	4c2e      	ldr	r4, [pc, #184]	; (800aa6c <SDRAM_Initialization_sequence+0xc0>)
{
 800a9b2:	b087      	sub	sp, #28
    __IO uint32_t tmpmrd = 0;
 800a9b4:	2300      	movs	r3, #0
        | SDRAM_MODEREG_CAS_LATENCY_2 | SDRAM_MODEREG_OPERATING_MODE_STANDARD
        | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 1;
 800a9b6:	2501      	movs	r5, #1
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800a9b8:	2601      	movs	r6, #1
 800a9ba:	2700      	movs	r7, #0
 800a9bc:	f04f 0801 	mov.w	r8, #1
 800a9c0:	f04f 0910 	mov.w	r9, #16
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a9c4:	a902      	add	r1, sp, #8
 800a9c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9ca:	4620      	mov	r0, r4
    __IO uint32_t tmpmrd = 0;
 800a9cc:	9301      	str	r3, [sp, #4]
    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800a9ce:	f04f 0a04 	mov.w	sl, #4
 800a9d2:	f04f 0b10 	mov.w	fp, #16
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800a9d6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a9da:	e9cd 6704 	strd	r6, r7, [sp, #16]
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 800a9de:	f04f 0802 	mov.w	r8, #2
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a9e2:	f7fb f8bd 	bl	8005b60 <HAL_SDRAM_SendCommand>
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 800a9e6:	f04f 0910 	mov.w	r9, #16
    HAL_Delay(1);
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	f7f5 fcdc 	bl	80003a8 <HAL_Delay>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a9f0:	a902      	add	r1, sp, #8
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 800a9f8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a9fc:	e9cd 8902 	strd	r8, r9, [sp, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800aa00:	f7fb f8ae 	bl	8005b60 <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 800aa04:	f240 2322 	movw	r3, #546	; 0x222
    Command.ModeRegisterDefinition = tmpmrd;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800aa08:	a902      	add	r1, sp, #8

    /* Step 4: Configure the 1st Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800aa0a:	f04f 0803 	mov.w	r8, #3
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 800aa0e:	9301      	str	r3, [sp, #4]
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800aa10:	f04f 0910 	mov.w	r9, #16
    Command.ModeRegisterDefinition = tmpmrd;
 800aa14:	9b01      	ldr	r3, [sp, #4]
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800aa16:	2608      	movs	r6, #8
 800aa18:	2700      	movs	r7, #0
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    Command.ModeRegisterDefinition = tmpmrd;
 800aa20:	e9cd 5304 	strd	r5, r3, [sp, #16]
    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800aa24:	e9cd ab02 	strd	sl, fp, [sp, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800aa28:	f7fb f89a 	bl	8005b60 <HAL_SDRAM_SendCommand>
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 8;
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800aa2c:	a902      	add	r1, sp, #8
 800aa2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa32:	4620      	mov	r0, r4
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800aa34:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800aa38:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800aa3c:	f7fb f890 	bl	8005b60 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 800aa40:	4628      	mov	r0, r5
 800aa42:	f7f5 fcb1 	bl	80003a8 <HAL_Delay>
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 8;
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800aa46:	a902      	add	r1, sp, #8
 800aa48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa4c:	4620      	mov	r0, r4
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800aa4e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800aa52:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800aa56:	f7fb f883 	bl	8005b60 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 800aa5a:	f240 5169 	movw	r1, #1385	; 0x569
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f7fb f89e 	bl	8005ba0 <HAL_SDRAM_ProgramRefreshRate>
}
 800aa64:	b007      	add	sp, #28
 800aa66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa6a:	bf00      	nop
 800aa6c:	200196cc 	.word	0x200196cc

0800aa70 <randomNumber>:

float randomNumber(void) {
 800aa70:	b500      	push	{lr}
 800aa72:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 800aa74:	4807      	ldr	r0, [pc, #28]	; (800aa94 <randomNumber+0x24>)
 800aa76:	a901      	add	r1, sp, #4
 800aa78:	f7f9 fca4 	bl	80043c4 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 800aa7c:	eddd 7a01 	vldr	s15, [sp, #4]
 800aa80:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800aa98 <randomNumber+0x28>
 800aa84:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 800aa88:	ee27 0a80 	vmul.f32	s0, s15, s0
 800aa8c:	b003      	add	sp, #12
 800aa8e:	f85d fb04 	ldr.w	pc, [sp], #4
 800aa92:	bf00      	nop
 800aa94:	2001974c 	.word	0x2001974c
 800aa98:	2f80000d 	.word	0x2f80000d

0800aa9c <MPU_Conf>:


void MPU_Conf(void)
{
 800aa9c:	b510      	push	{r4, lr}
 800aa9e:	b084      	sub	sp, #16
  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800aaa0:	2400      	movs	r4, #0
	HAL_MPU_Disable();
 800aaa2:	f7f5 fd17 	bl	80004d4 <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0x30000000;
 800aaa6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800aaaa:	f240 1201 	movw	r2, #257	; 0x101
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800aaae:	4b0d      	ldr	r3, [pc, #52]	; (800aae4 <MPU_Conf+0x48>)


  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;


  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800aab0:	4668      	mov	r0, sp
  MPU_InitStruct.BaseAddress = 0x30000000;
 800aab2:	9101      	str	r1, [sp, #4]
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800aab4:	f8ad 2000 	strh.w	r2, [sp]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800aab8:	e9cd 3402 	strd	r3, r4, [sp, #8]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800aabc:	f7f5 fd2c 	bl	8000518 <HAL_MPU_ConfigRegion>
  //now set up D3 domain RAM

  MPU_InitStruct.Enable = MPU_REGION_ENABLE;

  //D3 Domain�SRAM1
  MPU_InitStruct.BaseAddress = 0x38000000;
 800aac0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800aac4:	f240 2201 	movw	r2, #513	; 0x201


  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800aac8:	4b07      	ldr	r3, [pc, #28]	; (800aae8 <MPU_Conf+0x4c>)


  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;


  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800aaca:	4668      	mov	r0, sp
  MPU_InitStruct.BaseAddress = 0x38000000;
 800aacc:	9101      	str	r1, [sp, #4]
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800aace:	f8ad 2000 	strh.w	r2, [sp]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800aad2:	9302      	str	r3, [sp, #8]
 800aad4:	9403      	str	r4, [sp, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800aad6:	f7f5 fd1f 	bl	8000518 <HAL_MPU_ConfigRegion>
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  */



  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800aada:	2004      	movs	r0, #4
 800aadc:	f7f5 fd0a 	bl	80004f4 <HAL_MPU_Enable>
}
 800aae0:	b004      	add	sp, #16
 800aae2:	bd10      	pop	{r4, pc}
 800aae4:	03010011 	.word	0x03010011
 800aae8:	0301000f 	.word	0x0301000f

0800aaec <main>:
{
 800aaec:	b570      	push	{r4, r5, r6, lr}
	  MPU_Conf();
 800aaee:	f7ff ffd5 	bl	800aa9c <MPU_Conf>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800aaf2:	4b41      	ldr	r3, [pc, #260]	; (800abf8 <main+0x10c>)
 800aaf4:	695a      	ldr	r2, [r3, #20]
 800aaf6:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 800aafa:	d111      	bne.n	800ab20 <main+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 800aafc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ab00:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800ab04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800ab08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ab0c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800ab10:	695a      	ldr	r2, [r3, #20]
 800ab12:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ab16:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800ab18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ab1c:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800ab20:	4a35      	ldr	r2, [pc, #212]	; (800abf8 <main+0x10c>)
 800ab22:	6953      	ldr	r3, [r2, #20]
 800ab24:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800ab28:	d124      	bne.n	800ab74 <main+0x88>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800ab2a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800ab2e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800ab32:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800ab36:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800ab3a:	f3c5 304e 	ubfx	r0, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800ab3e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 800ab42:	0140      	lsls	r0, r0, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800ab44:	ea00 0406 	and.w	r4, r0, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800ab48:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800ab4a:	ea44 7183 	orr.w	r1, r4, r3, lsl #30
      } while (ways-- != 0U);
 800ab4e:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800ab50:	f8c2 1260 	str.w	r1, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 800ab54:	1c59      	adds	r1, r3, #1
 800ab56:	d1f8      	bne.n	800ab4a <main+0x5e>
    } while(sets-- != 0U);
 800ab58:	3820      	subs	r0, #32
 800ab5a:	f110 0f20 	cmn.w	r0, #32
 800ab5e:	d1f1      	bne.n	800ab44 <main+0x58>
 800ab60:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800ab64:	6953      	ldr	r3, [r2, #20]
 800ab66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab6a:	6153      	str	r3, [r2, #20]
 800ab6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ab70:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800ab74:	f7f5 fbd6 	bl	8000324 <HAL_Init>
  SystemClock_Config();
 800ab78:	f7ff fe88 	bl	800a88c <SystemClock_Config>
  PeriphCommonClock_Config();
 800ab7c:	f7ff feec 	bl	800a958 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 800ab80:	f7ff fce2 	bl	800a548 <MX_GPIO_Init>
  MX_DMA_Init();
 800ab84:	f7ff fbcc 	bl	800a320 <MX_DMA_Init>
  MX_FMC_Init();
 800ab88:	f7ff fc20 	bl	800a3cc <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 800ab8c:	f000 fa04 	bl	800af98 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800ab90:	f7ff fc02 	bl	800a398 <MX_FATFS_Init>
  MX_SAI1_Init();
 800ab94:	f000 f888 	bl	800aca8 <MX_SAI1_Init>
  MX_RNG_Init();
 800ab98:	f000 f846 	bl	800ac28 <MX_RNG_Init>
  MX_SPI2_Init();
 800ab9c:	f000 fa96 	bl	800b0cc <MX_SPI2_Init>
  MX_I2C2_Init();
 800aba0:	f7ff fde8 	bl	800a774 <MX_I2C2_Init>
  MX_SPI1_Init();
 800aba4:	f000 fa6c 	bl	800b080 <MX_SPI1_Init>
  MX_SPI5_Init();
 800aba8:	f000 fab6 	bl	800b118 <MX_SPI5_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800abac:	2200      	movs	r2, #0
 800abae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800abb2:	4812      	ldr	r0, [pc, #72]	; (800abfc <main+0x110>)
 800abb4:	f7f7 f9d0 	bl	8001f58 <HAL_GPIO_WritePin>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800abb8:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
 800abbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 800abc0:	eee1 3a10 	vmsr	fpscr, r3
  HAL_Delay(200);
 800abc4:	20c8      	movs	r0, #200	; 0xc8
 800abc6:	f7f5 fbef 	bl	80003a8 <HAL_Delay>
  HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 16);
 800abca:	2210      	movs	r2, #16
 800abcc:	490c      	ldr	r1, [pc, #48]	; (800ac00 <main+0x114>)
 800abce:	480d      	ldr	r0, [pc, #52]	; (800ac04 <main+0x118>)
 800abd0:	f7fb fa3a 	bl	8006048 <HAL_SPI_Receive_DMA>
  HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 800abd4:	2234      	movs	r2, #52	; 0x34
 800abd6:	490c      	ldr	r1, [pc, #48]	; (800ac08 <main+0x11c>)
 800abd8:	480c      	ldr	r0, [pc, #48]	; (800ac0c <main+0x120>)
 800abda:	f7fb fa35 	bl	8006048 <HAL_SPI_Receive_DMA>
  HAL_SPI_Receive_DMA(&hspi1, SPI_LEVERS, 74);
 800abde:	224a      	movs	r2, #74	; 0x4a
 800abe0:	490b      	ldr	r1, [pc, #44]	; (800ac10 <main+0x124>)
 800abe2:	480c      	ldr	r0, [pc, #48]	; (800ac14 <main+0x128>)
 800abe4:	f7fb fa30 	bl	8006048 <HAL_SPI_Receive_DMA>
  SDRAM_Initialization_sequence();
 800abe8:	f7ff fee0 	bl	800a9ac <SDRAM_Initialization_sequence>
  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 800abec:	4a0a      	ldr	r2, [pc, #40]	; (800ac18 <main+0x12c>)
 800abee:	490b      	ldr	r1, [pc, #44]	; (800ac1c <main+0x130>)
 800abf0:	480b      	ldr	r0, [pc, #44]	; (800ac20 <main+0x134>)
 800abf2:	f7fd f84d 	bl	8007c90 <audioInit>
  while (1)
 800abf6:	e7fe      	b.n	800abf6 <main+0x10a>
 800abf8:	e000ed00 	.word	0xe000ed00
 800abfc:	58020800 	.word	0x58020800
 800ac00:	30000400 	.word	0x30000400
 800ac04:	20019a00 	.word	0x20019a00
 800ac08:	30000420 	.word	0x30000420
 800ac0c:	20019a88 	.word	0x20019a88
 800ac10:	30000460 	.word	0x30000460
 800ac14:	20019c00 	.word	0x20019c00
 800ac18:	20019760 	.word	0x20019760
 800ac1c:	200198e8 	.word	0x200198e8
 800ac20:	20019700 	.word	0x20019700

0800ac24 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop

0800ac28 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800ac28:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800ac2a:	4806      	ldr	r0, [pc, #24]	; (800ac44 <MX_RNG_Init+0x1c>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	4b06      	ldr	r3, [pc, #24]	; (800ac48 <MX_RNG_Init+0x20>)
 800ac30:	e9c0 3200 	strd	r3, r2, [r0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800ac34:	f7f9 fb88 	bl	8004348 <HAL_RNG_Init>
 800ac38:	b900      	cbnz	r0, 800ac3c <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800ac3a:	bd08      	pop	{r3, pc}
 800ac3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800ac40:	f7ff bff0 	b.w	800ac24 <Error_Handler>
 800ac44:	2001974c 	.word	0x2001974c
 800ac48:	48021800 	.word	0x48021800

0800ac4c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800ac4c:	b510      	push	{r4, lr}
 800ac4e:	b0b0      	sub	sp, #192	; 0xc0
 800ac50:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ac52:	22bc      	movs	r2, #188	; 0xbc
 800ac54:	2100      	movs	r1, #0
 800ac56:	a801      	add	r0, sp, #4
 800ac58:	f002 fd5c 	bl	800d714 <memset>
  if(rngHandle->Instance==RNG)
 800ac5c:	4b10      	ldr	r3, [pc, #64]	; (800aca0 <HAL_RNG_MspInit+0x54>)
 800ac5e:	6822      	ldr	r2, [r4, #0]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d001      	beq.n	800ac68 <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800ac64:	b030      	add	sp, #192	; 0xc0
 800ac66:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800ac68:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800ac6c:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ac6e:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800ac70:	9201      	str	r2, [sp, #4]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800ac72:	9320      	str	r3, [sp, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ac74:	f7f8 fa6e 	bl	8003154 <HAL_RCCEx_PeriphCLKConfig>
 800ac78:	b970      	cbnz	r0, 800ac98 <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
 800ac7a:	4b0a      	ldr	r3, [pc, #40]	; (800aca4 <HAL_RNG_MspInit+0x58>)
 800ac7c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800ac80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac84:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800ac88:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800ac8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac90:	9300      	str	r3, [sp, #0]
 800ac92:	9b00      	ldr	r3, [sp, #0]
}
 800ac94:	b030      	add	sp, #192	; 0xc0
 800ac96:	bd10      	pop	{r4, pc}
      Error_Handler();
 800ac98:	f7ff ffc4 	bl	800ac24 <Error_Handler>
 800ac9c:	e7ed      	b.n	800ac7a <HAL_RNG_MspInit+0x2e>
 800ac9e:	bf00      	nop
 800aca0:	48021800 	.word	0x48021800
 800aca4:	58024400 	.word	0x58024400

0800aca8 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800aca8:	b538      	push	{r3, r4, r5, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 800acaa:	4818      	ldr	r0, [pc, #96]	; (800ad0c <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800acac:	f64b 3280 	movw	r2, #48000	; 0xbb80
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800acb0:	2302      	movs	r3, #2
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800acb2:	2401      	movs	r4, #1
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800acb4:	2100      	movs	r1, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 800acb6:	4d16      	ldr	r5, [pc, #88]	; (800ad10 <MX_SAI1_Init+0x68>)
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800acb8:	e9c0 4207 	strd	r4, r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800acbc:	461a      	mov	r2, r3
  hsai_BlockA1.Instance = SAI1_Block_A;
 800acbe:	6005      	str	r5, [r0, #0]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800acc0:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800acc2:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800acc4:	e9c0 1101 	strd	r1, r1, [r0, #4]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800acc8:	e9c0 1105 	strd	r1, r1, [r0, #20]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800accc:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800acd0:	f7f9 fd82 	bl	80047d8 <HAL_SAI_InitProtocol>
 800acd4:	b998      	cbnz	r0, 800acfe <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 800acd6:	480f      	ldr	r0, [pc, #60]	; (800ad14 <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800acd8:	2203      	movs	r2, #3
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800acda:	2302      	movs	r3, #2
  hsai_BlockB1.Instance = SAI1_Block_B;
 800acdc:	4d0e      	ldr	r5, [pc, #56]	; (800ad18 <MX_SAI1_Init+0x70>)
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800acde:	2100      	movs	r1, #0
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800ace0:	2401      	movs	r4, #1
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800ace2:	e9c0 5200 	strd	r5, r2, [r0]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800ace6:	461a      	mov	r2, r3
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800ace8:	6084      	str	r4, [r0, #8]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800acea:	61c4      	str	r4, [r0, #28]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800acec:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800acee:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800acf0:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800acf2:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800acf6:	f7f9 fd6f 	bl	80047d8 <HAL_SAI_InitProtocol>
 800acfa:	b918      	cbnz	r0, 800ad04 <MX_SAI1_Init+0x5c>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800acfc:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler();
 800acfe:	f7ff ff91 	bl	800ac24 <Error_Handler>
 800ad02:	e7e8      	b.n	800acd6 <MX_SAI1_Init+0x2e>
}
 800ad04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800ad08:	f7ff bf8c 	b.w	800ac24 <Error_Handler>
 800ad0c:	200198e8 	.word	0x200198e8
 800ad10:	40015804 	.word	0x40015804
 800ad14:	20019760 	.word	0x20019760
 800ad18:	40015824 	.word	0x40015824

0800ad1c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800ad1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800ad20:	4a55      	ldr	r2, [pc, #340]	; (800ae78 <HAL_SAI_MspInit+0x15c>)
{
 800ad22:	b089      	sub	sp, #36	; 0x24
    if(hsai->Instance==SAI1_Block_A)
 800ad24:	6803      	ldr	r3, [r0, #0]
{
 800ad26:	4604      	mov	r4, r0
    if(hsai->Instance==SAI1_Block_A)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d005      	beq.n	800ad38 <HAL_SAI_MspInit+0x1c>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
    }
    if(hsai->Instance==SAI1_Block_B)
 800ad2c:	4a53      	ldr	r2, [pc, #332]	; (800ae7c <HAL_SAI_MspInit+0x160>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d042      	beq.n	800adb8 <HAL_SAI_MspInit+0x9c>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
    }
}
 800ad32:	b009      	add	sp, #36	; 0x24
 800ad34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (SAI1_client == 0)
 800ad38:	4b51      	ldr	r3, [pc, #324]	; (800ae80 <HAL_SAI_MspInit+0x164>)
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	2a00      	cmp	r2, #0
 800ad3e:	f000 8087 	beq.w	800ae50 <HAL_SAI_MspInit+0x134>
    SAI1_client ++;
 800ad42:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800ad44:	f04f 0874 	mov.w	r8, #116	; 0x74
 800ad48:	f04f 0902 	mov.w	r9, #2
 800ad4c:	2600      	movs	r6, #0
    SAI1_client ++;
 800ad4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800ad50:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800ad52:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ad54:	a902      	add	r1, sp, #8
 800ad56:	484b      	ldr	r0, [pc, #300]	; (800ae84 <HAL_SAI_MspInit+0x168>)
    hdma_sai1_a.Instance = DMA1_Stream1;
 800ad58:	4d4b      	ldr	r5, [pc, #300]	; (800ae88 <HAL_SAI_MspInit+0x16c>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800ad5a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800ad5c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800ad60:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ad64:	f7f6 ffcc 	bl	8001d00 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 800ad68:	4a48      	ldr	r2, [pc, #288]	; (800ae8c <HAL_SAI_MspInit+0x170>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800ad6a:	2357      	movs	r3, #87	; 0x57
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ad6c:	2040      	movs	r0, #64	; 0x40
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800ad6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai1_a.Instance = DMA1_Stream1;
 800ad72:	602a      	str	r2, [r5, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800ad74:	606b      	str	r3, [r5, #4]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ad76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ad7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ad7e:	60a8      	str	r0, [r5, #8]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800ad80:	f44f 7080 	mov.w	r0, #256	; 0x100
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800ad84:	6129      	str	r1, [r5, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ad86:	616a      	str	r2, [r5, #20]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ad88:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800ad8c:	2204      	movs	r2, #4
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ad8e:	61ab      	str	r3, [r5, #24]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800ad90:	2300      	movs	r3, #0
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800ad92:	61e8      	str	r0, [r5, #28]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800ad94:	4628      	mov	r0, r5
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800ad96:	60eb      	str	r3, [r5, #12]
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800ad98:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800ad9a:	e9c5 1208 	strd	r1, r2, [r5, #32]
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 800ad9e:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800ada2:	f7f5 fccb 	bl	800073c <HAL_DMA_Init>
 800ada6:	2800      	cmp	r0, #0
 800ada8:	d160      	bne.n	800ae6c <HAL_SAI_MspInit+0x150>
    if(hsai->Instance==SAI1_Block_B)
 800adaa:	4a34      	ldr	r2, [pc, #208]	; (800ae7c <HAL_SAI_MspInit+0x160>)
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800adac:	63ac      	str	r4, [r5, #56]	; 0x38
 800adae:	6823      	ldr	r3, [r4, #0]
    if(hsai->Instance==SAI1_Block_B)
 800adb0:	4293      	cmp	r3, r2
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800adb2:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    if(hsai->Instance==SAI1_Block_B)
 800adb6:	d1bc      	bne.n	800ad32 <HAL_SAI_MspInit+0x16>
      if (SAI1_client == 0)
 800adb8:	4b31      	ldr	r3, [pc, #196]	; (800ae80 <HAL_SAI_MspInit+0x164>)
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	2a00      	cmp	r2, #0
 800adbe:	d039      	beq.n	800ae34 <HAL_SAI_MspInit+0x118>
    SAI1_client ++;
 800adc0:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800adc2:	f04f 0808 	mov.w	r8, #8
 800adc6:	f04f 0902 	mov.w	r9, #2
 800adca:	2600      	movs	r6, #0
    SAI1_client ++;
 800adcc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800adce:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800add0:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800add2:	a902      	add	r1, sp, #8
 800add4:	482b      	ldr	r0, [pc, #172]	; (800ae84 <HAL_SAI_MspInit+0x168>)
    hdma_sai1_b.Instance = DMA1_Stream2;
 800add6:	4d2e      	ldr	r5, [pc, #184]	; (800ae90 <HAL_SAI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800add8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800adda:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800adde:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ade2:	f7f6 ff8d 	bl	8001d00 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 800ade6:	4b2b      	ldr	r3, [pc, #172]	; (800ae94 <HAL_SAI_MspInit+0x178>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800ade8:	2058      	movs	r0, #88	; 0x58
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800adea:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800adee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_b.Instance = DMA1_Stream2;
 800adf2:	602b      	str	r3, [r5, #0]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800adf4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800adf8:	6068      	str	r0, [r5, #4]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800adfa:	f44f 7080 	mov.w	r0, #256	; 0x100
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800adfe:	6129      	str	r1, [r5, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ae00:	616a      	str	r2, [r5, #20]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ae02:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800ae06:	2204      	movs	r2, #4
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ae08:	61ab      	str	r3, [r5, #24]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ae0a:	2300      	movs	r3, #0
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800ae0c:	61e8      	str	r0, [r5, #28]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800ae0e:	4628      	mov	r0, r5
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800ae10:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800ae12:	e9c5 1208 	strd	r1, r2, [r5, #32]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800ae16:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 800ae1a:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800ae1e:	f7f5 fc8d 	bl	800073c <HAL_DMA_Init>
 800ae22:	bb30      	cbnz	r0, 800ae72 <HAL_SAI_MspInit+0x156>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800ae24:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 800ae28:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800ae2a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 800ae2e:	b009      	add	sp, #36	; 0x24
 800ae30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
 800ae34:	4918      	ldr	r1, [pc, #96]	; (800ae98 <HAL_SAI_MspInit+0x17c>)
 800ae36:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 800ae3a:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 800ae3e:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 800ae42:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 800ae46:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800ae4a:	9101      	str	r1, [sp, #4]
 800ae4c:	9901      	ldr	r1, [sp, #4]
 800ae4e:	e7b7      	b.n	800adc0 <HAL_SAI_MspInit+0xa4>
       __HAL_RCC_SAI1_CLK_ENABLE();
 800ae50:	4911      	ldr	r1, [pc, #68]	; (800ae98 <HAL_SAI_MspInit+0x17c>)
 800ae52:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 800ae56:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 800ae5a:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 800ae5e:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 800ae62:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800ae66:	9100      	str	r1, [sp, #0]
 800ae68:	9900      	ldr	r1, [sp, #0]
 800ae6a:	e76a      	b.n	800ad42 <HAL_SAI_MspInit+0x26>
      Error_Handler();
 800ae6c:	f7ff feda 	bl	800ac24 <Error_Handler>
 800ae70:	e79b      	b.n	800adaa <HAL_SAI_MspInit+0x8e>
      Error_Handler();
 800ae72:	f7ff fed7 	bl	800ac24 <Error_Handler>
 800ae76:	e7d5      	b.n	800ae24 <HAL_SAI_MspInit+0x108>
 800ae78:	40015804 	.word	0x40015804
 800ae7c:	40015824 	.word	0x40015824
 800ae80:	20000bf4 	.word	0x20000bf4
 800ae84:	58021000 	.word	0x58021000
 800ae88:	200197f8 	.word	0x200197f8
 800ae8c:	40020028 	.word	0x40020028
 800ae90:	20019870 	.word	0x20019870
 800ae94:	40020040 	.word	0x40020040
 800ae98:	58024400 	.word	0x58024400

0800ae9c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ae9c:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800ae9e:	4c0a      	ldr	r4, [pc, #40]	; (800aec8 <SD_initialize+0x2c>)
 800aea0:	2501      	movs	r5, #1
 800aea2:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800aea4:	f7ff f98c 	bl	800a1c0 <BSP_SD_Init>
 800aea8:	b108      	cbz	r0, 800aeae <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800aeaa:	7820      	ldrb	r0, [r4, #0]
}
 800aeac:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 800aeae:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800aeb0:	f7ff f966 	bl	800a180 <BSP_SD_GetCardState>
 800aeb4:	b918      	cbnz	r0, 800aebe <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 800aeb6:	7823      	ldrb	r3, [r4, #0]
 800aeb8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800aebc:	7023      	strb	r3, [r4, #0]
  return Stat;
 800aebe:	7823      	ldrb	r3, [r4, #0]
 800aec0:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800aec2:	7023      	strb	r3, [r4, #0]
  return Stat;
 800aec4:	7820      	ldrb	r0, [r4, #0]
}
 800aec6:	bd38      	pop	{r3, r4, r5, pc}
 800aec8:	20000b06 	.word	0x20000b06

0800aecc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800aecc:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800aece:	2301      	movs	r3, #1
 800aed0:	4c05      	ldr	r4, [pc, #20]	; (800aee8 <SD_status+0x1c>)
 800aed2:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800aed4:	f7ff f954 	bl	800a180 <BSP_SD_GetCardState>
 800aed8:	b918      	cbnz	r0, 800aee2 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800aeda:	7823      	ldrb	r3, [r4, #0]
 800aedc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800aee0:	7023      	strb	r3, [r4, #0]
  return Stat;
 800aee2:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 800aee4:	bd10      	pop	{r4, pc}
 800aee6:	bf00      	nop
 800aee8:	20000b06 	.word	0x20000b06

0800aeec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800aeec:	b508      	push	{r3, lr}
 800aeee:	4608      	mov	r0, r1
 800aef0:	4611      	mov	r1, r2
 800aef2:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800aef4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aef8:	f7ff f91e 	bl	800a138 <BSP_SD_ReadBlocks>
 800aefc:	b108      	cbz	r0, 800af02 <SD_read+0x16>
  DRESULT res = RES_ERROR;
 800aefe:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 800af00:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800af02:	f7ff f93d 	bl	800a180 <BSP_SD_GetCardState>
 800af06:	2800      	cmp	r0, #0
 800af08:	d0fa      	beq.n	800af00 <SD_read+0x14>
 800af0a:	f7ff f939 	bl	800a180 <BSP_SD_GetCardState>
 800af0e:	2800      	cmp	r0, #0
 800af10:	d1f7      	bne.n	800af02 <SD_read+0x16>
 800af12:	e7f5      	b.n	800af00 <SD_read+0x14>

0800af14 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800af14:	4b15      	ldr	r3, [pc, #84]	; (800af6c <SD_ioctl+0x58>)
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	07db      	lsls	r3, r3, #31
 800af1a:	d411      	bmi.n	800af40 <SD_ioctl+0x2c>
 800af1c:	4608      	mov	r0, r1
{
 800af1e:	b510      	push	{r4, lr}
 800af20:	4614      	mov	r4, r2
 800af22:	b08a      	sub	sp, #40	; 0x28
 800af24:	2903      	cmp	r1, #3
 800af26:	d81e      	bhi.n	800af66 <SD_ioctl+0x52>
 800af28:	e8df f001 	tbb	[pc, r1]
 800af2c:	0c150208 	.word	0x0c150208
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800af30:	a801      	add	r0, sp, #4
 800af32:	f7ff f92f 	bl	800a194 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800af36:	9b07      	ldr	r3, [sp, #28]
    res = RES_OK;
 800af38:	2000      	movs	r0, #0
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800af3a:	6023      	str	r3, [r4, #0]
  default:
    res = RES_PARERR;
  }

  return res;
}
 800af3c:	b00a      	add	sp, #40	; 0x28
 800af3e:	bd10      	pop	{r4, pc}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800af40:	2003      	movs	r0, #3
}
 800af42:	4770      	bx	lr
    BSP_SD_GetCardInfo(&CardInfo);
 800af44:	a801      	add	r0, sp, #4
 800af46:	f7ff f925 	bl	800a194 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800af4a:	9b08      	ldr	r3, [sp, #32]
 800af4c:	2000      	movs	r0, #0
 800af4e:	0a5b      	lsrs	r3, r3, #9
 800af50:	6023      	str	r3, [r4, #0]
}
 800af52:	b00a      	add	sp, #40	; 0x28
 800af54:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800af56:	a801      	add	r0, sp, #4
 800af58:	f7ff f91c 	bl	800a194 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800af5c:	9b08      	ldr	r3, [sp, #32]
    res = RES_OK;
 800af5e:	2000      	movs	r0, #0
    *(WORD*)buff = CardInfo.LogBlockSize;
 800af60:	8023      	strh	r3, [r4, #0]
}
 800af62:	b00a      	add	sp, #40	; 0x28
 800af64:	bd10      	pop	{r4, pc}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800af66:	2004      	movs	r0, #4
 800af68:	e7e8      	b.n	800af3c <SD_ioctl+0x28>
 800af6a:	bf00      	nop
 800af6c:	20000b06 	.word	0x20000b06

0800af70 <SD_write>:
{
 800af70:	b508      	push	{r3, lr}
 800af72:	4608      	mov	r0, r1
 800af74:	4611      	mov	r1, r2
 800af76:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800af78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af7c:	f7ff f8ee 	bl	800a15c <BSP_SD_WriteBlocks>
 800af80:	b108      	cbz	r0, 800af86 <SD_write+0x16>
  DRESULT res = RES_ERROR;
 800af82:	2001      	movs	r0, #1
}
 800af84:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800af86:	f7ff f8fb 	bl	800a180 <BSP_SD_GetCardState>
 800af8a:	2800      	cmp	r0, #0
 800af8c:	d0fa      	beq.n	800af84 <SD_write+0x14>
 800af8e:	f7ff f8f7 	bl	800a180 <BSP_SD_GetCardState>
 800af92:	2800      	cmp	r0, #0
 800af94:	d1f7      	bne.n	800af86 <SD_write+0x16>
 800af96:	e7f5      	b.n	800af84 <SD_write+0x14>

0800af98 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800af98:	b430      	push	{r4, r5}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800af9a:	4b08      	ldr	r3, [pc, #32]	; (800afbc <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800af9c:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  hsd1.Instance = SDMMC1;
 800afa0:	4d07      	ldr	r5, [pc, #28]	; (800afc0 <MX_SDMMC1_SD_Init+0x28>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800afa2:	2200      	movs	r2, #0
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 16;
 800afa4:	2010      	movs	r0, #16
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 800afa6:	2101      	movs	r1, #1
  hsd1.Instance = SDMMC1;
 800afa8:	601d      	str	r5, [r3, #0]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800afaa:	60dc      	str	r4, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800afac:	611a      	str	r2, [r3, #16]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 800afae:	e9c3 0105 	strd	r0, r1, [r3, #20]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800afb2:	e9c3 2201 	strd	r2, r2, [r3, #4]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800afb6:	bc30      	pop	{r4, r5}
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	20019980 	.word	0x20019980
 800afc0:	52007000 	.word	0x52007000

0800afc4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800afc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 800afc8:	4a29      	ldr	r2, [pc, #164]	; (800b070 <HAL_SD_MspInit+0xac>)
{
 800afca:	b08a      	sub	sp, #40	; 0x28
  if(sdHandle->Instance==SDMMC1)
 800afcc:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afce:	2300      	movs	r3, #0
  if(sdHandle->Instance==SDMMC1)
 800afd0:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afd2:	9308      	str	r3, [sp, #32]
 800afd4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800afd8:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if(sdHandle->Instance==SDMMC1)
 800afdc:	d002      	beq.n	800afe4 <HAL_SD_MspInit+0x20>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800afde:	b00a      	add	sp, #40	; 0x28
 800afe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800afe4:	4b23      	ldr	r3, [pc, #140]	; (800b074 <HAL_SD_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800afe6:	2401      	movs	r4, #1
 800afe8:	2501      	movs	r5, #1
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800afea:	f04f 080c 	mov.w	r8, #12
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800afee:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800aff2:	f44f 56f8 	mov.w	r6, #7936	; 0x1f00
 800aff6:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aff8:	a904      	add	r1, sp, #16
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800affa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800affe:	481e      	ldr	r0, [pc, #120]	; (800b078 <HAL_SD_MspInit+0xb4>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b000:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800b004:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800b008:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800b00c:	9201      	str	r2, [sp, #4]
 800b00e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b010:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b014:	f042 0204 	orr.w	r2, r2, #4
 800b018:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b01c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b020:	f002 0204 	and.w	r2, r2, #4
 800b024:	9202      	str	r2, [sp, #8]
 800b026:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b028:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b02c:	f042 0208 	orr.w	r2, r2, #8
 800b030:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800b038:	f8cd 8020 	str.w	r8, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b03c:	f003 0308 	and.w	r3, r3, #8
 800b040:	9303      	str	r3, [sp, #12]
 800b042:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800b044:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b048:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b04c:	f7f6 fe58 	bl	8001d00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b050:	2204      	movs	r2, #4
 800b052:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b054:	a904      	add	r1, sp, #16
 800b056:	4809      	ldr	r0, [pc, #36]	; (800b07c <HAL_SD_MspInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800b058:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b05c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b060:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b064:	f7f6 fe4c 	bl	8001d00 <HAL_GPIO_Init>
}
 800b068:	b00a      	add	sp, #40	; 0x28
 800b06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b06e:	bf00      	nop
 800b070:	52007000 	.word	0x52007000
 800b074:	58024400 	.word	0x58024400
 800b078:	58020800 	.word	0x58020800
 800b07c:	58020c00 	.word	0x58020c00

0800b080 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi5_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800b080:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800b082:	4810      	ldr	r0, [pc, #64]	; (800b0c4 <MX_SPI1_Init+0x44>)
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800b084:	2300      	movs	r3, #0
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800b086:	2107      	movs	r1, #7
  hspi1.Instance = SPI1;
 800b088:	4a0f      	ldr	r2, [pc, #60]	; (800b0c8 <MX_SPI1_Init+0x48>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800b08a:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800b08c:	60c1      	str	r1, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800b08e:	6183      	str	r3, [r0, #24]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800b090:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b094:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800b098:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
 800b09c:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800b0a0:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800b0a4:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800b0a8:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800b0ac:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800b0b0:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800b0b4:	f7fa fdf0 	bl	8005c98 <HAL_SPI_Init>
 800b0b8:	b900      	cbnz	r0, 800b0bc <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800b0ba:	bd08      	pop	{r3, pc}
 800b0bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800b0c0:	f7ff bdb0 	b.w	800ac24 <Error_Handler>
 800b0c4:	20019c00 	.word	0x20019c00
 800b0c8:	40013000 	.word	0x40013000

0800b0cc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800b0cc:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800b0ce:	4810      	ldr	r0, [pc, #64]	; (800b110 <MX_SPI2_Init+0x44>)
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800b0d0:	2300      	movs	r3, #0
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800b0d2:	2107      	movs	r1, #7
  hspi2.Instance = SPI2;
 800b0d4:	4a0f      	ldr	r2, [pc, #60]	; (800b114 <MX_SPI2_Init+0x48>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800b0d6:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800b0d8:	60c1      	str	r1, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800b0da:	6183      	str	r3, [r0, #24]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800b0dc:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b0e0:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800b0e4:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 0x0;
 800b0e8:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800b0ec:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800b0f0:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800b0f4:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800b0f8:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800b0fc:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800b100:	f7fa fdca 	bl	8005c98 <HAL_SPI_Init>
 800b104:	b900      	cbnz	r0, 800b108 <MX_SPI2_Init+0x3c>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800b106:	bd08      	pop	{r3, pc}
 800b108:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800b10c:	f7ff bd8a 	b.w	800ac24 <Error_Handler>
 800b110:	20019a00 	.word	0x20019a00
 800b114:	40003800 	.word	0x40003800

0800b118 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800b118:	b508      	push	{r3, lr}
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800b11a:	4810      	ldr	r0, [pc, #64]	; (800b15c <MX_SPI5_Init+0x44>)
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 800b11c:	2300      	movs	r3, #0
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800b11e:	2107      	movs	r1, #7
  hspi5.Instance = SPI5;
 800b120:	4a0f      	ldr	r2, [pc, #60]	; (800b160 <MX_SPI5_Init+0x48>)
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800b122:	6083      	str	r3, [r0, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800b124:	60c1      	str	r1, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 800b126:	6183      	str	r3, [r0, #24]
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 800b128:	e9c0 2300 	strd	r2, r3, [r0]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b12c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800b130:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi5.Init.CRCPolynomial = 0x0;
 800b134:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800b138:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800b13c:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800b140:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800b144:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800b148:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800b14c:	f7fa fda4 	bl	8005c98 <HAL_SPI_Init>
 800b150:	b900      	cbnz	r0, 800b154 <MX_SPI5_Init+0x3c>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800b152:	bd08      	pop	{r3, pc}
 800b154:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800b158:	f7ff bd64 	b.w	800ac24 <Error_Handler>
 800b15c:	20019a88 	.word	0x20019a88
 800b160:	40015000 	.word	0x40015000

0800b164 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800b164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b168:	2400      	movs	r4, #0
{
 800b16a:	b0ba      	sub	sp, #232	; 0xe8
 800b16c:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b16e:	22bc      	movs	r2, #188	; 0xbc
 800b170:	4621      	mov	r1, r4
 800b172:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b174:	940a      	str	r4, [sp, #40]	; 0x28
 800b176:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800b17a:	e9cd 4408 	strd	r4, r4, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b17e:	f002 fac9 	bl	800d714 <memset>
  if(spiHandle->Instance==SPI1)
 800b182:	682b      	ldr	r3, [r5, #0]
 800b184:	4aa1      	ldr	r2, [pc, #644]	; (800b40c <HAL_SPI_MspInit+0x2a8>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d009      	beq.n	800b19e <HAL_SPI_MspInit+0x3a>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 800b18a:	4aa1      	ldr	r2, [pc, #644]	; (800b410 <HAL_SPI_MspInit+0x2ac>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d06a      	beq.n	800b266 <HAL_SPI_MspInit+0x102>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI5)
 800b190:	4aa0      	ldr	r2, [pc, #640]	; (800b414 <HAL_SPI_MspInit+0x2b0>)
 800b192:	4293      	cmp	r3, r2
 800b194:	f000 80cc 	beq.w	800b330 <HAL_SPI_MspInit+0x1cc>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800b198:	b03a      	add	sp, #232	; 0xe8
 800b19a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b19e:	4b9e      	ldr	r3, [pc, #632]	; (800b418 <HAL_SPI_MspInit+0x2b4>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800b1a0:	20b0      	movs	r0, #176	; 0xb0
 800b1a2:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b1a4:	f04f 0805 	mov.w	r8, #5
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b1a8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800b1ac:	2600      	movs	r6, #0
 800b1ae:	2703      	movs	r7, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b1b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b1b4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800b1b8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800b1bc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b1c0:	9200      	str	r2, [sp, #0]
 800b1c2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b1c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b1c8:	f042 0201 	orr.w	r2, r2, #1
 800b1cc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b1d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b1d4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b1d8:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800b1dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b1e0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1e2:	a906      	add	r1, sp, #24
 800b1e4:	488d      	ldr	r0, [pc, #564]	; (800b41c <HAL_SPI_MspInit+0x2b8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b1e6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800b1e8:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1ec:	f7f6 fd88 	bl	8001d00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b1f0:	2640      	movs	r6, #64	; 0x40
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	2302      	movs	r3, #2
 800b1f6:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1f8:	a906      	add	r1, sp, #24
 800b1fa:	4888      	ldr	r0, [pc, #544]	; (800b41c <HAL_SPI_MspInit+0x2b8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b1fc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b200:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b204:	e9cd 2308 	strd	r2, r3, [sp, #32]
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800b208:	4e85      	ldr	r6, [pc, #532]	; (800b420 <HAL_SPI_MspInit+0x2bc>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b20a:	f7f6 fd79 	bl	8001d00 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800b20e:	2025      	movs	r0, #37	; 0x25
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800b210:	f8df e224 	ldr.w	lr, [pc, #548]	; 800b438 <HAL_SPI_MspInit+0x2d4>
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b214:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800b218:	f44f 7780 	mov.w	r7, #256	; 0x100
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800b21c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b220:	2204      	movs	r2, #4
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800b222:	2301      	movs	r3, #1
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b224:	6174      	str	r4, [r6, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b226:	61b4      	str	r4, [r6, #24]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b228:	f8c6 c010 	str.w	ip, [r6, #16]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800b22c:	e9c6 e000 	strd	lr, r0, [r6]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800b230:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b232:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800b236:	e9c6 440b 	strd	r4, r4, [r6, #44]	; 0x2c
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800b23a:	e9c6 7107 	strd	r7, r1, [r6, #28]
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800b23e:	e9c6 2309 	strd	r2, r3, [r6, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800b242:	f7f5 fa7b 	bl	800073c <HAL_DMA_Init>
 800b246:	2800      	cmp	r0, #0
 800b248:	f040 80d4 	bne.w	800b3f4 <HAL_SPI_MspInit+0x290>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800b24c:	2200      	movs	r2, #0
 800b24e:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800b250:	67ee      	str	r6, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800b252:	4611      	mov	r1, r2
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800b254:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800b256:	f7f5 f8dd 	bl	8000414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800b25a:	2023      	movs	r0, #35	; 0x23
 800b25c:	f7f5 f914 	bl	8000488 <HAL_NVIC_EnableIRQ>
}
 800b260:	b03a      	add	sp, #232	; 0xe8
 800b262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b266:	4b6c      	ldr	r3, [pc, #432]	; (800b418 <HAL_SPI_MspInit+0x2b4>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800b268:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 800b26c:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b26e:	f04f 0805 	mov.w	r8, #5
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b272:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800b276:	2600      	movs	r6, #0
 800b278:	2703      	movs	r7, #3
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b27a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b27e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800b282:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800b286:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800b28a:	9202      	str	r2, [sp, #8]
 800b28c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b28e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b292:	f042 0202 	orr.w	r2, r2, #2
 800b296:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b29a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b29e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b2a2:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800b2a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b2aa:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b2ac:	a906      	add	r1, sp, #24
 800b2ae:	485d      	ldr	r0, [pc, #372]	; (800b424 <HAL_SPI_MspInit+0x2c0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b2b0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800b2b2:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b2b6:	f7f6 fd23 	bl	8001d00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800b2ba:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 800b2be:	2200      	movs	r2, #0
 800b2c0:	2302      	movs	r3, #2
 800b2c2:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b2c4:	a906      	add	r1, sp, #24
 800b2c6:	4857      	ldr	r0, [pc, #348]	; (800b424 <HAL_SPI_MspInit+0x2c0>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b2c8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800b2cc:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b2d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    hdma_spi2_rx.Instance = DMA1_Stream0;
 800b2d4:	4e54      	ldr	r6, [pc, #336]	; (800b428 <HAL_SPI_MspInit+0x2c4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b2d6:	f7f6 fd13 	bl	8001d00 <HAL_GPIO_Init>
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800b2da:	2027      	movs	r0, #39	; 0x27
    hdma_spi2_rx.Instance = DMA1_Stream0;
 800b2dc:	f8df e15c 	ldr.w	lr, [pc, #348]	; 800b43c <HAL_SPI_MspInit+0x2d8>
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b2e0:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800b2e4:	f44f 7780 	mov.w	r7, #256	; 0x100
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800b2e8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b2ec:	2204      	movs	r2, #4
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800b2ee:	2301      	movs	r3, #1
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b2f0:	6174      	str	r4, [r6, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b2f2:	61b4      	str	r4, [r6, #24]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b2f4:	f8c6 c010 	str.w	ip, [r6, #16]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800b2f8:	e9c6 e000 	strd	lr, r0, [r6]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800b2fc:	4630      	mov	r0, r6
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b2fe:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800b302:	e9c6 440b 	strd	r4, r4, [r6, #44]	; 0x2c
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800b306:	e9c6 7107 	strd	r7, r1, [r6, #28]
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800b30a:	e9c6 2309 	strd	r2, r3, [r6, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800b30e:	f7f5 fa15 	bl	800073c <HAL_DMA_Init>
 800b312:	2800      	cmp	r0, #0
 800b314:	d171      	bne.n	800b3fa <HAL_SPI_MspInit+0x296>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800b316:	2200      	movs	r2, #0
 800b318:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800b31a:	67ee      	str	r6, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800b31c:	4611      	mov	r1, r2
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800b31e:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800b320:	f7f5 f878 	bl	8000414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800b324:	2024      	movs	r0, #36	; 0x24
 800b326:	f7f5 f8af 	bl	8000488 <HAL_NVIC_EnableIRQ>
}
 800b32a:	b03a      	add	sp, #232	; 0xe8
 800b32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800b330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b334:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800b336:	9423      	str	r4, [sp, #140]	; 0x8c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800b338:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b33a:	f7f7 ff0b 	bl	8003154 <HAL_RCCEx_PeriphCLKConfig>
 800b33e:	2800      	cmp	r0, #0
 800b340:	d161      	bne.n	800b406 <HAL_SPI_MspInit+0x2a2>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800b342:	4b35      	ldr	r3, [pc, #212]	; (800b418 <HAL_SPI_MspInit+0x2b4>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800b344:	f44f 7030 	mov.w	r0, #704	; 0x2c0
 800b348:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800b34a:	2405      	movs	r4, #5
    __HAL_RCC_SPI5_CLK_ENABLE();
 800b34c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800b350:	2600      	movs	r6, #0
 800b352:	2702      	movs	r7, #2
    __HAL_RCC_SPI5_CLK_ENABLE();
 800b354:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b358:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800b35c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800b360:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b364:	9204      	str	r2, [sp, #16]
 800b366:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800b368:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b36c:	f042 0220 	orr.w	r2, r2, #32
 800b370:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800b378:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800b37a:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800b37e:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800b382:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b384:	a906      	add	r1, sp, #24
 800b386:	4829      	ldr	r0, [pc, #164]	; (800b42c <HAL_SPI_MspInit+0x2c8>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800b388:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800b38a:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b38e:	f7f6 fcb7 	bl	8001d00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800b392:	f44f 7680 	mov.w	r6, #256	; 0x100
 800b396:	2200      	movs	r2, #0
 800b398:	2300      	movs	r3, #0
 800b39a:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b39c:	a906      	add	r1, sp, #24
 800b39e:	4823      	ldr	r0, [pc, #140]	; (800b42c <HAL_SPI_MspInit+0x2c8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800b3a0:	940a      	str	r4, [sp, #40]	; 0x28
    hdma_spi5_rx.Instance = DMA1_Stream3;
 800b3a2:	4c23      	ldr	r4, [pc, #140]	; (800b430 <HAL_SPI_MspInit+0x2cc>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800b3a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b3a8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b3ac:	f7f6 fca8 	bl	8001d00 <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA1_Stream3;
 800b3b0:	4b20      	ldr	r3, [pc, #128]	; (800b434 <HAL_SPI_MspInit+0x2d0>)
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 800b3b2:	2055      	movs	r0, #85	; 0x55
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b3b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800b3b8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi5_rx.Instance = DMA1_Stream3;
 800b3bc:	6023      	str	r3, [r4, #0]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b3be:	2300      	movs	r3, #0
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 800b3c0:	6060      	str	r0, [r4, #4]
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 800b3c2:	4620      	mov	r0, r4
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b3c4:	6121      	str	r1, [r4, #16]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800b3c6:	6222      	str	r2, [r4, #32]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 800b3c8:	61e3      	str	r3, [r4, #28]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b3ca:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b3cc:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b3d0:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 800b3d4:	f7f5 f9b2 	bl	800073c <HAL_DMA_Init>
 800b3d8:	b990      	cbnz	r0, 800b400 <HAL_SPI_MspInit+0x29c>
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 800b3da:	2200      	movs	r2, #0
 800b3dc:	2055      	movs	r0, #85	; 0x55
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 800b3de:	67ec      	str	r4, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 800b3e0:	4611      	mov	r1, r2
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 800b3e2:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 800b3e4:	f7f5 f816 	bl	8000414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 800b3e8:	2055      	movs	r0, #85	; 0x55
 800b3ea:	f7f5 f84d 	bl	8000488 <HAL_NVIC_EnableIRQ>
}
 800b3ee:	b03a      	add	sp, #232	; 0xe8
 800b3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Error_Handler();
 800b3f4:	f7ff fc16 	bl	800ac24 <Error_Handler>
 800b3f8:	e728      	b.n	800b24c <HAL_SPI_MspInit+0xe8>
      Error_Handler();
 800b3fa:	f7ff fc13 	bl	800ac24 <Error_Handler>
 800b3fe:	e78a      	b.n	800b316 <HAL_SPI_MspInit+0x1b2>
      Error_Handler();
 800b400:	f7ff fc10 	bl	800ac24 <Error_Handler>
 800b404:	e7e9      	b.n	800b3da <HAL_SPI_MspInit+0x276>
      Error_Handler();
 800b406:	f7ff fc0d 	bl	800ac24 <Error_Handler>
 800b40a:	e79a      	b.n	800b342 <HAL_SPI_MspInit+0x1de>
 800b40c:	40013000 	.word	0x40013000
 800b410:	40003800 	.word	0x40003800
 800b414:	40015000 	.word	0x40015000
 800b418:	58024400 	.word	0x58024400
 800b41c:	58020000 	.word	0x58020000
 800b420:	20019c88 	.word	0x20019c88
 800b424:	58020400 	.word	0x58020400
 800b428:	20019b88 	.word	0x20019b88
 800b42c:	58021400 	.word	0x58021400
 800b430:	20019b10 	.word	0x20019b10
 800b434:	40020058 	.word	0x40020058
 800b438:	40020070 	.word	0x40020070
 800b43c:	40020010 	.word	0x40020010

0800b440 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b440:	4b07      	ldr	r3, [pc, #28]	; (800b460 <HAL_MspInit+0x20>)
{
 800b442:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b444:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800b448:	f042 0202 	orr.w	r2, r2, #2
 800b44c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800b450:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b454:	f003 0302 	and.w	r3, r3, #2
 800b458:	9301      	str	r3, [sp, #4]
 800b45a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b45c:	b002      	add	sp, #8
 800b45e:	4770      	bx	lr
 800b460:	58024400 	.word	0x58024400

0800b464 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b464:	4770      	bx	lr
 800b466:	bf00      	nop

0800b468 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b468:	e7fe      	b.n	800b468 <HardFault_Handler>
 800b46a:	bf00      	nop

0800b46c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b46c:	e7fe      	b.n	800b46c <MemManage_Handler>
 800b46e:	bf00      	nop

0800b470 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b470:	e7fe      	b.n	800b470 <BusFault_Handler>
 800b472:	bf00      	nop

0800b474 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b474:	e7fe      	b.n	800b474 <UsageFault_Handler>
 800b476:	bf00      	nop

0800b478 <SVC_Handler>:
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop

0800b47c <DebugMon_Handler>:
 800b47c:	4770      	bx	lr
 800b47e:	bf00      	nop

0800b480 <PendSV_Handler>:
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop

0800b484 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b484:	f7f4 bf7e 	b.w	8000384 <HAL_IncTick>

0800b488 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800b488:	4801      	ldr	r0, [pc, #4]	; (800b490 <DMA1_Stream0_IRQHandler+0x8>)
 800b48a:	f7f5 bfbd 	b.w	8001408 <HAL_DMA_IRQHandler>
 800b48e:	bf00      	nop
 800b490:	20019b88 	.word	0x20019b88

0800b494 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800b494:	4801      	ldr	r0, [pc, #4]	; (800b49c <DMA1_Stream1_IRQHandler+0x8>)
 800b496:	f7f5 bfb7 	b.w	8001408 <HAL_DMA_IRQHandler>
 800b49a:	bf00      	nop
 800b49c:	200197f8 	.word	0x200197f8

0800b4a0 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800b4a0:	4801      	ldr	r0, [pc, #4]	; (800b4a8 <DMA1_Stream2_IRQHandler+0x8>)
 800b4a2:	f7f5 bfb1 	b.w	8001408 <HAL_DMA_IRQHandler>
 800b4a6:	bf00      	nop
 800b4a8:	20019870 	.word	0x20019870

0800b4ac <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 800b4ac:	4801      	ldr	r0, [pc, #4]	; (800b4b4 <DMA1_Stream3_IRQHandler+0x8>)
 800b4ae:	f7f5 bfab 	b.w	8001408 <HAL_DMA_IRQHandler>
 800b4b2:	bf00      	nop
 800b4b4:	20019b10 	.word	0x20019b10

0800b4b8 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800b4b8:	4801      	ldr	r0, [pc, #4]	; (800b4c0 <DMA1_Stream4_IRQHandler+0x8>)
 800b4ba:	f7f5 bfa5 	b.w	8001408 <HAL_DMA_IRQHandler>
 800b4be:	bf00      	nop
 800b4c0:	20019c88 	.word	0x20019c88

0800b4c4 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800b4c4:	4801      	ldr	r0, [pc, #4]	; (800b4cc <SPI1_IRQHandler+0x8>)
 800b4c6:	f7fa bf5b 	b.w	8006380 <HAL_SPI_IRQHandler>
 800b4ca:	bf00      	nop
 800b4cc:	20019c00 	.word	0x20019c00

0800b4d0 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800b4d0:	4801      	ldr	r0, [pc, #4]	; (800b4d8 <SPI2_IRQHandler+0x8>)
 800b4d2:	f7fa bf55 	b.w	8006380 <HAL_SPI_IRQHandler>
 800b4d6:	bf00      	nop
 800b4d8:	20019a00 	.word	0x20019a00

0800b4dc <SPI5_IRQHandler>:
void SPI5_IRQHandler(void)
{
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 800b4dc:	4801      	ldr	r0, [pc, #4]	; (800b4e4 <SPI5_IRQHandler+0x8>)
 800b4de:	f7fa bf4f 	b.w	8006380 <HAL_SPI_IRQHandler>
 800b4e2:	bf00      	nop
 800b4e4:	20019a88 	.word	0x20019a88

0800b4e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800b4e8:	b430      	push	{r4, r5}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b4ea:	4c19      	ldr	r4, [pc, #100]	; (800b550 <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b4ec:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 800b4ee:	4b19      	ldr	r3, [pc, #100]	; (800b554 <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b4f0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800b4f4:	4818      	ldr	r0, [pc, #96]	; (800b558 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b4f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800b4fa:	4d18      	ldr	r5, [pc, #96]	; (800b55c <SystemInit+0x74>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b4fc:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 800b500:	681c      	ldr	r4, [r3, #0]
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800b502:	4917      	ldr	r1, [pc, #92]	; (800b560 <SystemInit+0x78>)
  RCC->CR |= RCC_CR_HSION;
 800b504:	f044 0401 	orr.w	r4, r4, #1
 800b508:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 800b50a:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800b50c:	681c      	ldr	r4, [r3, #0]
 800b50e:	4020      	ands	r0, r4
 800b510:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 800b512:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800b514:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800b516:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 800b518:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 800b51a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 800b51c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 800b51e:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 800b520:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 800b522:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 800b524:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 800b526:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 800b528:	6818      	ldr	r0, [r3, #0]
 800b52a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800b52e:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 800b530:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800b532:	682b      	ldr	r3, [r5, #0]
 800b534:	4019      	ands	r1, r3
 800b536:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800b53a:	d202      	bcs.n	800b542 <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800b53c:	4b09      	ldr	r3, [pc, #36]	; (800b564 <SystemInit+0x7c>)
 800b53e:	2201      	movs	r2, #1
 800b540:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b542:	4b03      	ldr	r3, [pc, #12]	; (800b550 <SystemInit+0x68>)
 800b544:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b548:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800b54a:	bc30      	pop	{r4, r5}
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	e000ed00 	.word	0xe000ed00
 800b554:	58024400 	.word	0x58024400
 800b558:	eaf6ed7f 	.word	0xeaf6ed7f
 800b55c:	5c001000 	.word	0x5c001000
 800b560:	ffff0000 	.word	0xffff0000
 800b564:	51008108 	.word	0x51008108

0800b568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b568:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b5a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b56c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b56e:	e003      	b.n	800b578 <LoopCopyDataInit>

0800b570 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b570:	4b0c      	ldr	r3, [pc, #48]	; (800b5a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b572:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b574:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b576:	3104      	adds	r1, #4

0800b578 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b578:	480b      	ldr	r0, [pc, #44]	; (800b5a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b57a:	4b0c      	ldr	r3, [pc, #48]	; (800b5ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b57c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b57e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b580:	d3f6      	bcc.n	800b570 <CopyDataInit>
  ldr  r2, =_sbss
 800b582:	4a0b      	ldr	r2, [pc, #44]	; (800b5b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b584:	e002      	b.n	800b58c <LoopFillZerobss>

0800b586 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b586:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b588:	f842 3b04 	str.w	r3, [r2], #4

0800b58c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b58c:	4b09      	ldr	r3, [pc, #36]	; (800b5b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b58e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b590:	d3f9      	bcc.n	800b586 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b592:	f7ff ffa9 	bl	800b4e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b596:	f002 f899 	bl	800d6cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b59a:	f7ff faa7 	bl	800aaec <main>
  bx  lr    
 800b59e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b5a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b5a4:	08016160 	.word	0x08016160
  ldr  r0, =_sdata
 800b5a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b5ac:	20000b78 	.word	0x20000b78
  ldr  r2, =_sbss
 800b5b0:	20000b78 	.word	0x20000b78
  ldr  r3, = _ebss
 800b5b4:	20019d00 	.word	0x20019d00

0800b5b8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b5b8:	e7fe      	b.n	800b5b8 <ADC3_IRQHandler>
	...

0800b5bc <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, float factor, tMempool* const mp)
{
 800b5bc:	b538      	push	{r3, r4, r5, lr}
 800b5be:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 800b5c2:	680d      	ldr	r5, [r1, #0]
{
 800b5c4:	4604      	mov	r4, r0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800b5c6:	2010      	movs	r0, #16
{
 800b5c8:	eeb0 8a40 	vmov.f32	s16, s0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800b5cc:	4629      	mov	r1, r5
 800b5ce:	f001 f9c9 	bl	800c964 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
 800b5d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    p->curr=0.0f;
 800b5d6:	2300      	movs	r3, #0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800b5d8:	6020      	str	r0, [r4, #0]
    p->mempool = m;
 800b5da:	6005      	str	r5, [r0, #0]
    p->oneminusfactor=1.0f-factor;
 800b5dc:	ee77 7ac8 	vsub.f32	s15, s15, s16
    p->factor=factor;
 800b5e0:	ed80 8a01 	vstr	s16, [r0, #4]
    p->curr=0.0f;
 800b5e4:	60c3      	str	r3, [r0, #12]
    p->oneminusfactor=1.0f-factor;
 800b5e6:	edc0 7a02 	vstr	s15, [r0, #8]
}
 800b5ea:	ecbd 8b02 	vpop	{d8}
 800b5ee:	bd38      	pop	{r3, r4, r5, pc}

0800b5f0 <tPowerFollower_setFactor>:
    mpool_free((char*)p, p->mempool);
}

void tPowerFollower_setFactor(tPowerFollower* const pf, float factor)
{
    _tPowerFollower* p = *pf;
 800b5f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b5f4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800b610 <tPowerFollower_setFactor+0x20>
 800b5f8:	6803      	ldr	r3, [r0, #0]
 800b5fa:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
    
    if (factor<0) factor=0;
    if (factor>1) factor=1;
 800b5fe:	fe80 0a67 	vminnm.f32	s0, s0, s15
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
 800b602:	ee77 7ac0 	vsub.f32	s15, s15, s0
    p->factor=factor;
 800b606:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
 800b60a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800b60e:	4770      	bx	lr
 800b610:	00000000 	.word	0x00000000

0800b614 <tPowerFollower_tick>:

float tPowerFollower_tick(tPowerFollower* const pf, float input)
{
    _tPowerFollower* p = *pf;
 800b614:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
 800b616:	ee60 7a00 	vmul.f32	s15, s0, s0
 800b61a:	edd3 6a03 	vldr	s13, [r3, #12]
 800b61e:	ed93 0a02 	vldr	s0, [r3, #8]
 800b622:	ed93 7a01 	vldr	s14, [r3, #4]
 800b626:	ee20 0a26 	vmul.f32	s0, s0, s13
 800b62a:	eea7 0a27 	vfma.f32	s0, s14, s15
 800b62e:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
 800b632:	4770      	bx	lr

0800b634 <tHermiteDelay_initToPool>:
{
    tHermiteDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tHermiteDelay_initToPool  (tHermiteDelay* const dl, float delay, uint32_t maxDelay, tMempool* const mp)
{
 800b634:	b570      	push	{r4, r5, r6, lr}
 800b636:	460d      	mov	r5, r1
 800b638:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
 800b63a:	2030      	movs	r0, #48	; 0x30
{
 800b63c:	ed2d 8b02 	vpush	{d8}
 800b640:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 800b642:	6811      	ldr	r1, [r2, #0]
{
 800b644:	eeb0 8a40 	vmov.f32	s16, s0
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
 800b648:	9101      	str	r1, [sp, #4]
 800b64a:	f001 f98b 	bl	800c964 <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
 800b64e:	ee07 5a90 	vmov	s15, r5
    d->mempool = m;
 800b652:	9901      	ldr	r1, [sp, #4]
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
 800b654:	6030      	str	r0, [r6, #0]
 800b656:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
 800b658:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->mempool = m;
 800b65c:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
 800b65e:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
 800b660:	eef4 7ac8 	vcmpe.f32	s15, s16
 800b664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b668:	d558      	bpl.n	800b71c <tHermiteDelay_initToPool+0xe8>
 800b66a:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
 800b66e:	2d00      	cmp	r5, #0
 800b670:	d14f      	bne.n	800b712 <tHermiteDelay_initToPool+0xde>
 800b672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
    else
    {
        //make the delay size into a power of 2
        maxDelay--;
        maxDelay |= maxDelay >> 1;
 800b676:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
        maxDelay |= maxDelay >> 2;
 800b67a:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
        maxDelay |= maxDelay >> 4;
 800b67e:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
        maxDelay |= maxDelay >> 8;
 800b682:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
        maxDelay |= maxDelay >> 16;
 800b686:	ea43 4213 	orr.w	r2, r3, r3, lsr #16
        maxDelay++;
 800b68a:	1c55      	adds	r5, r2, #1
        d->maxDelay = maxDelay;
 800b68c:	61e5      	str	r5, [r4, #28]
        d->bufferMask = maxDelay - 1;
 800b68e:	60a2      	str	r2, [r4, #8]
    }
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 800b690:	00a8      	lsls	r0, r5, #2
 800b692:	f001 f967 	bl	800c964 <mpool_alloc>

    d->gain = 1.0f;

    d->lastIn = 0.0f;
 800b696:	2200      	movs	r2, #0
    d->lastOut = 0.0f;

    d->inPoint = 0;
 800b698:	2300      	movs	r3, #0
    d->gain = 1.0f;
 800b69a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 800b69e:	6060      	str	r0, [r4, #4]
    d->lastIn = 0.0f;
 800b6a0:	6122      	str	r2, [r4, #16]
    d->gain = 1.0f;
 800b6a2:	6221      	str	r1, [r4, #32]
    d->lastOut = 0.0f;
 800b6a4:	60e2      	str	r2, [r4, #12]
    d->outPoint = 0;

    tHermiteDelay_setDelay(dl, d->delay);
 800b6a6:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
    d->outPoint = 0;
 800b6aa:	e9c4 3305 	strd	r3, r3, [r4, #20]
    return d->lastOut;
}

void tHermiteDelay_setDelay (tHermiteDelay* const dl, float delay)
{
    _tHermiteDelay* d = *dl;
 800b6ae:	6833      	ldr	r3, [r6, #0]
    //d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
    d->delay = delay; // not safe but faster
    float outPointer = d->inPoint - d->delay;
 800b6b0:	edd3 7a05 	vldr	s15, [r3, #20]
    d->delay = delay; // not safe but faster
 800b6b4:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    float outPointer = d->inPoint - d->delay;
 800b6b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while ( outPointer < 0 )
 800b6c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6c8:	d50a      	bpl.n	800b6e0 <tHermiteDelay_initToPool+0xac>
        outPointer += d->maxDelay; // modulo maximum length
 800b6ca:	ed93 7a07 	vldr	s14, [r3, #28]
 800b6ce:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b6d2:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 800b6d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b6da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6de:	d4f8      	bmi.n	800b6d2 <tHermiteDelay_initToPool+0x9e>
    
    d->outPoint = (uint32_t) outPointer;   // integer part
 800b6e0:	eebc 6ae7 	vcvt.u32.f32	s12, s15
    
    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
    
    d->outPoint &= d->bufferMask;
 800b6e4:	689a      	ldr	r2, [r3, #8]
    d->omAlpha = 1.0f - d->alpha;
 800b6e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 800b6ea:	eef8 6a46 	vcvt.f32.u32	s13, s12
    d->outPoint &= d->bufferMask;
 800b6ee:	ee16 1a10 	vmov	r1, s12
    d->omAlpha = 1.0f - d->alpha;
 800b6f2:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->outPoint &= d->bufferMask;
 800b6f6:	400a      	ands	r2, r1
    d->alpha = outPointer - d->outPoint; // fractional part
 800b6f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
 800b6fc:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->outPoint &= d->bufferMask;
 800b700:	619a      	str	r2, [r3, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
 800b702:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    d->omAlpha = 1.0f - d->alpha;
 800b706:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
}
 800b70a:	b002      	add	sp, #8
 800b70c:	ecbd 8b02 	vpop	{d8}
 800b710:	bd70      	pop	{r4, r5, r6, pc}
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
 800b712:	1e6b      	subs	r3, r5, #1
 800b714:	422b      	tst	r3, r5
 800b716:	461a      	mov	r2, r3
 800b718:	d1ad      	bne.n	800b676 <tHermiteDelay_initToPool+0x42>
 800b71a:	e7b8      	b.n	800b68e <tHermiteDelay_initToPool+0x5a>
    else if (delay < 0.0f)  d->delay = 0.0f;
 800b71c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b720:	2300      	movs	r3, #0
 800b722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b726:	bf4c      	ite	mi
 800b728:	6243      	strmi	r3, [r0, #36]	; 0x24
    else                    d->delay = delay;
 800b72a:	ed80 8a09 	vstrpl	s16, [r0, #36]	; 0x24
 800b72e:	e79e      	b.n	800b66e <tHermiteDelay_initToPool+0x3a>

0800b730 <tHermiteDelay_clear>:
    _tHermiteDelay* d = *dl;
 800b730:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800b732:	69cb      	ldr	r3, [r1, #28]
 800b734:	b14b      	cbz	r3, 800b74a <tHermiteDelay_clear+0x1a>
 800b736:	2300      	movs	r3, #0
        d->buff[i] = 0;
 800b738:	2000      	movs	r0, #0
 800b73a:	684a      	ldr	r2, [r1, #4]
 800b73c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
 800b740:	3301      	adds	r3, #1
        d->buff[i] = 0;
 800b742:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800b744:	69ca      	ldr	r2, [r1, #28]
 800b746:	429a      	cmp	r2, r3
 800b748:	d8f7      	bhi.n	800b73a <tHermiteDelay_clear+0xa>
}
 800b74a:	4770      	bx	lr

0800b74c <tHermiteDelay_tickIn>:
    _tHermiteDelay* d = *dl;
 800b74c:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input;
 800b74e:	6959      	ldr	r1, [r3, #20]
 800b750:	685a      	ldr	r2, [r3, #4]
 800b752:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b756:	ed82 0a00 	vstr	s0, [r2]
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
 800b75a:	695a      	ldr	r2, [r3, #20]
 800b75c:	6899      	ldr	r1, [r3, #8]
 800b75e:	3201      	adds	r2, #1
 800b760:	400a      	ands	r2, r1
 800b762:	615a      	str	r2, [r3, #20]
}
 800b764:	4770      	bx	lr
 800b766:	bf00      	nop

0800b768 <tHermiteDelay_tickOut>:
{
 800b768:	b570      	push	{r4, r5, r6, lr}
    _tHermiteDelay* d = *dl;
 800b76a:	6804      	ldr	r4, [r0, #0]
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
 800b76c:	e9d4 1306 	ldrd	r1, r3, [r4, #24]
 800b770:	68a6      	ldr	r6, [r4, #8]
 800b772:	440b      	add	r3, r1
                                                d->buff[(idx + 2) & d->bufferMask],
 800b774:	1c8d      	adds	r5, r1, #2
                                                d->buff[(idx + 1) & d->bufferMask],
 800b776:	1c48      	adds	r0, r1, #1
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
 800b778:	6862      	ldr	r2, [r4, #4]
 800b77a:	3b01      	subs	r3, #1
                                                d->buff[(idx + 2) & d->bufferMask],
 800b77c:	4035      	ands	r5, r6
                                                d->buff[(idx + 1) & d->bufferMask],
 800b77e:	4030      	ands	r0, r6
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
 800b780:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800b784:	4033      	ands	r3, r6
 800b786:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800b78a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800b78e:	ed94 2a0a 	vldr	s4, [r4, #40]	; 0x28
 800b792:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b796:	edd5 1a00 	vldr	s3, [r5]
 800b79a:	ed90 1a00 	vldr	s2, [r0]
 800b79e:	edd1 0a00 	vldr	s1, [r1]
 800b7a2:	ed93 0a00 	vldr	s0, [r3]
 800b7a6:	f001 f821 	bl	800c7ec <LEAF_interpolate_hermite_x>
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
 800b7aa:	69a3      	ldr	r3, [r4, #24]
 800b7ac:	68a2      	ldr	r2, [r4, #8]
 800b7ae:	3301      	adds	r3, #1
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
 800b7b0:	ed84 0a03 	vstr	s0, [r4, #12]
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
 800b7b4:	4013      	ands	r3, r2
 800b7b6:	61a3      	str	r3, [r4, #24]
}
 800b7b8:	bd70      	pop	{r4, r5, r6, pc}
 800b7ba:	bf00      	nop

0800b7bc <tHermiteDelay_setDelay>:
    _tHermiteDelay* d = *dl;
 800b7bc:	6803      	ldr	r3, [r0, #0]
    float outPointer = d->inPoint - d->delay;
 800b7be:	edd3 7a05 	vldr	s15, [r3, #20]
    d->delay = delay; // not safe but faster
 800b7c2:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    float outPointer = d->inPoint - d->delay;
 800b7c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ca:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
 800b7ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7d6:	d50a      	bpl.n	800b7ee <tHermiteDelay_setDelay+0x32>
        outPointer += d->maxDelay; // modulo maximum length
 800b7d8:	edd3 7a07 	vldr	s15, [r3, #28]
 800b7dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7e0:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
 800b7e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7ec:	d4f8      	bmi.n	800b7e0 <tHermiteDelay_setDelay+0x24>
    d->outPoint = (uint32_t) outPointer;   // integer part
 800b7ee:	eefc 6ac0 	vcvt.u32.f32	s13, s0
    d->outPoint &= d->bufferMask;
 800b7f2:	689a      	ldr	r2, [r3, #8]
    d->omAlpha = 1.0f - d->alpha;
 800b7f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 800b7f8:	eeb8 7a66 	vcvt.f32.u32	s14, s13
    d->outPoint &= d->bufferMask;
 800b7fc:	ee16 1a90 	vmov	r1, s13
    d->omAlpha = 1.0f - d->alpha;
 800b800:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint &= d->bufferMask;
 800b804:	400a      	ands	r2, r1
    d->alpha = outPointer - d->outPoint; // fractional part
 800b806:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
 800b80a:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->outPoint &= d->bufferMask;
 800b80e:	619a      	str	r2, [r3, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
 800b810:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    d->omAlpha = 1.0f - d->alpha;
 800b814:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800b818:	4770      	bx	lr
 800b81a:	bf00      	nop

0800b81c <tHermiteDelay_tapOut>:

float tHermiteDelay_tapOut (tHermiteDelay* const dl, uint32_t tapDelay)
{
    _tHermiteDelay* d = *dl;
 800b81c:	6803      	ldr	r3, [r0, #0]
    
    int32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
 800b81e:	43c9      	mvns	r1, r1
 800b820:	6958      	ldr	r0, [r3, #20]
 800b822:	689a      	ldr	r2, [r3, #8]
 800b824:	4401      	add	r1, r0
    
    return d->buff[tap];
 800b826:	685b      	ldr	r3, [r3, #4]
    int32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
 800b828:	4011      	ands	r1, r2
    return d->buff[tap];
 800b82a:	eb03 0181 	add.w	r1, r3, r1, lsl #2

}
 800b82e:	ed91 0a00 	vldr	s0, [r1]
 800b832:	4770      	bx	lr

0800b834 <tHermiteDelay_addTo>:
    d->buff[tap] = value;
}

float tHermiteDelay_addTo (tHermiteDelay* const dl, float value, uint32_t tapDelay)
{
    _tHermiteDelay* d = *dl;
 800b834:	6803      	ldr	r3, [r0, #0]
    
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 800b836:	43c9      	mvns	r1, r1
 800b838:	6958      	ldr	r0, [r3, #20]
 800b83a:	689a      	ldr	r2, [r3, #8]
 800b83c:	4401      	add	r1, r0
    
    return (d->buff[tap] += value);
 800b83e:	685b      	ldr	r3, [r3, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 800b840:	4011      	ands	r1, r2
    return (d->buff[tap] += value);
 800b842:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b846:	edd1 7a00 	vldr	s15, [r1]
 800b84a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b84e:	ed81 0a00 	vstr	s0, [r1]
}
 800b852:	4770      	bx	lr

0800b854 <tFeedbackLeveler_init>:
}

/* Feedback Leveler */

void tFeedbackLeveler_init (tFeedbackLeveler* const fb, float targetLevel, float factor, float strength, int mode, LEAF* const leaf)
{
 800b854:	b5f0      	push	{r4, r5, r6, r7, lr}
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, float targetLevel, float factor, float strength, int mode, tMempool* const mp)
{
    _tMempool* m = *mp;
 800b856:	4614      	mov	r4, r2
{
 800b858:	4606      	mov	r6, r0
 800b85a:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 800b85c:	2018      	movs	r0, #24
{
 800b85e:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 800b862:	f854 7f18 	ldr.w	r7, [r4, #24]!
{
 800b866:	b083      	sub	sp, #12
 800b868:	eef0 8a40 	vmov.f32	s17, s0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 800b86c:	4639      	mov	r1, r7
{
 800b86e:	eeb0 8a41 	vmov.f32	s16, s2
 800b872:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 800b876:	f001 f875 	bl	800c964 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
 800b87a:	2300      	movs	r3, #0
    p->targetLevel=targetLevel;
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 800b87c:	4621      	mov	r1, r4
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 800b87e:	4604      	mov	r4, r0
 800b880:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 800b882:	ed9d 0a01 	vldr	s0, [sp, #4]
 800b886:	3014      	adds	r0, #20
    p->mempool = m;
 800b888:	6027      	str	r7, [r4, #0]
    p->targetLevel=targetLevel;
 800b88a:	edc4 8a01 	vstr	s17, [r4, #4]
    p->curr=0.0f;
 800b88e:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 800b890:	f7ff fe94 	bl	800b5bc <tPowerFollower_initToPool>
    p->mode=mode;
 800b894:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
 800b896:	ed84 8a02 	vstr	s16, [r4, #8]
}
 800b89a:	b003      	add	sp, #12
 800b89c:	ecbd 8b02 	vpop	{d8}
 800b8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8a2:	bf00      	nop

0800b8a4 <tFeedbackLeveler_initToPool>:
{
 800b8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 800b8a6:	6817      	ldr	r7, [r2, #0]
{
 800b8a8:	4614      	mov	r4, r2
 800b8aa:	4606      	mov	r6, r0
 800b8ac:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 800b8ae:	2018      	movs	r0, #24
 800b8b0:	4639      	mov	r1, r7
{
 800b8b2:	ed2d 8b02 	vpush	{d8}
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	eef0 8a40 	vmov.f32	s17, s0
 800b8bc:	eeb0 8a41 	vmov.f32	s16, s2
 800b8c0:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 800b8c4:	f001 f84e 	bl	800c964 <mpool_alloc>
    p->curr=0.0f;
 800b8c8:	2300      	movs	r3, #0
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 800b8ca:	4621      	mov	r1, r4
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 800b8d0:	ed9d 0a01 	vldr	s0, [sp, #4]
 800b8d4:	3014      	adds	r0, #20
    p->mempool = m;
 800b8d6:	6027      	str	r7, [r4, #0]
    p->targetLevel=targetLevel;
 800b8d8:	edc4 8a01 	vstr	s17, [r4, #4]
    p->curr=0.0f;
 800b8dc:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 800b8de:	f7ff fe6d 	bl	800b5bc <tPowerFollower_initToPool>
    p->mode=mode;
 800b8e2:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
 800b8e4:	ed84 8a02 	vstr	s16, [r4, #8]
}
 800b8e8:	b003      	add	sp, #12
 800b8ea:	ecbd 8b02 	vpop	{d8}
 800b8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b8f0 <tFeedbackLeveler_setStrength>:
}

void     tFeedbackLeveler_setStrength(tFeedbackLeveler* const fb, float strength)
{    // strength is how strongly level diff is affecting the amp ratio
    // try 0.125 for a start
    _tFeedbackLeveler* p = *fb;
 800b8f0:	6803      	ldr	r3, [r0, #0]
    p->strength=strength;
 800b8f2:	ed83 0a02 	vstr	s0, [r3, #8]
}
 800b8f6:	4770      	bx	lr

0800b8f8 <tFeedbackLeveler_setFactor>:

void     tFeedbackLeveler_setFactor(tFeedbackLeveler* const fb, float factor)
{
    _tFeedbackLeveler* p = *fb;
    tPowerFollower_setFactor(&p->pwrFlw,factor);
 800b8f8:	6800      	ldr	r0, [r0, #0]
 800b8fa:	3014      	adds	r0, #20
 800b8fc:	f7ff be78 	b.w	800b5f0 <tPowerFollower_setFactor>

0800b900 <tFeedbackLeveler_setMode>:
}

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
 800b900:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
 800b902:	60d9      	str	r1, [r3, #12]
}
 800b904:	4770      	bx	lr
 800b906:	bf00      	nop

0800b908 <tFeedbackLeveler_tick>:

float   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, float input)
{
 800b908:	b510      	push	{r4, lr}
 800b90a:	ed2d 8b02 	vpush	{d8}
    _tFeedbackLeveler* p = *fb;
 800b90e:	6804      	ldr	r4, [r0, #0]
{
 800b910:	eeb0 8a40 	vmov.f32	s16, s0
    float levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 800b914:	f104 0014 	add.w	r0, r4, #20
 800b918:	f7ff fe7c 	bl	800b614 <tPowerFollower_tick>
 800b91c:	ed94 7a01 	vldr	s14, [r4, #4]
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 800b920:	68e3      	ldr	r3, [r4, #12]
    float levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 800b922:	ee30 7a47 	vsub.f32	s14, s0, s14
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 800b926:	b91b      	cbnz	r3, 800b930 <tFeedbackLeveler_tick+0x28>
 800b928:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b94c <tFeedbackLeveler_tick+0x44>
 800b92c:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
    p->curr=input*(1.0f-p->strength*levdiff);
 800b930:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b934:	edd4 6a02 	vldr	s13, [r4, #8]
 800b938:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800b93c:	ee27 0a88 	vmul.f32	s0, s15, s16
 800b940:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
 800b944:	ecbd 8b02 	vpop	{d8}
 800b948:	bd10      	pop	{r4, pc}
 800b94a:	bf00      	nop
 800b94c:	00000000 	.word	0x00000000

0800b950 <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, float TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
 800b950:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
 800b952:	ed83 0a01 	vstr	s0, [r3, #4]
}
 800b956:	4770      	bx	lr

0800b958 <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, LEAF* const leaf)
{
 800b958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b95a:	ed2d 8b04 	vpush	{d8-d9}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
 800b95e:	699e      	ldr	r6, [r3, #24]
{
 800b960:	4614      	mov	r4, r2
 800b962:	460d      	mov	r5, r1
 800b964:	4607      	mov	r7, r0
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 800b966:	4631      	mov	r1, r6
 800b968:	2068      	movs	r0, #104	; 0x68
{
 800b96a:	eef0 9a40 	vmov.f32	s19, s0
 800b96e:	eeb0 9a60 	vmov.f32	s18, s1
 800b972:	eeb0 8a41 	vmov.f32	s16, s2
 800b976:	eef0 8a61 	vmov.f32	s17, s3
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 800b97a:	f000 fff3 	bl	800c964 <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800b97e:	ee07 4a90 	vmov	s15, r4
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 800b982:	6038      	str	r0, [r7, #0]
    adsr->buff_sizeMinusOne = bufferSize - 1;
 800b984:	1e61      	subs	r1, r4, #1
    adsr->mempool = m;
 800b986:	6006      	str	r6, [r0, #0]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800b988:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800b98c:	eddf 7a22 	vldr	s15, [pc, #136]	; 800ba18 <tADSRT_init+0xc0>
    LEAF* leaf = adsr->mempool->leaf;
 800b990:	6873      	ldr	r3, [r6, #4]
    adsr->exp_buff = expBuffer;
 800b992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b996:	6045      	str	r5, [r0, #4]
    adsr->decay = decay;
    adsr->release = release;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 800b998:	eeb4 5a00 	vmov.f32	s10, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800b99c:	ee26 6a27 	vmul.f32	s12, s12, s15
    adsr->buff_size = bufferSize;
 800b9a0:	6084      	str	r4, [r0, #8]
    adsr->buff_sizeMinusOne = bufferSize - 1;
 800b9a2:	60c1      	str	r1, [r0, #12]
    adsr->sampleRate = leaf->sampleRate;
 800b9a4:	fe88 1a66 	vminnm.f32	s2, s16, s13
 800b9a8:	edd3 5a00 	vldr	s11, [r3]
    adsr->whichStage = env_idle;
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800ba1c <tADSRT_init+0xc4>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800b9b2:	eec6 7a25 	vdiv.f32	s15, s12, s11

    adsr->baseLeakFactor = 1.0f;
 800b9b6:	edc0 6a17 	vstr	s13, [r0, #92]	; 0x5c
 800b9ba:	fe89 0a87 	vmaxnm.f32	s0, s19, s14
 800b9be:	fec9 0a07 	vmaxnm.f32	s1, s18, s14
 800b9c2:	fec8 1a87 	vmaxnm.f32	s3, s17, s14
    adsr->leakFactor = 1.0f;
 800b9c6:	edc0 6a18 	vstr	s13, [r0, #96]	; 0x60
    adsr->next = 0.0f;
 800b9ca:	ed80 7a06 	vstr	s14, [r0, #24]
    adsr->sustain = sustain;
 800b9ce:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    adsr->whichStage = env_idle;
 800b9d2:	6382      	str	r2, [r0, #56]	; 0x38
    adsr->sampleRate = leaf->sampleRate;
 800b9d4:	edc0 5a04 	vstr	s11, [r0, #16]
    adsr->sustain = sustain;
 800b9d8:	ed80 1a0f 	vstr	s2, [r0, #60]	; 0x3c
    adsr->attack = attack;
 800b9dc:	ed80 0a07 	vstr	s0, [r0, #28]
    adsr->decay = decay;
 800b9e0:	edc0 0a08 	vstr	s1, [r0, #32]
    adsr->release = release;
 800b9e4:	edc0 1a09 	vstr	s3, [r0, #36]	; 0x24
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 800b9e8:	ee87 6a80 	vdiv.f32	s12, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800b9ec:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800b9f0:	eec7 6aa0 	vdiv.f32	s13, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 800b9f4:	ee87 7aa1 	vdiv.f32	s14, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 800b9f8:	ee67 7a85 	vmul.f32	s15, s15, s10
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 800b9fc:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 800ba00:	edc0 7a0d 	vstr	s15, [r0, #52]	; 0x34
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800ba04:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 800ba08:	ed80 7a0c 	vstr	s14, [r0, #48]	; 0x30
    adsr->invSampleRate = leaf->invSampleRate;
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	6643      	str	r3, [r0, #100]	; 0x64
}
 800ba10:	ecbd 8b04 	vpop	{d8-d9}
 800ba14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba16:	bf00      	nop
 800ba18:	4479ffff 	.word	0x4479ffff
 800ba1c:	00000000 	.word	0x00000000

0800ba20 <tADSRT_setDecay>:
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
}

void     tADSRT_setDecay(tADSRT* const adsrenv, float decay)
{
    _tADSRT* adsr = *adsrenv;
 800ba20:	6803      	ldr	r3, [r0, #0]

    if (decay < 0.0f)
 800ba22:	eddf 7a06 	vldr	s15, [pc, #24]	; 800ba3c <tADSRT_setDecay+0x1c>
    {
        decay = 0.0f;
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800ba26:	ed93 7a05 	vldr	s14, [r3, #20]
 800ba2a:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    adsr->decay = decay;
 800ba2e:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800ba32:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ba36:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800ba3a:	4770      	bx	lr
 800ba3c:	00000000 	.word	0x00000000

0800ba40 <tADSRT_setSustain>:

void     tADSRT_setSustain(tADSRT* const adsrenv, float sustain)
{
    _tADSRT* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 800ba40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tADSRT* adsr = *adsrenv;
 800ba44:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 800ba46:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ba4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba4e:	dd02      	ble.n	800ba56 <tADSRT_setSustain+0x16>
 800ba50:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 800ba54:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
 800ba56:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba60:	bf4c      	ite	mi
 800ba62:	63da      	strmi	r2, [r3, #60]	; 0x3c
    else                     adsr->sustain = sustain;
 800ba64:	ed83 0a0f 	vstrpl	s0, [r3, #60]	; 0x3c
}
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop

0800ba6c <tADSRT_setLeakFactor>:
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
}

// 0.999999 is slow leak, 0.9 is fast leak
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, float leakFactor)
{
 800ba6c:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 800ba6e:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 800ba70:	eddf 7a06 	vldr	s15, [pc, #24]	; 800ba8c <tADSRT_setLeakFactor+0x20>
 800ba74:	edd4 0a19 	vldr	s1, [r4, #100]	; 0x64
    adsr->baseLeakFactor = leakFactor;
 800ba78:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 800ba7c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800ba80:	f002 f93a 	bl	800dcf8 <powf>
 800ba84:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
 800ba88:	bd10      	pop	{r4, pc}
 800ba8a:	bf00      	nop
 800ba8c:	472c4400 	.word	0x472c4400

0800ba90 <tADSRT_on>:

void tADSRT_on(tADSRT* const adsrenv, float velocity)
{
    _tADSRT* adsr = *adsrenv;
 800ba90:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
 800ba92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba94:	b162      	cbz	r2, 800bab0 <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
 800ba96:	2000      	movs	r0, #0
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
 800ba98:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
 800ba9a:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
 800ba9c:	6598      	str	r0, [r3, #88]	; 0x58
        adsr->rampPeak = adsr->next;
 800ba9e:	645a      	str	r2, [r3, #68]	; 0x44
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
 800baa0:	2200      	movs	r2, #0
 800baa2:	6399      	str	r1, [r3, #56]	; 0x38
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
 800baa4:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    adsr->attackPhase = 0;
 800baa8:	64da      	str	r2, [r3, #76]	; 0x4c
    adsr->decayPhase = 0;
 800baaa:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->releasePhase = 0;
 800baac:	655a      	str	r2, [r3, #84]	; 0x54
}
 800baae:	4770      	bx	lr
        adsr->whichStage = env_attack;
 800bab0:	2101      	movs	r1, #1
 800bab2:	e7f5      	b.n	800baa0 <tADSRT_on+0x10>

0800bab4 <tADSRT_off>:

void tADSRT_off(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
 800bab4:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
 800bab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bab8:	b11a      	cbz	r2, 800bac2 <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
 800baba:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
 800babc:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
 800babe:	6399      	str	r1, [r3, #56]	; 0x38
        adsr->releasePeak = adsr->next;
 800bac0:	649a      	str	r2, [r3, #72]	; 0x48
    }
}
 800bac2:	4770      	bx	lr

0800bac4 <tADSRT_tick>:

float   tADSRT_tick(tADSRT* const adsrenv)
{
 800bac4:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 800bac6:	6804      	ldr	r4, [r0, #0]
{
 800bac8:	ed2d 8b02 	vpush	{d8}
 800bacc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bace:	3b01      	subs	r3, #1
 800bad0:	2b04      	cmp	r3, #4
 800bad2:	f200 8148 	bhi.w	800bd66 <tADSRT_tick+0x2a2>
 800bad6:	e8df f003 	tbb	[pc, r3]
 800bada:	441f      	.short	0x441f
 800badc:	6339      	.short	0x6339
 800bade:	03          	.byte	0x03
 800badf:	00          	.byte	0x00

    switch (adsr->whichStage)
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 800bae0:	edd4 7a03 	vldr	s15, [r4, #12]
 800bae4:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
 800bae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baec:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800baf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baf4:	dd71      	ble.n	800bbda <tADSRT_tick+0x116>
            {
                adsr->whichStage = env_attack;
                adsr->next = 0.0f;
 800baf6:	eddf 7a9d 	vldr	s15, [pc, #628]	; 800bd6c <tADSRT_tick+0x2a8>
                adsr->whichStage = env_attack;
 800bafa:	2301      	movs	r3, #1
 800bafc:	eeb0 0a67 	vmov.f32	s0, s15
 800bb00:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
 800bb02:	edc4 7a06 	vstr	s15, [r4, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
            }

            adsr->rampPhase += adsr->rampInc;
 800bb06:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800bb0a:	ee37 1a81 	vadd.f32	s2, s15, s2
 800bb0e:	ed84 1a16 	vstr	s2, [r4, #88]	; 0x58
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
 800bb12:	ecbd 8b02 	vpop	{d8}
 800bb16:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 800bb18:	edd4 7a03 	vldr	s15, [r4, #12]
 800bb1c:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
 800bb20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb24:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800bb28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb2c:	dd7f      	ble.n	800bc2e <tADSRT_tick+0x16a>
                adsr->whichStage = env_decay;
 800bb2e:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
 800bb30:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
                adsr->whichStage = env_decay;
 800bb34:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = adsr->gain;
 800bb36:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
 800bb3a:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800bb3e:	ee37 1a81 	vadd.f32	s2, s15, s2
 800bb42:	ed84 1a13 	vstr	s2, [r4, #76]	; 0x4c
}
 800bb46:	ecbd 8b02 	vpop	{d8}
 800bb4a:	bd10      	pop	{r4, pc}
            adsr->next = adsr->next * adsr->leakFactor;
 800bb4c:	ed94 0a06 	vldr	s0, [r4, #24]
 800bb50:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
 800bb54:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bb58:	ed84 0a06 	vstr	s0, [r4, #24]
}
 800bb5c:	ecbd 8b02 	vpop	{d8}
 800bb60:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 800bb62:	edd4 7a03 	vldr	s15, [r4, #12]
 800bb66:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
 800bb6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb6e:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800bb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb76:	f340 8088 	ble.w	800bc8a <tADSRT_tick+0x1c6>
                adsr->next = adsr->gain * adsr->sustain;
 800bb7a:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
                adsr->whichStage = env_sustain;
 800bb7e:	2303      	movs	r3, #3
                adsr->next = adsr->gain * adsr->sustain;
 800bb80:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
                adsr->whichStage = env_sustain;
 800bb84:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
 800bb86:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bb8a:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->decayPhase += adsr->decayInc;
 800bb8e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800bb92:	ee37 1a81 	vadd.f32	s2, s15, s2
 800bb96:	ed84 1a14 	vstr	s2, [r4, #80]	; 0x50
}
 800bb9a:	ecbd 8b02 	vpop	{d8}
 800bb9e:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 800bba0:	edd4 7a03 	vldr	s15, [r4, #12]
 800bba4:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
 800bba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbac:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800bbb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbb4:	f340 809e 	ble.w	800bcf4 <tADSRT_tick+0x230>
                adsr->next = 0.0f;
 800bbb8:	eddf 7a6c 	vldr	s15, [pc, #432]	; 800bd6c <tADSRT_tick+0x2a8>
                adsr->whichStage = env_idle;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	eeb0 0a67 	vmov.f32	s0, s15
 800bbc2:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
 800bbc4:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
 800bbc8:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 800bbcc:	ee37 1a81 	vadd.f32	s2, s15, s2
 800bbd0:	ed84 1a15 	vstr	s2, [r4, #84]	; 0x54
}
 800bbd4:	ecbd 8b02 	vpop	{d8}
 800bbd8:	bd10      	pop	{r4, pc}
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 800bbda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->rampPhase;
 800bbde:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 800bbe2:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->rampPhase - intPart;
 800bbe6:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 800bbea:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->rampPhase - intPart;
 800bbee:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 800bbf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbf6:	f100 80b2 	bmi.w	800bd5e <tADSRT_tick+0x29a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 800bbfa:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800bbfe:	6862      	ldr	r2, [r4, #4]
 800bc00:	ee17 3a90 	vmov	r3, s15
 800bc04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc08:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
 800bc0c:	ee16 3a90 	vmov	r3, s13
 800bc10:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
 800bc14:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bc18:	ed92 0a00 	vldr	s0, [r2]
 800bc1c:	f000 fe08 	bl	800c830 <LEAF_interpolation_linear>
 800bc20:	ee28 0a00 	vmul.f32	s0, s16, s0
 800bc24:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
 800bc28:	ed84 0a06 	vstr	s0, [r4, #24]
 800bc2c:	e76b      	b.n	800bb06 <tADSRT_tick+0x42>
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 800bc2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->attackPhase;
 800bc32:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 800bc36:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->attackPhase - intPart;
 800bc3a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 800bc3e:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->attackPhase - intPart;
 800bc42:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 800bc46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc4a:	f100 8084 	bmi.w	800bd56 <tADSRT_tick+0x292>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
 800bc4e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800bc52:	6862      	ldr	r2, [r4, #4]
 800bc54:	ee17 3a90 	vmov	r3, s15
 800bc58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc5c:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // inverted and backwards to get proper rising exponential shape/perception
 800bc60:	ee16 3a90 	vmov	r3, s13
 800bc64:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
 800bc68:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bc6c:	ed92 0a00 	vldr	s0, [r2]
 800bc70:	f000 fdde 	bl	800c830 <LEAF_interpolation_linear>
 800bc74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bc78:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
 800bc7c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800bc80:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bc84:	ed84 0a06 	vstr	s0, [r4, #24]
 800bc88:	e757      	b.n	800bb3a <tADSRT_tick+0x76>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 800bc8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->decayPhase;
 800bc8e:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 800bc92:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->decayPhase - intPart;
 800bc96:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 800bc9a:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->decayPhase - intPart;
 800bc9e:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 800bca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bca6:	d452      	bmi.n	800bd4e <tADSRT_tick+0x28a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
 800bca8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800bcac:	6862      	ldr	r2, [r4, #4]
 800bcae:	ee17 3a90 	vmov	r3, s15
 800bcb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bcb6:	edd3 0a00 	vldr	s1, [r3]
                float interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart));
 800bcba:	ee16 3a90 	vmov	r3, s13
 800bcbe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bcc2:	ed92 0a00 	vldr	s0, [r2]
 800bcc6:	f000 fdb3 	bl	800c830 <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 800bcca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcce:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800bcd2:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 800bcd6:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800bcda:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
 800bcde:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
 800bce2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bce6:	eea6 7a80 	vfma.f32	s14, s13, s0
 800bcea:	ee27 0a87 	vmul.f32	s0, s15, s14
 800bcee:	ed84 0a06 	vstr	s0, [r4, #24]
 800bcf2:	e74c      	b.n	800bb8e <tADSRT_tick+0xca>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 800bcf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->releasePhase;
 800bcf8:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 800bcfc:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->releasePhase - intPart;
 800bd00:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 800bd04:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->releasePhase - intPart;
 800bd08:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 800bd0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd10:	d419      	bmi.n	800bd46 <tADSRT_tick+0x282>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
 800bd12:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800bd16:	6862      	ldr	r2, [r4, #4]
 800bd18:	ee17 3a90 	vmov	r3, s15
 800bd1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bd20:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // do interpolation !
 800bd24:	ee16 3a90 	vmov	r3, s13
 800bd28:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
 800bd2c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bd30:	ed92 0a00 	vldr	s0, [r2]
 800bd34:	f000 fd7c 	bl	800c830 <LEAF_interpolation_linear>
 800bd38:	ee28 0a00 	vmul.f32	s0, s16, s0
 800bd3c:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
 800bd40:	ed84 0a06 	vstr	s0, [r4, #24]
 800bd44:	e740      	b.n	800bbc8 <tADSRT_tick+0x104>
 800bd46:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 800bd48:	eddf 0a08 	vldr	s1, [pc, #32]	; 800bd6c <tADSRT_tick+0x2a8>
 800bd4c:	e7ea      	b.n	800bd24 <tADSRT_tick+0x260>
 800bd4e:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 800bd50:	eddf 0a06 	vldr	s1, [pc, #24]	; 800bd6c <tADSRT_tick+0x2a8>
 800bd54:	e7b1      	b.n	800bcba <tADSRT_tick+0x1f6>
 800bd56:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 800bd58:	eddf 0a04 	vldr	s1, [pc, #16]	; 800bd6c <tADSRT_tick+0x2a8>
 800bd5c:	e780      	b.n	800bc60 <tADSRT_tick+0x19c>
 800bd5e:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 800bd60:	eddf 0a02 	vldr	s1, [pc, #8]	; 800bd6c <tADSRT_tick+0x2a8>
 800bd64:	e752      	b.n	800bc0c <tADSRT_tick+0x148>
 800bd66:	ed94 0a06 	vldr	s0, [r4, #24]
 800bd6a:	e6d2      	b.n	800bb12 <tADSRT_tick+0x4e>
 800bd6c:	00000000 	.word	0x00000000

0800bd70 <tADSRT_tickNoInterp>:

float   tADSRT_tickNoInterp(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
 800bd70:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
 800bd72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd74:	3a01      	subs	r2, #1
 800bd76:	2a04      	cmp	r2, #4
 800bd78:	f200 80ba 	bhi.w	800bef0 <tADSRT_tickNoInterp+0x180>
 800bd7c:	e8df f002 	tbb	[pc, r2]
 800bd80:	58333c1b 	.word	0x58333c1b
 800bd84:	03          	.byte	0x03
 800bd85:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 800bd86:	edd3 7a03 	vldr	s15, [r3, #12]
 800bd8a:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 800bd8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bd92:	eef4 6ac7 	vcmpe.f32	s13, s14
 800bd96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd9a:	dd61      	ble.n	800be60 <tADSRT_tickNoInterp+0xf0>
            {
                adsr->whichStage = env_attack;
 800bd9c:	2201      	movs	r2, #1
                adsr->next = 0.0f;
 800bd9e:	ed9f 0a56 	vldr	s0, [pc, #344]	; 800bef8 <tADSRT_tickNoInterp+0x188>
                adsr->whichStage = env_attack;
 800bda2:	639a      	str	r2, [r3, #56]	; 0x38
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
 800bda4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800bda8:	ed83 0a06 	vstr	s0, [r3, #24]
 800bdac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdb0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
 800bdb4:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 800bdb6:	edd3 7a03 	vldr	s15, [r3, #12]
 800bdba:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 800bdbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bdc2:	eef4 6ac7 	vcmpe.f32	s13, s14
 800bdc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdca:	dd57      	ble.n	800be7c <tADSRT_tickNoInterp+0x10c>
            {
                adsr->whichStage = env_decay;
 800bdcc:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
 800bdce:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
                adsr->whichStage = env_decay;
 800bdd2:	639a      	str	r2, [r3, #56]	; 0x38
            {
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
 800bdd4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800bdd8:	ed83 0a06 	vstr	s0, [r3, #24]
 800bddc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bde0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
            break;
 800bde4:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
            adsr->next = adsr->next * adsr->leakFactor;
 800bde6:	ed93 0a06 	vldr	s0, [r3, #24]
 800bdea:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800bdee:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bdf2:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
 800bdf6:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 800bdf8:	edd3 7a03 	vldr	s15, [r3, #12]
 800bdfc:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800be00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800be04:	eef4 6ac7 	vcmpe.f32	s13, s14
 800be08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be0c:	dd48      	ble.n	800bea0 <tADSRT_tickNoInterp+0x130>
                adsr->next = adsr->gain * adsr->sustain;
 800be0e:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
 800be12:	2203      	movs	r2, #3
                adsr->next = adsr->gain * adsr->sustain;
 800be14:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
                adsr->whichStage = env_sustain;
 800be18:	639a      	str	r2, [r3, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
 800be1a:	ee20 0a27 	vmul.f32	s0, s0, s15
            adsr->decayPhase += adsr->decayInc;
 800be1e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800be22:	ed83 0a06 	vstr	s0, [r3, #24]
 800be26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be2a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
 800be2e:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 800be30:	edd3 7a03 	vldr	s15, [r3, #12]
 800be34:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 800be38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800be3c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800be40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be44:	dd46      	ble.n	800bed4 <tADSRT_tickNoInterp+0x164>
            {
                adsr->whichStage = env_idle;
 800be46:	2200      	movs	r2, #0
                adsr->next = 0.0f;
 800be48:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800bef8 <tADSRT_tickNoInterp+0x188>
                adsr->whichStage = env_idle;
 800be4c:	639a      	str	r2, [r3, #56]	; 0x38
            else {
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
 800be4e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800be52:	ed83 0a06 	vstr	s0, [r3, #24]
 800be56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be5a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
    }
    return adsr->next;
}
 800be5e:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
 800be60:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 800be64:	685a      	ldr	r2, [r3, #4]
 800be66:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800be6a:	ee17 1a10 	vmov	r1, s14
 800be6e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800be72:	ed92 0a00 	vldr	s0, [r2]
 800be76:	ee20 0a27 	vmul.f32	s0, s0, s15
 800be7a:	e793      	b.n	800bda4 <tADSRT_tickNoInterp+0x34>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
 800be7c:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 800be80:	685a      	ldr	r2, [r3, #4]
 800be82:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800be86:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800be8a:	ee17 1a10 	vmov	r1, s14
 800be8e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800be92:	ed92 7a00 	vldr	s14, [r2]
 800be96:	ee30 0a47 	vsub.f32	s0, s0, s14
 800be9a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800be9e:	e799      	b.n	800bdd4 <tADSRT_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
 800bea0:	eebc 6ae6 	vcvt.u32.f32	s12, s13
 800bea4:	685a      	ldr	r2, [r3, #4]
 800bea6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800beaa:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 800beae:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800beb2:	ee16 1a10 	vmov	r1, s12
 800beb6:	edd3 5a18 	vldr	s11, [r3, #96]	; 0x60
 800beba:	ee37 7a40 	vsub.f32	s14, s14, s0
 800bebe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800bec2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800bec6:	ed92 6a00 	vldr	s12, [r2]
 800beca:	eea6 0a07 	vfma.f32	s0, s12, s14
 800bece:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bed2:	e7a4      	b.n	800be1e <tADSRT_tickNoInterp+0xae>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
 800bed4:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 800bed8:	685a      	ldr	r2, [r3, #4]
 800beda:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800bede:	ee17 1a10 	vmov	r1, s14
 800bee2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800bee6:	ed92 0a00 	vldr	s0, [r2]
 800beea:	ee20 0a27 	vmul.f32	s0, s0, s15
 800beee:	e7ae      	b.n	800be4e <tADSRT_tickNoInterp+0xde>
 800bef0:	ed93 0a06 	vldr	s0, [r3, #24]
 800bef4:	4770      	bx	lr
 800bef6:	bf00      	nop
 800bef8:	00000000 	.word	0x00000000

0800befc <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, float val, float factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 800befc:	b538      	push	{r3, r4, r5, lr}
 800befe:	ed2d 8b02 	vpush	{d8}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, float val, float factor, tMempool* const mp)
{
    _tMempool* m = *mp;
 800bf02:	698c      	ldr	r4, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 800bf04:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800bf06:	201c      	movs	r0, #28
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 800bf08:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800bf0c:	4621      	mov	r1, r4
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 800bf0e:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800bf12:	f000 fd27 	bl	800c964 <mpool_alloc>
 800bf16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bf1a:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800bf50 <tExpSmooth_init+0x54>
 800bf1e:	6028      	str	r0, [r5, #0]
 800bf20:	fec8 0a20 	vmaxnm.f32	s1, s16, s1
    smooth->mempool = m;
 800bf24:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->dest = val;
    if (factor < 0) factor = 0;
    if (factor > 1) factor = 1;
    smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
 800bf28:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 800bf2c:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
 800bf2e:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
 800bf32:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->oneminusfactor = 1.0f - factor;
 800bf36:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->baseFactor = factor;
 800bf3a:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
 800bf3e:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
 800bf42:	6863      	ldr	r3, [r4, #4]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	6183      	str	r3, [r0, #24]
}
 800bf48:	ecbd 8b02 	vpop	{d8}
 800bf4c:	bd38      	pop	{r3, r4, r5, pc}
 800bf4e:	bf00      	nop
 800bf50:	00000000 	.word	0x00000000

0800bf54 <tExpSmooth_initToPool>:
{
 800bf54:	b538      	push	{r3, r4, r5, lr}
 800bf56:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 800bf5a:	680c      	ldr	r4, [r1, #0]
{
 800bf5c:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800bf5e:	201c      	movs	r0, #28
{
 800bf60:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800bf64:	4621      	mov	r1, r4
{
 800bf66:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800bf6a:	f000 fcfb 	bl	800c964 <mpool_alloc>
 800bf6e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bf72:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800bfa8 <tExpSmooth_initToPool+0x54>
 800bf76:	6028      	str	r0, [r5, #0]
 800bf78:	fec8 0a20 	vmaxnm.f32	s1, s16, s1
    smooth->mempool = m;
 800bf7c:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->oneminusfactor = 1.0f - factor;
 800bf80:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 800bf84:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
 800bf86:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
 800bf8a:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->oneminusfactor = 1.0f - factor;
 800bf8e:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->baseFactor = factor;
 800bf92:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
 800bf96:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
 800bf9a:	6863      	ldr	r3, [r4, #4]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	6183      	str	r3, [r0, #24]
}
 800bfa0:	ecbd 8b02 	vpop	{d8}
 800bfa4:	bd38      	pop	{r3, r4, r5, pc}
 800bfa6:	bf00      	nop
 800bfa8:	00000000 	.word	0x00000000

0800bfac <tExpSmooth_setDest>:
    smooth->oneminusfactor = 1.0f - factor;
}

void     tExpSmooth_setDest(tExpSmooth* const expsmooth, float dest)
{
    _tExpSmooth* smooth = *expsmooth;
 800bfac:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
 800bfae:	ed83 0a05 	vstr	s0, [r3, #20]
}
 800bfb2:	4770      	bx	lr

0800bfb4 <tExpSmooth_tick>:
    smooth->dest=val;
}

float   tExpSmooth_tick(tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
 800bfb4:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
 800bfb6:	edd3 7a04 	vldr	s15, [r3, #16]
 800bfba:	ed93 0a03 	vldr	s0, [r3, #12]
 800bfbe:	ed93 7a02 	vldr	s14, [r3, #8]
 800bfc2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bfc6:	edd3 7a05 	vldr	s15, [r3, #20]
 800bfca:	eea7 0a27 	vfma.f32	s0, s14, s15
 800bfce:	ed83 0a04 	vstr	s0, [r3, #16]
    return smooth->curr;
}
 800bfd2:	4770      	bx	lr

0800bfd4 <tTwoZero_initToPool>:
{
    tTwoZero_initToPool(ft, &leaf->mempool);
}

void    tTwoZero_initToPool     (tTwoZero* const ft, tMempool* const mp)
{
 800bfd4:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
 800bfd6:	680c      	ldr	r4, [r1, #0]
{
 800bfd8:	4605      	mov	r5, r0
    _tTwoZero* f = *ft = (_tTwoZero*) mpool_alloc(sizeof(_tTwoZero), m);
 800bfda:	2028      	movs	r0, #40	; 0x28
 800bfdc:	4621      	mov	r1, r4
 800bfde:	f000 fcc1 	bl	800c964 <mpool_alloc>
 800bfe2:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 800bfe4:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->gain = 1.0f;
    f->lastIn[0] = 0.0f;
 800bfe6:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800bfe8:	6862      	ldr	r2, [r4, #4]
    f->gain = 1.0f;
 800bfea:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800bfee:	68d2      	ldr	r2, [r2, #12]
    f->gain = 1.0f;
 800bff0:	6041      	str	r1, [r0, #4]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800bff2:	6242      	str	r2, [r0, #36]	; 0x24
    f->lastIn[0] = 0.0f;
 800bff4:	61c3      	str	r3, [r0, #28]
    f->lastIn[1] = 0.0f;
 800bff6:	6203      	str	r3, [r0, #32]
}
 800bff8:	bd38      	pop	{r3, r4, r5, pc}
 800bffa:	bf00      	nop

0800bffc <tTwoZero_tick>:
    mpool_free((char*)f, f->mempool);
}

float   tTwoZero_tick(tTwoZero* const ft, float input)
{
    _tTwoZero* f = *ft;
 800bffc:	6803      	ldr	r3, [r0, #0]
    
    float in = input * f->gain;
    float out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
 800bffe:	ed93 7a07 	vldr	s14, [r3, #28]
 800c002:	edd3 7a03 	vldr	s15, [r3, #12]
 800c006:	edd3 5a08 	vldr	s11, [r3, #32]
 800c00a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c00e:	ed93 5a04 	vldr	s10, [r3, #16]
    float in = input * f->gain;
 800c012:	ed93 6a01 	vldr	s12, [r3, #4]
    float out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
 800c016:	edd3 6a02 	vldr	s13, [r3, #8]
 800c01a:	eee5 7a25 	vfma.f32	s15, s10, s11
    
    f->lastIn[1] = f->lastIn[0];
 800c01e:	ed83 7a08 	vstr	s14, [r3, #32]
    float in = input * f->gain;
 800c022:	ee20 0a06 	vmul.f32	s0, s0, s12
    f->lastIn[0] = in;
 800c026:	ed83 0a07 	vstr	s0, [r3, #28]
    
    return out;
}
 800c02a:	eee6 7a80 	vfma.f32	s15, s13, s0
 800c02e:	eeb0 0a67 	vmov.f32	s0, s15
 800c032:	4770      	bx	lr

0800c034 <tTwoZero_setCoefficients>:
    f->b1 = b1;
}

void    tTwoZero_setCoefficients(tTwoZero* const ft, float b0, float b1, float b2)
{
    _tTwoZero* f = *ft;
 800c034:	6803      	ldr	r3, [r0, #0]
    f->b0 = b0;
 800c036:	ed83 0a02 	vstr	s0, [r3, #8]
    f->b1 = b1;
 800c03a:	edc3 0a03 	vstr	s1, [r3, #12]
    f->b2 = b2;
 800c03e:	ed83 1a04 	vstr	s2, [r3, #16]
}
 800c042:	4770      	bx	lr

0800c044 <tEfficientSVF_init>:
}

#if LEAF_INCLUDE_FILTERTAN_TABLE
// Efficient version of tSVF where frequency is set based on 12-bit integer input for lookup in tanh wavetable.
void   tEfficientSVF_init(tEfficientSVF* const svff, SVFType type, uint16_t input, float Q, LEAF* const leaf)
{
 800c044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c048:	ed2d 8b02 	vpush	{d8}
    tEfficientSVF_initToPool(svff, type, input, Q, &leaf->mempool);
}

void    tEfficientSVF_initToPool    (tEfficientSVF* const svff, SVFType type, uint16_t input, float Q, tMempool* const mp)
{
    _tMempool* m = *mp;
 800c04c:	f8d3 8018 	ldr.w	r8, [r3, #24]
{
 800c050:	4605      	mov	r5, r0
 800c052:	460c      	mov	r4, r1
    _tEfficientSVF* svf = *svff = (_tEfficientSVF*) mpool_alloc(sizeof(_tEfficientSVF), m);
 800c054:	202c      	movs	r0, #44	; 0x2c
 800c056:	4641      	mov	r1, r8
{
 800c058:	eeb0 8a40 	vmov.f32	s16, s0
 800c05c:	4616      	mov	r6, r2
    _tEfficientSVF* svf = *svff = (_tEfficientSVF*) mpool_alloc(sizeof(_tEfficientSVF), m);
 800c05e:	f000 fc81 	bl	800c964 <mpool_alloc>
    
    svf->ic1eq = 0;
    svf->ic2eq = 0;
    
    svf->g = __leaf_table_filtertan[input];
    svf->k = 1.0f/Q;
 800c062:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    svf->g = __leaf_table_filtertan[input];
 800c066:	4a15      	ldr	r2, [pc, #84]	; (800c0bc <tEfficientSVF_init+0x78>)
    _tEfficientSVF* svf = *svff = (_tEfficientSVF*) mpool_alloc(sizeof(_tEfficientSVF), m);
 800c068:	6028      	str	r0, [r5, #0]
    svf->ic1eq = 0;
 800c06a:	2700      	movs	r7, #0
    svf->g = __leaf_table_filtertan[input];
 800c06c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    svf->mempool = m;
 800c070:	f8c0 8000 	str.w	r8, [r0]
    svf->k = 1.0f/Q;
 800c074:	eec7 6a08 	vdiv.f32	s13, s14, s16
    svf->type = type;
 800c078:	7104      	strb	r4, [r0, #4]
    svf->g = __leaf_table_filtertan[input];
 800c07a:	edd2 7a00 	vldr	s15, [r2]
    svf->ic1eq = 0;
 800c07e:	6107      	str	r7, [r0, #16]
    svf->g = __leaf_table_filtertan[input];
 800c080:	edc0 7a06 	vstr	s15, [r0, #24]
    svf->ic2eq = 0;
 800c084:	6147      	str	r7, [r0, #20]
    svf->a1 = 1.0f/(1.0f+svf->g*(svf->g+svf->k));
 800c086:	ee37 6aa6 	vadd.f32	s12, s15, s13
    svf->k = 1.0f/Q;
 800c08a:	edc0 6a07 	vstr	s13, [r0, #28]
    svf->a1 = 1.0f/(1.0f+svf->g*(svf->g+svf->k));
 800c08e:	eef0 6a47 	vmov.f32	s13, s14
 800c092:	eee7 6a86 	vfma.f32	s13, s15, s12
 800c096:	eeb0 6a66 	vmov.f32	s12, s13
 800c09a:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g*svf->a1;
 800c09e:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f+svf->g*(svf->g+svf->k));
 800c0a2:	edc0 6a08 	vstr	s13, [r0, #32]
    svf->a3 = svf->g*svf->a2;
 800c0a6:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g*svf->a1;
 800c0aa:	ed80 7a09 	vstr	s14, [r0, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 800c0ae:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
}
 800c0b2:	ecbd 8b02 	vpop	{d8}
 800c0b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ba:	bf00      	nop
 800c0bc:	0800effc 	.word	0x0800effc

0800c0c0 <tEfficientSVF_tick>:
    mpool_free((char*)svf, svf->mempool);
}

float   tEfficientSVF_tick(tEfficientSVF* const svff, float v0)
{
    _tEfficientSVF* svf = *svff;
 800c0c0:	6803      	ldr	r3, [r0, #0]
    
    float v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 800c0c2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
{
 800c0c6:	eef0 5a40 	vmov.f32	s11, s0
    v3 = v0 - svf->ic2eq;
 800c0ca:	edd3 6a05 	vldr	s13, [r3, #20]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 800c0ce:	ed93 6a04 	vldr	s12, [r3, #16]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 800c0d2:	eeb0 7a66 	vmov.f32	s14, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 800c0d6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    v3 = v0 - svf->ic2eq;
 800c0da:	ee30 5a66 	vsub.f32	s10, s0, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 800c0de:	edd3 3a08 	vldr	s7, [r3, #32]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 800c0e2:	ed93 4a0a 	vldr	s8, [r3, #40]	; 0x28
 800c0e6:	eea6 7a27 	vfma.f32	s14, s12, s15
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    if (svf->type == SVFTypeLowpass)        return v2;
 800c0ea:	791a      	ldrb	r2, [r3, #4]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 800c0ec:	ee67 7a85 	vmul.f32	s15, s15, s10
    if (svf->type == SVFTypeLowpass)        return v2;
 800c0f0:	2a01      	cmp	r2, #1
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 800c0f2:	eee3 7a86 	vfma.f32	s15, s7, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 800c0f6:	eea4 7a05 	vfma.f32	s14, s8, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 800c0fa:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 800c0fe:	eeb0 0a47 	vmov.f32	s0, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 800c102:	ee37 7a07 	vadd.f32	s14, s14, s14
 800c106:	ee77 6a66 	vsub.f32	s13, s14, s13
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 800c10a:	ed83 6a04 	vstr	s12, [r3, #16]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 800c10e:	edc3 6a05 	vstr	s13, [r3, #20]
    if (svf->type == SVFTypeLowpass)        return v2;
 800c112:	d008      	beq.n	800c126 <tEfficientSVF_tick+0x66>
    else if (svf->type == SVFTypeBandpass)  return v1;
 800c114:	2a02      	cmp	r2, #2
 800c116:	d00e      	beq.n	800c136 <tEfficientSVF_tick+0x76>
    else if (svf->type == SVFTypeHighpass)  return v0 - (svf->k * v1) - v2;
 800c118:	b132      	cbz	r2, 800c128 <tEfficientSVF_tick+0x68>
    else if (svf->type == SVFTypeNotch)     return v0 - (svf->k * v1);
 800c11a:	2a03      	cmp	r2, #3
 800c11c:	d015      	beq.n	800c14a <tEfficientSVF_tick+0x8a>
    else if (svf->type == SVFTypePeak)      return v0 - (svf->k * v1) - (2.0f * v2);
 800c11e:	2a04      	cmp	r2, #4
 800c120:	d00c      	beq.n	800c13c <tEfficientSVF_tick+0x7c>
    else                                    return 0.0f;
 800c122:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800c158 <tEfficientSVF_tick+0x98>
    
}
 800c126:	4770      	bx	lr
    else if (svf->type == SVFTypeHighpass)  return v0 - (svf->k * v1) - v2;
 800c128:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800c12c:	ed93 7a07 	vldr	s14, [r3, #28]
 800c130:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c134:	4770      	bx	lr
    else if (svf->type == SVFTypeBandpass)  return v1;
 800c136:	eeb0 0a67 	vmov.f32	s0, s15
 800c13a:	4770      	bx	lr
    else if (svf->type == SVFTypePeak)      return v0 - (svf->k * v1) - (2.0f * v2);
 800c13c:	edd3 6a07 	vldr	s13, [r3, #28]
 800c140:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c144:	ee35 0ac7 	vsub.f32	s0, s11, s14
 800c148:	4770      	bx	lr
    else if (svf->type == SVFTypeNotch)     return v0 - (svf->k * v1);
 800c14a:	ed93 7a07 	vldr	s14, [r3, #28]
 800c14e:	eee7 5a67 	vfms.f32	s11, s14, s15
 800c152:	eeb0 0a65 	vmov.f32	s0, s11
 800c156:	4770      	bx	lr
 800c158:	00000000 	.word	0x00000000

0800c15c <tEfficientSVF_setFreq>:

void     tEfficientSVF_setFreq(tEfficientSVF* const svff, uint16_t input)
{
    _tEfficientSVF* svf = *svff;
    
    svf->g = __leaf_table_filtertan[input];
 800c15c:	4a10      	ldr	r2, [pc, #64]	; (800c1a0 <tEfficientSVF_setFreq+0x44>)
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800c15e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    _tEfficientSVF* svf = *svff;
 800c162:	6803      	ldr	r3, [r0, #0]
    svf->g = __leaf_table_filtertan[input];
 800c164:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800c168:	ed93 7a07 	vldr	s14, [r3, #28]
 800c16c:	eef0 6a46 	vmov.f32	s13, s12
    svf->g = __leaf_table_filtertan[input];
 800c170:	edd1 7a00 	vldr	s15, [r1]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800c174:	ee37 7a87 	vadd.f32	s14, s15, s14
    svf->g = __leaf_table_filtertan[input];
 800c178:	edc3 7a06 	vstr	s15, [r3, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800c17c:	eee7 6a87 	vfma.f32	s13, s15, s14
 800c180:	eeb0 7a66 	vmov.f32	s14, s13
 800c184:	eec6 6a07 	vdiv.f32	s13, s12, s14
    svf->a2 = svf->g * svf->a1;
 800c188:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800c18c:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a3 = svf->g * svf->a2;
 800c190:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 800c194:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 800c198:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop
 800c1a0:	0800effc 	.word	0x0800effc

0800c1a4 <tEfficientSVF_setQ>:

void     tEfficientSVF_setQ(tEfficientSVF* const svff, float Q)
{
    _tEfficientSVF* svf = *svff;
    
    svf->k = 1.0f/Q;
 800c1a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tEfficientSVF* svf = *svff;
 800c1a8:	6803      	ldr	r3, [r0, #0]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800c1aa:	edd3 7a06 	vldr	s15, [r3, #24]
    svf->k = 1.0f/Q;
 800c1ae:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800c1b2:	ee36 6aa7 	vadd.f32	s12, s13, s15
    svf->k = 1.0f/Q;
 800c1b6:	edc3 6a07 	vstr	s13, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800c1ba:	eef0 6a47 	vmov.f32	s13, s14
 800c1be:	eee7 6a86 	vfma.f32	s13, s15, s12
 800c1c2:	eeb0 6a66 	vmov.f32	s12, s13
 800c1c6:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
 800c1ca:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800c1ce:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a3 = svf->g * svf->a2;
 800c1d2:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 800c1d6:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 800c1da:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 800c1de:	4770      	bx	lr

0800c1e0 <tHighpass_initToPool>:
{
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
 800c1e0:	b538      	push	{r3, r4, r5, lr}
 800c1e2:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 800c1e6:	680c      	ldr	r4, [r1, #0]
{
 800c1e8:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 800c1ea:	2018      	movs	r0, #24
{
 800c1ec:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 800c1f0:	4621      	mov	r1, r4
 800c1f2:	f000 fc13 	bl	800ca1c <mpool_calloc>
 800c1f6:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 800c1f8:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 800c1fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800c1fe:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 800c200:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800c202:	ed92 7a03 	vldr	s14, [r2, #12]
    f->xs = 0.0f;
    
    f->frequency = freq;
 800c206:	ed80 8a04 	vstr	s16, [r0, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 800c20a:	eee7 7a48 	vfms.f32	s15, s14, s16
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800c20e:	ed80 7a05 	vstr	s14, [r0, #20]
    f->ys = 0.0f;
 800c212:	6083      	str	r3, [r0, #8]
    f->xs = 0.0f;
 800c214:	6043      	str	r3, [r0, #4]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 800c216:	edc0 7a03 	vstr	s15, [r0, #12]
}
 800c21a:	ecbd 8b02 	vpop	{d8}
 800c21e:	bd38      	pop	{r3, r4, r5, pc}

0800c220 <tHighpass_tick>:
}

// From JOS DC Blocker
float tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
 800c220:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 800c222:	edd3 7a01 	vldr	s15, [r3, #4]
 800c226:	ed93 7a02 	vldr	s14, [r3, #8]
 800c22a:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
 800c22e:	ed83 0a01 	vstr	s0, [r3, #4]
 800c232:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
 800c236:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c23a:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 800c23e:	4770      	bx	lr

0800c240 <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

float   tVZFilter_tickEfficient             (tVZFilter* const vf, float in)
{
    _tVZFilter* f = *vf;
 800c240:	6803      	ldr	r3, [r0, #0]
    
    float yL, yB, yH;
    
    // compute highpass output via Eq. 5.1:
    yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
 800c242:	edd3 6a03 	vldr	s13, [r3, #12]
 800c246:	ed93 7a02 	vldr	s14, [r3, #8]
 800c24a:	ee70 7a66 	vsub.f32	s15, s0, s13
 800c24e:	edd3 5a05 	vldr	s11, [r3, #20]
 800c252:	ed93 6a04 	vldr	s12, [r3, #16]
 800c256:	ed93 5a06 	vldr	s10, [r3, #24]
 800c25a:	eee5 7ac7 	vfms.f32	s15, s11, s14
    
    //instead of this:
    // y = g*x + s; // output computation
    // s = g*x + y; // state update
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
 800c25e:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
 800c262:	edd3 4a08 	vldr	s9, [r3, #32]
 800c266:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
 800c26a:	eee7 7a46 	vfms.f32	s15, s14, s12
 800c26e:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = (f->g*yH) + f->s1;
 800c272:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
 800c276:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = (f->g*yB) + f->s2;
 800c27a:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = f->g*yH + yB; // state update in 1st integrator
 800c27e:	eeb0 5a47 	vmov.f32	s10, s14
 800c282:	eea4 0a87 	vfma.f32	s0, s9, s14
 800c286:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = f->g*yB + yL; // state update in 2nd integrator
 800c28a:	eef0 7a66 	vmov.f32	s15, s13
}
 800c28e:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = f->g*yB + yL; // state update in 2nd integrator
 800c292:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = f->g*yH + yB; // state update in 1st integrator
 800c296:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = f->g*yB + yL; // state update in 2nd integrator
 800c29a:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800c29e:	4770      	bx	lr

0800c2a0 <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 800c2a0:	b538      	push	{r3, r4, r5, lr}
    _tVZFilter* f = *vf;
 800c2a2:	6804      	ldr	r4, [r0, #0]
{
 800c2a4:	4605      	mov	r5, r0
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800c2a6:	eddf 7ae3 	vldr	s15, [pc, #908]	; 800c634 <tVZFilter_calcCoeffs+0x394>
{
 800c2aa:	ed2d 8b04 	vpush	{d8-d9}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800c2ae:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 800c2b2:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 800c2b6:	ee28 8a07 	vmul.f32	s16, s16, s14
 800c2ba:	ee28 8a27 	vmul.f32	s16, s16, s15
 800c2be:	eeb0 0a48 	vmov.f32	s0, s16
 800c2c2:	f001 fe7d 	bl	800dfc0 <tanf>
 800c2c6:	7923      	ldrb	r3, [r4, #4]
 800c2c8:	eef0 8a40 	vmov.f32	s17, s0
 800c2cc:	ed84 0a04 	vstr	s0, [r4, #16]
    
    switch( f->type )
 800c2d0:	2b0a      	cmp	r3, #10
 800c2d2:	f200 81ac 	bhi.w	800c62e <tVZFilter_calcCoeffs+0x38e>
 800c2d6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c2da:	0053      	.short	0x0053
 800c2dc:	0069005e 	.word	0x0069005e
 800c2e0:	00ab0074 	.word	0x00ab0074
 800c2e4:	011800e3 	.word	0x011800e3
 800c2e8:	01580138 	.word	0x01580138
 800c2ec:	000b019f 	.word	0x000b019f
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800c2f0:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800c2f4:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 800c2f8:	682d      	ldr	r5, [r5, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800c2fa:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800c2fe:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800c302:	f001 fcf9 	bl	800dcf8 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800c306:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 800c30a:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 800c30e:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 800c634 <tVZFilter_calcCoeffs+0x394>
 800c312:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c316:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c31a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c31e:	f001 fe4f 	bl	800dfc0 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800c322:	ed95 6a04 	vldr	s12, [r5, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800c326:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800c32a:	ee80 7a06 	vdiv.f32	s14, s0, s12
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800c32e:	edc4 7a07 	vstr	s15, [r4, #28]
 800c332:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800c336:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800c33a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c33e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c342:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c346:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c34a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c34e:	eef1 7ae6 	vsqrt.f32	s15, s13
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800c352:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800c356:	eeb1 7a67 	vneg.f32	s14, s15
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800c35a:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800c35e:	ed84 7a08 	vstr	s14, [r4, #32]
    f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 800c362:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c366:	ee77 7aa8 	vadd.f32	s15, s15, s17
 800c36a:	eef0 6a47 	vmov.f32	s13, s14
 800c36e:	eee7 6aa8 	vfma.f32	s13, s15, s17
 800c372:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c376:	edc4 7a06 	vstr	s15, [r4, #24]
}
 800c37a:	ecbd 8b04 	vpop	{d8-d9}
 800c37e:	bd38      	pop	{r3, r4, r5, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800c380:	2300      	movs	r3, #0
 800c382:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 800c386:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800c38a:	6262      	str	r2, [r4, #36]	; 0x24
            f->R2 = f->invG;
 800c38c:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800c390:	61e3      	str	r3, [r4, #28]
 800c392:	6223      	str	r3, [r4, #32]
            break;
 800c394:	e7e5      	b.n	800c362 <tVZFilter_calcCoeffs+0xc2>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800c396:	2300      	movs	r3, #0
 800c398:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 800c39c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800c3a0:	61e2      	str	r2, [r4, #28]
            f->R2 = f->invG;
 800c3a2:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800c3a6:	6223      	str	r3, [r4, #32]
 800c3a8:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800c3aa:	e7da      	b.n	800c362 <tVZFilter_calcCoeffs+0xc2>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 800c3b2:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800c3b6:	6222      	str	r2, [r4, #32]
            f->R2 = f->invG;
 800c3b8:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800c3bc:	61e3      	str	r3, [r4, #28]
 800c3be:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800c3c0:	e7cf      	b.n	800c362 <tVZFilter_calcCoeffs+0xc2>
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800c3c2:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800c3c6:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 800c3ca:	682d      	ldr	r5, [r5, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800c3cc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800c3d0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800c3d4:	f001 fc90 	bl	800dcf8 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800c3d8:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 800c3dc:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 800c3e0:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800c634 <tVZFilter_calcCoeffs+0x394>
 800c3e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c3e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c3ec:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c3f0:	f001 fde6 	bl	800dfc0 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800c3f4:	ed95 6a04 	vldr	s12, [r5, #16]
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800c3f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 800c3fc:	2300      	movs	r3, #0
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800c3fe:	ee80 7a06 	vdiv.f32	s14, s0, s12
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 800c402:	61e3      	str	r3, [r4, #28]
 800c404:	6263      	str	r3, [r4, #36]	; 0x24
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800c406:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800c40a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c40e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c412:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c416:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c41a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c41e:	eef1 7ae6 	vsqrt.f32	s15, s13
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800c422:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c426:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 800c42a:	edc4 7a08 	vstr	s15, [r4, #32]
            break;
 800c42e:	e798      	b.n	800c362 <tVZFilter_calcCoeffs+0xc2>
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800c430:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800c434:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 800c438:	682d      	ldr	r5, [r5, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800c43a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800c43e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800c442:	f001 fc59 	bl	800dcf8 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800c446:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 800c44a:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 800c44e:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800c634 <tVZFilter_calcCoeffs+0x394>
 800c452:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c456:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c45a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c45e:	f001 fdaf 	bl	800dfc0 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800c462:	ed95 6a04 	vldr	s12, [r5, #16]
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800c466:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800c46a:	2300      	movs	r3, #0
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800c46c:	ee80 7a06 	vdiv.f32	s14, s0, s12
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800c470:	6223      	str	r3, [r4, #32]
 800c472:	edc4 7a07 	vstr	s15, [r4, #28]
 800c476:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800c47a:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800c47e:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c482:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c486:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c48a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c48e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c492:	eef1 7ae6 	vsqrt.f32	s15, s13
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800c496:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c49a:	edc4 7a05 	vstr	s15, [r4, #20]
            break;
 800c49e:	e760      	b.n	800c362 <tVZFilter_calcCoeffs+0xc2>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 800c4a0:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800c4a4:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
 800c4a8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800c4ac:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800c4b0:	f001 fc22 	bl	800dcf8 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800c4b4:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c4b8:	f001 fd82 	bl	800dfc0 <tanf>
            float r  = f->g/wl;
 800c4bc:	eec8 7a80 	vdiv.f32	s15, s17, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800c4c0:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 800c4c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4c8:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c4cc:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800c4d0:	ed84 7a07 	vstr	s14, [r4, #28]
 800c4d4:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 800c4d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800c4dc:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800c4e0:	eef0 6a47 	vmov.f32	s13, s14
 800c4e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4e8:	ee77 7a45 	vsub.f32	s15, s14, s10
 800c4ec:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c4f0:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800c4f4:	eef1 7ac7 	vsqrt.f32	s15, s14
 800c4f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800c4fc:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800c500:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800c504:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 800c508:	e72b      	b.n	800c362 <tVZFilter_calcCoeffs+0xc2>
            float A = sqrtf(f->G);
 800c50a:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800c50e:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
            f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800c512:	eddf 7a49 	vldr	s15, [pc, #292]	; 800c638 <tVZFilter_calcCoeffs+0x398>
            float A = sqrtf(f->G);
 800c516:	eeb1 8ac9 	vsqrt.f32	s16, s18
            f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800c51a:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 800c51e:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c522:	eef1 7ac8 	vsqrt.f32	s15, s16
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800c526:	eec8 8aa7 	vdiv.f32	s17, s17, s15
 800c52a:	edc4 8a04 	vstr	s17, [r4, #16]
            f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800c52e:	f001 fd9b 	bl	800e068 <sinhf>
 800c532:	ee70 7a00 	vadd.f32	s15, s0, s0
            f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 800c536:	ed84 9a07 	vstr	s18, [r4, #28]
 800c53a:	6265      	str	r5, [r4, #36]	; 0x24
 800c53c:	ee27 8a88 	vmul.f32	s16, s15, s16
            f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800c540:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 800c544:	ed84 8a08 	vstr	s16, [r4, #32]
            break;
 800c548:	e70b      	b.n	800c362 <tVZFilter_calcCoeffs+0xc2>
            float A = sqrtf(f->G);
 800c54a:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
            f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800c54e:	eddf 7a3a 	vldr	s15, [pc, #232]	; 800c638 <tVZFilter_calcCoeffs+0x398>
            float A = sqrtf(f->G);
 800c552:	eeb1 8ac9 	vsqrt.f32	s16, s18
            f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800c556:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 800c55a:	ee20 0a27 	vmul.f32	s0, s0, s15
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800c55e:	eef1 7ac8 	vsqrt.f32	s15, s16
 800c562:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800c566:	edc4 8a04 	vstr	s17, [r4, #16]
            f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800c56a:	f001 fd7d 	bl	800e068 <sinhf>
 800c56e:	ee70 7a00 	vadd.f32	s15, s0, s0
            f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 800c572:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c576:	ed84 9a09 	vstr	s18, [r4, #36]	; 0x24
 800c57a:	ee27 8a88 	vmul.f32	s16, s15, s16
 800c57e:	61e3      	str	r3, [r4, #28]
            f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800c580:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 800c584:	ed84 8a08 	vstr	s16, [r4, #32]
            break;
 800c588:	e6eb      	b.n	800c362 <tVZFilter_calcCoeffs+0xc2>
            float x  = 2.0f*f->m-1.0f;
 800c58a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c58e:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 800c592:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->R2 = f->invG;
 800c596:	6b23      	ldr	r3, [r4, #48]	; 0x30
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800c598:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c59c:	eddf 0a27 	vldr	s1, [pc, #156]	; 800c63c <tVZFilter_calcCoeffs+0x39c>
            f->R2 = f->invG;
 800c5a0:	6163      	str	r3, [r4, #20]
            float x  = 2.0f*f->m-1.0f;
 800c5a2:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800c5a6:	eeb0 0a48 	vmov.f32	s0, s16
 800c5aa:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c5ae:	f000 f9bb 	bl	800c928 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800c5b2:	eddf 0a22 	vldr	s1, [pc, #136]	; 800c63c <tVZFilter_calcCoeffs+0x39c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800c5b6:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800c5ba:	eeb0 0a68 	vmov.f32	s0, s17
 800c5be:	f000 f9b7 	bl	800c930 <minimum>
            f->cB = 1.0f-x*x;
 800c5c2:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 800c5c6:	edd4 6a07 	vldr	s13, [r4, #28]
 800c5ca:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cB = 1.0f-x*x;
 800c5ce:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 800c5d2:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 800c5d6:	ee36 5aa6 	vadd.f32	s10, s13, s13
 800c5da:	edd4 8a04 	vldr	s17, [r4, #16]
 800c5de:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800c5e2:	ee27 6a07 	vmul.f32	s12, s14, s14
 800c5e6:	eea6 6aa6 	vfma.f32	s12, s13, s13
 800c5ea:	eea0 6a00 	vfma.f32	s12, s0, s0
 800c5ee:	eea0 6a45 	vfms.f32	s12, s0, s10
 800c5f2:	ee84 5a86 	vdiv.f32	s10, s9, s12
 800c5f6:	eeb1 6ac5 	vsqrt.f32	s12, s10
 800c5fa:	ee26 6a25 	vmul.f32	s12, s12, s11
            f->cL *= s; f->cB *= s; f->cH *= s;
 800c5fe:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c602:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c606:	ee20 0a06 	vmul.f32	s0, s0, s12
 800c60a:	edc4 6a07 	vstr	s13, [r4, #28]
 800c60e:	ed84 7a08 	vstr	s14, [r4, #32]
 800c612:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            break;
 800c616:	e6a4      	b.n	800c362 <tVZFilter_calcCoeffs+0xc2>
            f->cL = 1.0f;
 800c618:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 800c61c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 800c620:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 800c622:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cH = 1.0f;
 800c626:	6263      	str	r3, [r4, #36]	; 0x24
            f->cB = f->R2;
 800c628:	edc4 7a08 	vstr	s15, [r4, #32]
            break;
 800c62c:	e699      	b.n	800c362 <tVZFilter_calcCoeffs+0xc2>
 800c62e:	edd4 7a05 	vldr	s15, [r4, #20]
 800c632:	e696      	b.n	800c362 <tVZFilter_calcCoeffs+0xc2>
 800c634:	40490fdb 	.word	0x40490fdb
 800c638:	3eb17218 	.word	0x3eb17218
 800c63c:	00000000 	.word	0x00000000

0800c640 <tVZFilter_init>:
{
 800c640:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c642:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 800c646:	6997      	ldr	r7, [r2, #24]
{
 800c648:	b083      	sub	sp, #12
 800c64a:	4605      	mov	r5, r0
 800c64c:	460e      	mov	r6, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800c64e:	2044      	movs	r0, #68	; 0x44
 800c650:	4639      	mov	r1, r7
{
 800c652:	eef0 8a60 	vmov.f32	s17, s1
 800c656:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800c65a:	f000 f983 	bl	800c964 <mpool_alloc>
 800c65e:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 800c660:	6007      	str	r7, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800c662:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
 800c666:	687b      	ldr	r3, [r7, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800c668:	4604      	mov	r4, r0
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800c66a:	ed9f 8a13 	vldr	s16, [pc, #76]	; 800c6b8 <tVZFilter_init+0x78>
    f->sampleRate = leaf->sampleRate;
 800c66e:	edd3 7a00 	vldr	s15, [r3]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800c672:	eeb0 0a48 	vmov.f32	s0, s16
 800c676:	eddd 0a01 	vldr	s1, [sp, #4]
    f->sampleRate = leaf->sampleRate;
 800c67a:	edc0 7a0f 	vstr	s15, [r0, #60]	; 0x3c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800c67e:	ee27 1a81 	vmul.f32	s2, s15, s2
    f->invSampleRate = leaf->invSampleRate;
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	6403      	str	r3, [r0, #64]	; 0x40
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800c686:	f000 f849 	bl	800c71c <LEAF_clip>
    f->G    = ONE_OVER_SQRT2;
 800c68a:	4a0c      	ldr	r2, [pc, #48]	; (800c6bc <tVZFilter_init+0x7c>)
    f->invG = 1.0f/ONE_OVER_SQRT2;
 800c68c:	4b0c      	ldr	r3, [pc, #48]	; (800c6c0 <tVZFilter_init+0x80>)
    tVZFilter_calcCoeffs(vf);
 800c68e:	4628      	mov	r0, r5
    f->type = type;
 800c690:	7126      	strb	r6, [r4, #4]
    f->B    = bandWidth;
 800c692:	edc4 8a0d 	vstr	s17, [r4, #52]	; 0x34
    f->m    = 0.0f;
 800c696:	ed84 8a0e 	vstr	s16, [r4, #56]	; 0x38
    f->s1 = 0.0f;
 800c69a:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2 = 0.0f;
 800c69e:	ed84 8a03 	vstr	s16, [r4, #12]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800c6a2:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->G    = ONE_OVER_SQRT2;
 800c6a6:	62e2      	str	r2, [r4, #44]	; 0x2c
    f->invG = 1.0f/ONE_OVER_SQRT2;
 800c6a8:	6323      	str	r3, [r4, #48]	; 0x30
}
 800c6aa:	b003      	add	sp, #12
 800c6ac:	ecbd 8b02 	vpop	{d8}
 800c6b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tVZFilter_calcCoeffs(vf);
 800c6b4:	f7ff bdf4 	b.w	800c2a0 <tVZFilter_calcCoeffs>
 800c6b8:	00000000 	.word	0x00000000
 800c6bc:	3f3504f3 	.word	0x3f3504f3
 800c6c0:	3fb504f3 	.word	0x3fb504f3

0800c6c4 <tVZFilter_setFreq>:
{
 800c6c4:	b538      	push	{r3, r4, r5, lr}
    _tVZFilter* f = *vf;
 800c6c6:	6805      	ldr	r5, [r0, #0]
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800c6c8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 800c6cc:	4604      	mov	r4, r0
 800c6ce:	eef0 0a40 	vmov.f32	s1, s0
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800c6d2:	ed95 1a0f 	vldr	s2, [r5, #60]	; 0x3c
 800c6d6:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800c6f0 <tVZFilter_setFreq+0x2c>
 800c6da:	ee21 1a27 	vmul.f32	s2, s2, s15
 800c6de:	f000 f81d 	bl	800c71c <LEAF_clip>
    tVZFilter_calcCoeffs(vf);
 800c6e2:	4620      	mov	r0, r4
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800c6e4:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
}
 800c6e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 800c6ec:	f7ff bdd8 	b.w	800c2a0 <tVZFilter_calcCoeffs>
 800c6f0:	00000000 	.word	0x00000000

0800c6f4 <LEAF_frequencyToMidi>:
}
#endif

float LEAF_frequencyToMidi(float f)
{
    return (69.0f + 12.0f * log2f(f * INV_440));
 800c6f4:	eddf 7a07 	vldr	s15, [pc, #28]	; 800c714 <LEAF_frequencyToMidi+0x20>
{
 800c6f8:	b508      	push	{r3, lr}
    return (69.0f + 12.0f * log2f(f * INV_440));
 800c6fa:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c6fe:	f001 fa7b 	bl	800dbf8 <log2f>
 800c702:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 800c706:	eddf 7a04 	vldr	s15, [pc, #16]	; 800c718 <LEAF_frequencyToMidi+0x24>
}
 800c70a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c70e:	eeb0 0a67 	vmov.f32	s0, s15
 800c712:	bd08      	pop	{r3, pc}
 800c714:	3b14f209 	.word	0x3b14f209
 800c718:	428a0000 	.word	0x428a0000

0800c71c <LEAF_clip>:

float   LEAF_clip(float min, float val, float max)
{
    float tempmin = min;
    float tempmax = max;
    if (min > max)
 800c71c:	eeb4 0ac1 	vcmpe.f32	s0, s2
 800c720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c724:	dd05      	ble.n	800c732 <LEAF_clip+0x16>
 800c726:	eef0 7a40 	vmov.f32	s15, s0
    {
        tempmin = max;
 800c72a:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
 800c72e:	eeb0 1a67 	vmov.f32	s2, s15
    }
    if (val < tempmin)
 800c732:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800c736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c73a:	dc01      	bgt.n	800c740 <LEAF_clip+0x24>
    {
        return tempmin;
    }
    else if (val > tempmax)
 800c73c:	fe81 0a60 	vminnm.f32	s0, s2, s1
    }
    else
    {
        return val;
    }
}
 800c740:	4770      	bx	lr
 800c742:	bf00      	nop

0800c744 <LEAF_generate_exp>:


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(float* buffer, float base, float start, float end, float offset, int size)
{
    float increment = (end - start) / (float)size;
 800c744:	ee07 1a90 	vmov	s15, r1
 800c748:	ee31 1a60 	vsub.f32	s2, s2, s1
    float x = start;
    for (int i = 0; i < size; i++)
 800c74c:	2900      	cmp	r1, #0
    float increment = (end - start) / (float)size;
 800c74e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 800c752:	b538      	push	{r3, r4, r5, lr}
 800c754:	ed2d 8b04 	vpush	{d8-d9}
    float increment = (end - start) / (float)size;
 800c758:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
 800c75c:	dd16      	ble.n	800c78c <LEAF_generate_exp+0x48>
 800c75e:	4604      	mov	r4, r0
 800c760:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 800c764:	eeb0 8a60 	vmov.f32	s16, s1
 800c768:	eef0 8a40 	vmov.f32	s17, s0
 800c76c:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
 800c770:	eef0 0a48 	vmov.f32	s1, s16
 800c774:	eeb0 0a68 	vmov.f32	s0, s17
 800c778:	f001 fabe 	bl	800dcf8 <powf>
 800c77c:	ee30 0a09 	vadd.f32	s0, s0, s18
        x += increment;
 800c780:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
 800c784:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
 800c788:	42a5      	cmp	r5, r4
 800c78a:	d1f1      	bne.n	800c770 <LEAF_generate_exp+0x2c>
    }
}
 800c78c:	ecbd 8b04 	vpop	{d8-d9}
 800c790:	bd38      	pop	{r3, r4, r5, pc}
 800c792:	bf00      	nop

0800c794 <LEAF_poly_blep>:
// t = phase, dt = inc, assuming 0-1 phase
// assumes discontinuity at 0, so offset inputs as needed
float LEAF_poly_blep(float t, float dt)
{
    // 0 <= t < 1
    if (t < dt) {
 800c794:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800c798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c79c:	d418      	bmi.n	800c7d0 <LEAF_poly_blep+0x3c>
        t /= dt;
        return t+t - t*t - 1.0f;
    }
    // -1 < t < 0
    else if (t > 1.0f - dt) {
 800c79e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c7a2:	ee77 7a60 	vsub.f32	s15, s14, s1
 800c7a6:	eef4 7ac0 	vcmpe.f32	s15, s0
 800c7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7ae:	d50c      	bpl.n	800c7ca <LEAF_poly_blep+0x36>
        t = (t - 1.0f) / dt;
 800c7b0:	ee70 7a47 	vsub.f32	s15, s0, s14
        return t*t + t+t + 1.0f;
 800c7b4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
        t = (t - 1.0f) / dt;
 800c7b8:	ee87 6aa0 	vdiv.f32	s12, s15, s1
        return t*t + t+t + 1.0f;
 800c7bc:	ee76 7a26 	vadd.f32	s15, s12, s13
 800c7c0:	eea7 7a86 	vfma.f32	s14, s15, s12
 800c7c4:	eeb0 0a47 	vmov.f32	s0, s14
 800c7c8:	4770      	bx	lr
    }
    // 0 otherwise
    else return 0.0f;
 800c7ca:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800c7e8 <LEAF_poly_blep+0x54>
//            v *= v;
//            y += 4.0f * v;
//        }
//    }
//    return y / 12.0f;
}
 800c7ce:	4770      	bx	lr
        t /= dt;
 800c7d0:	ee80 7a20 	vdiv.f32	s14, s0, s1
        return t+t - t*t - 1.0f;
 800c7d4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c7d8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800c7dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c7e0:	eea7 0a87 	vfma.f32	s0, s15, s14
 800c7e4:	4770      	bx	lr
 800c7e6:	bf00      	nop
 800c7e8:	00000000 	.word	0x00000000

0800c7ec <LEAF_interpolate_hermite_x>:
{
    // 4-point, 3rd-order Hermite (x-form)
    float c0 = yy1;
    float c1 = 0.5f * (yy2 - yy0);
    float y0my1 = yy0 - yy1;
    float c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 800c7ec:	ee71 1ac0 	vsub.f32	s3, s3, s0
 800c7f0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    float c1 = 0.5f * (yy2 - yy0);
 800c7f4:	ee31 6a40 	vsub.f32	s12, s2, s0
    float c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 800c7f8:	ee71 1aa0 	vadd.f32	s3, s3, s1
 800c7fc:	eef0 7a60 	vmov.f32	s15, s1
 800c800:	ee30 7ac1 	vsub.f32	s14, s1, s2
 800c804:	ee71 1ac1 	vsub.f32	s3, s3, s2
 800c808:	eed6 7a26 	vfnms.f32	s15, s12, s13
 800c80c:	eea1 7aa6 	vfma.f32	s14, s3, s13
    float c2 = y0my1 + c1 - c3;
 800c810:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c814:	ee77 7ac7 	vsub.f32	s15, s15, s14
    
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
 800c818:	eee7 7a02 	vfma.f32	s15, s14, s4
 800c81c:	ee67 7a82 	vmul.f32	s15, s15, s4
 800c820:	eee6 7a26 	vfma.f32	s15, s12, s13
}
 800c824:	eee7 0a82 	vfma.f32	s1, s15, s4
 800c828:	eeb0 0a60 	vmov.f32	s0, s1
 800c82c:	4770      	bx	lr
 800c82e:	bf00      	nop

0800c830 <LEAF_interpolation_linear>:

// alpha, [0.0, 1.0]
float LEAF_interpolation_linear (float A, float B, float alpha)
{
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
 800c830:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (val < tempmin)
 800c834:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800c854 <LEAF_interpolation_linear+0x24>
 800c838:	fe81 1a67 	vminnm.f32	s2, s2, s15
 800c83c:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    
    float omAlpha = 1.0f - alpha;
 800c840:	ee77 7ac1 	vsub.f32	s15, s15, s2
    
    // First 1/2 of interpolation
    float out = A * omAlpha;
    
    out += B * alpha;
 800c844:	ee61 0a20 	vmul.f32	s1, s2, s1
    
    return out;
}
 800c848:	eee7 0a80 	vfma.f32	s1, s15, s0
 800c84c:	eeb0 0a60 	vmov.f32	s0, s1
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop
 800c854:	00000000 	.word	0x00000000

0800c858 <mtof>:

#define LOGTEN 2.302585092994

float mtof(float f)
{
    if (f <= -1500.0f) return(0);
 800c858:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800c898 <mtof+0x40>
    else if (f > 1499.0f) return(mtof(1499.0f));
 800c85c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800c89c <mtof+0x44>
 800c860:	e006      	b.n	800c870 <mtof+0x18>
 800c862:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c86a:	dd09      	ble.n	800c880 <mtof+0x28>
 800c86c:	eeb0 0a67 	vmov.f32	s0, s15
    if (f <= -1500.0f) return(0);
 800c870:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c878:	d8f3      	bhi.n	800c862 <mtof+0xa>
 800c87a:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800c8a0 <mtof+0x48>
    else return (8.17579891564f * expf(0.0577622650f * f));
}
 800c87e:	4770      	bx	lr
    else return (8.17579891564f * expf(0.0577622650f * f));
 800c880:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c8a4 <mtof+0x4c>
{
 800c884:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
 800c886:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c88a:	f001 f8d1 	bl	800da30 <expf>
 800c88e:	eddf 7a06 	vldr	s15, [pc, #24]	; 800c8a8 <mtof+0x50>
 800c892:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 800c896:	bd08      	pop	{r3, pc}
 800c898:	c4bb8000 	.word	0xc4bb8000
 800c89c:	44bb6000 	.word	0x44bb6000
 800c8a0:	00000000 	.word	0x00000000
 800c8a4:	3d6c9820 	.word	0x3d6c9820
 800c8a8:	4102d013 	.word	0x4102d013

0800c8ac <faster_mtof>:
 800c8ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c8b0:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800c8ec <faster_mtof+0x40>
 800c8b4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800c8f0 <faster_mtof+0x44>
 800c8b8:	eee0 7a26 	vfma.f32	s15, s0, s13
 800c8bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c8c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c8c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c8c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c8cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c8d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c8d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c8d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c8dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c8e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c8e4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c8e8:	4770      	bx	lr
 800c8ea:	bf00      	nop
 800c8ec:	386c9820 	.word	0x386c9820
 800c8f0:	4102d013 	.word	0x4102d013

0800c8f4 <ftom>:
    return (8.17579891564f * fastexpf(0.0577622650f * f));
}

float ftom(float f)
{
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 800c8f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8fc:	dd0b      	ble.n	800c916 <ftom+0x22>
 800c8fe:	eddf 7a07 	vldr	s15, [pc, #28]	; 800c91c <ftom+0x28>
{
 800c902:	b508      	push	{r3, lr}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 800c904:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c908:	f001 f910 	bl	800db2c <logf>
 800c90c:	eddf 7a04 	vldr	s15, [pc, #16]	; 800c920 <ftom+0x2c>
 800c910:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 800c914:	bd08      	pop	{r3, pc}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 800c916:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800c924 <ftom+0x30>
}
 800c91a:	4770      	bx	lr
 800c91c:	3dfa7ed2 	.word	0x3dfa7ed2
 800c920:	418a7fac 	.word	0x418a7fac
 800c924:	c4bb8000 	.word	0xc4bb8000

0800c928 <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 800c928:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop

0800c930 <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 800c930:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 800c934:	4770      	bx	lr
 800c936:	bf00      	nop

0800c938 <leaf_pool_init>:
/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800c938:	6a03      	ldr	r3, [r0, #32]
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 800c93a:	b470      	push	{r4, r5, r6}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800c93c:	2610      	movs	r6, #16
    pool->usize  = 0;
 800c93e:	2400      	movs	r4, #0
    mpool_create(memory, size, &leaf->_internal_mempool);
 800c940:	f100 051c 	add.w	r5, r0, #28
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800c944:	635e      	str	r6, [r3, #52]	; 0x34
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800c946:	6a03      	ldr	r3, [r0, #32]
    pool->mpool = (char*)memory;
 800c948:	6241      	str	r1, [r0, #36]	; 0x24
    pool->usize  = 0;
 800c94a:	e9c0 420a 	strd	r4, r2, [r0, #40]	; 0x28
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800c94e:	6b5b      	ldr	r3, [r3, #52]	; 0x34

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
    node->next = next;
 800c950:	604c      	str	r4, [r1, #4]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800c952:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
 800c954:	440b      	add	r3, r1
    node->prev = prev;
 800c956:	608c      	str	r4, [r1, #8]
    node->pool = block_location + header_size;
 800c958:	600b      	str	r3, [r1, #0]
    node->size = size;
 800c95a:	60ca      	str	r2, [r1, #12]
    leaf->mempool = &leaf->_internal_mempool;
 800c95c:	6185      	str	r5, [r0, #24]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800c95e:	6301      	str	r1, [r0, #48]	; 0x30
}
 800c960:	bc70      	pop	{r4, r5, r6}
 800c962:	4770      	bx	lr

0800c964 <mpool_alloc>:
{
 800c964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 800c966:	684a      	ldr	r2, [r1, #4]
 800c968:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800c96a:	3301      	adds	r3, #1
 800c96c:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 800c96e:	694b      	ldr	r3, [r1, #20]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d044      	beq.n	800c9fe <mpool_alloc+0x9a>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800c974:	1dc4      	adds	r4, r0, #7
 800c976:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 800c97a:	e002      	b.n	800c982 <mpool_alloc+0x1e>
        node_to_alloc = node_to_alloc->next;
 800c97c:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d03d      	beq.n	800c9fe <mpool_alloc+0x9a>
    while (node_to_alloc->size < size_to_alloc)
 800c982:	68da      	ldr	r2, [r3, #12]
 800c984:	42a2      	cmp	r2, r4
 800c986:	d3f9      	bcc.n	800c97c <mpool_alloc+0x18>
    node_to_alloc->size = size_to_alloc;
 800c988:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800c98a:	1b15      	subs	r5, r2, r4
    if (leftover > pool->leaf->header_size)
 800c98c:	6848      	ldr	r0, [r1, #4]
 800c98e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800c990:	42a8      	cmp	r0, r5
 800c992:	d240      	bcs.n	800ca16 <mpool_alloc+0xb2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800c994:	688a      	ldr	r2, [r1, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 800c996:	4404      	add	r4, r0
                               node_to_alloc->next,
 800c998:	f8d3 c004 	ldr.w	ip, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 800c99c:	1a2d      	subs	r5, r5, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800c99e:	1a9e      	subs	r6, r3, r2
                               node_to_alloc->next,
 800c9a0:	689f      	ldr	r7, [r3, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 800c9a2:	4434      	add	r4, r6
        new_node = create_node(&pool->mpool[offset],
 800c9a4:	1916      	adds	r6, r2, r4
    node->pool = block_location + header_size;
 800c9a6:	4430      	add	r0, r6
 800c9a8:	5110      	str	r0, [r2, r4]
    node->size = size;
 800c9aa:	60f5      	str	r5, [r6, #12]
    node->next = next;
 800c9ac:	e9c6 c701 	strd	ip, r7, [r6, #4]
    if (pool->head == node_to_alloc)
 800c9b0:	694a      	ldr	r2, [r1, #20]
 800c9b2:	429a      	cmp	r2, r3
        pool->head = new_node;
 800c9b4:	bf08      	it	eq
 800c9b6:	614e      	streq	r6, [r1, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 800c9b8:	685a      	ldr	r2, [r3, #4]
 800c9ba:	b10a      	cbz	r2, 800c9c0 <mpool_alloc+0x5c>
    {
        // Close the link
        node->next->prev = node->prev;
 800c9bc:	6898      	ldr	r0, [r3, #8]
 800c9be:	6090      	str	r0, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 800c9c0:	689a      	ldr	r2, [r3, #8]
 800c9c2:	b10a      	cbz	r2, 800c9c8 <mpool_alloc+0x64>
    {
        // Close the link
        node->prev->next = node->next;
 800c9c4:	6858      	ldr	r0, [r3, #4]
 800c9c6:	6050      	str	r0, [r2, #4]
    }
    
    node->next = NULL;
 800c9c8:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800c9ca:	68dc      	ldr	r4, [r3, #12]
    node->prev = NULL;
 800c9cc:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800c9d0:	6848      	ldr	r0, [r1, #4]
 800c9d2:	68ca      	ldr	r2, [r1, #12]
 800c9d4:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800c9d6:	4432      	add	r2, r6
 800c9d8:	4422      	add	r2, r4
 800c9da:	60ca      	str	r2, [r1, #12]
    if (pool->leaf->clearOnAllocation > 0)
 800c9dc:	6942      	ldr	r2, [r0, #20]
 800c9de:	42aa      	cmp	r2, r5
 800c9e0:	dd0b      	ble.n	800c9fa <mpool_alloc+0x96>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800c9e2:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 800c9e4:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800c9e6:	b14a      	cbz	r2, 800c9fc <mpool_alloc+0x98>
 800c9e8:	1e41      	subs	r1, r0, #1
 800c9ea:	460a      	mov	r2, r1
 800c9ec:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c9f0:	68dc      	ldr	r4, [r3, #12]
 800c9f2:	3202      	adds	r2, #2
 800c9f4:	1a12      	subs	r2, r2, r0
 800c9f6:	4294      	cmp	r4, r2
 800c9f8:	d8f7      	bhi.n	800c9ea <mpool_alloc+0x86>
 800c9fa:	6818      	ldr	r0, [r3, #0]
}
 800c9fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 800c9fe:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
 800ca02:	1a9b      	subs	r3, r3, r2
 800ca04:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800ca06:	6848      	ldr	r0, [r1, #4]
 800ca08:	bf8c      	ite	hi
 800ca0a:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800ca0c:	2100      	movls	r1, #0
 800ca0e:	f000 fe4d 	bl	800d6ac <LEAF_internalErrorCallback>
        return NULL;
 800ca12:	2000      	movs	r0, #0
}
 800ca14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 800ca16:	685e      	ldr	r6, [r3, #4]
        node_to_alloc->size += leftover;
 800ca18:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 800ca1a:	e7c9      	b.n	800c9b0 <mpool_alloc+0x4c>

0800ca1c <mpool_calloc>:
{
 800ca1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 800ca1e:	684a      	ldr	r2, [r1, #4]
 800ca20:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800ca22:	3301      	adds	r3, #1
 800ca24:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 800ca26:	694b      	ldr	r3, [r1, #20]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d03e      	beq.n	800caaa <mpool_calloc+0x8e>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800ca2c:	1dc4      	adds	r4, r0, #7
 800ca2e:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 800ca32:	e002      	b.n	800ca3a <mpool_calloc+0x1e>
        node_to_alloc = node_to_alloc->next;
 800ca34:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d037      	beq.n	800caaa <mpool_calloc+0x8e>
    while (node_to_alloc->size < size_to_alloc)
 800ca3a:	68da      	ldr	r2, [r3, #12]
 800ca3c:	42a2      	cmp	r2, r4
 800ca3e:	d3f9      	bcc.n	800ca34 <mpool_calloc+0x18>
    node_to_alloc->size = size_to_alloc;
 800ca40:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800ca42:	1b15      	subs	r5, r2, r4
    if (leftover > pool->leaf->header_size)
 800ca44:	6848      	ldr	r0, [r1, #4]
 800ca46:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800ca48:	42a8      	cmp	r0, r5
 800ca4a:	d23a      	bcs.n	800cac2 <mpool_calloc+0xa6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800ca4c:	688a      	ldr	r2, [r1, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 800ca4e:	4404      	add	r4, r0
                               node_to_alloc->next,
 800ca50:	f8d3 c004 	ldr.w	ip, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 800ca54:	1a2d      	subs	r5, r5, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800ca56:	1a9e      	subs	r6, r3, r2
                               node_to_alloc->next,
 800ca58:	689f      	ldr	r7, [r3, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 800ca5a:	4434      	add	r4, r6
        new_node = create_node(&pool->mpool[offset],
 800ca5c:	1916      	adds	r6, r2, r4
    node->pool = block_location + header_size;
 800ca5e:	4430      	add	r0, r6
 800ca60:	5110      	str	r0, [r2, r4]
    node->size = size;
 800ca62:	60f5      	str	r5, [r6, #12]
    node->next = next;
 800ca64:	e9c6 c701 	strd	ip, r7, [r6, #4]
    if (pool->head == node_to_alloc)
 800ca68:	694a      	ldr	r2, [r1, #20]
 800ca6a:	429a      	cmp	r2, r3
        pool->head = new_node;
 800ca6c:	bf08      	it	eq
 800ca6e:	614e      	streq	r6, [r1, #20]
    if (node->next != NULL)
 800ca70:	685a      	ldr	r2, [r3, #4]
 800ca72:	b10a      	cbz	r2, 800ca78 <mpool_calloc+0x5c>
        node->next->prev = node->prev;
 800ca74:	6898      	ldr	r0, [r3, #8]
 800ca76:	6090      	str	r0, [r2, #8]
    if (node->prev != NULL)
 800ca78:	689a      	ldr	r2, [r3, #8]
 800ca7a:	b10a      	cbz	r2, 800ca80 <mpool_calloc+0x64>
        node->prev->next = node->next;
 800ca7c:	6858      	ldr	r0, [r3, #4]
 800ca7e:	6050      	str	r0, [r2, #4]
    node->next = NULL;
 800ca80:	2200      	movs	r2, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800ca82:	68dc      	ldr	r4, [r3, #12]
    node->prev = NULL;
 800ca84:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800ca88:	6848      	ldr	r0, [r1, #4]
 800ca8a:	68cd      	ldr	r5, [r1, #12]
 800ca8c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800ca8e:	4428      	add	r0, r5
 800ca90:	4420      	add	r0, r4
 800ca92:	60c8      	str	r0, [r1, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 800ca94:	68d9      	ldr	r1, [r3, #12]
 800ca96:	b131      	cbz	r1, 800caa6 <mpool_calloc+0x8a>
 800ca98:	4610      	mov	r0, r2
 800ca9a:	6819      	ldr	r1, [r3, #0]
 800ca9c:	5488      	strb	r0, [r1, r2]
 800ca9e:	3201      	adds	r2, #1
 800caa0:	68d9      	ldr	r1, [r3, #12]
 800caa2:	4291      	cmp	r1, r2
 800caa4:	d8f9      	bhi.n	800ca9a <mpool_calloc+0x7e>
    return node_to_alloc->pool;
 800caa6:	6818      	ldr	r0, [r3, #0]
}
 800caa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 800caaa:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
 800caae:	1a9b      	subs	r3, r3, r2
 800cab0:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800cab2:	6848      	ldr	r0, [r1, #4]
 800cab4:	bf8c      	ite	hi
 800cab6:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800cab8:	2100      	movls	r1, #0
 800caba:	f000 fdf7 	bl	800d6ac <LEAF_internalErrorCallback>
        return NULL;
 800cabe:	2000      	movs	r0, #0
}
 800cac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 800cac2:	685e      	ldr	r6, [r3, #4]
        node_to_alloc->size += leftover;
 800cac4:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 800cac6:	e7cf      	b.n	800ca68 <mpool_calloc+0x4c>

0800cac8 <tMempool_init>:
}

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 800cac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
 800cacc:	699c      	ldr	r4, [r3, #24]
{
 800cace:	4680      	mov	r8, r0
 800cad0:	b083      	sub	sp, #12
    pool->leaf->allocCount++;
 800cad2:	6860      	ldr	r0, [r4, #4]
 800cad4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800cad6:	3301      	adds	r3, #1
 800cad8:	6483      	str	r3, [r0, #72]	; 0x48
    if (pool->head == NULL)
 800cada:	6963      	ldr	r3, [r4, #20]
 800cadc:	b91b      	cbnz	r3, 800cae6 <tMempool_init+0x1e>
 800cade:	e064      	b.n	800cbaa <tMempool_init+0xe2>
        node_to_alloc = node_to_alloc->next;
 800cae0:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d061      	beq.n	800cbaa <tMempool_init+0xe2>
    while (node_to_alloc->size < size_to_alloc)
 800cae6:	68d8      	ldr	r0, [r3, #12]
 800cae8:	2817      	cmp	r0, #23
 800caea:	d9f9      	bls.n	800cae0 <tMempool_init+0x18>
    node_to_alloc->size = size_to_alloc;
 800caec:	2518      	movs	r5, #24
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800caee:	f1a0 0618 	sub.w	r6, r0, #24
    node_to_alloc->size = size_to_alloc;
 800caf2:	60dd      	str	r5, [r3, #12]
    if (leftover > pool->leaf->header_size)
 800caf4:	6865      	ldr	r5, [r4, #4]
 800caf6:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800caf8:	42ae      	cmp	r6, r5
 800cafa:	d953      	bls.n	800cba4 <tMempool_init+0xdc>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800cafc:	f8d4 c008 	ldr.w	ip, [r4, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 800cb00:	f105 0018 	add.w	r0, r5, #24
                               node_to_alloc->next,
 800cb04:	f8d3 9004 	ldr.w	r9, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 800cb08:	1b76      	subs	r6, r6, r5
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800cb0a:	eba3 070c 	sub.w	r7, r3, ip
                               node_to_alloc->next,
 800cb0e:	f8d3 e008 	ldr.w	lr, [r3, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 800cb12:	4438      	add	r0, r7
        new_node = create_node(&pool->mpool[offset],
 800cb14:	eb0c 0700 	add.w	r7, ip, r0
    node->pool = block_location + header_size;
 800cb18:	443d      	add	r5, r7
 800cb1a:	f84c 5000 	str.w	r5, [ip, r0]
    node->size = size;
 800cb1e:	60fe      	str	r6, [r7, #12]
    node->next = next;
 800cb20:	e9c7 9e01 	strd	r9, lr, [r7, #4]
    if (pool->head == node_to_alloc)
 800cb24:	6960      	ldr	r0, [r4, #20]
 800cb26:	4283      	cmp	r3, r0
        pool->head = new_node;
 800cb28:	bf08      	it	eq
 800cb2a:	6167      	streq	r7, [r4, #20]
    if (node->next != NULL)
 800cb2c:	6858      	ldr	r0, [r3, #4]
 800cb2e:	b108      	cbz	r0, 800cb34 <tMempool_init+0x6c>
        node->next->prev = node->prev;
 800cb30:	689d      	ldr	r5, [r3, #8]
 800cb32:	6085      	str	r5, [r0, #8]
    if (node->prev != NULL)
 800cb34:	6898      	ldr	r0, [r3, #8]
 800cb36:	b108      	cbz	r0, 800cb3c <tMempool_init+0x74>
        node->prev->next = node->next;
 800cb38:	685d      	ldr	r5, [r3, #4]
 800cb3a:	6045      	str	r5, [r0, #4]
    node->next = NULL;
 800cb3c:	2700      	movs	r7, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800cb3e:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
 800cb40:	e9c3 7701 	strd	r7, r7, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800cb44:	6866      	ldr	r6, [r4, #4]
 800cb46:	68e5      	ldr	r5, [r4, #12]
 800cb48:	9001      	str	r0, [sp, #4]
 800cb4a:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800cb4c:	4405      	add	r5, r0
 800cb4e:	4628      	mov	r0, r5
 800cb50:	9d01      	ldr	r5, [sp, #4]
 800cb52:	4405      	add	r5, r0
 800cb54:	60e5      	str	r5, [r4, #12]
    if (pool->leaf->clearOnAllocation > 0)
 800cb56:	6970      	ldr	r0, [r6, #20]
 800cb58:	42b8      	cmp	r0, r7
 800cb5a:	dd0c      	ble.n	800cb76 <tMempool_init+0xae>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800cb5c:	68d8      	ldr	r0, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 800cb5e:	681e      	ldr	r6, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800cb60:	b150      	cbz	r0, 800cb78 <tMempool_init+0xb0>
 800cb62:	46bc      	mov	ip, r7
 800cb64:	1e70      	subs	r0, r6, #1
 800cb66:	4605      	mov	r5, r0
 800cb68:	f800 cf01 	strb.w	ip, [r0, #1]!
 800cb6c:	68df      	ldr	r7, [r3, #12]
 800cb6e:	3502      	adds	r5, #2
 800cb70:	1bad      	subs	r5, r5, r6
 800cb72:	42af      	cmp	r7, r5
 800cb74:	d8f7      	bhi.n	800cb66 <tMempool_init+0x9e>
 800cb76:	681e      	ldr	r6, [r3, #0]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 800cb78:	f8c8 6000 	str.w	r6, [r8]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800cb7c:	2510      	movs	r5, #16
    m->leaf = mm->leaf;
 800cb7e:	6863      	ldr	r3, [r4, #4]
    pool->usize  = 0;
 800cb80:	2000      	movs	r0, #0
    m->leaf = mm->leaf;
 800cb82:	6073      	str	r3, [r6, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800cb84:	635d      	str	r5, [r3, #52]	; 0x34
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800cb86:	6873      	ldr	r3, [r6, #4]
    pool->mpool = (char*)memory;
 800cb88:	60b1      	str	r1, [r6, #8]
    pool->usize  = 0;
 800cb8a:	e9c6 0203 	strd	r0, r2, [r6, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800cb8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    node->next = next;
 800cb90:	6048      	str	r0, [r1, #4]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800cb92:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
 800cb94:	440b      	add	r3, r1
    node->size = size;
 800cb96:	e9c1 0202 	strd	r0, r2, [r1, #8]
    node->pool = block_location + header_size;
 800cb9a:	600b      	str	r3, [r1, #0]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800cb9c:	6171      	str	r1, [r6, #20]
}
 800cb9e:	b003      	add	sp, #12
 800cba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        new_node = node_to_alloc->next;
 800cba4:	685f      	ldr	r7, [r3, #4]
        node_to_alloc->size += leftover;
 800cba6:	60d8      	str	r0, [r3, #12]
        new_node = node_to_alloc->next;
 800cba8:	e7bc      	b.n	800cb24 <tMempool_init+0x5c>
            if ((pool->msize - pool->usize) > asize)
 800cbaa:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800cbae:	6860      	ldr	r0, [r4, #4]
            if ((pool->msize - pool->usize) > asize)
 800cbb0:	1a52      	subs	r2, r2, r1
 800cbb2:	2a18      	cmp	r2, #24
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800cbb4:	bf94      	ite	ls
 800cbb6:	4619      	movls	r1, r3
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800cbb8:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800cbba:	f000 fd77 	bl	800d6ac <LEAF_internalErrorCallback>
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	f8c8 3000 	str.w	r3, [r8]
    m->leaf = mm->leaf;
 800cbc4:	6862      	ldr	r2, [r4, #4]
 800cbc6:	605a      	str	r2, [r3, #4]
 800cbc8:	deff      	udf	#255	; 0xff
 800cbca:	bf00      	nop

0800cbcc <tCycle_init>:
#endif

#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
 800cbcc:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 800cbce:	698c      	ldr	r4, [r1, #24]
{
 800cbd0:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 800cbd2:	2018      	movs	r0, #24
 800cbd4:	4621      	mov	r1, r4
 800cbd6:	f7ff fec5 	bl	800c964 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 800cbda:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 800cbdc:	6028      	str	r0, [r5, #0]
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
    c->mask = SINE_TABLE_SIZE - 1;
 800cbde:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
 800cbe2:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 800cbe4:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 800cbe6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800cc00 <tCycle_init+0x34>
    c->phase    =  0;
 800cbea:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 800cbee:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 800cbf2:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 800cbf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cbf8:	edc0 7a04 	vstr	s15, [r0, #16]
}
 800cbfc:	bd38      	pop	{r3, r4, r5, pc}
 800cbfe:	bf00      	nop
 800cc00:	4f800000 	.word	0x4f800000

0800cc04 <tCycle_setFreq>:
    mpool_free((char*)c, c->mempool);
}

void     tCycle_setFreq(tCycle* const cy, float freq)
{
    _tCycle* c = *cy;
 800cc04:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;

    c->inc = freq * c->invSampleRateTimesTwoTo32;
 800cc06:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 800cc0a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 800cc0e:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cc12:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800cc16:	ed83 0a02 	vstr	s0, [r3, #8]
}
 800cc1a:	4770      	bx	lr

0800cc1c <tCycle_tick>:

//need to check bounds and wrap table properly to allow through-zero FM
float   tCycle_tick(tCycle* const cy)
{
 800cc1c:	b410      	push	{r4}
    _tCycle* c = *cy;
 800cc1e:	6803      	ldr	r3, [r0, #0]
    // Wavetable synthesis

    temp = ((float)c->phase * 0.000000476837158f);
    idx = ((int)temp) & c->mask;
    frac = temp - (float)idx;
    samp0 = __leaf_table_sinewave[idx];
 800cc20:	4a13      	ldr	r2, [pc, #76]	; (800cc70 <tCycle_tick+0x54>)
    idx = ((int)temp) & c->mask;
 800cc22:	6958      	ldr	r0, [r3, #20]
    c->phase += c->inc;
 800cc24:	e9d3 1401 	ldrd	r1, r4, [r3, #4]
 800cc28:	4421      	add	r1, r4
    temp = ((float)c->phase * 0.000000476837158f);
 800cc2a:	ee07 1a10 	vmov	s14, r1
    c->phase += c->inc;
 800cc2e:	6059      	str	r1, [r3, #4]
    temp = ((float)c->phase * 0.000000476837158f);
 800cc30:	eebb 7ae5 	vcvt.f32.u32	s14, s14, #21
    idx = ((int)temp) & c->mask;
 800cc34:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800cc38:	ee17 3a90 	vmov	r3, s15
 800cc3c:	4003      	ands	r3, r0
    idx = (idx + 1) & c->mask;
 800cc3e:	1c59      	adds	r1, r3, #1
    frac = temp - (float)idx;
 800cc40:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
 800cc44:	eb02 0483 	add.w	r4, r2, r3, lsl #2
    idx = (idx + 1) & c->mask;
 800cc48:	ea01 0300 	and.w	r3, r1, r0
    frac = temp - (float)idx;
 800cc4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
 800cc50:	ed94 0a00 	vldr	s0, [r4]
    samp1 = __leaf_table_sinewave[idx];
 800cc54:	eb02 0283 	add.w	r2, r2, r3, lsl #2

    return (samp0 + (samp1 - samp0) * frac);
}
 800cc58:	f85d 4b04 	ldr.w	r4, [sp], #4
    frac = temp - (float)idx;
 800cc5c:	ee77 7a67 	vsub.f32	s15, s14, s15
    return (samp0 + (samp1 - samp0) * frac);
 800cc60:	ed92 7a00 	vldr	s14, [r2]
 800cc64:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 800cc68:	eea7 0a27 	vfma.f32	s0, s14, s15
 800cc6c:	4770      	bx	lr
 800cc6e:	bf00      	nop
 800cc70:	08012ffc 	.word	0x08012ffc

0800cc74 <tPBPulse_init>:

//==============================================================================

/* tPulse: Anti-aliased pulse waveform. */
void    tPBPulse_init        (tPBPulse* const osc, LEAF* const leaf)
{
 800cc74:	b538      	push	{r3, r4, r5, lr}
    tPBPulse_initToPool(osc, &leaf->mempool);
}

void    tPBPulse_initToPool  (tPBPulse* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 800cc76:	698c      	ldr	r4, [r1, #24]
{
 800cc78:	4605      	mov	r5, r0
    _tPBPulse* c = *osc = (_tPBPulse*) mpool_alloc(sizeof(_tPBPulse), m);
 800cc7a:	2018      	movs	r0, #24
 800cc7c:	4621      	mov	r1, r4
 800cc7e:	f7ff fe71 	bl	800c964 <mpool_alloc>
 800cc82:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 800cc84:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->inc      =  0.0f;
 800cc86:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 800cc88:	6862      	ldr	r2, [r4, #4]
    c->phase    =  0.0f;
    c->width     =  0.5f;
 800cc8a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
 800cc8e:	6852      	ldr	r2, [r2, #4]
    c->width     =  0.5f;
 800cc90:	6101      	str	r1, [r0, #16]
    c->invSampleRate = leaf->invSampleRate;
 800cc92:	6142      	str	r2, [r0, #20]
    c->inc      =  0.0f;
 800cc94:	6083      	str	r3, [r0, #8]
    c->phase    =  0.0f;
 800cc96:	6043      	str	r3, [r0, #4]
}
 800cc98:	bd38      	pop	{r3, r4, r5, pc}
 800cc9a:	bf00      	nop

0800cc9c <tPBPulse_tick>:
    
    mpool_free((char*)c, c->mempool);
}

float   tPBPulse_tick        (tPBPulse* const osc)
{
 800cc9c:	b510      	push	{r4, lr}
    _tPBPulse* c = *osc;
 800cc9e:	6804      	ldr	r4, [r0, #0]
{
 800cca0:	ed2d 8b04 	vpush	{d8-d9}
    
    float out;
    if (c->phase < c->width) out = 1.0f;
 800cca4:	edd4 7a04 	vldr	s15, [r4, #16]
    else out = -1.0f;
 800cca8:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    if (c->phase < c->width) out = 1.0f;
 800ccac:	ed94 0a01 	vldr	s0, [r4, #4]
    else out = -1.0f;
 800ccb0:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
    out += LEAF_poly_blep(c->phase, c->inc);
 800ccb4:	edd4 0a02 	vldr	s1, [r4, #8]
    else out = -1.0f;
 800ccb8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ccbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccc0:	bf54      	ite	pl
 800ccc2:	eef0 8a48 	vmovpl.f32	s17, s16
 800ccc6:	eef0 8a49 	vmovmi.f32	s17, s18
    out += LEAF_poly_blep(c->phase, c->inc);
 800ccca:	f7ff fd63 	bl	800c794 <LEAF_poly_blep>
    out -= LEAF_poly_blep(fmodf(c->phase + (1.0f - c->width), 1.0f), c->inc);
 800ccce:	edd4 7a01 	vldr	s15, [r4, #4]
 800ccd2:	eef0 0a49 	vmov.f32	s1, s18
 800ccd6:	ed94 7a04 	vldr	s14, [r4, #16]
 800ccda:	ee77 7a89 	vadd.f32	s15, s15, s18
    out += LEAF_poly_blep(c->phase, c->inc);
 800ccde:	ee78 8a80 	vadd.f32	s17, s17, s0
    out -= LEAF_poly_blep(fmodf(c->phase + (1.0f - c->width), 1.0f), c->inc);
 800cce2:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800cce6:	f001 f993 	bl	800e010 <fmodf>
 800ccea:	edd4 0a02 	vldr	s1, [r4, #8]
 800ccee:	f7ff fd51 	bl	800c794 <LEAF_poly_blep>
    
    c->phase += c->inc - (int)c->inc;
 800ccf2:	ed94 7a02 	vldr	s14, [r4, #8]
 800ccf6:	edd4 6a01 	vldr	s13, [r4, #4]
    out -= LEAF_poly_blep(fmodf(c->phase + (1.0f - c->width), 1.0f), c->inc);
 800ccfa:	ee38 0ac0 	vsub.f32	s0, s17, s0
    c->phase += c->inc - (int)c->inc;
 800ccfe:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800cd02:	ee37 7a26 	vadd.f32	s14, s14, s13
 800cd06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd0a:	ee77 7a67 	vsub.f32	s15, s14, s15
    if (c->phase >= 1.0f) c->phase -= 1.0f;
 800cd0e:	eef4 7ac9 	vcmpe.f32	s15, s18
 800cd12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd16:	bfa8      	it	ge
 800cd18:	ee77 7ac9 	vsubge.f32	s15, s15, s18
    if (c->phase < 0.0f) c->phase += 1.0f;
 800cd1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    if (c->phase >= 1.0f) c->phase -= 1.0f;
 800cd20:	edc4 7a01 	vstr	s15, [r4, #4]
    if (c->phase < 0.0f) c->phase += 1.0f;
 800cd24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd28:	d505      	bpl.n	800cd36 <tPBPulse_tick+0x9a>
 800cd2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cd32:	edc4 7a01 	vstr	s15, [r4, #4]
    
    return out;
}
 800cd36:	ecbd 8b04 	vpop	{d8-d9}
 800cd3a:	bd10      	pop	{r4, pc}

0800cd3c <tPBPulse_setFreq>:

void    tPBPulse_setFreq     (tPBPulse* const osc, float freq)
{
    _tPBPulse* c = *osc;
 800cd3c:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRate;
 800cd3e:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 800cd42:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
 800cd46:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cd4a:	ed83 0a02 	vstr	s0, [r3, #8]
}
 800cd4e:	4770      	bx	lr

0800cd50 <tPBPulse_setWidth>:

void    tPBPulse_setWidth    (tPBPulse* const osc, float width)
{
    _tPBPulse* c = *osc;
 800cd50:	6803      	ldr	r3, [r0, #0]
    c->width = width;
 800cd52:	ed83 0a04 	vstr	s0, [r3, #16]
}
 800cd56:	4770      	bx	lr

0800cd58 <tNoise_init>:
};

//========================================================================
/* Noise */
void    tNoise_init(tNoise* const ns, NoiseType type, LEAF* const leaf)
{
 800cd58:	b570      	push	{r4, r5, r6, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
    _tMempool* m = *mp;
 800cd5a:	6995      	ldr	r5, [r2, #24]
{
 800cd5c:	4606      	mov	r6, r0
 800cd5e:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 800cd60:	2018      	movs	r0, #24
 800cd62:	4629      	mov	r1, r5
 800cd64:	f7ff fdfe 	bl	800c964 <mpool_alloc>
 800cd68:	6030      	str	r0, [r6, #0]
    n->mempool = m;
 800cd6a:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
 800cd6c:	686b      	ldr	r3, [r5, #4]
    
    n->type = type;
 800cd6e:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
 800cd70:	691b      	ldr	r3, [r3, #16]
 800cd72:	6143      	str	r3, [r0, #20]
}
 800cd74:	bd70      	pop	{r4, r5, r6, pc}
 800cd76:	bf00      	nop

0800cd78 <tNoise_tick>:
    
    mpool_free((char*)n, n->mempool);
}

float   tNoise_tick(tNoise* const ns)
{
 800cd78:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
 800cd7a:	6804      	ldr	r4, [r0, #0]
    
    float rand = (n->rand() * 2.0f) - 1.0f;
 800cd7c:	6963      	ldr	r3, [r4, #20]
 800cd7e:	4798      	blx	r3
 800cd80:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800cd84:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    
    if (n->type == PinkNoise)
 800cd88:	7923      	ldrb	r3, [r4, #4]
 800cd8a:	2b01      	cmp	r3, #1
    float rand = (n->rand() * 2.0f) - 1.0f;
 800cd8c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cd90:	eeb0 0a67 	vmov.f32	s0, s15
    if (n->type == PinkNoise)
 800cd94:	d000      	beq.n	800cd98 <tNoise_tick+0x20>
    }
    else // WhiteNoise
    {
        return rand;
    }
}
 800cd96:	bd10      	pop	{r4, pc}
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 800cd98:	eddf 7a18 	vldr	s15, [pc, #96]	; 800cdfc <tNoise_tick+0x84>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 800cd9c:	eddf 6a18 	vldr	s13, [pc, #96]	; 800ce00 <tNoise_tick+0x88>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 800cda0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800cda4:	ed94 5a02 	vldr	s10, [r4, #8]
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 800cda8:	ee60 6a26 	vmul.f32	s13, s0, s13
 800cdac:	edd4 5a03 	vldr	s11, [r4, #12]
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 800cdb0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800ce04 <tNoise_tick+0x8c>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 800cdb4:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800ce08 <tNoise_tick+0x90>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 800cdb8:	eee5 7a07 	vfma.f32	s15, s10, s14
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 800cdbc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800ce0c <tNoise_tick+0x94>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 800cdc0:	eee5 6a86 	vfma.f32	s13, s11, s12
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 800cdc4:	edd4 4a04 	vldr	s9, [r4, #16]
 800cdc8:	ee20 7a07 	vmul.f32	s14, s0, s14
 800cdcc:	eddf 5a10 	vldr	s11, [pc, #64]	; 800ce10 <tNoise_tick+0x98>
 800cdd0:	ed9f 5a10 	vldr	s10, [pc, #64]	; 800ce14 <tNoise_tick+0x9c>
        return (tmp * 0.05f);
 800cdd4:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800ce18 <tNoise_tick+0xa0>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 800cdd8:	eea4 7a85 	vfma.f32	s14, s9, s10
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 800cddc:	edc4 7a02 	vstr	s15, [r4, #8]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 800cde0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 800cde4:	edc4 6a03 	vstr	s13, [r4, #12]
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 800cde8:	eee0 7a25 	vfma.f32	s15, s0, s11
 800cdec:	ed84 7a04 	vstr	s14, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 800cdf0:	ee77 7a27 	vadd.f32	s15, s14, s15
        return (tmp * 0.05f);
 800cdf4:	ee27 0a86 	vmul.f32	s0, s15, s12
}
 800cdf8:	bd10      	pop	{r4, pc}
 800cdfa:	bf00      	nop
 800cdfc:	3dcad8a1 	.word	0x3dcad8a1
 800ce00:	3e97d0ff 	.word	0x3e97d0ff
 800ce04:	3f7f65fe 	.word	0x3f7f65fe
 800ce08:	3f76872b 	.word	0x3f76872b
 800ce0c:	3f86be97 	.word	0x3f86be97
 800ce10:	3e3d3c36 	.word	0x3e3d3c36
 800ce14:	3f11eb85 	.word	0x3f11eb85
 800ce18:	3d4ccccd 	.word	0x3d4ccccd

0800ce1c <tLivingString2_initToPool>:
}

void    tLivingString2_initToPool    (tLivingString2* const pl, float freq, float pickPos, float prepPos, float pickupPos, float prepIndex,
                                     float brightness, float decay, float targetLev, float levSmoothFactor,
                                     float levStrength, int levMode, tMempool* const mp)
{
 800ce1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce20:	ed2d 8b0e 	vpush	{d8-d14}
    _tMempool* m = *mp;
 800ce24:	f8d2 8000 	ldr.w	r8, [r2]
{
 800ce28:	b083      	sub	sp, #12
 800ce2a:	4606      	mov	r6, r0
 800ce2c:	460f      	mov	r7, r1
    _tLivingString2* p = *pl = (_tLivingString2*) mpool_alloc(sizeof(_tLivingString2), m);
 800ce2e:	2070      	movs	r0, #112	; 0x70
 800ce30:	4641      	mov	r1, r8
{
 800ce32:	eeb0 8a42 	vmov.f32	s16, s4
 800ce36:	4615      	mov	r5, r2
 800ce38:	eef0 9a62 	vmov.f32	s19, s5
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;

    p->sampleRate = leaf->sampleRate;
    p->curr=0.0f;
 800ce3c:	eddf da99 	vldr	s27, [pc, #612]	; 800d0a4 <tLivingString2_initToPool+0x288>
{
 800ce40:	eef0 aa63 	vmov.f32	s21, s7
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
    tLivingString2_setFreq(pl, freq);
    p->freq = freq;
    p->prepPos = prepPos;
    tExpSmooth_initToPool(&p->ppSmooth, pickPos, 0.01f, mp); // smoother for pick position
 800ce44:	ed9f ea98 	vldr	s28, [pc, #608]	; 800d0a8 <tLivingString2_initToPool+0x28c>
{
 800ce48:	eeb0 ba44 	vmov.f32	s22, s8
 800ce4c:	eef0 ba64 	vmov.f32	s23, s9
 800ce50:	eef0 ca43 	vmov.f32	s25, s6
 800ce54:	eef0 8a41 	vmov.f32	s17, s2
 800ce58:	eeb0 ca61 	vmov.f32	s24, s3
 800ce5c:	eeb0 aa40 	vmov.f32	s20, s0
 800ce60:	eeb0 9a60 	vmov.f32	s18, s1
    _tLivingString2* p = *pl = (_tLivingString2*) mpool_alloc(sizeof(_tLivingString2), m);
 800ce64:	f7ff fd7e 	bl	800c964 <mpool_alloc>
 800ce68:	4604      	mov	r4, r0
 800ce6a:	6030      	str	r0, [r6, #0]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 800ce6c:	4629      	mov	r1, r5
 800ce6e:	eddf 0a8f 	vldr	s1, [pc, #572]	; 800d0ac <tLivingString2_initToPool+0x290>
    p->mempool = m;
 800ce72:	f8c4 8000 	str.w	r8, [r4]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 800ce76:	305c      	adds	r0, #92	; 0x5c
    p->sampleRate = leaf->sampleRate;
 800ce78:	f8d8 3004 	ldr.w	r3, [r8, #4]
    
    if (freq<20.f) freq=20.f;
    else if (freq>10000.f) freq=10000.f;
    freq = freq*2;
    p->freq = freq;
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 800ce7c:	eeb7 da00 	vmov.f32	s26, #112	; 0x3f800000  1.0
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
 800ce80:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
    tHermiteDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
 800ce84:	f104 0b30 	add.w	fp, r4, #48	; 0x30
    p->sampleRate = leaf->sampleRate;
 800ce88:	ed93 0a00 	vldr	s0, [r3]
    tHermiteDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
 800ce8c:	f104 0934 	add.w	r9, r4, #52	; 0x34
    p->curr=0.0f;
 800ce90:	edc4 da0a 	vstr	s27, [r4, #40]	; 0x28
    tHermiteDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
 800ce94:	f104 0838 	add.w	r8, r4, #56	; 0x38
    p->sampleRate = leaf->sampleRate;
 800ce98:	ed84 0a1b 	vstr	s0, [r4, #108]	; 0x6c
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 800ce9c:	ee80 0a0a 	vdiv.f32	s0, s0, s20
 800cea0:	f7ff f858 	bl	800bf54 <tExpSmooth_initToPool>
    _tLivingString2* p = *pl;
 800cea4:	eddf 7a82 	vldr	s15, [pc, #520]	; 800d0b0 <tLivingString2_initToPool+0x294>
 800cea8:	6833      	ldr	r3, [r6, #0]
    if (freq<20.f) freq=20.f;
 800ceaa:	feca 7a67 	vminnm.f32	s15, s20, s15
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 800ceae:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 800ceb2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800ceb6:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800ceba:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    freq = freq*2;
 800cebe:	ee77 7aa7 	vadd.f32	s15, s15, s15
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 800cec2:	ee87 0a27 	vdiv.f32	s0, s14, s15
    p->freq = freq;
 800cec6:	edc3 7a01 	vstr	s15, [r3, #4]
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 800ceca:	ee30 0a4d 	vsub.f32	s0, s0, s26
 800cece:	ed83 0a02 	vstr	s0, [r3, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 800ced2:	f7ff f86b 	bl	800bfac <tExpSmooth_setDest>
    tExpSmooth_initToPool(&p->ppSmooth, pickPos, 0.01f, mp); // smoother for pick position
 800ced6:	eeb0 0a49 	vmov.f32	s0, s18
 800ceda:	eef0 0a4e 	vmov.f32	s1, s28
 800cede:	4629      	mov	r1, r5
 800cee0:	f104 0060 	add.w	r0, r4, #96	; 0x60
    p->freq = freq;
 800cee4:	ed84 aa01 	vstr	s20, [r4, #4]
    p->prepPos = prepPos;
 800cee8:	edc4 8a04 	vstr	s17, [r4, #16]
    tExpSmooth_initToPool(&p->ppSmooth, pickPos, 0.01f, mp); // smoother for pick position
 800ceec:	f7ff f832 	bl	800bf54 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->prpSmooth, prepPos, 0.01f, mp); // smoother for prep position
 800cef0:	eef0 0a4e 	vmov.f32	s1, s28
 800cef4:	eeb0 0a68 	vmov.f32	s0, s17
 800cef8:	4629      	mov	r1, r5
 800cefa:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800cefe:	f7ff f829 	bl	800bf54 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->puSmooth, pickupPos, 0.01f, mp); // smoother for pickup position
 800cf02:	eef0 0a4e 	vmov.f32	s1, s28
 800cf06:	4629      	mov	r1, r5
 800cf08:	eeb0 0a4c 	vmov.f32	s0, s24
 800cf0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cf10:	f7ff f820 	bl	800bf54 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
}

void     tLivingString2_setPickPos(tLivingString2* const pl, float pickPos)
{    // between 0 and 1
    _tLivingString2* p = *pl;
 800cf14:	6833      	ldr	r3, [r6, #0]
    if (pickPos<0.f) pickPos=0.f;
 800cf16:	fe89 0a4d 	vminnm.f32	s0, s18, s26
 800cf1a:	fe80 0a2d 	vmaxnm.f32	s0, s0, s27
    else if (pickPos>1.f) pickPos=1.f;
    p->pickPos = pickPos;
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
 800cf1e:	f103 0060 	add.w	r0, r3, #96	; 0x60
    p->pickPos = pickPos;
 800cf22:	ed83 0a03 	vstr	s0, [r3, #12]
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
 800cf26:	f7ff f841 	bl	800bfac <tExpSmooth_setDest>
}

void     tLivingString2_setPrepPos(tLivingString2* const pl, float prepPos)
{    // between 0 and 1
    _tLivingString2* p = *pl;
 800cf2a:	6833      	ldr	r3, [r6, #0]
    if (prepPos<0.f) prepPos=0.f;
 800cf2c:	fe88 0acd 	vminnm.f32	s0, s17, s26
 800cf30:	fe80 0a2d 	vmaxnm.f32	s0, s0, s27
    else if (prepPos>1.f) prepPos=1.f;
    p->prepPos = prepPos;
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
 800cf34:	f103 0064 	add.w	r0, r3, #100	; 0x64
    p->prepPos = prepPos;
 800cf38:	ed83 0a04 	vstr	s0, [r3, #16]
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
 800cf3c:	f7ff f836 	bl	800bfac <tExpSmooth_setDest>
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
 800cf40:	4650      	mov	r0, sl
 800cf42:	462a      	mov	r2, r5
 800cf44:	ed94 0a02 	vldr	s0, [r4, #8]
 800cf48:	f44f 6116 	mov.w	r1, #2400	; 0x960
    p->pickupPos = pickupPos;
 800cf4c:	ed84 ca05 	vstr	s24, [r4, #20]
    p->prepIndex = prepIndex;
 800cf50:	ed84 8a06 	vstr	s16, [r4, #24]
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
 800cf54:	f7fe fb6e 	bl	800b634 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
 800cf58:	4658      	mov	r0, fp
 800cf5a:	462a      	mov	r2, r5
 800cf5c:	ed94 0a02 	vldr	s0, [r4, #8]
 800cf60:	f44f 6116 	mov.w	r1, #2400	; 0x960
 800cf64:	f7fe fb66 	bl	800b634 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
 800cf68:	4648      	mov	r0, r9
 800cf6a:	462a      	mov	r2, r5
 800cf6c:	ed94 0a02 	vldr	s0, [r4, #8]
 800cf70:	f44f 6116 	mov.w	r1, #2400	; 0x960
 800cf74:	f7fe fb5e 	bl	800b634 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
 800cf78:	462a      	mov	r2, r5
 800cf7a:	ed94 0a02 	vldr	s0, [r4, #8]
 800cf7e:	f44f 6116 	mov.w	r1, #2400	; 0x960
 800cf82:	4640      	mov	r0, r8
 800cf84:	f7fe fb56 	bl	800b634 <tHermiteDelay_initToPool>
    tHermiteDelay_clear(&p->delLF);
 800cf88:	4650      	mov	r0, sl
 800cf8a:	f7fe fbd1 	bl	800b730 <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delUF);
 800cf8e:	4658      	mov	r0, fp
 800cf90:	f7fe fbce 	bl	800b730 <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delUB);
 800cf94:	4648      	mov	r0, r9
 800cf96:	f7fe fbcb 	bl	800b730 <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delLB);
 800cf9a:	4640      	mov	r0, r8
 800cf9c:	f7fe fbc8 	bl	800b730 <tHermiteDelay_clear>
    tTwoZero_initToPool(&p->bridgeFilter, mp);
 800cfa0:	4629      	mov	r1, r5
 800cfa2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    p->brightness = brightness;
 800cfa6:	edc4 9a09 	vstr	s19, [r4, #36]	; 0x24
    tTwoZero_initToPool(&p->bridgeFilter, mp);
 800cfaa:	f7ff f813 	bl	800bfd4 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->nutFilter, mp);
 800cfae:	4629      	mov	r1, r5
 800cfb0:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800cfb4:	f7ff f80e 	bl	800bfd4 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->prepFilterU, mp);
 800cfb8:	4629      	mov	r1, r5
 800cfba:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800cfbe:	f7ff f809 	bl	800bfd4 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->prepFilterL, mp);
 800cfc2:	4629      	mov	r1, r5
 800cfc4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800cfc8:	f7ff f804 	bl	800bfd4 <tTwoZero_initToPool>
}

void     tLivingString2_setBrightness(tLivingString2* const pl, float brightness)
{
    _tLivingString2* p = *pl;
    float h0=(1.0 + brightness) * 0.5f;
 800cfcc:	eeb7 6ae9 	vcvt.f64.f32	d6, s19
 800cfd0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    _tLivingString2* p = *pl;
 800cfd4:	6836      	ldr	r6, [r6, #0]
    float h0=(1.0 + brightness) * 0.5f;
 800cfd6:	eeb7 1b00 	vmov.f64	d1, #112	; 0x3f800000  1.0
    float h1=(1.0 - brightness) * 0.25f;
 800cfda:	eeb5 0b00 	vmov.f64	d0, #80	; 0x3e800000  0.250

    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
 800cfde:	f106 003c 	add.w	r0, r6, #60	; 0x3c
    float h0=(1.0 + brightness) * 0.5f;
 800cfe2:	ee06 7b07 	vmla.f64	d7, d6, d7
    float h1=(1.0 - brightness) * 0.25f;
 800cfe6:	ee31 1b46 	vsub.f64	d1, d1, d6
 800cfea:	ee21 1b00 	vmul.f64	d1, d1, d0
    float h0=(1.0 + brightness) * 0.5f;
 800cfee:	eef7 0bc7 	vcvt.f32.f64	s1, d7
    float h1=(1.0 - brightness) * 0.25f;
 800cff2:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
 800cff6:	edcd 0a01 	vstr	s1, [sp, #4]
 800cffa:	eeb0 0a41 	vmov.f32	s0, s2
 800cffe:	ed8d 1a00 	vstr	s2, [sp]
 800d002:	f7ff f817 	bl	800c034 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->nutFilter, h1, h0, h1);
 800d006:	ed9d 1a00 	vldr	s2, [sp]
 800d00a:	eddd 0a01 	vldr	s1, [sp, #4]
 800d00e:	f106 0040 	add.w	r0, r6, #64	; 0x40
 800d012:	eeb0 0a41 	vmov.f32	s0, s2
 800d016:	f7ff f80d 	bl	800c034 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterU, h1, h0, h1);
 800d01a:	ed9d 1a00 	vldr	s2, [sp]
 800d01e:	eddd 0a01 	vldr	s1, [sp, #4]
 800d022:	f106 0044 	add.w	r0, r6, #68	; 0x44
 800d026:	eeb0 0a41 	vmov.f32	s0, s2
 800d02a:	f7ff f803 	bl	800c034 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
 800d02e:	ed9d 1a00 	vldr	s2, [sp]
 800d032:	eddd 0a01 	vldr	s1, [sp, #4]
 800d036:	f106 0048 	add.w	r0, r6, #72	; 0x48
 800d03a:	eeb0 0a41 	vmov.f32	s0, s2
 800d03e:	f7fe fff9 	bl	800c034 <tTwoZero_setCoefficients>
    tHighpass_initToPool(&p->DCblockerU,8, mp);
 800d042:	4629      	mov	r1, r5
 800d044:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d048:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800d04c:	f7ff f8c8 	bl	800c1e0 <tHighpass_initToPool>
    tHighpass_initToPool(&p->DCblockerL,8, mp);
 800d050:	4629      	mov	r1, r5
 800d052:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800d056:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800d05a:	f7ff f8c1 	bl	800c1e0 <tHighpass_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
 800d05e:	eeb0 1a6b 	vmov.f32	s2, s23
 800d062:	eef0 0a4b 	vmov.f32	s1, s22
 800d066:	462a      	mov	r2, r5
 800d068:	eeb0 0a6a 	vmov.f32	s0, s21
 800d06c:	4639      	mov	r1, r7
 800d06e:	f104 0054 	add.w	r0, r4, #84	; 0x54
    p->decay=decay;
 800d072:	edc4 ca07 	vstr	s25, [r4, #28]
    p->prepIndex = prepIndex;
 800d076:	ed84 8a06 	vstr	s16, [r4, #24]
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
 800d07a:	f7fe fc13 	bl	800b8a4 <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevL, targetLev, levSmoothFactor, levStrength, levMode, mp);
 800d07e:	eeb0 1a6b 	vmov.f32	s2, s23
 800d082:	eef0 0a4b 	vmov.f32	s1, s22
 800d086:	462a      	mov	r2, r5
 800d088:	eeb0 0a6a 	vmov.f32	s0, s21
 800d08c:	4639      	mov	r1, r7
 800d08e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d092:	f7fe fc07 	bl	800b8a4 <tFeedbackLeveler_initToPool>
    p->levMode=levMode;
 800d096:	6227      	str	r7, [r4, #32]
}
 800d098:	b003      	add	sp, #12
 800d09a:	ecbd 8b0e 	vpop	{d8-d14}
 800d09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0a2:	bf00      	nop
 800d0a4:	00000000 	.word	0x00000000
 800d0a8:	3c23d70a 	.word	0x3c23d70a
 800d0ac:	3dcccccd 	.word	0x3dcccccd
 800d0b0:	461c4000 	.word	0x461c4000

0800d0b4 <tLivingString2_setFreq>:
    _tLivingString2* p = *pl;
 800d0b4:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800d0b8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800d0ec <tLivingString2_setFreq+0x38>
 800d0bc:	6803      	ldr	r3, [r0, #0]
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 800d0be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0c2:	fe80 0a66 	vminnm.f32	s0, s0, s13
 800d0c6:	fec0 7a27 	vmaxnm.f32	s15, s0, s15
    freq = freq*2;
 800d0ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 800d0ce:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 800d0d2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 800d0d6:	ee86 0aa7 	vdiv.f32	s0, s13, s15
    p->freq = freq;
 800d0da:	edc3 7a01 	vstr	s15, [r3, #4]
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 800d0de:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d0e2:	ed83 0a02 	vstr	s0, [r3, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 800d0e6:	f7fe bf61 	b.w	800bfac <tExpSmooth_setDest>
 800d0ea:	bf00      	nop
 800d0ec:	461c4000 	.word	0x461c4000

0800d0f0 <tLivingString2_setPickPos>:
    _tLivingString2* p = *pl;
 800d0f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0f4:	6803      	ldr	r3, [r0, #0]
    if (pickPos<0.f) pickPos=0.f;
 800d0f6:	eddf 7a06 	vldr	s15, [pc, #24]	; 800d110 <tLivingString2_setPickPos+0x20>
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
 800d0fa:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800d0fe:	fe80 0a47 	vminnm.f32	s0, s0, s14
 800d102:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->pickPos = pickPos;
 800d106:	ed83 0a03 	vstr	s0, [r3, #12]
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
 800d10a:	f7fe bf4f 	b.w	800bfac <tExpSmooth_setDest>
 800d10e:	bf00      	nop
 800d110:	00000000 	.word	0x00000000

0800d114 <tLivingString2_setPrepPos>:
    _tLivingString2* p = *pl;
 800d114:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d118:	6803      	ldr	r3, [r0, #0]
    if (prepPos<0.f) prepPos=0.f;
 800d11a:	eddf 7a06 	vldr	s15, [pc, #24]	; 800d134 <tLivingString2_setPrepPos+0x20>
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
 800d11e:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800d122:	fe80 0a47 	vminnm.f32	s0, s0, s14
 800d126:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->prepPos = prepPos;
 800d12a:	ed83 0a04 	vstr	s0, [r3, #16]
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
 800d12e:	f7fe bf3d 	b.w	800bfac <tExpSmooth_setDest>
 800d132:	bf00      	nop
 800d134:	00000000 	.word	0x00000000

0800d138 <tLivingString2_setPickupPos>:
    _tLivingString2* p = *pl;
 800d138:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d13c:	6803      	ldr	r3, [r0, #0]
    if (pickupPos<0.f) pickupPos=0.f;
 800d13e:	eddf 7a06 	vldr	s15, [pc, #24]	; 800d158 <tLivingString2_setPickupPos+0x20>
    tExpSmooth_setDest(&p->puSmooth, p->pickupPos);
 800d142:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d146:	fe80 0a47 	vminnm.f32	s0, s0, s14
 800d14a:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->pickupPos = pickupPos;
 800d14e:	ed83 0a05 	vstr	s0, [r3, #20]
    tExpSmooth_setDest(&p->puSmooth, p->pickupPos);
 800d152:	f7fe bf2b 	b.w	800bfac <tExpSmooth_setDest>
 800d156:	bf00      	nop
 800d158:	00000000 	.word	0x00000000

0800d15c <tLivingString2_setPrepIndex>:
    _tLivingString2* p = *pl;
 800d15c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->prepIndex = prepIndex;
 800d160:	eddf 7a04 	vldr	s15, [pc, #16]	; 800d174 <tLivingString2_setPrepIndex+0x18>
    _tLivingString2* p = *pl;
 800d164:	6803      	ldr	r3, [r0, #0]
    if (prepIndex<0.f) prepIndex=0.f;
 800d166:	fe80 0a47 	vminnm.f32	s0, s0, s14
    p->prepIndex = prepIndex;
 800d16a:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
 800d16e:	ed83 0a06 	vstr	s0, [r3, #24]
}
 800d172:	4770      	bx	lr
 800d174:	00000000 	.word	0x00000000

0800d178 <tLivingString2_setBrightness>:
    float h0=(1.0 + brightness) * 0.5f;
 800d178:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 800d17c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d180:	eeb7 1b00 	vmov.f64	d1, #112	; 0x3f800000  1.0
    float h1=(1.0 - brightness) * 0.25f;
 800d184:	eeb5 5b00 	vmov.f64	d5, #80	; 0x3e800000  0.250
    float h0=(1.0 + brightness) * 0.5f;
 800d188:	ee00 6b06 	vmla.f64	d6, d0, d6
    float h1=(1.0 - brightness) * 0.25f;
 800d18c:	ee31 1b40 	vsub.f64	d1, d1, d0
{
 800d190:	b510      	push	{r4, lr}
    float h1=(1.0 - brightness) * 0.25f;
 800d192:	ee21 1b05 	vmul.f64	d1, d1, d5
    _tLivingString2* p = *pl;
 800d196:	6804      	ldr	r4, [r0, #0]
{
 800d198:	b082      	sub	sp, #8
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
 800d19a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    float h0=(1.0 + brightness) * 0.5f;
 800d19e:	eef7 0bc6 	vcvt.f32.f64	s1, d6
    float h1=(1.0 - brightness) * 0.25f;
 800d1a2:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
 800d1a6:	edcd 0a01 	vstr	s1, [sp, #4]
 800d1aa:	eeb0 0a41 	vmov.f32	s0, s2
 800d1ae:	ed8d 1a00 	vstr	s2, [sp]
 800d1b2:	f7fe ff3f 	bl	800c034 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->nutFilter, h1, h0, h1);
 800d1b6:	ed9d 1a00 	vldr	s2, [sp]
 800d1ba:	eddd 0a01 	vldr	s1, [sp, #4]
 800d1be:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800d1c2:	eeb0 0a41 	vmov.f32	s0, s2
 800d1c6:	f7fe ff35 	bl	800c034 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterU, h1, h0, h1);
 800d1ca:	ed9d 1a00 	vldr	s2, [sp]
 800d1ce:	eddd 0a01 	vldr	s1, [sp, #4]
 800d1d2:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800d1d6:	eeb0 0a41 	vmov.f32	s0, s2
 800d1da:	f7fe ff2b 	bl	800c034 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
 800d1de:	ed9d 1a00 	vldr	s2, [sp]
 800d1e2:	eddd 0a01 	vldr	s1, [sp, #4]
 800d1e6:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800d1ea:	eeb0 0a41 	vmov.f32	s0, s2
}
 800d1ee:	b002      	add	sp, #8
 800d1f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
 800d1f4:	f7fe bf1e 	b.w	800c034 <tTwoZero_setCoefficients>

0800d1f8 <tLivingString2_setDecay>:

void     tLivingString2_setDecay(tLivingString2* const pl, float decay)
{
 800d1f8:	b510      	push	{r4, lr}
    _tLivingString2* p = *pl;
 800d1fa:	6804      	ldr	r4, [r0, #0]
{
 800d1fc:	eef0 0a40 	vmov.f32	s1, s0
    p->decay=powf(0.001f,1.0f/(p->freq*decay));
 800d200:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d204:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800d220 <tLivingString2_setDecay+0x28>
 800d208:	ed94 7a01 	vldr	s14, [r4, #4]
 800d20c:	ee60 0a87 	vmul.f32	s1, s1, s14
 800d210:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800d214:	f000 fd70 	bl	800dcf8 <powf>
 800d218:	ed84 0a07 	vstr	s0, [r4, #28]
}
 800d21c:	bd10      	pop	{r4, pc}
 800d21e:	bf00      	nop
 800d220:	3a83126f 	.word	0x3a83126f

0800d224 <tLivingString2_setTargetLev>:

void     tLivingString2_setTargetLev(tLivingString2* const pl, float targetLev)
{
 800d224:	b510      	push	{r4, lr}
 800d226:	ed2d 8b02 	vpush	{d8}
 800d22a:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
 800d22e:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setTargetLevel(&p->fbLevU, targetLev);
 800d230:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800d234:	f7fe fb8c 	bl	800b950 <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
 800d238:	eeb0 0a48 	vmov.f32	s0, s16
 800d23c:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
 800d240:	ecbd 8b02 	vpop	{d8}
 800d244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
 800d248:	f7fe bb82 	b.w	800b950 <tFeedbackLeveler_setTargetLevel>

0800d24c <tLivingString2_setLevSmoothFactor>:

void     tLivingString2_setLevSmoothFactor(tLivingString2* const pl, float levSmoothFactor)
{
 800d24c:	b510      	push	{r4, lr}
 800d24e:	ed2d 8b02 	vpush	{d8}
 800d252:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
 800d256:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setFactor(&p->fbLevU, levSmoothFactor);
 800d258:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800d25c:	f7fe fb4c 	bl	800b8f8 <tFeedbackLeveler_setFactor>
    tFeedbackLeveler_setFactor(&p->fbLevL, levSmoothFactor);
 800d260:	eeb0 0a48 	vmov.f32	s0, s16
 800d264:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
 800d268:	ecbd 8b02 	vpop	{d8}
 800d26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setFactor(&p->fbLevL, levSmoothFactor);
 800d270:	f7fe bb42 	b.w	800b8f8 <tFeedbackLeveler_setFactor>

0800d274 <tLivingString2_setLevStrength>:

void     tLivingString2_setLevStrength(tLivingString2* const pl, float levStrength)
{
 800d274:	b510      	push	{r4, lr}
 800d276:	ed2d 8b02 	vpush	{d8}
 800d27a:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
 800d27e:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setStrength(&p->fbLevU, levStrength);
 800d280:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800d284:	f7fe fb34 	bl	800b8f0 <tFeedbackLeveler_setStrength>
    tFeedbackLeveler_setStrength(&p->fbLevL, levStrength);
 800d288:	eeb0 0a48 	vmov.f32	s0, s16
 800d28c:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
 800d290:	ecbd 8b02 	vpop	{d8}
 800d294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setStrength(&p->fbLevL, levStrength);
 800d298:	f7fe bb2a 	b.w	800b8f0 <tFeedbackLeveler_setStrength>

0800d29c <tLivingString2_setLevMode>:

void     tLivingString2_setLevMode(tLivingString2* const pl, int levMode)
{
 800d29c:	b538      	push	{r3, r4, r5, lr}
    _tLivingString2* p = *pl;
 800d29e:	6805      	ldr	r5, [r0, #0]
{
 800d2a0:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLevU, levMode);
 800d2a2:	f105 0054 	add.w	r0, r5, #84	; 0x54
 800d2a6:	f7fe fb2b 	bl	800b900 <tFeedbackLeveler_setMode>
    tFeedbackLeveler_setMode(&p->fbLevL, levMode);
 800d2aa:	4621      	mov	r1, r4
 800d2ac:	f105 0058 	add.w	r0, r5, #88	; 0x58
 800d2b0:	f7fe fb26 	bl	800b900 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
 800d2b4:	622c      	str	r4, [r5, #32]
}
 800d2b6:	bd38      	pop	{r3, r4, r5, pc}

0800d2b8 <tLivingString2_tick>:

float   tLivingString2_tick(tLivingString2* const pl, float input)
{
 800d2b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2bc:	ed2d 8b0a 	vpush	{d8-d12}
    _tLivingString2* p = *pl;

    input = input * 0.5f; // drop gain by half since we'll be equally adding it at half amplitude to forward and backward waveguides
 800d2c0:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
    _tLivingString2* p = *pl;
 800d2c4:	6804      	ldr	r4, [r0, #0]
    //float pickupPos=tExpSmooth_tick(&p->puSmooth);

    //need to determine which delay line to put it into (should be half amplitude into forward and backward lines for the correct portion of string)
    float prepP=tExpSmooth_tick(&p->prpSmooth);
    float lowLen=prepP*wLen;
    float upLen=(1.0f-prepP)*wLen;
 800d2c6:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
    float wLen=tExpSmooth_tick(&p->wlSmooth);
 800d2ca:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    input = input * 0.5f; // drop gain by half since we'll be equally adding it at half amplitude to forward and backward waveguides
 800d2ce:	ee60 8a28 	vmul.f32	s17, s0, s17
    float wLen=tExpSmooth_tick(&p->wlSmooth);
 800d2d2:	f7fe fe6f 	bl	800bfb4 <tExpSmooth_tick>
    float pickP=tExpSmooth_tick(&p->ppSmooth);
 800d2d6:	f104 0060 	add.w	r0, r4, #96	; 0x60
    float wLen=tExpSmooth_tick(&p->wlSmooth);
 800d2da:	eeb0 9a40 	vmov.f32	s18, s0
    float pickP=tExpSmooth_tick(&p->ppSmooth);
 800d2de:	f7fe fe69 	bl	800bfb4 <tExpSmooth_tick>
 800d2e2:	eeb0 8a40 	vmov.f32	s16, s0
    float prepP=tExpSmooth_tick(&p->prpSmooth);
 800d2e6:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800d2ea:	f7fe fe63 	bl	800bfb4 <tExpSmooth_tick>
    float upLen=(1.0f-prepP)*wLen;
 800d2ee:	ee3c aac0 	vsub.f32	s20, s25, s0
    uint32_t pickPInt;

    if (pickP > prepP)
 800d2f2:	eeb4 8ac0 	vcmpe.f32	s16, s0
    float prepP=tExpSmooth_tick(&p->prpSmooth);
 800d2f6:	eeb0 ba40 	vmov.f32	s22, s0
    float lowLen=prepP*wLen;
 800d2fa:	ee69 9a00 	vmul.f32	s19, s18, s0
    if (pickP > prepP)
 800d2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float upLen=(1.0f-prepP)*wLen;
 800d302:	ee2a aa09 	vmul.f32	s20, s20, s18
    if (pickP > prepP)
 800d306:	f340 8127 	ble.w	800d558 <tLivingString2_tick+0x2a0>
    {
        float fullPickPoint =  ((pickP*wLen) - lowLen);
 800d30a:	eef0 7a69 	vmov.f32	s15, s19
        pickPInt = (uint) fullPickPoint; // where does the input go? that's the pick point
        float pickPFloat = fullPickPoint - pickPInt;

        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
 800d30e:	f104 0830 	add.w	r8, r4, #48	; 0x30
 800d312:	ee39 caac 	vadd.f32	s24, s19, s25
        tHermiteDelay_addTo(&p->delUF, input * pickPFloat, pickPInt + 1);
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint) (upLen - pickPInt));
 800d316:	f104 0734 	add.w	r7, r4, #52	; 0x34
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
 800d31a:	4640      	mov	r0, r8
 800d31c:	f104 062c 	add.w	r6, r4, #44	; 0x2c
        float fullPickPoint =  ((pickP*wLen) - lowLen);
 800d320:	eed9 7a08 	vfnms.f32	s15, s18, s16
        pickPInt = (uint) fullPickPoint; // where does the input go? that's the pick point
 800d324:	f104 0538 	add.w	r5, r4, #56	; 0x38
 800d328:	eea9 ca48 	vfms.f32	s24, s18, s16
 800d32c:	eebc 8ae7 	vcvt.u32.f32	s16, s15
        float pickPFloat = fullPickPoint - pickPInt;
 800d330:	eeb8 7a48 	vcvt.f32.u32	s14, s16
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
 800d334:	ee18 1a10 	vmov	r1, s16
 800d338:	ee37 ca0c 	vadd.f32	s24, s14, s24
        float pickPFloat = fullPickPoint - pickPInt;
 800d33c:	ee77 7ac7 	vsub.f32	s15, s15, s14
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint) (upLen - pickPInt));
 800d340:	ee7a ba47 	vsub.f32	s23, s20, s14
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
 800d344:	ee2c ca28 	vmul.f32	s24, s24, s17
        tHermiteDelay_addTo(&p->delUF, input * pickPFloat, pickPInt + 1);
 800d348:	ee68 8aa7 	vmul.f32	s17, s17, s15
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
 800d34c:	eeb0 0a4c 	vmov.f32	s0, s24
 800d350:	f7fe fa70 	bl	800b834 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUF, input * pickPFloat, pickPInt + 1);
 800d354:	ee18 1a10 	vmov	r1, s16
 800d358:	4640      	mov	r0, r8
 800d35a:	eeb0 0a68 	vmov.f32	s0, s17
 800d35e:	3101      	adds	r1, #1
 800d360:	f7fe fa68 	bl	800b834 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint) (upLen - pickPInt));
 800d364:	eefc 7aeb 	vcvt.u32.f32	s15, s23
 800d368:	4638      	mov	r0, r7
 800d36a:	eeb0 0a4c 	vmov.f32	s0, s24
 800d36e:	ee17 1a90 	vmov	r1, s15
 800d372:	f7fe fa5f 	bl	800b834 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUB, input * pickPFloat, (uint) (upLen - pickPInt - 1));
 800d376:	ee3b 7aec 	vsub.f32	s14, s23, s25
 800d37a:	eeb0 0a68 	vmov.f32	s0, s17
 800d37e:	4638      	mov	r0, r7
 800d380:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800d384:	ee17 1a90 	vmov	r1, s15
 800d388:	f7fe fa54 	bl	800b834 <tHermiteDelay_addTo>

        tHermiteDelay_addTo(&p->delLF, input, pickPInt);
        tHermiteDelay_addTo(&p->delLB, input, (uint32_t) (lowLen - pickPInt));
    }
*/
    float fromLF=tHermiteDelay_tickOut(&p->delLF);
 800d38c:	4630      	mov	r0, r6
    float fromUF=tHermiteDelay_tickOut(&p->delUF);
    float fromUB=tHermiteDelay_tickOut(&p->delUB);
    float fromLB=tHermiteDelay_tickOut(&p->delLB);
    // into upper half of string, from bridge, going backwards
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
 800d38e:	f104 0954 	add.w	r9, r4, #84	; 0x54
    float fromLF=tHermiteDelay_tickOut(&p->delLF);
 800d392:	f7fe f9e9 	bl	800b768 <tHermiteDelay_tickOut>
    float fromUF=tHermiteDelay_tickOut(&p->delUF);
 800d396:	4640      	mov	r0, r8
    float fromLF=tHermiteDelay_tickOut(&p->delLF);
 800d398:	eef0 8a40 	vmov.f32	s17, s0
    float fromUF=tHermiteDelay_tickOut(&p->delUF);
 800d39c:	f7fe f9e4 	bl	800b768 <tHermiteDelay_tickOut>
    float fromUB=tHermiteDelay_tickOut(&p->delUB);
 800d3a0:	4638      	mov	r0, r7
    float fromUF=tHermiteDelay_tickOut(&p->delUF);
 800d3a2:	eeb0 8a40 	vmov.f32	s16, s0
    float fromUB=tHermiteDelay_tickOut(&p->delUB);
 800d3a6:	f7fe f9df 	bl	800b768 <tHermiteDelay_tickOut>
    float fromLB=tHermiteDelay_tickOut(&p->delLB);
 800d3aa:	4628      	mov	r0, r5
    float fromUB=tHermiteDelay_tickOut(&p->delUB);
 800d3ac:	eef0 aa40 	vmov.f32	s21, s0
    float fromLB=tHermiteDelay_tickOut(&p->delLB);
 800d3b0:	f7fe f9da 	bl	800b768 <tHermiteDelay_tickOut>
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
 800d3b4:	6a23      	ldr	r3, [r4, #32]
    float fromLB=tHermiteDelay_tickOut(&p->delLB);
 800d3b6:	eef0 ca40 	vmov.f32	s25, s0
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	f040 80c9 	bne.w	800d552 <tLivingString2_tick+0x29a>
 800d3c0:	ed94 ca07 	vldr	s24, [r4, #28]
 800d3c4:	eeb0 0a48 	vmov.f32	s0, s16
 800d3c8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800d3cc:	f7fe fe16 	bl	800bffc <tTwoZero_tick>
 800d3d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d3d4:	f7fe ff24 	bl	800c220 <tHighpass_tick>
 800d3d8:	4648      	mov	r0, r9
 800d3da:	ee20 0a0c 	vmul.f32	s0, s0, s24
    // into lower half of string, from prepPoint, going backwards
    float fromLowerPrep=-tTwoZero_tick(&p->prepFilterL, fromLF);
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
    tHermiteDelay_tickIn(&p->delLB, intoLower);
    // into lower half of string, from nut
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
 800d3de:	f104 0958 	add.w	r9, r4, #88	; 0x58
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
 800d3e2:	f7fe fa91 	bl	800b908 <tFeedbackLeveler_tick>
 800d3e6:	eeb1 8a40 	vneg.f32	s16, s0
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
 800d3ea:	4638      	mov	r0, r7
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
 800d3ec:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
 800d3f0:	eeb0 0a48 	vmov.f32	s0, s16
 800d3f4:	f7fe f9aa 	bl	800b74c <tHermiteDelay_tickIn>
    float fromLowerPrep=-tTwoZero_tick(&p->prepFilterL, fromLF);
 800d3f8:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800d3fc:	eeb0 0a68 	vmov.f32	s0, s17
 800d400:	f7fe fdfc 	bl	800bffc <tTwoZero_tick>
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
 800d404:	ed94 7a06 	vldr	s14, [r4, #24]
    tHermiteDelay_tickIn(&p->delLB, intoLower);
 800d408:	4628      	mov	r0, r5
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
 800d40a:	ee7b 7ac7 	vsub.f32	s15, s23, s14
 800d40e:	ee67 7aaa 	vmul.f32	s15, s15, s21
    tHermiteDelay_tickIn(&p->delLB, intoLower);
 800d412:	eee0 7a47 	vfms.f32	s15, s0, s14
 800d416:	eeb0 0a67 	vmov.f32	s0, s15
 800d41a:	f7fe f997 	bl	800b74c <tHermiteDelay_tickIn>
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
 800d41e:	6a23      	ldr	r3, [r4, #32]
 800d420:	2b00      	cmp	r3, #0
 800d422:	f040 8093 	bne.w	800d54c <tLivingString2_tick+0x294>
 800d426:	ed94 ca07 	vldr	s24, [r4, #28]
 800d42a:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800d42e:	eeb0 0a6c 	vmov.f32	s0, s25
 800d432:	f7fe fde3 	bl	800bffc <tTwoZero_tick>
 800d436:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800d43a:	f7fe fef1 	bl	800c220 <tHighpass_tick>
 800d43e:	4648      	mov	r0, r9
 800d440:	ee20 0a0c 	vmul.f32	s0, s0, s24
 800d444:	f7fe fa60 	bl	800b908 <tFeedbackLeveler_tick>
    tHermiteDelay_tickIn(&p->delLF, fromNut);
 800d448:	4630      	mov	r0, r6
 800d44a:	eeb1 0a40 	vneg.f32	s0, s0
 800d44e:	f7fe f97d 	bl	800b74c <tHermiteDelay_tickIn>
    // into upper half of string, from prepPoint, going forwards/upwards
    float fromUpperPrep=-tTwoZero_tick(&p->prepFilterU, fromUB);
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
 800d452:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
    float fromUpperPrep=-tTwoZero_tick(&p->prepFilterU, fromUB);
 800d456:	eeb0 0a6a 	vmov.f32	s0, s21
 800d45a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800d45e:	f7fe fdcd 	bl	800bffc <tTwoZero_tick>
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
 800d462:	ed94 7a06 	vldr	s14, [r4, #24]
    tHermiteDelay_tickIn(&p->delUF, intoUpper);
 800d466:	4640      	mov	r0, r8
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
 800d468:	ee7b 7ac7 	vsub.f32	s15, s23, s14
 800d46c:	ee67 8aa8 	vmul.f32	s17, s15, s17
    tHermiteDelay_tickIn(&p->delUF, intoUpper);
 800d470:	eee0 8a47 	vfms.f32	s17, s0, s14
 800d474:	eeb0 0a68 	vmov.f32	s0, s17
 800d478:	f7fe f968 	bl	800b74c <tHermiteDelay_tickIn>
    // update all delay lengths

    tHermiteDelay_setDelay(&p->delLF, lowLen);
 800d47c:	eeb0 0a69 	vmov.f32	s0, s19
 800d480:	4630      	mov	r0, r6
 800d482:	f7fe f99b 	bl	800b7bc <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delLB, lowLen);
 800d486:	eeb0 0a69 	vmov.f32	s0, s19
 800d48a:	4628      	mov	r0, r5
 800d48c:	f7fe f996 	bl	800b7bc <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delUF, upLen);
 800d490:	eeb0 0a4a 	vmov.f32	s0, s20
 800d494:	4640      	mov	r0, r8
 800d496:	f7fe f991 	bl	800b7bc <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delUB, upLen);
 800d49a:	eeb0 0a4a 	vmov.f32	s0, s20
 800d49e:	4638      	mov	r0, r7
 800d4a0:	f7fe f98c 	bl	800b7bc <tHermiteDelay_setDelay>
    
    uint32_t PUPInt;
    float pickupOut = 0.0f;
    float pupos = tExpSmooth_tick(&p->puSmooth);
 800d4a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d4a8:	f7fe fd84 	bl	800bfb4 <tExpSmooth_tick>
    if (pupos < 0.9999f)
 800d4ac:	eddf 7a68 	vldr	s15, [pc, #416]	; 800d650 <tLivingString2_tick+0x398>
    float pupos = tExpSmooth_tick(&p->puSmooth);
 800d4b0:	eef0 aa40 	vmov.f32	s21, s0
    if (pupos < 0.9999f)
 800d4b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d4b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4bc:	d53e      	bpl.n	800d53c <tLivingString2_tick+0x284>
    {
        if (pupos > prepP)
 800d4be:	eeb4 bac0 	vcmpe.f32	s22, s0
 800d4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4c6:	f140 8085 	bpl.w	800d5d4 <tLivingString2_tick+0x31c>
        {
            float fullPUPoint =  ((pupos*wLen) - lowLen);
 800d4ca:	eeb0 8a69 	vmov.f32	s16, s19
            PUPInt = (uint) fullPUPoint; // where does the input go? that's the pick point
            float PUPFloat = fullPUPoint - PUPInt;

            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
 800d4ce:	4640      	mov	r0, r8
 800d4d0:	ee79 9aab 	vadd.f32	s19, s19, s23
            float fullPUPoint =  ((pupos*wLen) - lowLen);
 800d4d4:	ee99 8a00 	vfnms.f32	s16, s18, s0
            PUPInt = (uint) fullPUPoint; // where does the input go? that's the pick point
 800d4d8:	eee9 9a6a 	vfms.f32	s19, s18, s21
 800d4dc:	eefc 8ac8 	vcvt.u32.f32	s17, s16
            float PUPFloat = fullPUPoint - PUPInt;
 800d4e0:	eeb8 ca68 	vcvt.f32.u32	s24, s17
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
 800d4e4:	ee18 1a90 	vmov	r1, s17
 800d4e8:	f7fe f998 	bl	800b81c <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPFloat;
 800d4ec:	ee18 1a90 	vmov	r1, s17
 800d4f0:	4640      	mov	r0, r8
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
 800d4f2:	eeb0 ba40 	vmov.f32	s22, s0
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint) (upLen - PUPInt)) * (1.0f - PUPFloat);
 800d4f6:	ee3a aa4c 	vsub.f32	s20, s20, s24
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPFloat;
 800d4fa:	3101      	adds	r1, #1
 800d4fc:	f7fe f98e 	bl	800b81c <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint) (upLen - PUPInt)) * (1.0f - PUPFloat);
 800d500:	4638      	mov	r0, r7
            float PUPFloat = fullPUPoint - PUPInt;
 800d502:	ee78 ca4c 	vsub.f32	s25, s16, s24
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint) (upLen - PUPInt)) * (1.0f - PUPFloat);
 800d506:	eefc 7aca 	vcvt.u32.f32	s15, s20
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint) (upLen - PUPInt - 1))  * PUPFloat;
 800d50a:	ee3a aa6b 	vsub.f32	s20, s20, s23
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPFloat;
 800d50e:	eeb0 8a40 	vmov.f32	s16, s0
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint) (upLen - PUPInt)) * (1.0f - PUPFloat);
 800d512:	ee17 1a90 	vmov	r1, s15
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
 800d516:	ee3c ca29 	vadd.f32	s24, s24, s19
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint) (upLen - PUPInt)) * (1.0f - PUPFloat);
 800d51a:	f7fe f97f 	bl	800b81c <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint) (upLen - PUPInt - 1))  * PUPFloat;
 800d51e:	eefc 7aca 	vcvt.u32.f32	s15, s20
 800d522:	4638      	mov	r0, r7
 800d524:	ee3b ba00 	vadd.f32	s22, s22, s0
 800d528:	ee17 1a90 	vmov	r1, s15
 800d52c:	f7fe f976 	bl	800b81c <tHermiteDelay_tapOut>
 800d530:	ee38 8a00 	vadd.f32	s16, s16, s0
 800d534:	ee28 8a2c 	vmul.f32	s16, s16, s25
 800d538:	eeac 8a0b 	vfma.f32	s16, s24, s22

    //p->curr = fromBridge;
    //p->curr += fromNut;

    return p->curr;
}
 800d53c:	eeb0 0a48 	vmov.f32	s0, s16
        p->curr = fromBridge;
 800d540:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
}
 800d544:	ecbd 8b0a 	vpop	{d8-d12}
 800d548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
 800d54c:	eeb0 ca6b 	vmov.f32	s24, s23
 800d550:	e76b      	b.n	800d42a <tLivingString2_tick+0x172>
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
 800d552:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 800d556:	e735      	b.n	800d3c4 <tLivingString2_tick+0x10c>
         float fullPickPoint =  pickP * wLen;
 800d558:	ee29 8a08 	vmul.f32	s16, s18, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 800d55c:	f104 062c 	add.w	r6, r4, #44	; 0x2c
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint) (lowLen - pickPInt));
 800d560:	f104 0538 	add.w	r5, r4, #56	; 0x38
 800d564:	f104 0830 	add.w	r8, r4, #48	; 0x30
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 800d568:	4630      	mov	r0, r6
 800d56a:	f104 0734 	add.w	r7, r4, #52	; 0x34
        pickPInt = (uint) fullPickPoint; // where does the input go? that's the pick point
 800d56e:	eebc cac8 	vcvt.u32.f32	s24, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 800d572:	ee7c bac8 	vsub.f32	s23, s25, s16
        float pickPFloat = fullPickPoint - pickPInt;
 800d576:	eef8 7a4c 	vcvt.f32.u32	s15, s24
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 800d57a:	ee1c 1a10 	vmov	r1, s24
 800d57e:	ee7b baa7 	vadd.f32	s23, s23, s15
        float pickPFloat = fullPickPoint - pickPInt;
 800d582:	ee38 8a67 	vsub.f32	s16, s16, s15
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint) (lowLen - pickPInt));
 800d586:	ee79 aae7 	vsub.f32	s21, s19, s15
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 800d58a:	ee6b baa8 	vmul.f32	s23, s23, s17
        tHermiteDelay_addTo(&p->delLF, input * pickPFloat, pickPInt + 1);
 800d58e:	ee28 8a88 	vmul.f32	s16, s17, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 800d592:	eeb0 0a6b 	vmov.f32	s0, s23
 800d596:	f7fe f94d 	bl	800b834 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLF, input * pickPFloat, pickPInt + 1);
 800d59a:	ee1c 1a10 	vmov	r1, s24
 800d59e:	4630      	mov	r0, r6
 800d5a0:	eeb0 0a48 	vmov.f32	s0, s16
 800d5a4:	3101      	adds	r1, #1
 800d5a6:	f7fe f945 	bl	800b834 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint) (lowLen - pickPInt));
 800d5aa:	eefc 7aea 	vcvt.u32.f32	s15, s21
 800d5ae:	4628      	mov	r0, r5
 800d5b0:	eeb0 0a6b 	vmov.f32	s0, s23
 800d5b4:	ee17 1a90 	vmov	r1, s15
 800d5b8:	f7fe f93c 	bl	800b834 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLB, input * pickPFloat, (uint) (lowLen - pickPInt - 1));
 800d5bc:	ee7a 7aec 	vsub.f32	s15, s21, s25
 800d5c0:	eeb0 0a48 	vmov.f32	s0, s16
 800d5c4:	4628      	mov	r0, r5
 800d5c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5ca:	ee17 1a90 	vmov	r1, s15
 800d5ce:	f7fe f931 	bl	800b834 <tHermiteDelay_addTo>
 800d5d2:	e6db      	b.n	800d38c <tLivingString2_tick+0xd4>
             float fullPUPoint =  pupos * wLen;
 800d5d4:	ee29 9a00 	vmul.f32	s18, s18, s0
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
 800d5d8:	4630      	mov	r0, r6
            PUPInt = (uint) fullPUPoint; // where does the input go? that's the pick point
 800d5da:	eebc 8ac9 	vcvt.u32.f32	s16, s18
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
 800d5de:	ee7b aac9 	vsub.f32	s21, s23, s18
            float PUPFloat = fullPUPoint - PUPInt;
 800d5e2:	eef8 8a48 	vcvt.f32.u32	s17, s16
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
 800d5e6:	ee18 1a10 	vmov	r1, s16
 800d5ea:	f7fe f917 	bl	800b81c <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPFloat;
 800d5ee:	ee18 1a10 	vmov	r1, s16
 800d5f2:	4630      	mov	r0, r6
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
 800d5f4:	eeb0 aa40 	vmov.f32	s20, s0
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint) (lowLen - PUPInt)) * (1.0f - PUPFloat);
 800d5f8:	ee79 9ae8 	vsub.f32	s19, s19, s17
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPFloat;
 800d5fc:	3101      	adds	r1, #1
 800d5fe:	f7fe f90d 	bl	800b81c <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint) (lowLen - PUPInt)) * (1.0f - PUPFloat);
 800d602:	4628      	mov	r0, r5
            float PUPFloat = fullPUPoint - PUPInt;
 800d604:	ee39 9a68 	vsub.f32	s18, s18, s17
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint) (lowLen - PUPInt)) * (1.0f - PUPFloat);
 800d608:	eefc 7ae9 	vcvt.u32.f32	s15, s19
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint) (lowLen - PUPInt - 1)) * PUPFloat;
 800d60c:	ee79 9aeb 	vsub.f32	s19, s19, s23
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
 800d610:	ee7a aaa8 	vadd.f32	s21, s21, s17
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint) (lowLen - PUPInt)) * (1.0f - PUPFloat);
 800d614:	ee17 1a90 	vmov	r1, s15
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPFloat;
 800d618:	eef0 8a40 	vmov.f32	s17, s0
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint) (lowLen - PUPInt)) * (1.0f - PUPFloat);
 800d61c:	f7fe f8fe 	bl	800b81c <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint) (lowLen - PUPInt - 1)) * PUPFloat;
 800d620:	eefc 7ae9 	vcvt.u32.f32	s15, s19
 800d624:	4628      	mov	r0, r5
 800d626:	ee3a aa00 	vadd.f32	s20, s20, s0
 800d62a:	ee17 1a90 	vmov	r1, s15
 800d62e:	f7fe f8f5 	bl	800b81c <tHermiteDelay_tapOut>
 800d632:	ee38 8a80 	vadd.f32	s16, s17, s0
 800d636:	ee28 8a09 	vmul.f32	s16, s16, s18
 800d63a:	eeaa 8a8a 	vfma.f32	s16, s21, s20
}
 800d63e:	eeb0 0a48 	vmov.f32	s0, s16
        p->curr = fromBridge;
 800d642:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
}
 800d646:	ecbd 8b0a 	vpop	{d8-d12}
 800d64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d64e:	bf00      	nop
 800d650:	3f7ff972 	.word	0x3f7ff972

0800d654 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 800d654:	4770      	bx	lr
 800d656:	bf00      	nop

0800d658 <LEAF_init>:
{
 800d658:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
 800d65a:	6200      	str	r0, [r0, #32]
{
 800d65c:	4604      	mov	r4, r0
 800d65e:	461d      	mov	r5, r3
 800d660:	ed2d 8b02 	vpush	{d8}
 800d664:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
 800d668:	f7ff f966 	bl	800c938 <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
 800d66c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 800d670:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800d6a4 <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
 800d674:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 800d676:	4b0c      	ldr	r3, [pc, #48]	; (800d6a8 <LEAF_init+0x50>)
    leaf->random = random;
 800d678:	6125      	str	r5, [r4, #16]
    leaf->invSampleRate = 1.0f/sr;
 800d67a:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->sampleRate = sr;
 800d67e:	ed84 8a00 	vstr	s16, [r4]
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 800d682:	63a3      	str	r3, [r4, #56]	; 0x38
    leaf->clearOnAllocation = 0;
 800d684:	6162      	str	r2, [r4, #20]
    leaf->freeCount = 0;
 800d686:	64e2      	str	r2, [r4, #76]	; 0x4c
        leaf->errorState[i] = 0;
 800d688:	e9c4 220f 	strd	r2, r2, [r4, #60]	; 0x3c
    leaf->allocCount = 0;
 800d68c:	e9c4 2211 	strd	r2, r2, [r4, #68]	; 0x44
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 800d690:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
 800d694:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 800d698:	edc4 7a03 	vstr	s15, [r4, #12]
}
 800d69c:	ecbd 8b02 	vpop	{d8}
 800d6a0:	bd38      	pop	{r3, r4, r5, pc}
 800d6a2:	bf00      	nop
 800d6a4:	40c90fdb 	.word	0x40c90fdb
 800d6a8:	0800d655 	.word	0x0800d655

0800d6ac <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 800d6ac:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
 800d6ae:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800d6b2:	2401      	movs	r4, #1
 800d6b4:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
 800d6b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
 800d6ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d6bc:	4718      	bx	r3
 800d6be:	bf00      	nop

0800d6c0 <__errno>:
 800d6c0:	4b01      	ldr	r3, [pc, #4]	; (800d6c8 <__errno+0x8>)
 800d6c2:	6818      	ldr	r0, [r3, #0]
 800d6c4:	4770      	bx	lr
 800d6c6:	bf00      	nop
 800d6c8:	20000b10 	.word	0x20000b10

0800d6cc <__libc_init_array>:
 800d6cc:	b570      	push	{r4, r5, r6, lr}
 800d6ce:	4d0d      	ldr	r5, [pc, #52]	; (800d704 <__libc_init_array+0x38>)
 800d6d0:	4c0d      	ldr	r4, [pc, #52]	; (800d708 <__libc_init_array+0x3c>)
 800d6d2:	1b64      	subs	r4, r4, r5
 800d6d4:	10a4      	asrs	r4, r4, #2
 800d6d6:	2600      	movs	r6, #0
 800d6d8:	42a6      	cmp	r6, r4
 800d6da:	d109      	bne.n	800d6f0 <__libc_init_array+0x24>
 800d6dc:	4d0b      	ldr	r5, [pc, #44]	; (800d70c <__libc_init_array+0x40>)
 800d6de:	4c0c      	ldr	r4, [pc, #48]	; (800d710 <__libc_init_array+0x44>)
 800d6e0:	f001 fc68 	bl	800efb4 <_init>
 800d6e4:	1b64      	subs	r4, r4, r5
 800d6e6:	10a4      	asrs	r4, r4, #2
 800d6e8:	2600      	movs	r6, #0
 800d6ea:	42a6      	cmp	r6, r4
 800d6ec:	d105      	bne.n	800d6fa <__libc_init_array+0x2e>
 800d6ee:	bd70      	pop	{r4, r5, r6, pc}
 800d6f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6f4:	4798      	blx	r3
 800d6f6:	3601      	adds	r6, #1
 800d6f8:	e7ee      	b.n	800d6d8 <__libc_init_array+0xc>
 800d6fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6fe:	4798      	blx	r3
 800d700:	3601      	adds	r6, #1
 800d702:	e7f2      	b.n	800d6ea <__libc_init_array+0x1e>
 800d704:	08016158 	.word	0x08016158
 800d708:	08016158 	.word	0x08016158
 800d70c:	08016158 	.word	0x08016158
 800d710:	0801615c 	.word	0x0801615c

0800d714 <memset>:
 800d714:	4402      	add	r2, r0
 800d716:	4603      	mov	r3, r0
 800d718:	4293      	cmp	r3, r2
 800d71a:	d100      	bne.n	800d71e <memset+0xa>
 800d71c:	4770      	bx	lr
 800d71e:	f803 1b01 	strb.w	r1, [r3], #1
 800d722:	e7f9      	b.n	800d718 <memset+0x4>
 800d724:	0000      	movs	r0, r0
	...

0800d728 <exp>:
 800d728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72c:	b087      	sub	sp, #28
 800d72e:	ed8d 0b00 	vstr	d0, [sp]
 800d732:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d736:	f46f 7372 	mvn.w	r3, #968	; 0x3c8
 800d73a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800d73e:	18f7      	adds	r7, r6, r3
 800d740:	2f3e      	cmp	r7, #62	; 0x3e
 800d742:	d929      	bls.n	800d798 <exp+0x70>
 800d744:	2f00      	cmp	r7, #0
 800d746:	da08      	bge.n	800d75a <exp+0x32>
 800d748:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d74c:	ed9d 7b00 	vldr	d7, [sp]
 800d750:	ee37 0b00 	vadd.f64	d0, d7, d0
 800d754:	b007      	add	sp, #28
 800d756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d75a:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800d75e:	d91a      	bls.n	800d796 <exp+0x6e>
 800d760:	4b65      	ldr	r3, [pc, #404]	; (800d8f8 <exp+0x1d0>)
 800d762:	2200      	movs	r2, #0
 800d764:	4299      	cmp	r1, r3
 800d766:	bf08      	it	eq
 800d768:	4290      	cmpeq	r0, r2
 800d76a:	f000 80b6 	beq.w	800d8da <exp+0x1b2>
 800d76e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800d772:	429e      	cmp	r6, r3
 800d774:	d0e8      	beq.n	800d748 <exp+0x20>
 800d776:	2800      	cmp	r0, #0
 800d778:	f171 0300 	sbcs.w	r3, r1, #0
 800d77c:	f04f 0000 	mov.w	r0, #0
 800d780:	da04      	bge.n	800d78c <exp+0x64>
 800d782:	b007      	add	sp, #28
 800d784:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d788:	f000 b8da 	b.w	800d940 <__math_uflow>
 800d78c:	b007      	add	sp, #28
 800d78e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d792:	f000 b8dd 	b.w	800d950 <__math_oflow>
 800d796:	2600      	movs	r6, #0
 800d798:	4858      	ldr	r0, [pc, #352]	; (800d8fc <exp+0x1d4>)
 800d79a:	ed9d 3b00 	vldr	d3, [sp]
 800d79e:	ed90 6b02 	vldr	d6, [r0, #8]
 800d7a2:	ed90 7b00 	vldr	d7, [r0]
 800d7a6:	eeb0 4b46 	vmov.f64	d4, d6
 800d7aa:	eea7 4b03 	vfma.f64	d4, d7, d3
 800d7ae:	ee34 7b46 	vsub.f64	d7, d4, d6
 800d7b2:	ed90 6b04 	vldr	d6, [r0, #16]
 800d7b6:	ee14 ca10 	vmov	ip, s8
 800d7ba:	eeb0 4b43 	vmov.f64	d4, d3
 800d7be:	f00c 017f 	and.w	r1, ip, #127	; 0x7f
 800d7c2:	eea6 4b07 	vfma.f64	d4, d6, d7
 800d7c6:	eeb0 6b44 	vmov.f64	d6, d4
 800d7ca:	ed90 4b06 	vldr	d4, [r0, #24]
 800d7ce:	1849      	adds	r1, r1, r1
 800d7d0:	eb00 09c1 	add.w	r9, r0, r1, lsl #3
 800d7d4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d7d8:	eea4 6b07 	vfma.f64	d6, d4, d7
 800d7dc:	ed90 3b0a 	vldr	d3, [r0, #40]	; 0x28
 800d7e0:	ee26 2b06 	vmul.f64	d2, d6, d6
 800d7e4:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800d7e8:	ed90 4b08 	vldr	d4, [r0, #32]
 800d7ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d7f0:	e9d9 891e 	ldrd	r8, r9, [r9, #120]	; 0x78
 800d7f4:	eea3 4b06 	vfma.f64	d4, d3, d6
 800d7f8:	eea4 7b02 	vfma.f64	d7, d4, d2
 800d7fc:	ed90 3b0e 	vldr	d3, [r0, #56]	; 0x38
 800d800:	ee22 2b02 	vmul.f64	d2, d2, d2
 800d804:	ed90 4b0c 	vldr	d4, [r0, #48]	; 0x30
 800d808:	2700      	movs	r7, #0
 800d80a:	ea4f 3e4c 	mov.w	lr, ip, lsl #13
 800d80e:	eb17 0a08 	adds.w	sl, r7, r8
 800d812:	eea3 4b06 	vfma.f64	d4, d3, d6
 800d816:	eb4e 0b09 	adc.w	fp, lr, r9
 800d81a:	eea2 7b04 	vfma.f64	d7, d2, d4
 800d81e:	2e00      	cmp	r6, #0
 800d820:	d156      	bne.n	800d8d0 <exp+0x1a8>
 800d822:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800d826:	4631      	mov	r1, r6
 800d828:	ea50 0301 	orrs.w	r3, r0, r1
 800d82c:	d113      	bne.n	800d856 <exp+0x12e>
 800d82e:	4a34      	ldr	r2, [pc, #208]	; (800d900 <exp+0x1d8>)
 800d830:	eb1a 0407 	adds.w	r4, sl, r7
 800d834:	eb4b 0502 	adc.w	r5, fp, r2
 800d838:	ec45 4b10 	vmov	d0, r4, r5
 800d83c:	ec45 4b16 	vmov	d6, r4, r5
 800d840:	eea7 0b06 	vfma.f64	d0, d7, d6
 800d844:	ed9f 7b26 	vldr	d7, [pc, #152]	; 800d8e0 <exp+0x1b8>
 800d848:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d84c:	b007      	add	sp, #28
 800d84e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d852:	f000 b891 	b.w	800d978 <__math_check_oflow>
 800d856:	4a2b      	ldr	r2, [pc, #172]	; (800d904 <exp+0x1dc>)
 800d858:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800d85c:	2100      	movs	r1, #0
 800d85e:	eb1a 0301 	adds.w	r3, sl, r1
 800d862:	ee05 3a10 	vmov	s10, r3
 800d866:	eb4b 0302 	adc.w	r3, fp, r2
 800d86a:	ee05 3a90 	vmov	s11, r3
 800d86e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d872:	ee35 6b07 	vadd.f64	d6, d5, d7
 800d876:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d87a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d87e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800d8e8 <exp+0x1c0>
 800d882:	d51e      	bpl.n	800d8c2 <exp+0x19a>
 800d884:	ee35 5b46 	vsub.f64	d5, d5, d6
 800d888:	ee36 3b04 	vadd.f64	d3, d6, d4
 800d88c:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d890:	ee34 5b43 	vsub.f64	d5, d4, d3
 800d894:	ee35 6b06 	vadd.f64	d6, d5, d6
 800d898:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d89c:	ee36 6b03 	vadd.f64	d6, d6, d3
 800d8a0:	ee36 6b44 	vsub.f64	d6, d6, d4
 800d8a4:	eeb5 6b40 	vcmp.f64	d6, #0.0
 800d8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8ac:	d101      	bne.n	800d8b2 <exp+0x18a>
 800d8ae:	ed9f 6b10 	vldr	d6, [pc, #64]	; 800d8f0 <exp+0x1c8>
 800d8b2:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d8b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d8ba:	ee27 7b00 	vmul.f64	d7, d7, d0
 800d8be:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d8c2:	ee26 0b00 	vmul.f64	d0, d6, d0
 800d8c6:	b007      	add	sp, #28
 800d8c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8cc:	f000 b848 	b.w	800d960 <__math_check_uflow>
 800d8d0:	ec4b ab10 	vmov	d0, sl, fp
 800d8d4:	eea7 0b00 	vfma.f64	d0, d7, d0
 800d8d8:	e73c      	b.n	800d754 <exp+0x2c>
 800d8da:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800d8f0 <exp+0x1c8>
 800d8de:	e739      	b.n	800d754 <exp+0x2c>
 800d8e0:	00000000 	.word	0x00000000
 800d8e4:	7f000000 	.word	0x7f000000
 800d8e8:	00000000 	.word	0x00000000
 800d8ec:	00100000 	.word	0x00100000
	...
 800d8f8:	fff00000 	.word	0xfff00000
 800d8fc:	08015060 	.word	0x08015060
 800d900:	c0f00000 	.word	0xc0f00000
 800d904:	3fe00000 	.word	0x3fe00000

0800d908 <with_errno>:
 800d908:	b513      	push	{r0, r1, r4, lr}
 800d90a:	4604      	mov	r4, r0
 800d90c:	ed8d 0b00 	vstr	d0, [sp]
 800d910:	f7ff fed6 	bl	800d6c0 <__errno>
 800d914:	ed9d 0b00 	vldr	d0, [sp]
 800d918:	6004      	str	r4, [r0, #0]
 800d91a:	b002      	add	sp, #8
 800d91c:	bd10      	pop	{r4, pc}

0800d91e <xflow>:
 800d91e:	b082      	sub	sp, #8
 800d920:	b158      	cbz	r0, 800d93a <xflow+0x1c>
 800d922:	eeb1 7b40 	vneg.f64	d7, d0
 800d926:	ed8d 7b00 	vstr	d7, [sp]
 800d92a:	ed9d 7b00 	vldr	d7, [sp]
 800d92e:	2022      	movs	r0, #34	; 0x22
 800d930:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d934:	b002      	add	sp, #8
 800d936:	f7ff bfe7 	b.w	800d908 <with_errno>
 800d93a:	eeb0 7b40 	vmov.f64	d7, d0
 800d93e:	e7f2      	b.n	800d926 <xflow+0x8>

0800d940 <__math_uflow>:
 800d940:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d948 <__math_uflow+0x8>
 800d944:	f7ff bfeb 	b.w	800d91e <xflow>
 800d948:	00000000 	.word	0x00000000
 800d94c:	10000000 	.word	0x10000000

0800d950 <__math_oflow>:
 800d950:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d958 <__math_oflow+0x8>
 800d954:	f7ff bfe3 	b.w	800d91e <xflow>
 800d958:	00000000 	.word	0x00000000
 800d95c:	70000000 	.word	0x70000000

0800d960 <__math_check_uflow>:
 800d960:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d968:	d102      	bne.n	800d970 <__math_check_uflow+0x10>
 800d96a:	2022      	movs	r0, #34	; 0x22
 800d96c:	f7ff bfcc 	b.w	800d908 <with_errno>
 800d970:	4770      	bx	lr
 800d972:	0000      	movs	r0, r0
 800d974:	0000      	movs	r0, r0
	...

0800d978 <__math_check_oflow>:
 800d978:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800d998 <__math_check_oflow+0x20>
 800d97c:	eeb0 7bc0 	vabs.f64	d7, d0
 800d980:	eeb4 7b46 	vcmp.f64	d7, d6
 800d984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d988:	dd02      	ble.n	800d990 <__math_check_oflow+0x18>
 800d98a:	2022      	movs	r0, #34	; 0x22
 800d98c:	f7ff bfbc 	b.w	800d908 <with_errno>
 800d990:	4770      	bx	lr
 800d992:	bf00      	nop
 800d994:	f3af 8000 	nop.w
 800d998:	ffffffff 	.word	0xffffffff
 800d99c:	7fefffff 	.word	0x7fefffff

0800d9a0 <with_errnof>:
 800d9a0:	b513      	push	{r0, r1, r4, lr}
 800d9a2:	4604      	mov	r4, r0
 800d9a4:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d9a8:	f7ff fe8a 	bl	800d6c0 <__errno>
 800d9ac:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d9b0:	6004      	str	r4, [r0, #0]
 800d9b2:	b002      	add	sp, #8
 800d9b4:	bd10      	pop	{r4, pc}

0800d9b6 <xflowf>:
 800d9b6:	b130      	cbz	r0, 800d9c6 <xflowf+0x10>
 800d9b8:	eef1 7a40 	vneg.f32	s15, s0
 800d9bc:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d9c0:	2022      	movs	r0, #34	; 0x22
 800d9c2:	f7ff bfed 	b.w	800d9a0 <with_errnof>
 800d9c6:	eef0 7a40 	vmov.f32	s15, s0
 800d9ca:	e7f7      	b.n	800d9bc <xflowf+0x6>

0800d9cc <__math_uflowf>:
 800d9cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d9d4 <__math_uflowf+0x8>
 800d9d0:	f7ff bff1 	b.w	800d9b6 <xflowf>
 800d9d4:	10000000 	.word	0x10000000

0800d9d8 <__math_may_uflowf>:
 800d9d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d9e0 <__math_may_uflowf+0x8>
 800d9dc:	f7ff bfeb 	b.w	800d9b6 <xflowf>
 800d9e0:	1a200000 	.word	0x1a200000

0800d9e4 <__math_oflowf>:
 800d9e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d9ec <__math_oflowf+0x8>
 800d9e8:	f7ff bfe5 	b.w	800d9b6 <xflowf>
 800d9ec:	70000000 	.word	0x70000000

0800d9f0 <__math_divzerof>:
 800d9f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d9f4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800d9fe:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800da0c <__math_divzerof+0x1c>
 800da02:	2022      	movs	r0, #34	; 0x22
 800da04:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800da08:	f7ff bfca 	b.w	800d9a0 <with_errnof>
 800da0c:	00000000 	.word	0x00000000

0800da10 <__math_invalidf>:
 800da10:	eef0 7a40 	vmov.f32	s15, s0
 800da14:	ee30 7a40 	vsub.f32	s14, s0, s0
 800da18:	eef4 7a67 	vcmp.f32	s15, s15
 800da1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da20:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800da24:	d602      	bvs.n	800da2c <__math_invalidf+0x1c>
 800da26:	2021      	movs	r0, #33	; 0x21
 800da28:	f7ff bfba 	b.w	800d9a0 <with_errnof>
 800da2c:	4770      	bx	lr
	...

0800da30 <expf>:
 800da30:	ee10 2a10 	vmov	r2, s0
 800da34:	b470      	push	{r4, r5, r6}
 800da36:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800da3a:	f240 442a 	movw	r4, #1066	; 0x42a
 800da3e:	42a3      	cmp	r3, r4
 800da40:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800da44:	d92a      	bls.n	800da9c <expf+0x6c>
 800da46:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800da4a:	d059      	beq.n	800db00 <expf+0xd0>
 800da4c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800da50:	d303      	bcc.n	800da5a <expf+0x2a>
 800da52:	ee30 0a00 	vadd.f32	s0, s0, s0
 800da56:	bc70      	pop	{r4, r5, r6}
 800da58:	4770      	bx	lr
 800da5a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800db08 <expf+0xd8>
 800da5e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800da62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da66:	dd03      	ble.n	800da70 <expf+0x40>
 800da68:	bc70      	pop	{r4, r5, r6}
 800da6a:	2000      	movs	r0, #0
 800da6c:	f7ff bfba 	b.w	800d9e4 <__math_oflowf>
 800da70:	eddf 7a26 	vldr	s15, [pc, #152]	; 800db0c <expf+0xdc>
 800da74:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800da78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da7c:	d503      	bpl.n	800da86 <expf+0x56>
 800da7e:	bc70      	pop	{r4, r5, r6}
 800da80:	2000      	movs	r0, #0
 800da82:	f7ff bfa3 	b.w	800d9cc <__math_uflowf>
 800da86:	eddf 7a22 	vldr	s15, [pc, #136]	; 800db10 <expf+0xe0>
 800da8a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800da8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da92:	d503      	bpl.n	800da9c <expf+0x6c>
 800da94:	bc70      	pop	{r4, r5, r6}
 800da96:	2000      	movs	r0, #0
 800da98:	f7ff bf9e 	b.w	800d9d8 <__math_may_uflowf>
 800da9c:	4b1d      	ldr	r3, [pc, #116]	; (800db14 <expf+0xe4>)
 800da9e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800daa2:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 800daa6:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 800daaa:	eeb0 7b44 	vmov.f64	d7, d4
 800daae:	eea5 7b06 	vfma.f64	d7, d5, d6
 800dab2:	ee17 5a10 	vmov	r5, s14
 800dab6:	ee37 7b44 	vsub.f64	d7, d7, d4
 800daba:	f005 021f 	and.w	r2, r5, #31
 800dabe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800dac2:	e9d2 4600 	ldrd	r4, r6, [r2]
 800dac6:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800daca:	ed93 4b50 	vldr	d4, [r3, #320]	; 0x140
 800dace:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 800dad2:	eea4 0b07 	vfma.f64	d0, d4, d7
 800dad6:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 800dada:	2300      	movs	r3, #0
 800dadc:	1918      	adds	r0, r3, r4
 800dade:	ea4f 32c5 	mov.w	r2, r5, lsl #15
 800dae2:	eb42 0106 	adc.w	r1, r2, r6
 800dae6:	eea5 6b07 	vfma.f64	d6, d5, d7
 800daea:	ee27 5b07 	vmul.f64	d5, d7, d7
 800daee:	ec41 0b17 	vmov	d7, r0, r1
 800daf2:	eea6 0b05 	vfma.f64	d0, d6, d5
 800daf6:	ee20 0b07 	vmul.f64	d0, d0, d7
 800dafa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800dafe:	e7aa      	b.n	800da56 <expf+0x26>
 800db00:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800db18 <expf+0xe8>
 800db04:	e7a7      	b.n	800da56 <expf+0x26>
 800db06:	bf00      	nop
 800db08:	42b17217 	.word	0x42b17217
 800db0c:	c2cff1b4 	.word	0xc2cff1b4
 800db10:	c2ce8ecf 	.word	0xc2ce8ecf
 800db14:	080158d0 	.word	0x080158d0
 800db18:	00000000 	.word	0x00000000

0800db1c <fabsf>:
 800db1c:	ee10 3a10 	vmov	r3, s0
 800db20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db24:	ee00 3a10 	vmov	s0, r3
 800db28:	4770      	bx	lr
	...

0800db2c <logf>:
 800db2c:	ee10 3a10 	vmov	r3, s0
 800db30:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800db34:	b410      	push	{r4}
 800db36:	d055      	beq.n	800dbe4 <logf+0xb8>
 800db38:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 800db3c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800db40:	d31a      	bcc.n	800db78 <logf+0x4c>
 800db42:	005a      	lsls	r2, r3, #1
 800db44:	d104      	bne.n	800db50 <logf+0x24>
 800db46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db4a:	2001      	movs	r0, #1
 800db4c:	f7ff bf50 	b.w	800d9f0 <__math_divzerof>
 800db50:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800db54:	d043      	beq.n	800dbde <logf+0xb2>
 800db56:	2b00      	cmp	r3, #0
 800db58:	db02      	blt.n	800db60 <logf+0x34>
 800db5a:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800db5e:	d303      	bcc.n	800db68 <logf+0x3c>
 800db60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db64:	f7ff bf54 	b.w	800da10 <__math_invalidf>
 800db68:	eddf 7a20 	vldr	s15, [pc, #128]	; 800dbec <logf+0xc0>
 800db6c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800db70:	ee10 3a10 	vmov	r3, s0
 800db74:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 800db78:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 800db7c:	491c      	ldr	r1, [pc, #112]	; (800dbf0 <logf+0xc4>)
 800db7e:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 800db82:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800db86:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800db8a:	0dd4      	lsrs	r4, r2, #23
 800db8c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800db90:	05e4      	lsls	r4, r4, #23
 800db92:	ed90 6b00 	vldr	d6, [r0]
 800db96:	1b1b      	subs	r3, r3, r4
 800db98:	ee07 3a90 	vmov	s15, r3
 800db9c:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 800dba0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dba4:	15d2      	asrs	r2, r2, #23
 800dba6:	eea6 0b07 	vfma.f64	d0, d6, d7
 800dbaa:	ed90 6b02 	vldr	d6, [r0, #8]
 800dbae:	ee07 2a90 	vmov	s15, r2
 800dbb2:	ed91 4b44 	vldr	d4, [r1, #272]	; 0x110
 800dbb6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dbba:	eea7 6b05 	vfma.f64	d6, d7, d5
 800dbbe:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800dbc2:	ee20 5b00 	vmul.f64	d5, d0, d0
 800dbc6:	eea4 7b00 	vfma.f64	d7, d4, d0
 800dbca:	ed91 4b42 	vldr	d4, [r1, #264]	; 0x108
 800dbce:	ee30 0b06 	vadd.f64	d0, d0, d6
 800dbd2:	eea4 7b05 	vfma.f64	d7, d4, d5
 800dbd6:	eea5 0b07 	vfma.f64	d0, d5, d7
 800dbda:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800dbde:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbe2:	4770      	bx	lr
 800dbe4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800dbf4 <logf+0xc8>
 800dbe8:	e7f9      	b.n	800dbde <logf+0xb2>
 800dbea:	bf00      	nop
 800dbec:	4b000000 	.word	0x4b000000
 800dbf0:	08015b38 	.word	0x08015b38
 800dbf4:	00000000 	.word	0x00000000

0800dbf8 <log2f>:
 800dbf8:	ee10 2a10 	vmov	r2, s0
 800dbfc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800dc00:	b410      	push	{r4}
 800dc02:	d057      	beq.n	800dcb4 <log2f+0xbc>
 800dc04:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
 800dc08:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800dc0c:	d31a      	bcc.n	800dc44 <log2f+0x4c>
 800dc0e:	0053      	lsls	r3, r2, #1
 800dc10:	d104      	bne.n	800dc1c <log2f+0x24>
 800dc12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc16:	2001      	movs	r0, #1
 800dc18:	f7ff beea 	b.w	800d9f0 <__math_divzerof>
 800dc1c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800dc20:	d045      	beq.n	800dcae <log2f+0xb6>
 800dc22:	2a00      	cmp	r2, #0
 800dc24:	db02      	blt.n	800dc2c <log2f+0x34>
 800dc26:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800dc2a:	d303      	bcc.n	800dc34 <log2f+0x3c>
 800dc2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc30:	f7ff beee 	b.w	800da10 <__math_invalidf>
 800dc34:	eddf 7a21 	vldr	s15, [pc, #132]	; 800dcbc <log2f+0xc4>
 800dc38:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dc3c:	ee10 3a10 	vmov	r3, s0
 800dc40:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
 800dc44:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
 800dc48:	491d      	ldr	r1, [pc, #116]	; (800dcc0 <log2f+0xc8>)
 800dc4a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800dc4e:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 800dc52:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 800dc56:	0ddc      	lsrs	r4, r3, #23
 800dc58:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800dc5c:	05e4      	lsls	r4, r4, #23
 800dc5e:	ed90 5b00 	vldr	d5, [r0]
 800dc62:	1b12      	subs	r2, r2, r4
 800dc64:	ee07 2a90 	vmov	s15, r2
 800dc68:	15db      	asrs	r3, r3, #23
 800dc6a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dc6e:	eea5 6b07 	vfma.f64	d6, d5, d7
 800dc72:	eeb0 7b46 	vmov.f64	d7, d6
 800dc76:	ed90 6b02 	vldr	d6, [r0, #8]
 800dc7a:	ee27 5b07 	vmul.f64	d5, d7, d7
 800dc7e:	ee00 3a10 	vmov	s0, r3
 800dc82:	ed91 4b42 	vldr	d4, [r1, #264]	; 0x108
 800dc86:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800dc8a:	ee30 0b06 	vadd.f64	d0, d0, d6
 800dc8e:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 800dc92:	eea4 6b07 	vfma.f64	d6, d4, d7
 800dc96:	ed91 4b40 	vldr	d4, [r1, #256]	; 0x100
 800dc9a:	eea4 6b05 	vfma.f64	d6, d4, d5
 800dc9e:	ed91 4b46 	vldr	d4, [r1, #280]	; 0x118
 800dca2:	eea4 0b07 	vfma.f64	d0, d4, d7
 800dca6:	eea5 0b06 	vfma.f64	d0, d5, d6
 800dcaa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800dcae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcb2:	4770      	bx	lr
 800dcb4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800dcc4 <log2f+0xcc>
 800dcb8:	e7f9      	b.n	800dcae <log2f+0xb6>
 800dcba:	bf00      	nop
 800dcbc:	4b000000 	.word	0x4b000000
 800dcc0:	08015a18 	.word	0x08015a18
 800dcc4:	00000000 	.word	0x00000000

0800dcc8 <checkint>:
 800dcc8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800dccc:	2b7e      	cmp	r3, #126	; 0x7e
 800dcce:	dd10      	ble.n	800dcf2 <checkint+0x2a>
 800dcd0:	2b96      	cmp	r3, #150	; 0x96
 800dcd2:	dc0c      	bgt.n	800dcee <checkint+0x26>
 800dcd4:	2201      	movs	r2, #1
 800dcd6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800dcda:	fa02 f303 	lsl.w	r3, r2, r3
 800dcde:	1e5a      	subs	r2, r3, #1
 800dce0:	4202      	tst	r2, r0
 800dce2:	d106      	bne.n	800dcf2 <checkint+0x2a>
 800dce4:	4203      	tst	r3, r0
 800dce6:	bf0c      	ite	eq
 800dce8:	2002      	moveq	r0, #2
 800dcea:	2001      	movne	r0, #1
 800dcec:	4770      	bx	lr
 800dcee:	2002      	movs	r0, #2
 800dcf0:	4770      	bx	lr
 800dcf2:	2000      	movs	r0, #0
 800dcf4:	4770      	bx	lr
	...

0800dcf8 <powf>:
 800dcf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcfa:	ee10 1a10 	vmov	r1, s0
 800dcfe:	ee10 6a90 	vmov	r6, s1
 800dd02:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800dd06:	0072      	lsls	r2, r6, #1
 800dd08:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800dd0c:	b085      	sub	sp, #20
 800dd0e:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800dd12:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800dd16:	d256      	bcs.n	800ddc6 <powf+0xce>
 800dd18:	4298      	cmp	r0, r3
 800dd1a:	d256      	bcs.n	800ddca <powf+0xd2>
 800dd1c:	2000      	movs	r0, #0
 800dd1e:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800dd22:	4ea3      	ldr	r6, [pc, #652]	; (800dfb0 <powf+0x2b8>)
 800dd24:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800dd28:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800dd2c:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800dd30:	0dd2      	lsrs	r2, r2, #23
 800dd32:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800dd36:	05d2      	lsls	r2, r2, #23
 800dd38:	1a8b      	subs	r3, r1, r2
 800dd3a:	ed97 5b00 	vldr	d5, [r7]
 800dd3e:	ee07 3a90 	vmov	s15, r3
 800dd42:	15d2      	asrs	r2, r2, #23
 800dd44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dd48:	eea5 6b07 	vfma.f64	d6, d5, d7
 800dd4c:	ed97 5b02 	vldr	d5, [r7, #8]
 800dd50:	ee26 2b06 	vmul.f64	d2, d6, d6
 800dd54:	ee22 1b02 	vmul.f64	d1, d2, d2
 800dd58:	ee07 2a90 	vmov	s15, r2
 800dd5c:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800dd60:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dd64:	ee37 7b05 	vadd.f64	d7, d7, d5
 800dd68:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800dd6c:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800dd70:	eea6 5b04 	vfma.f64	d5, d6, d4
 800dd74:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800dd78:	eea6 4b03 	vfma.f64	d4, d6, d3
 800dd7c:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800dd80:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800dd84:	eea6 7b03 	vfma.f64	d7, d6, d3
 800dd88:	eea2 7b04 	vfma.f64	d7, d2, d4
 800dd8c:	eea5 7b01 	vfma.f64	d7, d5, d1
 800dd90:	ee20 0b07 	vmul.f64	d0, d0, d7
 800dd94:	ee10 1a90 	vmov	r1, s1
 800dd98:	2300      	movs	r3, #0
 800dd9a:	2700      	movs	r7, #0
 800dd9c:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800dda0:	f248 06be 	movw	r6, #32958	; 0x80be
 800dda4:	429f      	cmp	r7, r3
 800dda6:	bf08      	it	eq
 800dda8:	4296      	cmpeq	r6, r2
 800ddaa:	f080 80b1 	bcs.w	800df10 <powf+0x218>
 800ddae:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800df90 <powf+0x298>
 800ddb2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ddb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddba:	dd79      	ble.n	800deb0 <powf+0x1b8>
 800ddbc:	b005      	add	sp, #20
 800ddbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ddc2:	f7ff be0f 	b.w	800d9e4 <__math_oflowf>
 800ddc6:	4298      	cmp	r0, r3
 800ddc8:	d32d      	bcc.n	800de26 <powf+0x12e>
 800ddca:	b952      	cbnz	r2, 800dde2 <powf+0xea>
 800ddcc:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800ddd0:	005b      	lsls	r3, r3, #1
 800ddd2:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800ddd6:	f240 80cd 	bls.w	800df74 <powf+0x27c>
 800ddda:	ee30 0a20 	vadd.f32	s0, s0, s1
 800ddde:	b005      	add	sp, #20
 800dde0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dde2:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800dde6:	d105      	bne.n	800ddf4 <powf+0xfc>
 800dde8:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800ddec:	0076      	lsls	r6, r6, #1
 800ddee:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800ddf2:	e7f0      	b.n	800ddd6 <powf+0xde>
 800ddf4:	004b      	lsls	r3, r1, #1
 800ddf6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800ddfa:	d8ee      	bhi.n	800ddda <powf+0xe2>
 800ddfc:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800de00:	d1eb      	bne.n	800ddda <powf+0xe2>
 800de02:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800de06:	f000 80b5 	beq.w	800df74 <powf+0x27c>
 800de0a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800de0e:	ea6f 0606 	mvn.w	r6, r6
 800de12:	bf34      	ite	cc
 800de14:	2300      	movcc	r3, #0
 800de16:	2301      	movcs	r3, #1
 800de18:	0ff6      	lsrs	r6, r6, #31
 800de1a:	42b3      	cmp	r3, r6
 800de1c:	f040 80ad 	bne.w	800df7a <powf+0x282>
 800de20:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800de24:	e7db      	b.n	800ddde <powf+0xe6>
 800de26:	004f      	lsls	r7, r1, #1
 800de28:	1e7a      	subs	r2, r7, #1
 800de2a:	429a      	cmp	r2, r3
 800de2c:	d31c      	bcc.n	800de68 <powf+0x170>
 800de2e:	2900      	cmp	r1, #0
 800de30:	ee20 0a00 	vmul.f32	s0, s0, s0
 800de34:	da0f      	bge.n	800de56 <powf+0x15e>
 800de36:	ee10 0a90 	vmov	r0, s1
 800de3a:	f7ff ff45 	bl	800dcc8 <checkint>
 800de3e:	2801      	cmp	r0, #1
 800de40:	d109      	bne.n	800de56 <powf+0x15e>
 800de42:	eeb1 0a40 	vneg.f32	s0, s0
 800de46:	b947      	cbnz	r7, 800de5a <powf+0x162>
 800de48:	2e00      	cmp	r6, #0
 800de4a:	dac8      	bge.n	800ddde <powf+0xe6>
 800de4c:	b005      	add	sp, #20
 800de4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800de52:	f7ff bdcd 	b.w	800d9f0 <__math_divzerof>
 800de56:	2000      	movs	r0, #0
 800de58:	e7f5      	b.n	800de46 <powf+0x14e>
 800de5a:	2e00      	cmp	r6, #0
 800de5c:	dabf      	bge.n	800ddde <powf+0xe6>
 800de5e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800de62:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800de66:	e7ba      	b.n	800ddde <powf+0xe6>
 800de68:	2900      	cmp	r1, #0
 800de6a:	da1f      	bge.n	800deac <powf+0x1b4>
 800de6c:	ee10 0a90 	vmov	r0, s1
 800de70:	f7ff ff2a 	bl	800dcc8 <checkint>
 800de74:	b920      	cbnz	r0, 800de80 <powf+0x188>
 800de76:	b005      	add	sp, #20
 800de78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800de7c:	f7ff bdc8 	b.w	800da10 <__math_invalidf>
 800de80:	2801      	cmp	r0, #1
 800de82:	bf14      	ite	ne
 800de84:	2000      	movne	r0, #0
 800de86:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800de8a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800de8e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800de92:	f4bf af44 	bcs.w	800dd1e <powf+0x26>
 800de96:	eddf 7a47 	vldr	s15, [pc, #284]	; 800dfb4 <powf+0x2bc>
 800de9a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800de9e:	ee10 3a10 	vmov	r3, s0
 800dea2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dea6:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800deaa:	e738      	b.n	800dd1e <powf+0x26>
 800deac:	2000      	movs	r0, #0
 800deae:	e7ee      	b.n	800de8e <powf+0x196>
 800deb0:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800df98 <powf+0x2a0>
 800deb4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800deb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800debc:	dd10      	ble.n	800dee0 <powf+0x1e8>
 800debe:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800dec2:	2800      	cmp	r0, #0
 800dec4:	d15c      	bne.n	800df80 <powf+0x288>
 800dec6:	9302      	str	r3, [sp, #8]
 800dec8:	eddd 7a02 	vldr	s15, [sp, #8]
 800decc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ded0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ded4:	eef4 7a47 	vcmp.f32	s15, s14
 800ded8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dedc:	f47f af6e 	bne.w	800ddbc <powf+0xc4>
 800dee0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800dfa0 <powf+0x2a8>
 800dee4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800dee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deec:	d804      	bhi.n	800def8 <powf+0x200>
 800deee:	b005      	add	sp, #20
 800def0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800def4:	f7ff bd6a 	b.w	800d9cc <__math_uflowf>
 800def8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800dfa8 <powf+0x2b0>
 800defc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800df00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df04:	d504      	bpl.n	800df10 <powf+0x218>
 800df06:	b005      	add	sp, #20
 800df08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800df0c:	f7ff bd64 	b.w	800d9d8 <__math_may_uflowf>
 800df10:	4b29      	ldr	r3, [pc, #164]	; (800dfb8 <powf+0x2c0>)
 800df12:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800df16:	ee30 6b07 	vadd.f64	d6, d0, d7
 800df1a:	ed8d 6b00 	vstr	d6, [sp]
 800df1e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800df22:	ee30 7b47 	vsub.f64	d7, d0, d7
 800df26:	e9dd 6700 	ldrd	r6, r7, [sp]
 800df2a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800df2e:	f006 011f 	and.w	r1, r6, #31
 800df32:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800df36:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800df3a:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800df3e:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800df42:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800df46:	eea7 6b05 	vfma.f64	d6, d7, d5
 800df4a:	ee27 5b07 	vmul.f64	d5, d7, d7
 800df4e:	1836      	adds	r6, r6, r0
 800df50:	2300      	movs	r3, #0
 800df52:	eb13 040c 	adds.w	r4, r3, ip
 800df56:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800df5a:	eb41 050e 	adc.w	r5, r1, lr
 800df5e:	eea7 0b04 	vfma.f64	d0, d7, d4
 800df62:	ec45 4b17 	vmov	d7, r4, r5
 800df66:	eea6 0b05 	vfma.f64	d0, d6, d5
 800df6a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800df6e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800df72:	e734      	b.n	800ddde <powf+0xe6>
 800df74:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800df78:	e731      	b.n	800ddde <powf+0xe6>
 800df7a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800dfbc <powf+0x2c4>
 800df7e:	e72e      	b.n	800ddde <powf+0xe6>
 800df80:	9303      	str	r3, [sp, #12]
 800df82:	eddd 7a03 	vldr	s15, [sp, #12]
 800df86:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800df8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df8e:	e7a1      	b.n	800ded4 <powf+0x1dc>
 800df90:	ffd1d571 	.word	0xffd1d571
 800df94:	405fffff 	.word	0x405fffff
 800df98:	ffa3aae2 	.word	0xffa3aae2
 800df9c:	405fffff 	.word	0x405fffff
 800dfa0:	00000000 	.word	0x00000000
 800dfa4:	c062c000 	.word	0xc062c000
 800dfa8:	00000000 	.word	0x00000000
 800dfac:	c062a000 	.word	0xc062a000
 800dfb0:	08015c58 	.word	0x08015c58
 800dfb4:	4b000000 	.word	0x4b000000
 800dfb8:	080158d0 	.word	0x080158d0
 800dfbc:	00000000 	.word	0x00000000

0800dfc0 <tanf>:
 800dfc0:	ee10 3a10 	vmov	r3, s0
 800dfc4:	b507      	push	{r0, r1, r2, lr}
 800dfc6:	4a10      	ldr	r2, [pc, #64]	; (800e008 <tanf+0x48>)
 800dfc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	dc05      	bgt.n	800dfdc <tanf+0x1c>
 800dfd0:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800e00c <tanf+0x4c>
 800dfd4:	2001      	movs	r0, #1
 800dfd6:	f000 fd2d 	bl	800ea34 <__kernel_tanf>
 800dfda:	e004      	b.n	800dfe6 <tanf+0x26>
 800dfdc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dfe0:	db04      	blt.n	800dfec <tanf+0x2c>
 800dfe2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800dfe6:	b003      	add	sp, #12
 800dfe8:	f85d fb04 	ldr.w	pc, [sp], #4
 800dfec:	4668      	mov	r0, sp
 800dfee:	f000 f8ed 	bl	800e1cc <__ieee754_rem_pio2f>
 800dff2:	0040      	lsls	r0, r0, #1
 800dff4:	f000 0002 	and.w	r0, r0, #2
 800dff8:	eddd 0a01 	vldr	s1, [sp, #4]
 800dffc:	ed9d 0a00 	vldr	s0, [sp]
 800e000:	f1c0 0001 	rsb	r0, r0, #1
 800e004:	e7e7      	b.n	800dfd6 <tanf+0x16>
 800e006:	bf00      	nop
 800e008:	3f490fda 	.word	0x3f490fda
 800e00c:	00000000 	.word	0x00000000

0800e010 <fmodf>:
 800e010:	b508      	push	{r3, lr}
 800e012:	ed2d 8b02 	vpush	{d8}
 800e016:	eef0 8a40 	vmov.f32	s17, s0
 800e01a:	eeb0 8a60 	vmov.f32	s16, s1
 800e01e:	f000 f853 	bl	800e0c8 <__ieee754_fmodf>
 800e022:	4b0f      	ldr	r3, [pc, #60]	; (800e060 <fmodf+0x50>)
 800e024:	f993 3000 	ldrsb.w	r3, [r3]
 800e028:	3301      	adds	r3, #1
 800e02a:	d016      	beq.n	800e05a <fmodf+0x4a>
 800e02c:	eeb4 8a48 	vcmp.f32	s16, s16
 800e030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e034:	d611      	bvs.n	800e05a <fmodf+0x4a>
 800e036:	eef4 8a68 	vcmp.f32	s17, s17
 800e03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e03e:	d60c      	bvs.n	800e05a <fmodf+0x4a>
 800e040:	eddf 8a08 	vldr	s17, [pc, #32]	; 800e064 <fmodf+0x54>
 800e044:	eeb4 8a68 	vcmp.f32	s16, s17
 800e048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e04c:	d105      	bne.n	800e05a <fmodf+0x4a>
 800e04e:	f7ff fb37 	bl	800d6c0 <__errno>
 800e052:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e056:	2321      	movs	r3, #33	; 0x21
 800e058:	6003      	str	r3, [r0, #0]
 800e05a:	ecbd 8b02 	vpop	{d8}
 800e05e:	bd08      	pop	{r3, pc}
 800e060:	20000b74 	.word	0x20000b74
 800e064:	00000000 	.word	0x00000000

0800e068 <sinhf>:
 800e068:	b508      	push	{r3, lr}
 800e06a:	ed2d 8b02 	vpush	{d8}
 800e06e:	eef0 8a40 	vmov.f32	s17, s0
 800e072:	f000 f9e7 	bl	800e444 <__ieee754_sinhf>
 800e076:	4b11      	ldr	r3, [pc, #68]	; (800e0bc <sinhf+0x54>)
 800e078:	f993 3000 	ldrsb.w	r3, [r3]
 800e07c:	3301      	adds	r3, #1
 800e07e:	eeb0 8a40 	vmov.f32	s16, s0
 800e082:	d015      	beq.n	800e0b0 <sinhf+0x48>
 800e084:	f000 fed6 	bl	800ee34 <finitef>
 800e088:	b990      	cbnz	r0, 800e0b0 <sinhf+0x48>
 800e08a:	eeb0 0a68 	vmov.f32	s0, s17
 800e08e:	f000 fed1 	bl	800ee34 <finitef>
 800e092:	b168      	cbz	r0, 800e0b0 <sinhf+0x48>
 800e094:	f7ff fb14 	bl	800d6c0 <__errno>
 800e098:	ed9f 8a09 	vldr	s16, [pc, #36]	; 800e0c0 <sinhf+0x58>
 800e09c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800e0c4 <sinhf+0x5c>
 800e0a0:	2322      	movs	r3, #34	; 0x22
 800e0a2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800e0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0aa:	6003      	str	r3, [r0, #0]
 800e0ac:	fe38 8a00 	vselgt.f32	s16, s16, s0
 800e0b0:	eeb0 0a48 	vmov.f32	s0, s16
 800e0b4:	ecbd 8b02 	vpop	{d8}
 800e0b8:	bd08      	pop	{r3, pc}
 800e0ba:	bf00      	nop
 800e0bc:	20000b74 	.word	0x20000b74
 800e0c0:	7f800000 	.word	0x7f800000
 800e0c4:	ff800000 	.word	0xff800000

0800e0c8 <__ieee754_fmodf>:
 800e0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0ca:	ee10 6a90 	vmov	r6, s1
 800e0ce:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800e0d2:	d009      	beq.n	800e0e8 <__ieee754_fmodf+0x20>
 800e0d4:	ee10 2a10 	vmov	r2, s0
 800e0d8:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800e0dc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e0e0:	da02      	bge.n	800e0e8 <__ieee754_fmodf+0x20>
 800e0e2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800e0e6:	dd04      	ble.n	800e0f2 <__ieee754_fmodf+0x2a>
 800e0e8:	ee60 0a20 	vmul.f32	s1, s0, s1
 800e0ec:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800e0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0f2:	42ab      	cmp	r3, r5
 800e0f4:	dbfc      	blt.n	800e0f0 <__ieee754_fmodf+0x28>
 800e0f6:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 800e0fa:	d106      	bne.n	800e10a <__ieee754_fmodf+0x42>
 800e0fc:	4a32      	ldr	r2, [pc, #200]	; (800e1c8 <__ieee754_fmodf+0x100>)
 800e0fe:	0fe3      	lsrs	r3, r4, #31
 800e100:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e104:	ed93 0a00 	vldr	s0, [r3]
 800e108:	e7f2      	b.n	800e0f0 <__ieee754_fmodf+0x28>
 800e10a:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800e10e:	d13f      	bne.n	800e190 <__ieee754_fmodf+0xc8>
 800e110:	0219      	lsls	r1, r3, #8
 800e112:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800e116:	2900      	cmp	r1, #0
 800e118:	dc37      	bgt.n	800e18a <__ieee754_fmodf+0xc2>
 800e11a:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800e11e:	d13d      	bne.n	800e19c <__ieee754_fmodf+0xd4>
 800e120:	022f      	lsls	r7, r5, #8
 800e122:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800e126:	2f00      	cmp	r7, #0
 800e128:	da35      	bge.n	800e196 <__ieee754_fmodf+0xce>
 800e12a:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800e12e:	bfbb      	ittet	lt
 800e130:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800e134:	1a12      	sublt	r2, r2, r0
 800e136:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800e13a:	4093      	lsllt	r3, r2
 800e13c:	bfa8      	it	ge
 800e13e:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800e142:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800e146:	bfb5      	itete	lt
 800e148:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800e14c:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 800e150:	1a52      	sublt	r2, r2, r1
 800e152:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800e156:	bfb8      	it	lt
 800e158:	4095      	lsllt	r5, r2
 800e15a:	1a40      	subs	r0, r0, r1
 800e15c:	1b5a      	subs	r2, r3, r5
 800e15e:	bb00      	cbnz	r0, 800e1a2 <__ieee754_fmodf+0xda>
 800e160:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800e164:	bf38      	it	cc
 800e166:	4613      	movcc	r3, r2
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d0c7      	beq.n	800e0fc <__ieee754_fmodf+0x34>
 800e16c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e170:	db1f      	blt.n	800e1b2 <__ieee754_fmodf+0xea>
 800e172:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800e176:	db1f      	blt.n	800e1b8 <__ieee754_fmodf+0xf0>
 800e178:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800e17c:	317f      	adds	r1, #127	; 0x7f
 800e17e:	4323      	orrs	r3, r4
 800e180:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800e184:	ee00 3a10 	vmov	s0, r3
 800e188:	e7b2      	b.n	800e0f0 <__ieee754_fmodf+0x28>
 800e18a:	3801      	subs	r0, #1
 800e18c:	0049      	lsls	r1, r1, #1
 800e18e:	e7c2      	b.n	800e116 <__ieee754_fmodf+0x4e>
 800e190:	15d8      	asrs	r0, r3, #23
 800e192:	387f      	subs	r0, #127	; 0x7f
 800e194:	e7c1      	b.n	800e11a <__ieee754_fmodf+0x52>
 800e196:	3901      	subs	r1, #1
 800e198:	007f      	lsls	r7, r7, #1
 800e19a:	e7c4      	b.n	800e126 <__ieee754_fmodf+0x5e>
 800e19c:	15e9      	asrs	r1, r5, #23
 800e19e:	397f      	subs	r1, #127	; 0x7f
 800e1a0:	e7c3      	b.n	800e12a <__ieee754_fmodf+0x62>
 800e1a2:	2a00      	cmp	r2, #0
 800e1a4:	da02      	bge.n	800e1ac <__ieee754_fmodf+0xe4>
 800e1a6:	005b      	lsls	r3, r3, #1
 800e1a8:	3801      	subs	r0, #1
 800e1aa:	e7d7      	b.n	800e15c <__ieee754_fmodf+0x94>
 800e1ac:	d0a6      	beq.n	800e0fc <__ieee754_fmodf+0x34>
 800e1ae:	0053      	lsls	r3, r2, #1
 800e1b0:	e7fa      	b.n	800e1a8 <__ieee754_fmodf+0xe0>
 800e1b2:	005b      	lsls	r3, r3, #1
 800e1b4:	3901      	subs	r1, #1
 800e1b6:	e7d9      	b.n	800e16c <__ieee754_fmodf+0xa4>
 800e1b8:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800e1bc:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800e1c0:	3182      	adds	r1, #130	; 0x82
 800e1c2:	410b      	asrs	r3, r1
 800e1c4:	4323      	orrs	r3, r4
 800e1c6:	e7dd      	b.n	800e184 <__ieee754_fmodf+0xbc>
 800e1c8:	08015d80 	.word	0x08015d80

0800e1cc <__ieee754_rem_pio2f>:
 800e1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1ce:	ee10 6a10 	vmov	r6, s0
 800e1d2:	4b8e      	ldr	r3, [pc, #568]	; (800e40c <__ieee754_rem_pio2f+0x240>)
 800e1d4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800e1d8:	429d      	cmp	r5, r3
 800e1da:	b087      	sub	sp, #28
 800e1dc:	eef0 7a40 	vmov.f32	s15, s0
 800e1e0:	4604      	mov	r4, r0
 800e1e2:	dc05      	bgt.n	800e1f0 <__ieee754_rem_pio2f+0x24>
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	ed80 0a00 	vstr	s0, [r0]
 800e1ea:	6043      	str	r3, [r0, #4]
 800e1ec:	2000      	movs	r0, #0
 800e1ee:	e01a      	b.n	800e226 <__ieee754_rem_pio2f+0x5a>
 800e1f0:	4b87      	ldr	r3, [pc, #540]	; (800e410 <__ieee754_rem_pio2f+0x244>)
 800e1f2:	429d      	cmp	r5, r3
 800e1f4:	dc46      	bgt.n	800e284 <__ieee754_rem_pio2f+0xb8>
 800e1f6:	2e00      	cmp	r6, #0
 800e1f8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800e414 <__ieee754_rem_pio2f+0x248>
 800e1fc:	4b86      	ldr	r3, [pc, #536]	; (800e418 <__ieee754_rem_pio2f+0x24c>)
 800e1fe:	f025 050f 	bic.w	r5, r5, #15
 800e202:	dd1f      	ble.n	800e244 <__ieee754_rem_pio2f+0x78>
 800e204:	429d      	cmp	r5, r3
 800e206:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e20a:	d00e      	beq.n	800e22a <__ieee754_rem_pio2f+0x5e>
 800e20c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800e41c <__ieee754_rem_pio2f+0x250>
 800e210:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800e214:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e218:	ed80 0a00 	vstr	s0, [r0]
 800e21c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e220:	2001      	movs	r0, #1
 800e222:	edc4 7a01 	vstr	s15, [r4, #4]
 800e226:	b007      	add	sp, #28
 800e228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e22a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800e420 <__ieee754_rem_pio2f+0x254>
 800e22e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800e424 <__ieee754_rem_pio2f+0x258>
 800e232:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e236:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800e23a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e23e:	edc0 6a00 	vstr	s13, [r0]
 800e242:	e7eb      	b.n	800e21c <__ieee754_rem_pio2f+0x50>
 800e244:	429d      	cmp	r5, r3
 800e246:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e24a:	d00e      	beq.n	800e26a <__ieee754_rem_pio2f+0x9e>
 800e24c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800e41c <__ieee754_rem_pio2f+0x250>
 800e250:	ee37 0a87 	vadd.f32	s0, s15, s14
 800e254:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e258:	ed80 0a00 	vstr	s0, [r0]
 800e25c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e264:	edc4 7a01 	vstr	s15, [r4, #4]
 800e268:	e7dd      	b.n	800e226 <__ieee754_rem_pio2f+0x5a>
 800e26a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800e420 <__ieee754_rem_pio2f+0x254>
 800e26e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800e424 <__ieee754_rem_pio2f+0x258>
 800e272:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e276:	ee77 6a87 	vadd.f32	s13, s15, s14
 800e27a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e27e:	edc0 6a00 	vstr	s13, [r0]
 800e282:	e7eb      	b.n	800e25c <__ieee754_rem_pio2f+0x90>
 800e284:	4b68      	ldr	r3, [pc, #416]	; (800e428 <__ieee754_rem_pio2f+0x25c>)
 800e286:	429d      	cmp	r5, r3
 800e288:	dc72      	bgt.n	800e370 <__ieee754_rem_pio2f+0x1a4>
 800e28a:	f7ff fc47 	bl	800db1c <fabsf>
 800e28e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800e42c <__ieee754_rem_pio2f+0x260>
 800e292:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e296:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e29a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e29e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e2a2:	ee17 0a90 	vmov	r0, s15
 800e2a6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800e414 <__ieee754_rem_pio2f+0x248>
 800e2aa:	eea7 0a67 	vfms.f32	s0, s14, s15
 800e2ae:	281f      	cmp	r0, #31
 800e2b0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800e41c <__ieee754_rem_pio2f+0x250>
 800e2b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2b8:	eeb1 6a47 	vneg.f32	s12, s14
 800e2bc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e2c0:	ee16 2a90 	vmov	r2, s13
 800e2c4:	dc1c      	bgt.n	800e300 <__ieee754_rem_pio2f+0x134>
 800e2c6:	495a      	ldr	r1, [pc, #360]	; (800e430 <__ieee754_rem_pio2f+0x264>)
 800e2c8:	1e47      	subs	r7, r0, #1
 800e2ca:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800e2ce:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800e2d2:	428b      	cmp	r3, r1
 800e2d4:	d014      	beq.n	800e300 <__ieee754_rem_pio2f+0x134>
 800e2d6:	6022      	str	r2, [r4, #0]
 800e2d8:	ed94 7a00 	vldr	s14, [r4]
 800e2dc:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e2e0:	2e00      	cmp	r6, #0
 800e2e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e2e6:	ed84 0a01 	vstr	s0, [r4, #4]
 800e2ea:	da9c      	bge.n	800e226 <__ieee754_rem_pio2f+0x5a>
 800e2ec:	eeb1 7a47 	vneg.f32	s14, s14
 800e2f0:	eeb1 0a40 	vneg.f32	s0, s0
 800e2f4:	ed84 7a00 	vstr	s14, [r4]
 800e2f8:	ed84 0a01 	vstr	s0, [r4, #4]
 800e2fc:	4240      	negs	r0, r0
 800e2fe:	e792      	b.n	800e226 <__ieee754_rem_pio2f+0x5a>
 800e300:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e304:	15eb      	asrs	r3, r5, #23
 800e306:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800e30a:	2d08      	cmp	r5, #8
 800e30c:	dde3      	ble.n	800e2d6 <__ieee754_rem_pio2f+0x10a>
 800e30e:	eddf 7a44 	vldr	s15, [pc, #272]	; 800e420 <__ieee754_rem_pio2f+0x254>
 800e312:	eef0 6a40 	vmov.f32	s13, s0
 800e316:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e31a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800e31e:	eea6 0a27 	vfma.f32	s0, s12, s15
 800e322:	eddf 7a40 	vldr	s15, [pc, #256]	; 800e424 <__ieee754_rem_pio2f+0x258>
 800e326:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800e32a:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800e32e:	eef0 7a40 	vmov.f32	s15, s0
 800e332:	ee15 2a90 	vmov	r2, s11
 800e336:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e33a:	1a5b      	subs	r3, r3, r1
 800e33c:	2b19      	cmp	r3, #25
 800e33e:	dc04      	bgt.n	800e34a <__ieee754_rem_pio2f+0x17e>
 800e340:	edc4 5a00 	vstr	s11, [r4]
 800e344:	eeb0 0a66 	vmov.f32	s0, s13
 800e348:	e7c6      	b.n	800e2d8 <__ieee754_rem_pio2f+0x10c>
 800e34a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800e434 <__ieee754_rem_pio2f+0x268>
 800e34e:	eeb0 0a66 	vmov.f32	s0, s13
 800e352:	eea6 0a25 	vfma.f32	s0, s12, s11
 800e356:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800e35a:	eddf 6a37 	vldr	s13, [pc, #220]	; 800e438 <__ieee754_rem_pio2f+0x26c>
 800e35e:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e362:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800e366:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e36a:	ed84 7a00 	vstr	s14, [r4]
 800e36e:	e7b3      	b.n	800e2d8 <__ieee754_rem_pio2f+0x10c>
 800e370:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800e374:	db06      	blt.n	800e384 <__ieee754_rem_pio2f+0x1b8>
 800e376:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e37a:	edc0 7a01 	vstr	s15, [r0, #4]
 800e37e:	edc0 7a00 	vstr	s15, [r0]
 800e382:	e733      	b.n	800e1ec <__ieee754_rem_pio2f+0x20>
 800e384:	15ea      	asrs	r2, r5, #23
 800e386:	3a86      	subs	r2, #134	; 0x86
 800e388:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800e38c:	ee07 3a90 	vmov	s15, r3
 800e390:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e394:	eddf 6a29 	vldr	s13, [pc, #164]	; 800e43c <__ieee754_rem_pio2f+0x270>
 800e398:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e39c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e3a0:	ed8d 7a03 	vstr	s14, [sp, #12]
 800e3a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e3a8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e3ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e3b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e3b4:	ed8d 7a04 	vstr	s14, [sp, #16]
 800e3b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e3bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3c4:	edcd 7a05 	vstr	s15, [sp, #20]
 800e3c8:	d11e      	bne.n	800e408 <__ieee754_rem_pio2f+0x23c>
 800e3ca:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3d2:	bf14      	ite	ne
 800e3d4:	2302      	movne	r3, #2
 800e3d6:	2301      	moveq	r3, #1
 800e3d8:	4919      	ldr	r1, [pc, #100]	; (800e440 <__ieee754_rem_pio2f+0x274>)
 800e3da:	9101      	str	r1, [sp, #4]
 800e3dc:	2102      	movs	r1, #2
 800e3de:	9100      	str	r1, [sp, #0]
 800e3e0:	a803      	add	r0, sp, #12
 800e3e2:	4621      	mov	r1, r4
 800e3e4:	f000 f89c 	bl	800e520 <__kernel_rem_pio2f>
 800e3e8:	2e00      	cmp	r6, #0
 800e3ea:	f6bf af1c 	bge.w	800e226 <__ieee754_rem_pio2f+0x5a>
 800e3ee:	edd4 7a00 	vldr	s15, [r4]
 800e3f2:	eef1 7a67 	vneg.f32	s15, s15
 800e3f6:	edc4 7a00 	vstr	s15, [r4]
 800e3fa:	edd4 7a01 	vldr	s15, [r4, #4]
 800e3fe:	eef1 7a67 	vneg.f32	s15, s15
 800e402:	edc4 7a01 	vstr	s15, [r4, #4]
 800e406:	e779      	b.n	800e2fc <__ieee754_rem_pio2f+0x130>
 800e408:	2303      	movs	r3, #3
 800e40a:	e7e5      	b.n	800e3d8 <__ieee754_rem_pio2f+0x20c>
 800e40c:	3f490fd8 	.word	0x3f490fd8
 800e410:	4016cbe3 	.word	0x4016cbe3
 800e414:	3fc90f80 	.word	0x3fc90f80
 800e418:	3fc90fd0 	.word	0x3fc90fd0
 800e41c:	37354443 	.word	0x37354443
 800e420:	37354400 	.word	0x37354400
 800e424:	2e85a308 	.word	0x2e85a308
 800e428:	43490f80 	.word	0x43490f80
 800e42c:	3f22f984 	.word	0x3f22f984
 800e430:	08015d88 	.word	0x08015d88
 800e434:	2e85a300 	.word	0x2e85a300
 800e438:	248d3132 	.word	0x248d3132
 800e43c:	43800000 	.word	0x43800000
 800e440:	08015e08 	.word	0x08015e08

0800e444 <__ieee754_sinhf>:
 800e444:	b510      	push	{r4, lr}
 800e446:	ee10 3a10 	vmov	r3, s0
 800e44a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800e44e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800e452:	ed2d 8b02 	vpush	{d8}
 800e456:	eef0 7a40 	vmov.f32	s15, s0
 800e45a:	db06      	blt.n	800e46a <__ieee754_sinhf+0x26>
 800e45c:	ee70 7a00 	vadd.f32	s15, s0, s0
 800e460:	ecbd 8b02 	vpop	{d8}
 800e464:	eeb0 0a67 	vmov.f32	s0, s15
 800e468:	bd10      	pop	{r4, pc}
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	4b28      	ldr	r3, [pc, #160]	; (800e510 <__ieee754_sinhf+0xcc>)
 800e46e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 800e472:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 800e476:	fe28 8a88 	vselge.f32	s16, s17, s16
 800e47a:	429c      	cmp	r4, r3
 800e47c:	dc2a      	bgt.n	800e4d4 <__ieee754_sinhf+0x90>
 800e47e:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 800e482:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800e486:	da08      	bge.n	800e49a <__ieee754_sinhf+0x56>
 800e488:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800e514 <__ieee754_sinhf+0xd0>
 800e48c:	ee30 7a07 	vadd.f32	s14, s0, s14
 800e490:	eeb4 7ae8 	vcmpe.f32	s14, s17
 800e494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e498:	dce2      	bgt.n	800e460 <__ieee754_sinhf+0x1c>
 800e49a:	eeb0 0a67 	vmov.f32	s0, s15
 800e49e:	f7ff fb3d 	bl	800db1c <fabsf>
 800e4a2:	f000 fba9 	bl	800ebf8 <expm1f>
 800e4a6:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800e4aa:	bfbb      	ittet	lt
 800e4ac:	ee20 7a00 	vmullt.f32	s14, s0, s0
 800e4b0:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 800e4b4:	ee70 8a28 	vaddge.f32	s17, s0, s17
 800e4b8:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 800e4bc:	bfad      	iteet	ge
 800e4be:	ee80 7a28 	vdivge.f32	s14, s0, s17
 800e4c2:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 800e4c6:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 800e4ca:	ee77 7a00 	vaddge.f32	s15, s14, s0
 800e4ce:	ee67 7a88 	vmul.f32	s15, s15, s16
 800e4d2:	e7c5      	b.n	800e460 <__ieee754_sinhf+0x1c>
 800e4d4:	4b10      	ldr	r3, [pc, #64]	; (800e518 <__ieee754_sinhf+0xd4>)
 800e4d6:	429c      	cmp	r4, r3
 800e4d8:	dc06      	bgt.n	800e4e8 <__ieee754_sinhf+0xa4>
 800e4da:	f7ff fb1f 	bl	800db1c <fabsf>
 800e4de:	f7ff faa7 	bl	800da30 <expf>
 800e4e2:	ee60 7a08 	vmul.f32	s15, s0, s16
 800e4e6:	e7bb      	b.n	800e460 <__ieee754_sinhf+0x1c>
 800e4e8:	4b0c      	ldr	r3, [pc, #48]	; (800e51c <__ieee754_sinhf+0xd8>)
 800e4ea:	429c      	cmp	r4, r3
 800e4ec:	dc0a      	bgt.n	800e504 <__ieee754_sinhf+0xc0>
 800e4ee:	f7ff fb15 	bl	800db1c <fabsf>
 800e4f2:	ee20 0a28 	vmul.f32	s0, s0, s17
 800e4f6:	f7ff fa9b 	bl	800da30 <expf>
 800e4fa:	ee68 7a00 	vmul.f32	s15, s16, s0
 800e4fe:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e502:	e7ad      	b.n	800e460 <__ieee754_sinhf+0x1c>
 800e504:	ed9f 7a03 	vldr	s14, [pc, #12]	; 800e514 <__ieee754_sinhf+0xd0>
 800e508:	ee60 7a07 	vmul.f32	s15, s0, s14
 800e50c:	e7a8      	b.n	800e460 <__ieee754_sinhf+0x1c>
 800e50e:	bf00      	nop
 800e510:	41afffff 	.word	0x41afffff
 800e514:	7cf0bdc2 	.word	0x7cf0bdc2
 800e518:	42b17217 	.word	0x42b17217
 800e51c:	42b2d4fc 	.word	0x42b2d4fc

0800e520 <__kernel_rem_pio2f>:
 800e520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e524:	ed2d 8b04 	vpush	{d8-d9}
 800e528:	b0d7      	sub	sp, #348	; 0x15c
 800e52a:	4616      	mov	r6, r2
 800e52c:	4698      	mov	r8, r3
 800e52e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800e530:	4bbb      	ldr	r3, [pc, #748]	; (800e820 <__kernel_rem_pio2f+0x300>)
 800e532:	9001      	str	r0, [sp, #4]
 800e534:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800e538:	1d33      	adds	r3, r6, #4
 800e53a:	460d      	mov	r5, r1
 800e53c:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 800e540:	db29      	blt.n	800e596 <__kernel_rem_pio2f+0x76>
 800e542:	1ef1      	subs	r1, r6, #3
 800e544:	bf48      	it	mi
 800e546:	1d31      	addmi	r1, r6, #4
 800e548:	10c9      	asrs	r1, r1, #3
 800e54a:	1c4c      	adds	r4, r1, #1
 800e54c:	00e3      	lsls	r3, r4, #3
 800e54e:	9302      	str	r3, [sp, #8]
 800e550:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800e552:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800e830 <__kernel_rem_pio2f+0x310>
 800e556:	eba1 0009 	sub.w	r0, r1, r9
 800e55a:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800e55e:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800e562:	eb07 0c09 	add.w	ip, r7, r9
 800e566:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800e56a:	2300      	movs	r3, #0
 800e56c:	4563      	cmp	r3, ip
 800e56e:	dd14      	ble.n	800e59a <__kernel_rem_pio2f+0x7a>
 800e570:	ab1a      	add	r3, sp, #104	; 0x68
 800e572:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800e576:	46cc      	mov	ip, r9
 800e578:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 800e57c:	f1c8 0b01 	rsb	fp, r8, #1
 800e580:	eb0b 020c 	add.w	r2, fp, ip
 800e584:	4297      	cmp	r7, r2
 800e586:	db27      	blt.n	800e5d8 <__kernel_rem_pio2f+0xb8>
 800e588:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e58c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800e830 <__kernel_rem_pio2f+0x310>
 800e590:	4618      	mov	r0, r3
 800e592:	2200      	movs	r2, #0
 800e594:	e016      	b.n	800e5c4 <__kernel_rem_pio2f+0xa4>
 800e596:	2100      	movs	r1, #0
 800e598:	e7d7      	b.n	800e54a <__kernel_rem_pio2f+0x2a>
 800e59a:	42d8      	cmn	r0, r3
 800e59c:	bf5d      	ittte	pl
 800e59e:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800e5a2:	ee07 2a90 	vmovpl	s15, r2
 800e5a6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800e5aa:	eef0 7a47 	vmovmi.f32	s15, s14
 800e5ae:	ecea 7a01 	vstmia	sl!, {s15}
 800e5b2:	3301      	adds	r3, #1
 800e5b4:	e7da      	b.n	800e56c <__kernel_rem_pio2f+0x4c>
 800e5b6:	ecfe 6a01 	vldmia	lr!, {s13}
 800e5ba:	ed90 7a00 	vldr	s14, [r0]
 800e5be:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e5c2:	3201      	adds	r2, #1
 800e5c4:	454a      	cmp	r2, r9
 800e5c6:	f1a0 0004 	sub.w	r0, r0, #4
 800e5ca:	ddf4      	ble.n	800e5b6 <__kernel_rem_pio2f+0x96>
 800e5cc:	ecea 7a01 	vstmia	sl!, {s15}
 800e5d0:	3304      	adds	r3, #4
 800e5d2:	f10c 0c01 	add.w	ip, ip, #1
 800e5d6:	e7d3      	b.n	800e580 <__kernel_rem_pio2f+0x60>
 800e5d8:	ab06      	add	r3, sp, #24
 800e5da:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800e5de:	9304      	str	r3, [sp, #16]
 800e5e0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800e5e2:	eddf 8a92 	vldr	s17, [pc, #584]	; 800e82c <__kernel_rem_pio2f+0x30c>
 800e5e6:	ed9f 9a90 	vldr	s18, [pc, #576]	; 800e828 <__kernel_rem_pio2f+0x308>
 800e5ea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e5ee:	9303      	str	r3, [sp, #12]
 800e5f0:	46ba      	mov	sl, r7
 800e5f2:	ab56      	add	r3, sp, #344	; 0x158
 800e5f4:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800e5f8:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800e5fc:	ab06      	add	r3, sp, #24
 800e5fe:	4618      	mov	r0, r3
 800e600:	4652      	mov	r2, sl
 800e602:	2a00      	cmp	r2, #0
 800e604:	dc51      	bgt.n	800e6aa <__kernel_rem_pio2f+0x18a>
 800e606:	4620      	mov	r0, r4
 800e608:	9305      	str	r3, [sp, #20]
 800e60a:	f000 fc63 	bl	800eed4 <scalbnf>
 800e60e:	eeb0 8a40 	vmov.f32	s16, s0
 800e612:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800e616:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e61a:	f000 fc19 	bl	800ee50 <floorf>
 800e61e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800e622:	eea0 8a67 	vfms.f32	s16, s0, s15
 800e626:	2c00      	cmp	r4, #0
 800e628:	9b05      	ldr	r3, [sp, #20]
 800e62a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800e62e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800e632:	edcd 7a00 	vstr	s15, [sp]
 800e636:	ee38 8a40 	vsub.f32	s16, s16, s0
 800e63a:	dd4b      	ble.n	800e6d4 <__kernel_rem_pio2f+0x1b4>
 800e63c:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 800e640:	aa06      	add	r2, sp, #24
 800e642:	f1c4 0e08 	rsb	lr, r4, #8
 800e646:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800e64a:	ee17 1a90 	vmov	r1, s15
 800e64e:	fa42 f00e 	asr.w	r0, r2, lr
 800e652:	4401      	add	r1, r0
 800e654:	9100      	str	r1, [sp, #0]
 800e656:	fa00 f00e 	lsl.w	r0, r0, lr
 800e65a:	a906      	add	r1, sp, #24
 800e65c:	1a12      	subs	r2, r2, r0
 800e65e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800e662:	f1c4 0007 	rsb	r0, r4, #7
 800e666:	fa42 fb00 	asr.w	fp, r2, r0
 800e66a:	f1bb 0f00 	cmp.w	fp, #0
 800e66e:	dd43      	ble.n	800e6f8 <__kernel_rem_pio2f+0x1d8>
 800e670:	9a00      	ldr	r2, [sp, #0]
 800e672:	f04f 0e00 	mov.w	lr, #0
 800e676:	3201      	adds	r2, #1
 800e678:	9200      	str	r2, [sp, #0]
 800e67a:	4670      	mov	r0, lr
 800e67c:	45f2      	cmp	sl, lr
 800e67e:	dc6c      	bgt.n	800e75a <__kernel_rem_pio2f+0x23a>
 800e680:	2c00      	cmp	r4, #0
 800e682:	dd04      	ble.n	800e68e <__kernel_rem_pio2f+0x16e>
 800e684:	2c01      	cmp	r4, #1
 800e686:	d079      	beq.n	800e77c <__kernel_rem_pio2f+0x25c>
 800e688:	2c02      	cmp	r4, #2
 800e68a:	f000 8082 	beq.w	800e792 <__kernel_rem_pio2f+0x272>
 800e68e:	f1bb 0f02 	cmp.w	fp, #2
 800e692:	d131      	bne.n	800e6f8 <__kernel_rem_pio2f+0x1d8>
 800e694:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e698:	ee30 8a48 	vsub.f32	s16, s0, s16
 800e69c:	b360      	cbz	r0, 800e6f8 <__kernel_rem_pio2f+0x1d8>
 800e69e:	4620      	mov	r0, r4
 800e6a0:	f000 fc18 	bl	800eed4 <scalbnf>
 800e6a4:	ee38 8a40 	vsub.f32	s16, s16, s0
 800e6a8:	e026      	b.n	800e6f8 <__kernel_rem_pio2f+0x1d8>
 800e6aa:	ee60 7a28 	vmul.f32	s15, s0, s17
 800e6ae:	3a01      	subs	r2, #1
 800e6b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e6b4:	a942      	add	r1, sp, #264	; 0x108
 800e6b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e6ba:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800e6be:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800e6c2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e6c6:	eca0 0a01 	vstmia	r0!, {s0}
 800e6ca:	ed9c 0a00 	vldr	s0, [ip]
 800e6ce:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e6d2:	e796      	b.n	800e602 <__kernel_rem_pio2f+0xe2>
 800e6d4:	d107      	bne.n	800e6e6 <__kernel_rem_pio2f+0x1c6>
 800e6d6:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 800e6da:	a906      	add	r1, sp, #24
 800e6dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800e6e0:	ea4f 2b22 	mov.w	fp, r2, asr #8
 800e6e4:	e7c1      	b.n	800e66a <__kernel_rem_pio2f+0x14a>
 800e6e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e6ea:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6f2:	da2f      	bge.n	800e754 <__kernel_rem_pio2f+0x234>
 800e6f4:	f04f 0b00 	mov.w	fp, #0
 800e6f8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e6fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e700:	f040 8098 	bne.w	800e834 <__kernel_rem_pio2f+0x314>
 800e704:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800e708:	469c      	mov	ip, r3
 800e70a:	2200      	movs	r2, #0
 800e70c:	45bc      	cmp	ip, r7
 800e70e:	da48      	bge.n	800e7a2 <__kernel_rem_pio2f+0x282>
 800e710:	2a00      	cmp	r2, #0
 800e712:	d05f      	beq.n	800e7d4 <__kernel_rem_pio2f+0x2b4>
 800e714:	aa06      	add	r2, sp, #24
 800e716:	3c08      	subs	r4, #8
 800e718:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e71c:	2900      	cmp	r1, #0
 800e71e:	d07d      	beq.n	800e81c <__kernel_rem_pio2f+0x2fc>
 800e720:	4620      	mov	r0, r4
 800e722:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e726:	9301      	str	r3, [sp, #4]
 800e728:	f000 fbd4 	bl	800eed4 <scalbnf>
 800e72c:	9b01      	ldr	r3, [sp, #4]
 800e72e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800e82c <__kernel_rem_pio2f+0x30c>
 800e732:	4619      	mov	r1, r3
 800e734:	2900      	cmp	r1, #0
 800e736:	f280 80af 	bge.w	800e898 <__kernel_rem_pio2f+0x378>
 800e73a:	4618      	mov	r0, r3
 800e73c:	2400      	movs	r4, #0
 800e73e:	2800      	cmp	r0, #0
 800e740:	f2c0 80d0 	blt.w	800e8e4 <__kernel_rem_pio2f+0x3c4>
 800e744:	a942      	add	r1, sp, #264	; 0x108
 800e746:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800e74a:	4a36      	ldr	r2, [pc, #216]	; (800e824 <__kernel_rem_pio2f+0x304>)
 800e74c:	eddf 7a38 	vldr	s15, [pc, #224]	; 800e830 <__kernel_rem_pio2f+0x310>
 800e750:	2100      	movs	r1, #0
 800e752:	e0bb      	b.n	800e8cc <__kernel_rem_pio2f+0x3ac>
 800e754:	f04f 0b02 	mov.w	fp, #2
 800e758:	e78a      	b.n	800e670 <__kernel_rem_pio2f+0x150>
 800e75a:	681a      	ldr	r2, [r3, #0]
 800e75c:	b948      	cbnz	r0, 800e772 <__kernel_rem_pio2f+0x252>
 800e75e:	b11a      	cbz	r2, 800e768 <__kernel_rem_pio2f+0x248>
 800e760:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800e764:	601a      	str	r2, [r3, #0]
 800e766:	2201      	movs	r2, #1
 800e768:	f10e 0e01 	add.w	lr, lr, #1
 800e76c:	3304      	adds	r3, #4
 800e76e:	4610      	mov	r0, r2
 800e770:	e784      	b.n	800e67c <__kernel_rem_pio2f+0x15c>
 800e772:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800e776:	601a      	str	r2, [r3, #0]
 800e778:	4602      	mov	r2, r0
 800e77a:	e7f5      	b.n	800e768 <__kernel_rem_pio2f+0x248>
 800e77c:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 800e780:	ab06      	add	r3, sp, #24
 800e782:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800e786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e78a:	aa06      	add	r2, sp, #24
 800e78c:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 800e790:	e77d      	b.n	800e68e <__kernel_rem_pio2f+0x16e>
 800e792:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 800e796:	ab06      	add	r3, sp, #24
 800e798:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800e79c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e7a0:	e7f3      	b.n	800e78a <__kernel_rem_pio2f+0x26a>
 800e7a2:	a906      	add	r1, sp, #24
 800e7a4:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 800e7a8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800e7ac:	4302      	orrs	r2, r0
 800e7ae:	e7ad      	b.n	800e70c <__kernel_rem_pio2f+0x1ec>
 800e7b0:	3001      	adds	r0, #1
 800e7b2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e7b6:	2a00      	cmp	r2, #0
 800e7b8:	d0fa      	beq.n	800e7b0 <__kernel_rem_pio2f+0x290>
 800e7ba:	a91a      	add	r1, sp, #104	; 0x68
 800e7bc:	eb0a 0208 	add.w	r2, sl, r8
 800e7c0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800e7c4:	f10a 0301 	add.w	r3, sl, #1
 800e7c8:	eb0a 0100 	add.w	r1, sl, r0
 800e7cc:	4299      	cmp	r1, r3
 800e7ce:	da04      	bge.n	800e7da <__kernel_rem_pio2f+0x2ba>
 800e7d0:	468a      	mov	sl, r1
 800e7d2:	e70e      	b.n	800e5f2 <__kernel_rem_pio2f+0xd2>
 800e7d4:	9b04      	ldr	r3, [sp, #16]
 800e7d6:	2001      	movs	r0, #1
 800e7d8:	e7eb      	b.n	800e7b2 <__kernel_rem_pio2f+0x292>
 800e7da:	9803      	ldr	r0, [sp, #12]
 800e7dc:	f8dd c004 	ldr.w	ip, [sp, #4]
 800e7e0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800e7e4:	9000      	str	r0, [sp, #0]
 800e7e6:	ee07 0a90 	vmov	s15, r0
 800e7ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e7ee:	2000      	movs	r0, #0
 800e7f0:	ece2 7a01 	vstmia	r2!, {s15}
 800e7f4:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800e830 <__kernel_rem_pio2f+0x310>
 800e7f8:	4696      	mov	lr, r2
 800e7fa:	4548      	cmp	r0, r9
 800e7fc:	dd06      	ble.n	800e80c <__kernel_rem_pio2f+0x2ec>
 800e7fe:	a842      	add	r0, sp, #264	; 0x108
 800e800:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800e804:	edc0 7a00 	vstr	s15, [r0]
 800e808:	3301      	adds	r3, #1
 800e80a:	e7df      	b.n	800e7cc <__kernel_rem_pio2f+0x2ac>
 800e80c:	ecfc 6a01 	vldmia	ip!, {s13}
 800e810:	ed3e 7a01 	vldmdb	lr!, {s14}
 800e814:	3001      	adds	r0, #1
 800e816:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e81a:	e7ee      	b.n	800e7fa <__kernel_rem_pio2f+0x2da>
 800e81c:	3b01      	subs	r3, #1
 800e81e:	e779      	b.n	800e714 <__kernel_rem_pio2f+0x1f4>
 800e820:	0801614c 	.word	0x0801614c
 800e824:	08016120 	.word	0x08016120
 800e828:	43800000 	.word	0x43800000
 800e82c:	3b800000 	.word	0x3b800000
 800e830:	00000000 	.word	0x00000000
 800e834:	9b02      	ldr	r3, [sp, #8]
 800e836:	eeb0 0a48 	vmov.f32	s0, s16
 800e83a:	1b98      	subs	r0, r3, r6
 800e83c:	f000 fb4a 	bl	800eed4 <scalbnf>
 800e840:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800e828 <__kernel_rem_pio2f+0x308>
 800e844:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e84c:	db1b      	blt.n	800e886 <__kernel_rem_pio2f+0x366>
 800e84e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800e82c <__kernel_rem_pio2f+0x30c>
 800e852:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e856:	aa06      	add	r2, sp, #24
 800e858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e85c:	a906      	add	r1, sp, #24
 800e85e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e862:	3408      	adds	r4, #8
 800e864:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e86c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e870:	ee10 3a10 	vmov	r3, s0
 800e874:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800e878:	ee17 2a90 	vmov	r2, s15
 800e87c:	f10a 0301 	add.w	r3, sl, #1
 800e880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e884:	e74c      	b.n	800e720 <__kernel_rem_pio2f+0x200>
 800e886:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e88a:	aa06      	add	r2, sp, #24
 800e88c:	ee10 3a10 	vmov	r3, s0
 800e890:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800e894:	4653      	mov	r3, sl
 800e896:	e743      	b.n	800e720 <__kernel_rem_pio2f+0x200>
 800e898:	aa42      	add	r2, sp, #264	; 0x108
 800e89a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800e89e:	aa06      	add	r2, sp, #24
 800e8a0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e8a4:	9201      	str	r2, [sp, #4]
 800e8a6:	ee07 2a90 	vmov	s15, r2
 800e8aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e8ae:	3901      	subs	r1, #1
 800e8b0:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e8b4:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e8b8:	edc0 7a00 	vstr	s15, [r0]
 800e8bc:	e73a      	b.n	800e734 <__kernel_rem_pio2f+0x214>
 800e8be:	ecf2 6a01 	vldmia	r2!, {s13}
 800e8c2:	ecb6 7a01 	vldmia	r6!, {s14}
 800e8c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e8ca:	3101      	adds	r1, #1
 800e8cc:	42b9      	cmp	r1, r7
 800e8ce:	dc01      	bgt.n	800e8d4 <__kernel_rem_pio2f+0x3b4>
 800e8d0:	428c      	cmp	r4, r1
 800e8d2:	daf4      	bge.n	800e8be <__kernel_rem_pio2f+0x39e>
 800e8d4:	aa56      	add	r2, sp, #344	; 0x158
 800e8d6:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800e8da:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800e8de:	3801      	subs	r0, #1
 800e8e0:	3401      	adds	r4, #1
 800e8e2:	e72c      	b.n	800e73e <__kernel_rem_pio2f+0x21e>
 800e8e4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800e8e6:	2a02      	cmp	r2, #2
 800e8e8:	dc0a      	bgt.n	800e900 <__kernel_rem_pio2f+0x3e0>
 800e8ea:	2a00      	cmp	r2, #0
 800e8ec:	dc61      	bgt.n	800e9b2 <__kernel_rem_pio2f+0x492>
 800e8ee:	d03c      	beq.n	800e96a <__kernel_rem_pio2f+0x44a>
 800e8f0:	9b00      	ldr	r3, [sp, #0]
 800e8f2:	f003 0007 	and.w	r0, r3, #7
 800e8f6:	b057      	add	sp, #348	; 0x15c
 800e8f8:	ecbd 8b04 	vpop	{d8-d9}
 800e8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e900:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800e902:	2a03      	cmp	r2, #3
 800e904:	d1f4      	bne.n	800e8f0 <__kernel_rem_pio2f+0x3d0>
 800e906:	aa2e      	add	r2, sp, #184	; 0xb8
 800e908:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800e90c:	4608      	mov	r0, r1
 800e90e:	461c      	mov	r4, r3
 800e910:	2c00      	cmp	r4, #0
 800e912:	f1a0 0004 	sub.w	r0, r0, #4
 800e916:	dc59      	bgt.n	800e9cc <__kernel_rem_pio2f+0x4ac>
 800e918:	4618      	mov	r0, r3
 800e91a:	2801      	cmp	r0, #1
 800e91c:	f1a1 0104 	sub.w	r1, r1, #4
 800e920:	dc64      	bgt.n	800e9ec <__kernel_rem_pio2f+0x4cc>
 800e922:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 800e830 <__kernel_rem_pio2f+0x310>
 800e926:	2b01      	cmp	r3, #1
 800e928:	dc70      	bgt.n	800ea0c <__kernel_rem_pio2f+0x4ec>
 800e92a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800e92e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800e932:	f1bb 0f00 	cmp.w	fp, #0
 800e936:	d172      	bne.n	800ea1e <__kernel_rem_pio2f+0x4fe>
 800e938:	edc5 6a00 	vstr	s13, [r5]
 800e93c:	ed85 7a01 	vstr	s14, [r5, #4]
 800e940:	edc5 7a02 	vstr	s15, [r5, #8]
 800e944:	e7d4      	b.n	800e8f0 <__kernel_rem_pio2f+0x3d0>
 800e946:	aa2e      	add	r2, sp, #184	; 0xb8
 800e948:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800e94c:	ed91 7a00 	vldr	s14, [r1]
 800e950:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e954:	3b01      	subs	r3, #1
 800e956:	2b00      	cmp	r3, #0
 800e958:	daf5      	bge.n	800e946 <__kernel_rem_pio2f+0x426>
 800e95a:	f1bb 0f00 	cmp.w	fp, #0
 800e95e:	d001      	beq.n	800e964 <__kernel_rem_pio2f+0x444>
 800e960:	eef1 7a67 	vneg.f32	s15, s15
 800e964:	edc5 7a00 	vstr	s15, [r5]
 800e968:	e7c2      	b.n	800e8f0 <__kernel_rem_pio2f+0x3d0>
 800e96a:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800e830 <__kernel_rem_pio2f+0x310>
 800e96e:	e7f2      	b.n	800e956 <__kernel_rem_pio2f+0x436>
 800e970:	aa2e      	add	r2, sp, #184	; 0xb8
 800e972:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800e976:	edd0 7a00 	vldr	s15, [r0]
 800e97a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e97e:	3901      	subs	r1, #1
 800e980:	2900      	cmp	r1, #0
 800e982:	daf5      	bge.n	800e970 <__kernel_rem_pio2f+0x450>
 800e984:	f1bb 0f00 	cmp.w	fp, #0
 800e988:	d017      	beq.n	800e9ba <__kernel_rem_pio2f+0x49a>
 800e98a:	eef1 7a47 	vneg.f32	s15, s14
 800e98e:	edc5 7a00 	vstr	s15, [r5]
 800e992:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800e996:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e99a:	a82f      	add	r0, sp, #188	; 0xbc
 800e99c:	2101      	movs	r1, #1
 800e99e:	428b      	cmp	r3, r1
 800e9a0:	da0e      	bge.n	800e9c0 <__kernel_rem_pio2f+0x4a0>
 800e9a2:	f1bb 0f00 	cmp.w	fp, #0
 800e9a6:	d001      	beq.n	800e9ac <__kernel_rem_pio2f+0x48c>
 800e9a8:	eef1 7a67 	vneg.f32	s15, s15
 800e9ac:	edc5 7a01 	vstr	s15, [r5, #4]
 800e9b0:	e79e      	b.n	800e8f0 <__kernel_rem_pio2f+0x3d0>
 800e9b2:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800e830 <__kernel_rem_pio2f+0x310>
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	e7e2      	b.n	800e980 <__kernel_rem_pio2f+0x460>
 800e9ba:	eef0 7a47 	vmov.f32	s15, s14
 800e9be:	e7e6      	b.n	800e98e <__kernel_rem_pio2f+0x46e>
 800e9c0:	ecb0 7a01 	vldmia	r0!, {s14}
 800e9c4:	3101      	adds	r1, #1
 800e9c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e9ca:	e7e8      	b.n	800e99e <__kernel_rem_pio2f+0x47e>
 800e9cc:	edd0 7a00 	vldr	s15, [r0]
 800e9d0:	edd0 6a01 	vldr	s13, [r0, #4]
 800e9d4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e9d8:	3c01      	subs	r4, #1
 800e9da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e9de:	ed80 7a00 	vstr	s14, [r0]
 800e9e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9e6:	edc0 7a01 	vstr	s15, [r0, #4]
 800e9ea:	e791      	b.n	800e910 <__kernel_rem_pio2f+0x3f0>
 800e9ec:	edd1 7a00 	vldr	s15, [r1]
 800e9f0:	edd1 6a01 	vldr	s13, [r1, #4]
 800e9f4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e9f8:	3801      	subs	r0, #1
 800e9fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e9fe:	ed81 7a00 	vstr	s14, [r1]
 800ea02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea06:	edc1 7a01 	vstr	s15, [r1, #4]
 800ea0a:	e786      	b.n	800e91a <__kernel_rem_pio2f+0x3fa>
 800ea0c:	aa2e      	add	r2, sp, #184	; 0xb8
 800ea0e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800ea12:	ed91 7a00 	vldr	s14, [r1]
 800ea16:	3b01      	subs	r3, #1
 800ea18:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ea1c:	e783      	b.n	800e926 <__kernel_rem_pio2f+0x406>
 800ea1e:	eef1 6a66 	vneg.f32	s13, s13
 800ea22:	eeb1 7a47 	vneg.f32	s14, s14
 800ea26:	edc5 6a00 	vstr	s13, [r5]
 800ea2a:	ed85 7a01 	vstr	s14, [r5, #4]
 800ea2e:	eef1 7a67 	vneg.f32	s15, s15
 800ea32:	e785      	b.n	800e940 <__kernel_rem_pio2f+0x420>

0800ea34 <__kernel_tanf>:
 800ea34:	b508      	push	{r3, lr}
 800ea36:	ee10 3a10 	vmov	r3, s0
 800ea3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ea3e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800ea42:	eef0 7a40 	vmov.f32	s15, s0
 800ea46:	da17      	bge.n	800ea78 <__kernel_tanf+0x44>
 800ea48:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800ea4c:	ee17 1a10 	vmov	r1, s14
 800ea50:	bb41      	cbnz	r1, 800eaa4 <__kernel_tanf+0x70>
 800ea52:	1c43      	adds	r3, r0, #1
 800ea54:	4313      	orrs	r3, r2
 800ea56:	d108      	bne.n	800ea6a <__kernel_tanf+0x36>
 800ea58:	f7ff f860 	bl	800db1c <fabsf>
 800ea5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ea60:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ea64:	eeb0 0a67 	vmov.f32	s0, s15
 800ea68:	bd08      	pop	{r3, pc}
 800ea6a:	2801      	cmp	r0, #1
 800ea6c:	d0fa      	beq.n	800ea64 <__kernel_tanf+0x30>
 800ea6e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ea72:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ea76:	e7f5      	b.n	800ea64 <__kernel_tanf+0x30>
 800ea78:	494d      	ldr	r1, [pc, #308]	; (800ebb0 <__kernel_tanf+0x17c>)
 800ea7a:	428a      	cmp	r2, r1
 800ea7c:	db12      	blt.n	800eaa4 <__kernel_tanf+0x70>
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	bfb8      	it	lt
 800ea82:	eef1 7a40 	vneglt.f32	s15, s0
 800ea86:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 800ebb4 <__kernel_tanf+0x180>
 800ea8a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ea8e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800ebb8 <__kernel_tanf+0x184>
 800ea92:	bfb8      	it	lt
 800ea94:	eef1 0a60 	vneglt.f32	s1, s1
 800ea98:	ee70 0a60 	vsub.f32	s1, s0, s1
 800ea9c:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800eaa0:	eddf 0a46 	vldr	s1, [pc, #280]	; 800ebbc <__kernel_tanf+0x188>
 800eaa4:	eddf 5a46 	vldr	s11, [pc, #280]	; 800ebc0 <__kernel_tanf+0x18c>
 800eaa8:	ed9f 6a46 	vldr	s12, [pc, #280]	; 800ebc4 <__kernel_tanf+0x190>
 800eaac:	ed9f 5a46 	vldr	s10, [pc, #280]	; 800ebc8 <__kernel_tanf+0x194>
 800eab0:	493f      	ldr	r1, [pc, #252]	; (800ebb0 <__kernel_tanf+0x17c>)
 800eab2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800eab6:	428a      	cmp	r2, r1
 800eab8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800eabc:	eea7 6a25 	vfma.f32	s12, s14, s11
 800eac0:	eddf 5a42 	vldr	s11, [pc, #264]	; 800ebcc <__kernel_tanf+0x198>
 800eac4:	eee6 5a07 	vfma.f32	s11, s12, s14
 800eac8:	ed9f 6a41 	vldr	s12, [pc, #260]	; 800ebd0 <__kernel_tanf+0x19c>
 800eacc:	eea5 6a87 	vfma.f32	s12, s11, s14
 800ead0:	eddf 5a40 	vldr	s11, [pc, #256]	; 800ebd4 <__kernel_tanf+0x1a0>
 800ead4:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ead8:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 800ebd8 <__kernel_tanf+0x1a4>
 800eadc:	eea5 6a87 	vfma.f32	s12, s11, s14
 800eae0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800ebdc <__kernel_tanf+0x1a8>
 800eae4:	eee7 5a05 	vfma.f32	s11, s14, s10
 800eae8:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800ebe0 <__kernel_tanf+0x1ac>
 800eaec:	eea5 5a87 	vfma.f32	s10, s11, s14
 800eaf0:	eddf 5a3c 	vldr	s11, [pc, #240]	; 800ebe4 <__kernel_tanf+0x1b0>
 800eaf4:	eee5 5a07 	vfma.f32	s11, s10, s14
 800eaf8:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 800ebe8 <__kernel_tanf+0x1b4>
 800eafc:	eea5 5a87 	vfma.f32	s10, s11, s14
 800eb00:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800ebec <__kernel_tanf+0x1b8>
 800eb04:	eee5 5a07 	vfma.f32	s11, s10, s14
 800eb08:	eeb0 7a65 	vmov.f32	s14, s11
 800eb0c:	eea7 6a26 	vfma.f32	s12, s14, s13
 800eb10:	ee67 5aa6 	vmul.f32	s11, s15, s13
 800eb14:	eeb0 7a46 	vmov.f32	s14, s12
 800eb18:	eeb0 6a60 	vmov.f32	s12, s1
 800eb1c:	eea7 6a25 	vfma.f32	s12, s14, s11
 800eb20:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800ebf0 <__kernel_tanf+0x1bc>
 800eb24:	eee6 0a26 	vfma.f32	s1, s12, s13
 800eb28:	eee5 0a87 	vfma.f32	s1, s11, s14
 800eb2c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800eb30:	db1d      	blt.n	800eb6e <__kernel_tanf+0x13a>
 800eb32:	ee06 0a90 	vmov	s13, r0
 800eb36:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 800eb3a:	ee27 6a07 	vmul.f32	s12, s14, s14
 800eb3e:	ee37 7a00 	vadd.f32	s14, s14, s0
 800eb42:	179b      	asrs	r3, r3, #30
 800eb44:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800eb48:	f003 0302 	and.w	r3, r3, #2
 800eb4c:	f1c3 0301 	rsb	r3, r3, #1
 800eb50:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800eb54:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800eb58:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800eb5c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800eb60:	ee07 3a90 	vmov	s15, r3
 800eb64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb68:	ee67 7a80 	vmul.f32	s15, s15, s0
 800eb6c:	e77a      	b.n	800ea64 <__kernel_tanf+0x30>
 800eb6e:	2801      	cmp	r0, #1
 800eb70:	d01b      	beq.n	800ebaa <__kernel_tanf+0x176>
 800eb72:	4b20      	ldr	r3, [pc, #128]	; (800ebf4 <__kernel_tanf+0x1c0>)
 800eb74:	ee17 2a10 	vmov	r2, s14
 800eb78:	401a      	ands	r2, r3
 800eb7a:	ee06 2a10 	vmov	s12, r2
 800eb7e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800eb82:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800eb86:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800eb8a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800eb8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eb92:	ee16 2a90 	vmov	r2, s13
 800eb96:	4013      	ands	r3, r2
 800eb98:	ee07 3a90 	vmov	s15, r3
 800eb9c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800eba0:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800eba4:	eee7 7a26 	vfma.f32	s15, s14, s13
 800eba8:	e75c      	b.n	800ea64 <__kernel_tanf+0x30>
 800ebaa:	eef0 7a47 	vmov.f32	s15, s14
 800ebae:	e759      	b.n	800ea64 <__kernel_tanf+0x30>
 800ebb0:	3f2ca140 	.word	0x3f2ca140
 800ebb4:	3f490fda 	.word	0x3f490fda
 800ebb8:	33222168 	.word	0x33222168
 800ebbc:	00000000 	.word	0x00000000
 800ebc0:	b79bae5f 	.word	0xb79bae5f
 800ebc4:	38a3f445 	.word	0x38a3f445
 800ebc8:	37d95384 	.word	0x37d95384
 800ebcc:	3a1a26c8 	.word	0x3a1a26c8
 800ebd0:	3b6b6916 	.word	0x3b6b6916
 800ebd4:	3cb327a4 	.word	0x3cb327a4
 800ebd8:	3e088889 	.word	0x3e088889
 800ebdc:	3895c07a 	.word	0x3895c07a
 800ebe0:	398137b9 	.word	0x398137b9
 800ebe4:	3abede48 	.word	0x3abede48
 800ebe8:	3c11371f 	.word	0x3c11371f
 800ebec:	3d5d0dd1 	.word	0x3d5d0dd1
 800ebf0:	3eaaaaab 	.word	0x3eaaaaab
 800ebf4:	fffff000 	.word	0xfffff000

0800ebf8 <expm1f>:
 800ebf8:	ee10 2a10 	vmov	r2, s0
 800ebfc:	497e      	ldr	r1, [pc, #504]	; (800edf8 <expm1f+0x200>)
 800ebfe:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800ec02:	428b      	cmp	r3, r1
 800ec04:	d920      	bls.n	800ec48 <expm1f+0x50>
 800ec06:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ec0a:	d902      	bls.n	800ec12 <expm1f+0x1a>
 800ec0c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ec10:	4770      	bx	lr
 800ec12:	d105      	bne.n	800ec20 <expm1f+0x28>
 800ec14:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800ec18:	2a00      	cmp	r2, #0
 800ec1a:	fe20 0a27 	vselge.f32	s0, s0, s15
 800ec1e:	4770      	bx	lr
 800ec20:	2a00      	cmp	r2, #0
 800ec22:	db05      	blt.n	800ec30 <expm1f+0x38>
 800ec24:	4975      	ldr	r1, [pc, #468]	; (800edfc <expm1f+0x204>)
 800ec26:	428b      	cmp	r3, r1
 800ec28:	d960      	bls.n	800ecec <expm1f+0xf4>
 800ec2a:	2000      	movs	r0, #0
 800ec2c:	f7fe beda 	b.w	800d9e4 <__math_oflowf>
 800ec30:	eddf 7a73 	vldr	s15, [pc, #460]	; 800ee00 <expm1f+0x208>
 800ec34:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ec38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ec3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec40:	d554      	bpl.n	800ecec <expm1f+0xf4>
 800ec42:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800ec46:	4770      	bx	lr
 800ec48:	496e      	ldr	r1, [pc, #440]	; (800ee04 <expm1f+0x20c>)
 800ec4a:	428b      	cmp	r3, r1
 800ec4c:	d96a      	bls.n	800ed24 <expm1f+0x12c>
 800ec4e:	496e      	ldr	r1, [pc, #440]	; (800ee08 <expm1f+0x210>)
 800ec50:	428b      	cmp	r3, r1
 800ec52:	d84b      	bhi.n	800ecec <expm1f+0xf4>
 800ec54:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800ee0c <expm1f+0x214>
 800ec58:	2a00      	cmp	r2, #0
 800ec5a:	bfa7      	ittee	ge
 800ec5c:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800ec60:	eddf 7a6b 	vldrge	s15, [pc, #428]	; 800ee10 <expm1f+0x218>
 800ec64:	eddf 7a6b 	vldrlt	s15, [pc, #428]	; 800ee14 <expm1f+0x21c>
 800ec68:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800ec6c:	bfac      	ite	ge
 800ec6e:	2301      	movge	r3, #1
 800ec70:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ec74:	ee37 0a67 	vsub.f32	s0, s14, s15
 800ec78:	ee37 7a40 	vsub.f32	s14, s14, s0
 800ec7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ec80:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800ec84:	ee20 5a25 	vmul.f32	s10, s0, s11
 800ec88:	eddf 6a63 	vldr	s13, [pc, #396]	; 800ee18 <expm1f+0x220>
 800ec8c:	ed9f 6a63 	vldr	s12, [pc, #396]	; 800ee1c <expm1f+0x224>
 800ec90:	ee20 7a05 	vmul.f32	s14, s0, s10
 800ec94:	eea7 6a26 	vfma.f32	s12, s14, s13
 800ec98:	eddf 6a61 	vldr	s13, [pc, #388]	; 800ee20 <expm1f+0x228>
 800ec9c:	eee6 6a07 	vfma.f32	s13, s12, s14
 800eca0:	ed9f 6a60 	vldr	s12, [pc, #384]	; 800ee24 <expm1f+0x22c>
 800eca4:	eea6 6a87 	vfma.f32	s12, s13, s14
 800eca8:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ee28 <expm1f+0x230>
 800ecac:	eee6 6a07 	vfma.f32	s13, s12, s14
 800ecb0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ecb4:	eef0 4a46 	vmov.f32	s9, s12
 800ecb8:	eee6 4a87 	vfma.f32	s9, s13, s14
 800ecbc:	eef0 6a64 	vmov.f32	s13, s9
 800ecc0:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800ecc4:	eee5 4a66 	vfms.f32	s9, s10, s13
 800ecc8:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800eccc:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800ecd0:	eee0 6a64 	vfms.f32	s13, s0, s9
 800ecd4:	eef0 4a66 	vmov.f32	s9, s13
 800ecd8:	eec5 6a24 	vdiv.f32	s13, s10, s9
 800ecdc:	ee66 6a87 	vmul.f32	s13, s13, s14
 800ece0:	bb73      	cbnz	r3, 800ed40 <expm1f+0x148>
 800ece2:	eef0 7a47 	vmov.f32	s15, s14
 800ece6:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800ecea:	e024      	b.n	800ed36 <expm1f+0x13e>
 800ecec:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800ecf0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ecf4:	2a00      	cmp	r2, #0
 800ecf6:	fe67 7a87 	vselge.f32	s15, s15, s14
 800ecfa:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800ee2c <expm1f+0x234>
 800ecfe:	eddf 6a44 	vldr	s13, [pc, #272]	; 800ee10 <expm1f+0x218>
 800ed02:	ee40 7a07 	vmla.f32	s15, s0, s14
 800ed06:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800ee0c <expm1f+0x214>
 800ed0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ed0e:	ee17 3a90 	vmov	r3, s15
 800ed12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed16:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ed1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ed1e:	eeb0 7a40 	vmov.f32	s14, s0
 800ed22:	e7a7      	b.n	800ec74 <expm1f+0x7c>
 800ed24:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800ed28:	d208      	bcs.n	800ed3c <expm1f+0x144>
 800ed2a:	eddf 7a41 	vldr	s15, [pc, #260]	; 800ee30 <expm1f+0x238>
 800ed2e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ed32:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800ed36:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ed3a:	4770      	bx	lr
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	e79f      	b.n	800ec80 <expm1f+0x88>
 800ed40:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ed44:	1c5a      	adds	r2, r3, #1
 800ed46:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800ed4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed4e:	d106      	bne.n	800ed5e <expm1f+0x166>
 800ed50:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ed54:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800ed58:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800ed5c:	4770      	bx	lr
 800ed5e:	2b01      	cmp	r3, #1
 800ed60:	d118      	bne.n	800ed94 <expm1f+0x19c>
 800ed62:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800ed66:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ed6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed6e:	bf41      	itttt	mi
 800ed70:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800ed74:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800ed78:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800ed7c:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 800ed80:	bf5f      	itttt	pl
 800ed82:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 800ed86:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800ed8a:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800ed8e:	eeb0 0a46 	vmovpl.f32	s0, s12
 800ed92:	4770      	bx	lr
 800ed94:	1c5a      	adds	r2, r3, #1
 800ed96:	2a39      	cmp	r2, #57	; 0x39
 800ed98:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800ed9c:	d90b      	bls.n	800edb6 <expm1f+0x1be>
 800ed9e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800eda2:	ee36 0a40 	vsub.f32	s0, s12, s0
 800eda6:	ee10 3a10 	vmov	r3, s0
 800edaa:	440b      	add	r3, r1
 800edac:	ee00 3a10 	vmov	s0, r3
 800edb0:	ee30 0a46 	vsub.f32	s0, s0, s12
 800edb4:	4770      	bx	lr
 800edb6:	2b16      	cmp	r3, #22
 800edb8:	dc11      	bgt.n	800edde <expm1f+0x1e6>
 800edba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800edbe:	fa42 f303 	asr.w	r3, r2, r3
 800edc2:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800edc6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800edca:	ee07 3a90 	vmov	s15, r3
 800edce:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800edd2:	ee10 3a10 	vmov	r3, s0
 800edd6:	440b      	add	r3, r1
 800edd8:	ee00 3a10 	vmov	s0, r3
 800eddc:	4770      	bx	lr
 800edde:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800ede2:	05db      	lsls	r3, r3, #23
 800ede4:	ee07 3a10 	vmov	s14, r3
 800ede8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800edec:	ee30 0a67 	vsub.f32	s0, s0, s15
 800edf0:	ee30 0a06 	vadd.f32	s0, s0, s12
 800edf4:	e7ed      	b.n	800edd2 <expm1f+0x1da>
 800edf6:	bf00      	nop
 800edf8:	4195b843 	.word	0x4195b843
 800edfc:	42b17217 	.word	0x42b17217
 800ee00:	0da24260 	.word	0x0da24260
 800ee04:	3eb17218 	.word	0x3eb17218
 800ee08:	3f851591 	.word	0x3f851591
 800ee0c:	3f317180 	.word	0x3f317180
 800ee10:	3717f7d1 	.word	0x3717f7d1
 800ee14:	b717f7d1 	.word	0xb717f7d1
 800ee18:	b457edbb 	.word	0xb457edbb
 800ee1c:	36867e54 	.word	0x36867e54
 800ee20:	b8a670cd 	.word	0xb8a670cd
 800ee24:	3ad00d01 	.word	0x3ad00d01
 800ee28:	bd088889 	.word	0xbd088889
 800ee2c:	3fb8aa3b 	.word	0x3fb8aa3b
 800ee30:	7149f2ca 	.word	0x7149f2ca

0800ee34 <finitef>:
 800ee34:	b082      	sub	sp, #8
 800ee36:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ee3a:	9801      	ldr	r0, [sp, #4]
 800ee3c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ee40:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ee44:	bfac      	ite	ge
 800ee46:	2000      	movge	r0, #0
 800ee48:	2001      	movlt	r0, #1
 800ee4a:	b002      	add	sp, #8
 800ee4c:	4770      	bx	lr
	...

0800ee50 <floorf>:
 800ee50:	ee10 3a10 	vmov	r3, s0
 800ee54:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ee58:	3a7f      	subs	r2, #127	; 0x7f
 800ee5a:	2a16      	cmp	r2, #22
 800ee5c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ee60:	dc2a      	bgt.n	800eeb8 <floorf+0x68>
 800ee62:	2a00      	cmp	r2, #0
 800ee64:	da11      	bge.n	800ee8a <floorf+0x3a>
 800ee66:	eddf 7a18 	vldr	s15, [pc, #96]	; 800eec8 <floorf+0x78>
 800ee6a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ee6e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ee72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee76:	dd05      	ble.n	800ee84 <floorf+0x34>
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	da23      	bge.n	800eec4 <floorf+0x74>
 800ee7c:	4a13      	ldr	r2, [pc, #76]	; (800eecc <floorf+0x7c>)
 800ee7e:	2900      	cmp	r1, #0
 800ee80:	bf18      	it	ne
 800ee82:	4613      	movne	r3, r2
 800ee84:	ee00 3a10 	vmov	s0, r3
 800ee88:	4770      	bx	lr
 800ee8a:	4911      	ldr	r1, [pc, #68]	; (800eed0 <floorf+0x80>)
 800ee8c:	4111      	asrs	r1, r2
 800ee8e:	420b      	tst	r3, r1
 800ee90:	d0fa      	beq.n	800ee88 <floorf+0x38>
 800ee92:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800eec8 <floorf+0x78>
 800ee96:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ee9a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ee9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eea2:	ddef      	ble.n	800ee84 <floorf+0x34>
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	bfbe      	ittt	lt
 800eea8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800eeac:	fa40 f202 	asrlt.w	r2, r0, r2
 800eeb0:	189b      	addlt	r3, r3, r2
 800eeb2:	ea23 0301 	bic.w	r3, r3, r1
 800eeb6:	e7e5      	b.n	800ee84 <floorf+0x34>
 800eeb8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800eebc:	d3e4      	bcc.n	800ee88 <floorf+0x38>
 800eebe:	ee30 0a00 	vadd.f32	s0, s0, s0
 800eec2:	4770      	bx	lr
 800eec4:	2300      	movs	r3, #0
 800eec6:	e7dd      	b.n	800ee84 <floorf+0x34>
 800eec8:	7149f2ca 	.word	0x7149f2ca
 800eecc:	bf800000 	.word	0xbf800000
 800eed0:	007fffff 	.word	0x007fffff

0800eed4 <scalbnf>:
 800eed4:	ee10 3a10 	vmov	r3, s0
 800eed8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800eedc:	d024      	beq.n	800ef28 <scalbnf+0x54>
 800eede:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800eee2:	d302      	bcc.n	800eeea <scalbnf+0x16>
 800eee4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800eee8:	4770      	bx	lr
 800eeea:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800eeee:	d121      	bne.n	800ef34 <scalbnf+0x60>
 800eef0:	4b29      	ldr	r3, [pc, #164]	; (800ef98 <scalbnf+0xc4>)
 800eef2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800ef9c <scalbnf+0xc8>
 800eef6:	4298      	cmp	r0, r3
 800eef8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800eefc:	db15      	blt.n	800ef2a <scalbnf+0x56>
 800eefe:	ee10 3a10 	vmov	r3, s0
 800ef02:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ef06:	3a19      	subs	r2, #25
 800ef08:	4402      	add	r2, r0
 800ef0a:	2afe      	cmp	r2, #254	; 0xfe
 800ef0c:	dd14      	ble.n	800ef38 <scalbnf+0x64>
 800ef0e:	eddf 7a24 	vldr	s15, [pc, #144]	; 800efa0 <scalbnf+0xcc>
 800ef12:	eddf 6a24 	vldr	s13, [pc, #144]	; 800efa4 <scalbnf+0xd0>
 800ef16:	ee10 3a10 	vmov	r3, s0
 800ef1a:	eeb0 7a67 	vmov.f32	s14, s15
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	fe67 7aa6 	vselge.f32	s15, s15, s13
 800ef24:	ee27 0a27 	vmul.f32	s0, s14, s15
 800ef28:	4770      	bx	lr
 800ef2a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800efa8 <scalbnf+0xd4>
 800ef2e:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ef32:	4770      	bx	lr
 800ef34:	0dd2      	lsrs	r2, r2, #23
 800ef36:	e7e7      	b.n	800ef08 <scalbnf+0x34>
 800ef38:	2a00      	cmp	r2, #0
 800ef3a:	dd06      	ble.n	800ef4a <scalbnf+0x76>
 800ef3c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ef40:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ef44:	ee00 3a10 	vmov	s0, r3
 800ef48:	4770      	bx	lr
 800ef4a:	f112 0f16 	cmn.w	r2, #22
 800ef4e:	da19      	bge.n	800ef84 <scalbnf+0xb0>
 800ef50:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ef54:	4298      	cmp	r0, r3
 800ef56:	ee10 3a10 	vmov	r3, s0
 800ef5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef5e:	dd09      	ble.n	800ef74 <scalbnf+0xa0>
 800ef60:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800efa0 <scalbnf+0xcc>
 800ef64:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800efa4 <scalbnf+0xd0>
 800ef68:	eef0 7a40 	vmov.f32	s15, s0
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	fe00 0a07 	vseleq.f32	s0, s0, s14
 800ef72:	e7dc      	b.n	800ef2e <scalbnf+0x5a>
 800ef74:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800efa8 <scalbnf+0xd4>
 800ef78:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800efac <scalbnf+0xd8>
 800ef7c:	eef0 7a40 	vmov.f32	s15, s0
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	e7f4      	b.n	800ef6e <scalbnf+0x9a>
 800ef84:	3219      	adds	r2, #25
 800ef86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ef8a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ef8e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800efb0 <scalbnf+0xdc>
 800ef92:	ee07 3a10 	vmov	s14, r3
 800ef96:	e7c5      	b.n	800ef24 <scalbnf+0x50>
 800ef98:	ffff3cb0 	.word	0xffff3cb0
 800ef9c:	4c000000 	.word	0x4c000000
 800efa0:	7149f2ca 	.word	0x7149f2ca
 800efa4:	f149f2ca 	.word	0xf149f2ca
 800efa8:	0da24260 	.word	0x0da24260
 800efac:	8da24260 	.word	0x8da24260
 800efb0:	33000000 	.word	0x33000000

0800efb4 <_init>:
 800efb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efb6:	bf00      	nop
 800efb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efba:	bc08      	pop	{r3}
 800efbc:	469e      	mov	lr, r3
 800efbe:	4770      	bx	lr

0800efc0 <_fini>:
 800efc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efc2:	bf00      	nop
 800efc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efc6:	bc08      	pop	{r3}
 800efc8:	469e      	mov	lr, r3
 800efca:	4770      	bx	lr
