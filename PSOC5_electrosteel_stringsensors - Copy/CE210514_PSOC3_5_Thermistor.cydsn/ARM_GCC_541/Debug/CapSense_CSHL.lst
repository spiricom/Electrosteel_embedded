ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"CapSense_CSHL.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	CapSense_rawFilterData1,24,4
  20              		.comm	CapSense_sensorBaseline,24,4
  21              		.comm	CapSense_sensorBaselineLow,12,4
  22              		.comm	CapSense_sensorSignal,24,4
  23              		.comm	CapSense_sensorOnMask,2,4
  24              		.comm	CapSense_lowBaselineResetCnt,12,4
  25              		.global	CapSense_fingerThreshold
  26              		.data
  27              		.align	2
  28              		.type	CapSense_fingerThreshold, %object
  29              		.size	CapSense_fingerThreshold, 24
  30              	CapSense_fingerThreshold:
  31 0000 1E00     		.short	30
  32 0002 1E00     		.short	30
  33 0004 1E00     		.short	30
  34 0006 1E00     		.short	30
  35 0008 1E00     		.short	30
  36 000a 1E00     		.short	30
  37 000c 1E00     		.short	30
  38 000e 1E00     		.short	30
  39 0010 1E00     		.short	30
  40 0012 1E00     		.short	30
  41 0014 1E00     		.short	30
  42 0016 1E00     		.short	30
  43              		.global	CapSense_noiseThreshold
  44              		.align	2
  45              		.type	CapSense_noiseThreshold, %object
  46              		.size	CapSense_noiseThreshold, 24
  47              	CapSense_noiseThreshold:
  48 0018 0A00     		.short	10
  49 001a 0A00     		.short	10
  50 001c 0A00     		.short	10
  51 001e 0A00     		.short	10
  52 0020 0A00     		.short	10
  53 0022 0A00     		.short	10
  54 0024 0A00     		.short	10
  55 0026 0A00     		.short	10
  56 0028 0A00     		.short	10
  57 002a 0A00     		.short	10
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 2


  58 002c 0A00     		.short	10
  59 002e 0A00     		.short	10
  60              		.global	CapSense_hysteresis
  61              		.align	2
  62              		.type	CapSense_hysteresis, %object
  63              		.size	CapSense_hysteresis, 24
  64              	CapSense_hysteresis:
  65 0030 0C00     		.short	12
  66 0032 0C00     		.short	12
  67 0034 0C00     		.short	12
  68 0036 0C00     		.short	12
  69 0038 0C00     		.short	12
  70 003a 0C00     		.short	12
  71 003c 0C00     		.short	12
  72 003e 0C00     		.short	12
  73 0040 0C00     		.short	12
  74 0042 0C00     		.short	12
  75 0044 0C00     		.short	12
  76 0046 0C00     		.short	12
  77              		.global	CapSense_debounce
  78              		.align	2
  79              		.type	CapSense_debounce, %object
  80              		.size	CapSense_debounce, 12
  81              	CapSense_debounce:
  82 0048 01       		.byte	1
  83 0049 01       		.byte	1
  84 004a 01       		.byte	1
  85 004b 01       		.byte	1
  86 004c 01       		.byte	1
  87 004d 01       		.byte	1
  88 004e 01       		.byte	1
  89 004f 01       		.byte	1
  90 0050 01       		.byte	1
  91 0051 01       		.byte	1
  92 0052 01       		.byte	1
  93 0053 01       		.byte	1
  94              		.global	CapSense_debounceCounter
  95              		.bss
  96              		.align	2
  97              		.type	CapSense_debounceCounter, %object
  98              		.size	CapSense_debounceCounter, 13
  99              	CapSense_debounceCounter:
 100 0000 00000000 		.space	13
 100      00000000 
 100      00000000 
 100      00
 101              		.global	CapSense_rawDataIndex
 102              		.section	.rodata
 103              		.align	2
 104              		.type	CapSense_rawDataIndex, %object
 105              		.size	CapSense_rawDataIndex, 12
 106              	CapSense_rawDataIndex:
 107 0000 04       		.byte	4
 108 0001 03       		.byte	3
 109 0002 02       		.byte	2
 110 0003 01       		.byte	1
 111 0004 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 3


 112 0005 05       		.byte	5
 113 0006 06       		.byte	6
 114 0007 07       		.byte	7
 115 0008 08       		.byte	8
 116 0009 09       		.byte	9
 117 000a 0A       		.byte	10
 118 000b 0B       		.byte	11
 119              		.global	CapSense_numberOfSensors
 120              		.align	2
 121              		.type	CapSense_numberOfSensors, %object
 122              		.size	CapSense_numberOfSensors, 12
 123              	CapSense_numberOfSensors:
 124 000c 01       		.byte	1
 125 000d 01       		.byte	1
 126 000e 01       		.byte	1
 127 000f 01       		.byte	1
 128 0010 01       		.byte	1
 129 0011 01       		.byte	1
 130 0012 01       		.byte	1
 131 0013 01       		.byte	1
 132 0014 01       		.byte	1
 133 0015 01       		.byte	1
 134 0016 01       		.byte	1
 135 0017 01       		.byte	1
 136              		.section	.text.CapSense_BaseInit,"ax",%progbits
 137              		.align	2
 138              		.global	CapSense_BaseInit
 139              		.thumb
 140              		.thumb_func
 141              		.type	CapSense_BaseInit, %function
 142              	CapSense_BaseInit:
 143              	.LFB0:
 144              		.file 1 "Generated_Source\\PSoC5\\CapSense_CSHL.c"
   1:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/CapSense_CSHL.c **** * File Name: CapSense_CSHL.c
   3:Generated_Source\PSoC5/CapSense_CSHL.c **** * Version 3.50
   4:Generated_Source\PSoC5/CapSense_CSHL.c **** *
   5:Generated_Source\PSoC5/CapSense_CSHL.c **** * Description:
   6:Generated_Source\PSoC5/CapSense_CSHL.c **** *  This file provides the source code to the High Level APIs for the CapSesne
   7:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CSD component.
   8:Generated_Source\PSoC5/CapSense_CSHL.c **** *
   9:Generated_Source\PSoC5/CapSense_CSHL.c **** * Note:
  10:Generated_Source\PSoC5/CapSense_CSHL.c **** *
  11:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
  12:Generated_Source\PSoC5/CapSense_CSHL.c **** * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC5/CapSense_CSHL.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC5/CapSense_CSHL.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC5/CapSense_CSHL.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
  17:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  18:Generated_Source\PSoC5/CapSense_CSHL.c **** #include "CapSense_CSHL.h"
  19:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  20:Generated_Source\PSoC5/CapSense_CSHL.c **** /* Storage of filters data */
  21:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
  22:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) )
  23:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  24:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_rawFilterData1[CapSense_TOTAL_SENSOR_COUNT];
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 4


  25:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_rawFilterData2[CapSense_TOTAL_SENSOR_COUNT];
  26:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  27:Generated_Source\PSoC5/CapSense_CSHL.c **** #elif ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER)   | \
  28:Generated_Source\PSoC5/CapSense_CSHL.c ****         (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER)   | \
  29:Generated_Source\PSoC5/CapSense_CSHL.c ****         (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) | \
  30:Generated_Source\PSoC5/CapSense_CSHL.c ****         (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)   | \
  31:Generated_Source\PSoC5/CapSense_CSHL.c ****         (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER) )
  32:Generated_Source\PSoC5/CapSense_CSHL.c ****         
  33:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_rawFilterData1[CapSense_TOTAL_SENSOR_COUNT];
  34:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  35:Generated_Source\PSoC5/CapSense_CSHL.c **** #else
  36:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* No Raw filters */
  37:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif  /* ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) || \
  38:Generated_Source\PSoC5/CapSense_CSHL.c ****         *    (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) )
  39:Generated_Source\PSoC5/CapSense_CSHL.c ****         */
  40:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  41:Generated_Source\PSoC5/CapSense_CSHL.c **** uint16 CapSense_sensorBaseline[CapSense_TOTAL_SENSOR_COUNT];
  42:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_sensorBaselineLow[CapSense_TOTAL_SENSOR_COUNT];
  43:Generated_Source\PSoC5/CapSense_CSHL.c **** uint16 CapSense_sensorSignal[CapSense_TOTAL_SENSOR_COUNT];
  44:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_sensorOnMask[(((CapSense_TOTAL_SENSOR_COUNT - 1u) / 8u) + 1u)];
  45:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  46:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_lowBaselineResetCnt[CapSense_TOTAL_SENSOR_COUNT];
  47:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  48:Generated_Source\PSoC5/CapSense_CSHL.c **** uint16 CapSense_fingerThreshold[] = {
  49:Generated_Source\PSoC5/CapSense_CSHL.c ****     30u, 30u, 30u, 30u, 30u, 30u, 30u, 30u, 30u, 30u, 30u, 30u, 
  50:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  51:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  52:Generated_Source\PSoC5/CapSense_CSHL.c **** uint16 CapSense_noiseThreshold[] = {
  53:Generated_Source\PSoC5/CapSense_CSHL.c ****     10u, 10u, 10u, 10u, 10u, 10u, 10u, 10u, 10u, 10u, 10u, 10u, 
  54:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  55:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  56:Generated_Source\PSoC5/CapSense_CSHL.c **** uint16 CapSense_hysteresis[] = {
  57:Generated_Source\PSoC5/CapSense_CSHL.c ****     12u, 12u, 12u, 12u, 12u, 12u, 12u, 12u, 12u, 12u, 12u, 12u, 
  58:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  59:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  60:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_debounce[] = {
  61:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 
  62:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  63:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  64:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_debounceCounter[] = {
  65:Generated_Source\PSoC5/CapSense_CSHL.c ****     0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 
  66:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  67:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  68:Generated_Source\PSoC5/CapSense_CSHL.c **** const uint8 CYCODE CapSense_rawDataIndex[] = {
  69:Generated_Source\PSoC5/CapSense_CSHL.c ****     4u, /* Button0__BTN */
  70:Generated_Source\PSoC5/CapSense_CSHL.c ****     3u, /* Button1__BTN */
  71:Generated_Source\PSoC5/CapSense_CSHL.c ****     2u, /* Button2__BTN */
  72:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button3__BTN */
  73:Generated_Source\PSoC5/CapSense_CSHL.c ****     0u, /* Button4__BTN */
  74:Generated_Source\PSoC5/CapSense_CSHL.c ****     5u, /* Button5__BTN */
  75:Generated_Source\PSoC5/CapSense_CSHL.c ****     6u, /* Button6__BTN */
  76:Generated_Source\PSoC5/CapSense_CSHL.c ****     7u, /* Button7__BTN */
  77:Generated_Source\PSoC5/CapSense_CSHL.c ****     8u, /* Button8__BTN */
  78:Generated_Source\PSoC5/CapSense_CSHL.c ****     9u, /* Button9__BTN */
  79:Generated_Source\PSoC5/CapSense_CSHL.c ****     10u, /* Button10__BTN */
  80:Generated_Source\PSoC5/CapSense_CSHL.c ****     11u, /* Button11__BTN */
  81:Generated_Source\PSoC5/CapSense_CSHL.c **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 5


  82:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  83:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  84:Generated_Source\PSoC5/CapSense_CSHL.c **** const uint8 CYCODE CapSense_numberOfSensors[] = {
  85:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button0__BTN */
  86:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button1__BTN */
  87:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button2__BTN */
  88:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button3__BTN */
  89:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button4__BTN */
  90:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button5__BTN */
  91:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button6__BTN */
  92:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button7__BTN */
  93:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button8__BTN */
  94:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button9__BTN */
  95:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button10__BTN */
  96:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* Button11__BTN */
  97:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  98:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  99:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 100:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 101:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 102:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 103:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 104:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_BaseInit
 105:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 106:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 107:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 108:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Loads the CapSense_sensorBaseline[sensor] array element with an 
 109:Generated_Source\PSoC5/CapSense_CSHL.c **** *  initial value which is equal to raw count value. 
 110:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Resets to zero CapSense_sensorBaselineLow[sensor] and 
 111:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorSignal[sensor] array element.
 112:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Loads CapSense_debounceCounter[sensor] array element with initial 
 113:Generated_Source\PSoC5/CapSense_CSHL.c **** *  value equal CapSense_debounce[].
 114:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Loads the CapSense_rawFilterData2[sensor] and 
 115:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData2[sensor] array element with an 
 116:Generated_Source\PSoC5/CapSense_CSHL.c **** *  initial value which is equal raw count value if raw data filter is enabled.
 117:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 118:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 119:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensor:  Sensor number.
 120:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 121:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 122:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 123:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 124:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 125:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaseline[]    - used to store baseline value.
 126:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaselineLow[] - used to store fraction byte of 
 127:Generated_Source\PSoC5/CapSense_CSHL.c **** *  baseline value.
 128:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorSignal[]      - used to store diffence between 
 129:Generated_Source\PSoC5/CapSense_CSHL.c **** *  current value of raw data and previous value of baseline.
 130:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_debounceCounter[]   - used to store current debounce 
 131:Generated_Source\PSoC5/CapSense_CSHL.c **** *  counter of sensor. Widget which has this parameter are buttons, matrix 
 132:Generated_Source\PSoC5/CapSense_CSHL.c **** *  buttons, proximity, guard. All other widgets haven't debounce parameter
 133:Generated_Source\PSoC5/CapSense_CSHL.c **** *  and use the last element of this array with value 0 (it means no debounce).
 134:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData1[]    - used to store previous sample of 
 135:Generated_Source\PSoC5/CapSense_CSHL.c **** *  any enabled raw data filter.
 136:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData2[]    - used to store before previous sample
 137:Generated_Source\PSoC5/CapSense_CSHL.c **** *  of enabled raw data filter. Only required for median or average filters.
 138:Generated_Source\PSoC5/CapSense_CSHL.c **** *
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 6


 139:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 140:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 141:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 142:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 143:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_BaseInit(uint8 sensor) 
 144:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 145              		.loc 1 144 0
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 16
 148              		@ frame_needed = 1, uses_anonymous_args = 0
 149              		@ link register save eliminated.
 150 0000 80B4     		push	{r7}
 151              		.cfi_def_cfa_offset 4
 152              		.cfi_offset 7, -4
 153 0002 85B0     		sub	sp, sp, #20
 154              		.cfi_def_cfa_offset 24
 155 0004 00AF     		add	r7, sp, #0
 156              		.cfi_def_cfa_register 7
 157 0006 0346     		mov	r3, r0
 158 0008 FB71     		strb	r3, [r7, #7]
 145:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if ((CapSense_TOTAL_BUTTONS_COUNT) || (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) || \
 146:Generated_Source\PSoC5/CapSense_CSHL.c ****          (CapSense_TOTAL_GENERICS_COUNT))
 147:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 widget = CapSense_widgetNumber[sensor];
 159              		.loc 1 147 0
 160 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 161 000c 134A     		ldr	r2, .L2
 162 000e D35C     		ldrb	r3, [r2, r3]
 163 0010 FB73     		strb	r3, [r7, #15]
 148:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif /* ((CapSense_TOTAL_MATRIX_BUTTONS_COUNT) || (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)) */
 149:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 150:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)
 151:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 debounceIndex;
 152:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) */
 153:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 154:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 155:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Exclude generic widget */
 156:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(widget < CapSense_END_OF_WIDGETS_INDEX)
 157:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 158:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 159:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 160:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Initialize Baseline */
 161:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_sensorBaseline[sensor] = CapSense_sensorRaw[sensor];
 164              		.loc 1 161 0
 165 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 166 0014 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 167 0016 1249     		ldr	r1, .L2+4
 168 0018 31F81210 		ldrh	r1, [r1, r2, lsl #1]
 169 001c 114A     		ldr	r2, .L2+8
 170 001e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 162:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_sensorBaselineLow[sensor] = 0u;
 171              		.loc 1 162 0
 172 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 173 0024 104A     		ldr	r2, .L2+12
 174 0026 0021     		movs	r1, #0
 175 0028 D154     		strb	r1, [r2, r3]
 163:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_sensorSignal[sensor] = 0u;
 176              		.loc 1 163 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 7


 177 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 178 002c 0F4A     		ldr	r2, .L2+16
 179 002e 0021     		movs	r1, #0
 180 0030 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 164:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 165:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_debounceCounter[widget] =  CapSense_debounce[widget];
 181              		.loc 1 165 0
 182 0034 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 183 0036 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 184 0038 0D49     		ldr	r1, .L2+20
 185 003a 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 186 003c 0D4A     		ldr	r2, .L2+24
 187 003e D154     		strb	r1, [r2, r3]
 166:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 167:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 168:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if ((CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) |\
 169:Generated_Source\PSoC5/CapSense_CSHL.c ****          (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER))
 170:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 171:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = CapSense_sensorRaw[sensor];
 172:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData2[sensor] = CapSense_sensorRaw[sensor];
 173:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 174:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif ((CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) |\
 175:Generated_Source\PSoC5/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER) |\
 176:Generated_Source\PSoC5/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) |\
 177:Generated_Source\PSoC5/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER) |\
 178:Generated_Source\PSoC5/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER))
 179:Generated_Source\PSoC5/CapSense_CSHL.c ****             
 180:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = CapSense_sensorRaw[sensor];
 188              		.loc 1 180 0
 189 0040 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 190 0042 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 191 0044 0649     		ldr	r1, .L2+4
 192 0046 31F81210 		ldrh	r1, [r1, r2, lsl #1]
 193 004a 0B4A     		ldr	r2, .L2+28
 194 004c 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 181:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 182:Generated_Source\PSoC5/CapSense_CSHL.c ****     #else
 183:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* No Raw filters */
 184:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* ((CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
 185:Generated_Source\PSoC5/CapSense_CSHL.c ****             *   (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER))
 186:Generated_Source\PSoC5/CapSense_CSHL.c ****             */
 187:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 188:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 189:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Exclude generic widget */
 190:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 191:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 192:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 195              		.loc 1 192 0
 196 0050 00BF     		nop
 197 0052 1437     		adds	r7, r7, #20
 198              		.cfi_def_cfa_offset 4
 199 0054 BD46     		mov	sp, r7
 200              		.cfi_def_cfa_register 13
 201              		@ sp needed
 202 0056 80BC     		pop	{r7}
 203              		.cfi_restore 7
 204              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 8


 205 0058 7047     		bx	lr
 206              	.L3:
 207 005a 00BF     		.align	2
 208              	.L2:
 209 005c 00000000 		.word	CapSense_widgetNumber
 210 0060 00000000 		.word	CapSense_sensorRaw
 211 0064 00000000 		.word	CapSense_sensorBaseline
 212 0068 00000000 		.word	CapSense_sensorBaselineLow
 213 006c 00000000 		.word	CapSense_sensorSignal
 214 0070 00000000 		.word	CapSense_debounce
 215 0074 00000000 		.word	CapSense_debounceCounter
 216 0078 00000000 		.word	CapSense_rawFilterData1
 217              		.cfi_endproc
 218              	.LFE0:
 219              		.size	CapSense_BaseInit, .-CapSense_BaseInit
 220              		.section	.text.CapSense_InitializeSensorBaseline,"ax",%progbits
 221              		.align	2
 222              		.global	CapSense_InitializeSensorBaseline
 223              		.thumb
 224              		.thumb_func
 225              		.type	CapSense_InitializeSensorBaseline, %function
 226              	CapSense_InitializeSensorBaseline:
 227              	.LFB1:
 193:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 194:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 195:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 196:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_InitializeSensorBaseline
 197:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 198:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 199:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 200:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Loads the CapSense_sensorBaseline[sensor] array element with an 
 201:Generated_Source\PSoC5/CapSense_CSHL.c **** *  initial value by scanning the selected sensor (one channel design) or pair 
 202:Generated_Source\PSoC5/CapSense_CSHL.c **** *  of sensors (two channels designs). The raw count value is copied into the 
 203:Generated_Source\PSoC5/CapSense_CSHL.c **** *  baseline array for each sensor. The raw data filters are initialized if 
 204:Generated_Source\PSoC5/CapSense_CSHL.c **** *  enabled.
 205:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 206:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 207:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensor:  Sensor number.
 208:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 209:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 210:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 211:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 212:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 213:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 214:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 215:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 216:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_InitializeSensorBaseline(uint8 sensor)
 217:Generated_Source\PSoC5/CapSense_CSHL.c ****                           
 218:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 228              		.loc 1 218 0
 229              		.cfi_startproc
 230              		@ args = 0, pretend = 0, frame = 8
 231              		@ frame_needed = 1, uses_anonymous_args = 0
 232 0000 80B5     		push	{r7, lr}
 233              		.cfi_def_cfa_offset 8
 234              		.cfi_offset 7, -8
 235              		.cfi_offset 14, -4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 9


 236 0002 82B0     		sub	sp, sp, #8
 237              		.cfi_def_cfa_offset 16
 238 0004 00AF     		add	r7, sp, #0
 239              		.cfi_def_cfa_register 7
 240 0006 0346     		mov	r3, r0
 241 0008 FB71     		strb	r3, [r7, #7]
 219:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Scan sensor */
 220:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_ScanSensor(sensor);
 242              		.loc 1 220 0
 243 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 244 000c 1846     		mov	r0, r3
 245 000e FFF7FEFF 		bl	CapSense_ScanSensor
 221:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(CapSense_IsBusy() != 0u)
 246              		.loc 1 221 0
 247 0012 00BF     		nop
 248              	.L5:
 249              		.loc 1 221 0 is_stmt 0 discriminator 1
 250 0014 FFF7FEFF 		bl	CapSense_IsBusy
 251 0018 0346     		mov	r3, r0
 252 001a 002B     		cmp	r3, #0
 253 001c FAD1     		bne	.L5
 222:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 223:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Wait while busy */
 224:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 225:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 226:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
 227:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Initialize Baseline, Signal and debounce counters */       
 228:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_BaseInit(sensor);
 254              		.loc 1 228 0 is_stmt 1
 255 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 256 0020 1846     		mov	r0, r3
 257 0022 FFF7FEFF 		bl	CapSense_BaseInit
 229:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 230:Generated_Source\PSoC5/CapSense_CSHL.c ****     #else
 231:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 232:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(sensor < CapSense_TOTAL_SENSOR_COUNT__CH0)
 233:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 234:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Initialize Baseline, Signal and debounce counters */ 
 235:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_BaseInit(sensor);
 236:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 237:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 238:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(sensor < CapSense_TOTAL_SENSOR_COUNT__CH1)
 239:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 240:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Initialize Baseline, Signal and debounce counters */
 241:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_BaseInit(sensor + CapSense_TOTAL_SENSOR_COUNT__CH0);
 242:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 243:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 244:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN) */
 245:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 258              		.loc 1 245 0
 259 0026 00BF     		nop
 260 0028 0837     		adds	r7, r7, #8
 261              		.cfi_def_cfa_offset 8
 262 002a BD46     		mov	sp, r7
 263              		.cfi_def_cfa_register 13
 264              		@ sp needed
 265 002c 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 10


 266              		.cfi_endproc
 267              	.LFE1:
 268              		.size	CapSense_InitializeSensorBaseline, .-CapSense_InitializeSensorBaseline
 269 002e 00BF     		.section	.text.CapSense_InitializeAllBaselines,"ax",%progbits
 270              		.align	2
 271              		.global	CapSense_InitializeAllBaselines
 272              		.thumb
 273              		.thumb_func
 274              		.type	CapSense_InitializeAllBaselines, %function
 275              	CapSense_InitializeAllBaselines:
 276              	.LFB2:
 246:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 247:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 248:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 249:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_InitializeAllBaselines
 250:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 251:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 252:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 253:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Uses the CapSense_InitializeSensorBaseline function to loads the 
 254:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaseline[] array with an initial values by scanning 
 255:Generated_Source\PSoC5/CapSense_CSHL.c **** *  all sensors. The raw count values are copied into the baseline array for 
 256:Generated_Source\PSoC5/CapSense_CSHL.c **** *  all sensors. The raw data filters are initialized if enabled.
 257:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 258:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 259:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 260:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 261:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 262:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 263:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 264:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 265:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 266:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 267:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 268:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_InitializeAllBaselines(void)
 269:Generated_Source\PSoC5/CapSense_CSHL.c ****                           
 270:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 277              		.loc 1 270 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 8
 280              		@ frame_needed = 1, uses_anonymous_args = 0
 281 0000 80B5     		push	{r7, lr}
 282              		.cfi_def_cfa_offset 8
 283              		.cfi_offset 7, -8
 284              		.cfi_offset 14, -4
 285 0002 82B0     		sub	sp, sp, #8
 286              		.cfi_def_cfa_offset 16
 287 0004 00AF     		add	r7, sp, #0
 288              		.cfi_def_cfa_register 7
 271:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 i;
 272:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 273:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* The baseline initialize by sensor of sensor pair */
 274:Generated_Source\PSoC5/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_SCANSLOT_COUNT; i++)
 289              		.loc 1 274 0
 290 0006 0023     		movs	r3, #0
 291 0008 FB71     		strb	r3, [r7, #7]
 292 000a 06E0     		b	.L7
 293              	.L8:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 11


 275:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 276:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_InitializeSensorBaseline(i);
 294              		.loc 1 276 0 discriminator 3
 295 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 296 000e 1846     		mov	r0, r3
 297 0010 FFF7FEFF 		bl	CapSense_InitializeSensorBaseline
 274:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 298              		.loc 1 274 0 discriminator 3
 299 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 300 0016 0133     		adds	r3, r3, #1
 301 0018 FB71     		strb	r3, [r7, #7]
 302              	.L7:
 274:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 303              		.loc 1 274 0 is_stmt 0 discriminator 1
 304 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 305 001c 0B2B     		cmp	r3, #11
 306 001e F5D9     		bls	.L8
 277:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 278:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 307              		.loc 1 278 0 is_stmt 1
 308 0020 00BF     		nop
 309 0022 0837     		adds	r7, r7, #8
 310              		.cfi_def_cfa_offset 8
 311 0024 BD46     		mov	sp, r7
 312              		.cfi_def_cfa_register 13
 313              		@ sp needed
 314 0026 80BD     		pop	{r7, pc}
 315              		.cfi_endproc
 316              	.LFE2:
 317              		.size	CapSense_InitializeAllBaselines, .-CapSense_InitializeAllBaselines
 318              		.section	.text.CapSense_InitializeEnabledBaselines,"ax",%progbits
 319              		.align	2
 320              		.global	CapSense_InitializeEnabledBaselines
 321              		.thumb
 322              		.thumb_func
 323              		.type	CapSense_InitializeEnabledBaselines, %function
 324              	CapSense_InitializeEnabledBaselines:
 325              	.LFB3:
 279:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 280:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 281:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 282:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_InitializeEnabledBaselines
 283:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 284:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 285:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 286:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Scans all enabled widgets and the raw count values are copied into the 
 287:Generated_Source\PSoC5/CapSense_CSHL.c **** *  baseline array for all sensors enabled in scanning process. Baselines 
 288:Generated_Source\PSoC5/CapSense_CSHL.c **** *  initialize with zero values for sensors disabled from scanning process. 
 289:Generated_Source\PSoC5/CapSense_CSHL.c **** *  The raw data filters are initialized if enabled.
 290:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 291:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 292:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 293:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 294:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 295:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 296:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 297:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 12


 298:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 299:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 300:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 301:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_InitializeEnabledBaselines(void)
 302:Generated_Source\PSoC5/CapSense_CSHL.c ****                              
 303:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 326              		.loc 1 303 0
 327              		.cfi_startproc
 328              		@ args = 0, pretend = 0, frame = 8
 329              		@ frame_needed = 1, uses_anonymous_args = 0
 330 0000 80B5     		push	{r7, lr}
 331              		.cfi_def_cfa_offset 8
 332              		.cfi_offset 7, -8
 333              		.cfi_offset 14, -4
 334 0002 82B0     		sub	sp, sp, #8
 335              		.cfi_def_cfa_offset 16
 336 0004 00AF     		add	r7, sp, #0
 337              		.cfi_def_cfa_register 7
 304:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 i;
 305:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos;
 306:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 enMask;
 307:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 308:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_ScanEnabledWidgets();
 338              		.loc 1 308 0
 339 0006 FFF7FEFF 		bl	CapSense_ScanEnabledWidgets
 309:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(CapSense_IsBusy() != 0u)
 340              		.loc 1 309 0
 341 000a 00BF     		nop
 342              	.L10:
 343              		.loc 1 309 0 is_stmt 0 discriminator 1
 344 000c FFF7FEFF 		bl	CapSense_IsBusy
 345 0010 0346     		mov	r3, r0
 346 0012 002B     		cmp	r3, #0
 347 0014 FAD1     		bne	.L10
 310:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 311:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Wait while busy */
 312:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 313:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 314:Generated_Source\PSoC5/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 348              		.loc 1 314 0 is_stmt 1
 349 0016 0023     		movs	r3, #0
 350 0018 FB71     		strb	r3, [r7, #7]
 351 001a 1DE0     		b	.L11
 352              	.L13:
 315:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 316:Generated_Source\PSoC5/CapSense_CSHL.c ****         pos = (i >> 3u);
 353              		.loc 1 316 0
 354 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 355 001e DB08     		lsrs	r3, r3, #3
 356 0020 BB71     		strb	r3, [r7, #6]
 317:Generated_Source\PSoC5/CapSense_CSHL.c ****         enMask = 0x01u << (i & 0x07u);
 357              		.loc 1 317 0
 358 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 359 0024 03F00703 		and	r3, r3, #7
 360 0028 0122     		movs	r2, #1
 361 002a 02FA03F3 		lsl	r3, r2, r3
 362 002e 7B71     		strb	r3, [r7, #5]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 13


 318:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 319:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Clear raw data if sensor is disabled from scanning process */
 320:Generated_Source\PSoC5/CapSense_CSHL.c ****         if((CapSense_sensorEnableMask[pos] & enMask) == 0u)
 363              		.loc 1 320 0
 364 0030 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 365 0032 0D4A     		ldr	r2, .L14
 366 0034 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 367 0036 7B79     		ldrb	r3, [r7, #5]
 368 0038 1340     		ands	r3, r3, r2
 369 003a DBB2     		uxtb	r3, r3
 370 003c 002B     		cmp	r3, #0
 371 003e 04D1     		bne	.L12
 321:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 322:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_sensorRaw[i] = 0u;
 372              		.loc 1 322 0
 373 0040 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 374 0042 0A4A     		ldr	r2, .L14+4
 375 0044 0021     		movs	r1, #0
 376 0046 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 377              	.L12:
 323:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 324:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 325:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Initialize baselines */
 326:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_BaseInit(i);
 378              		.loc 1 326 0 discriminator 2
 379 004a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 380 004c 1846     		mov	r0, r3
 381 004e FFF7FEFF 		bl	CapSense_BaseInit
 314:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 382              		.loc 1 314 0 discriminator 2
 383 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 384 0054 0133     		adds	r3, r3, #1
 385 0056 FB71     		strb	r3, [r7, #7]
 386              	.L11:
 314:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 387              		.loc 1 314 0 is_stmt 0 discriminator 1
 388 0058 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 389 005a 0B2B     		cmp	r3, #11
 390 005c DED9     		bls	.L13
 327:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 328:Generated_Source\PSoC5/CapSense_CSHL.c **** }  
 391              		.loc 1 328 0 is_stmt 1
 392 005e 00BF     		nop
 393 0060 0837     		adds	r7, r7, #8
 394              		.cfi_def_cfa_offset 8
 395 0062 BD46     		mov	sp, r7
 396              		.cfi_def_cfa_register 13
 397              		@ sp needed
 398 0064 80BD     		pop	{r7, pc}
 399              	.L15:
 400 0066 00BF     		.align	2
 401              	.L14:
 402 0068 00000000 		.word	CapSense_sensorEnableMask
 403 006c 00000000 		.word	CapSense_sensorRaw
 404              		.cfi_endproc
 405              	.LFE3:
 406              		.size	CapSense_InitializeEnabledBaselines, .-CapSense_InitializeEnabledBaselines
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 14


 407              		.section	.text.CapSense_UpdateSensorBaseline,"ax",%progbits
 408              		.align	2
 409              		.global	CapSense_UpdateSensorBaseline
 410              		.thumb
 411              		.thumb_func
 412              		.type	CapSense_UpdateSensorBaseline, %function
 413              	CapSense_UpdateSensorBaseline:
 414              	.LFB4:
 329:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 330:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 331:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 332:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_UpdateSensorBaseline
 333:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 334:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 335:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 336:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Updates the CapSense_sensorBaseline[sensor] array element using the 
 337:Generated_Source\PSoC5/CapSense_CSHL.c **** *  LP filter with k = 256. The signal calculates the difference of count by 
 338:Generated_Source\PSoC5/CapSense_CSHL.c **** *  subtracting the previous baseline from the current raw count value and stores
 339:Generated_Source\PSoC5/CapSense_CSHL.c **** *  it in CapSense_SensorSignal[sensor]. 
 340:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If auto reset option is enabled the baseline updated regards noise threshold. 
 341:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If auto reset option is disabled the baseline stops updating if signal is 
 342:Generated_Source\PSoC5/CapSense_CSHL.c **** *  greater that zero and baseline loads with raw count value if signal is less 
 343:Generated_Source\PSoC5/CapSense_CSHL.c **** *  that noise threshold.
 344:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Raw data filters are applied to the values if enabled before baseline 
 345:Generated_Source\PSoC5/CapSense_CSHL.c **** *  calculation.
 346:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 347:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 348:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensor:  Sensor number.
 349:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 350:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 351:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 352:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 353:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 354:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaseline[]    - used to store baseline value.
 355:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaselineLow[] - used to store fraction byte of 
 356:Generated_Source\PSoC5/CapSense_CSHL.c **** *  baseline value.
 357:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorSignal[]      - used to store diffence between 
 358:Generated_Source\PSoC5/CapSense_CSHL.c **** *  current value of raw data and previous value of baseline.
 359:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData1[]    - used to store previous sample of 
 360:Generated_Source\PSoC5/CapSense_CSHL.c **** *  any enabled raw data filter.
 361:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData2[]    - used to store before previous sample
 362:Generated_Source\PSoC5/CapSense_CSHL.c **** *  of enabled raw data filter. Only required for median or average filters.
 363:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 364:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 365:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 366:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 367:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 368:Generated_Source\PSoC5/CapSense_CSHL.c ****  void CapSense_UpdateSensorBaseline(uint8 sensor)
 369:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  
 370:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 415              		.loc 1 370 0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 24
 418              		@ frame_needed = 1, uses_anonymous_args = 0
 419 0000 80B5     		push	{r7, lr}
 420              		.cfi_def_cfa_offset 8
 421              		.cfi_offset 7, -8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 15


 422              		.cfi_offset 14, -4
 423 0002 86B0     		sub	sp, sp, #24
 424              		.cfi_def_cfa_offset 32
 425 0004 00AF     		add	r7, sp, #0
 426              		.cfi_def_cfa_register 7
 427 0006 0346     		mov	r3, r0
 428 0008 FB71     		strb	r3, [r7, #7]
 371:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint32 calc;
 372:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 tempRaw;
 373:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 filteredRawData;
 374:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 widget = CapSense_widgetNumber[sensor];
 429              		.loc 1 374 0
 430 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 431 000c 4D4A     		ldr	r2, .L26
 432 000e D35C     		ldrb	r3, [r2, r3]
 433 0010 7B75     		strb	r3, [r7, #21]
 375:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 noiseThreshold = CapSense_noiseThreshold[widget];
 434              		.loc 1 375 0
 435 0012 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 436 0014 4C4A     		ldr	r2, .L26+4
 437 0016 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 438 001a 7B82     		strh	r3, [r7, #18]	@ movhi
 376:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 377:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 378:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Exclude generic widget */
 379:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(widget < CapSense_END_OF_WIDGETS_INDEX)
 380:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 381:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 382:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 383:Generated_Source\PSoC5/CapSense_CSHL.c ****     filteredRawData = CapSense_sensorRaw[sensor];
 439              		.loc 1 383 0
 440 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 441 001e 4B4A     		ldr	r2, .L26+8
 442 0020 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 443 0024 3B82     		strh	r3, [r7, #16]	@ movhi
 384:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 385:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER)
 386:Generated_Source\PSoC5/CapSense_CSHL.c ****         tempRaw = filteredRawData;
 387:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_MedianFilter(filteredRawData, CapSense_rawFilterData1[sensor], 
 388:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                         CapSense_rawFilterData2[sensor]);
 389:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData2[sensor] = CapSense_rawFilterData1[sensor];
 390:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = tempRaw;
 391:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 392:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER)
 393:Generated_Source\PSoC5/CapSense_CSHL.c ****         tempRaw = filteredRawData;
 394:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_AveragingFilter(filteredRawData, CapSense_rawFilterData1[sensor]
 395:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                            CapSense_rawFilterData2[sensor]);
 396:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData2[sensor] = CapSense_rawFilterData1[sensor];
 397:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = tempRaw;
 398:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 399:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER)
 400:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_IIR2Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 444              		.loc 1 400 0
 445 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 446 0028 494A     		ldr	r2, .L26+12
 447 002a 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 448 002e 3B8A     		ldrh	r3, [r7, #16]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 16


 449 0030 1146     		mov	r1, r2
 450 0032 1846     		mov	r0, r3
 451 0034 FFF7FEFF 		bl	CapSense_IIR2Filter
 452 0038 0346     		mov	r3, r0
 453 003a 3B82     		strh	r3, [r7, #16]	@ movhi
 401:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 454              		.loc 1 401 0
 455 003c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 456 003e 4449     		ldr	r1, .L26+12
 457 0040 3A8A     		ldrh	r2, [r7, #16]	@ movhi
 458 0042 21F81320 		strh	r2, [r1, r3, lsl #1]	@ movhi
 402:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 403:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER)
 404:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_IIR4Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 405:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 406:Generated_Source\PSoC5/CapSense_CSHL.c ****             
 407:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER)
 408:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_JitterFilter(filteredRawData, CapSense_rawFilterData1[sensor]);
 409:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 410:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 411:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)
 412:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_IIR8Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 413:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 414:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 415:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER)
 416:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_IIR16Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 417:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 418:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 419:Generated_Source\PSoC5/CapSense_CSHL.c ****     #else
 420:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* No Raw filters */
 421:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) */
 422:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 423:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING)
 424:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_CalculateThresholds(sensor);
 425:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif /* (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING) */
 426:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 427:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 428:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Baseline calculation */
 429:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Calculate difference RawData[cur] - Baseline[prev] */
 430:Generated_Source\PSoC5/CapSense_CSHL.c ****     if(filteredRawData >= CapSense_sensorBaseline[sensor])
 459              		.loc 1 430 0
 460 0046 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 461 0048 424A     		ldr	r2, .L26+16
 462 004a 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 463 004e 3A8A     		ldrh	r2, [r7, #16]
 464 0050 9A42     		cmp	r2, r3
 465 0052 09D3     		bcc	.L17
 431:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 432:Generated_Source\PSoC5/CapSense_CSHL.c ****         tempRaw = filteredRawData - CapSense_sensorBaseline[sensor];
 466              		.loc 1 432 0
 467 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 468 0056 3F4A     		ldr	r2, .L26+16
 469 0058 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 470 005c 3A8A     		ldrh	r2, [r7, #16]	@ movhi
 471 005e D31A     		subs	r3, r2, r3
 472 0060 FB82     		strh	r3, [r7, #22]	@ movhi
 433:Generated_Source\PSoC5/CapSense_CSHL.c ****         widget = 1u;    /* Positive difference - Calculate the Signal */
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 17


 473              		.loc 1 433 0
 474 0062 0123     		movs	r3, #1
 475 0064 7B75     		strb	r3, [r7, #21]
 476 0066 08E0     		b	.L18
 477              	.L17:
 434:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 435:Generated_Source\PSoC5/CapSense_CSHL.c ****     else
 436:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 437:Generated_Source\PSoC5/CapSense_CSHL.c ****         tempRaw = CapSense_sensorBaseline[sensor] - filteredRawData;
 478              		.loc 1 437 0
 479 0068 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 480 006a 3A4A     		ldr	r2, .L26+16
 481 006c 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 482 0070 3B8A     		ldrh	r3, [r7, #16]	@ movhi
 483 0072 D31A     		subs	r3, r2, r3
 484 0074 FB82     		strh	r3, [r7, #22]	@ movhi
 438:Generated_Source\PSoC5/CapSense_CSHL.c ****         widget = 0u;    /* Negative difference - Do NOT calculate the Signal */
 485              		.loc 1 438 0
 486 0076 0023     		movs	r3, #0
 487 0078 7B75     		strb	r3, [r7, #21]
 488              	.L18:
 439:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 440:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 441:Generated_Source\PSoC5/CapSense_CSHL.c ****     if((widget == 0u) && (tempRaw > (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD))
 489              		.loc 1 441 0
 490 007a 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 491 007c 002B     		cmp	r3, #0
 492 007e 18D1     		bne	.L19
 493              		.loc 1 441 0 is_stmt 0 discriminator 1
 494 0080 FB8A     		ldrh	r3, [r7, #22]
 495 0082 142B     		cmp	r3, #20
 496 0084 15D9     		bls	.L19
 442:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 443:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(CapSense_lowBaselineResetCnt[sensor] >= CapSense_LOW_BASELINE_RESET)
 497              		.loc 1 443 0 is_stmt 1
 498 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 499 0088 334A     		ldr	r2, .L26+20
 500 008a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 501 008c 1D2B     		cmp	r3, #29
 502 008e 08D9     		bls	.L20
 444:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 445:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_BaseInit(sensor);
 503              		.loc 1 445 0
 504 0090 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 505 0092 1846     		mov	r0, r3
 506 0094 FFF7FEFF 		bl	CapSense_BaseInit
 446:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_lowBaselineResetCnt[sensor] = 0u;
 507              		.loc 1 446 0
 508 0098 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 509 009a 2F4A     		ldr	r2, .L26+20
 510 009c 0021     		movs	r1, #0
 511 009e D154     		strb	r1, [r2, r3]
 443:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 512              		.loc 1 443 0
 513 00a0 3AE0     		b	.L22
 514              	.L20:
 447:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 18


 448:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
 449:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 450:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_lowBaselineResetCnt[sensor]++;
 515              		.loc 1 450 0
 516 00a2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 517 00a4 2C4A     		ldr	r2, .L26+20
 518 00a6 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 519 00a8 0132     		adds	r2, r2, #1
 520 00aa D1B2     		uxtb	r1, r2
 521 00ac 2A4A     		ldr	r2, .L26+20
 522 00ae D154     		strb	r1, [r2, r3]
 443:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 523              		.loc 1 443 0
 524 00b0 32E0     		b	.L22
 525              	.L19:
 451:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 452:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 453:Generated_Source\PSoC5/CapSense_CSHL.c ****     else
 454:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 455:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE)
 456:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Update Baseline if lower that noiseThreshold */
 457:Generated_Source\PSoC5/CapSense_CSHL.c ****             if ( (tempRaw <= (uint16) noiseThreshold) || 
 526              		.loc 1 457 0
 527 00b2 FA8A     		ldrh	r2, [r7, #22]
 528 00b4 7B8A     		ldrh	r3, [r7, #18]
 529 00b6 9A42     		cmp	r2, r3
 530 00b8 05D9     		bls	.L23
 531              		.loc 1 457 0 is_stmt 0 discriminator 1
 532 00ba FB8A     		ldrh	r3, [r7, #22]
 533 00bc 132B     		cmp	r3, #19
 534 00be 2BD8     		bhi	.L22
 458:Generated_Source\PSoC5/CapSense_CSHL.c ****                  ((tempRaw < (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD)
 459:Generated_Source\PSoC5/CapSense_CSHL.c ****                    && (widget == 0u)))
 535              		.loc 1 459 0 is_stmt 1
 536 00c0 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 537 00c2 002B     		cmp	r3, #0
 538 00c4 28D1     		bne	.L22
 539              	.L23:
 460:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 461:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE) */
 462:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Make full Baseline 23 bits */
 463:Generated_Source\PSoC5/CapSense_CSHL.c ****                 calc = (uint32) CapSense_sensorBaseline[sensor] << 8u;
 540              		.loc 1 463 0
 541 00c6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 542 00c8 224A     		ldr	r2, .L26+16
 543 00ca 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 544 00ce 1B02     		lsls	r3, r3, #8
 545 00d0 FB60     		str	r3, [r7, #12]
 464:Generated_Source\PSoC5/CapSense_CSHL.c ****                 calc |= (uint32) CapSense_sensorBaselineLow[sensor];
 546              		.loc 1 464 0
 547 00d2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 548 00d4 214A     		ldr	r2, .L26+24
 549 00d6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 550 00d8 1A46     		mov	r2, r3
 551 00da FB68     		ldr	r3, [r7, #12]
 552 00dc 1343     		orrs	r3, r3, r2
 553 00de FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 19


 465:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 466:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Add Raw Data to Baseline */
 467:Generated_Source\PSoC5/CapSense_CSHL.c ****                 calc += filteredRawData;
 554              		.loc 1 467 0
 555 00e0 3B8A     		ldrh	r3, [r7, #16]
 556 00e2 FA68     		ldr	r2, [r7, #12]
 557 00e4 1344     		add	r3, r3, r2
 558 00e6 FB60     		str	r3, [r7, #12]
 468:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 469:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Sub the high Baseline */
 470:Generated_Source\PSoC5/CapSense_CSHL.c ****                 calc -= CapSense_sensorBaseline[sensor];
 559              		.loc 1 470 0
 560 00e8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 561 00ea 1A4A     		ldr	r2, .L26+16
 562 00ec 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 563 00f0 1A46     		mov	r2, r3
 564 00f2 FB68     		ldr	r3, [r7, #12]
 565 00f4 9B1A     		subs	r3, r3, r2
 566 00f6 FB60     		str	r3, [r7, #12]
 471:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 472:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Put Baseline and BaselineLow */
 473:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorBaseline[sensor] = ((uint16) (calc >> 8u));
 567              		.loc 1 473 0
 568 00f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 569 00fa FA68     		ldr	r2, [r7, #12]
 570 00fc 120A     		lsrs	r2, r2, #8
 571 00fe 91B2     		uxth	r1, r2
 572 0100 144A     		ldr	r2, .L26+16
 573 0102 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 474:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorBaselineLow[sensor] = ((uint8) calc);
 574              		.loc 1 474 0
 575 0106 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 576 0108 FA68     		ldr	r2, [r7, #12]
 577 010a D1B2     		uxtb	r1, r2
 578 010c 134A     		ldr	r2, .L26+24
 579 010e D154     		strb	r1, [r2, r3]
 475:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 476:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_lowBaselineResetCnt[sensor] = 0u;
 580              		.loc 1 476 0
 581 0110 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 582 0112 114A     		ldr	r2, .L26+20
 583 0114 0021     		movs	r1, #0
 584 0116 D154     		strb	r1, [r2, r3]
 585              	.L22:
 477:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE)
 478:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 479:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE) */
 480:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 481:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 482:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Calculate Signal if possitive difference > noiseThreshold */
 483:Generated_Source\PSoC5/CapSense_CSHL.c ****     if((tempRaw > (uint16) noiseThreshold) && (widget != 0u))
 586              		.loc 1 483 0
 587 0118 FA8A     		ldrh	r2, [r7, #22]
 588 011a 7B8A     		ldrh	r3, [r7, #18]
 589 011c 9A42     		cmp	r2, r3
 590 011e 08D9     		bls	.L24
 591              		.loc 1 483 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 20


 592 0120 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 593 0122 002B     		cmp	r3, #0
 594 0124 05D0     		beq	.L24
 484:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 485:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_SIGNAL_SIZE == CapSense_SIGNAL_SIZE_UINT8)
 486:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Over flow defence for uint8 */
 487:Generated_Source\PSoC5/CapSense_CSHL.c ****             if (tempRaw > 0xFFu)
 488:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 489:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorSignal[sensor] = 0xFFu;
 490:Generated_Source\PSoC5/CapSense_CSHL.c ****             }    
 491:Generated_Source\PSoC5/CapSense_CSHL.c ****             else 
 492:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 493:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorSignal[sensor] = ((uint8) tempRaw);
 494:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 495:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
 496:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_sensorSignal[sensor] = ((uint16) tempRaw);
 595              		.loc 1 496 0 is_stmt 1
 596 0126 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 597 0128 0D49     		ldr	r1, .L26+28
 598 012a FA8A     		ldrh	r2, [r7, #22]	@ movhi
 599 012c 21F81320 		strh	r2, [r1, r3, lsl #1]	@ movhi
 600 0130 04E0     		b	.L25
 601              	.L24:
 497:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif  /* (CapSense_SIGNAL_SIZE == CapSense_SIGNAL_SIZE_UINT8) */
 498:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 499:Generated_Source\PSoC5/CapSense_CSHL.c ****     else
 500:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 501:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Signal is zero */
 502:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_sensorSignal[sensor] = 0u;
 602              		.loc 1 502 0
 603 0132 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 604 0134 0A4A     		ldr	r2, .L26+28
 605 0136 0021     		movs	r1, #0
 606 0138 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 607              	.L25:
 503:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 504:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 505:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 506:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Exclude generic widget */
 507:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 508:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 509:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 608              		.loc 1 509 0
 609 013c 00BF     		nop
 610 013e 1837     		adds	r7, r7, #24
 611              		.cfi_def_cfa_offset 8
 612 0140 BD46     		mov	sp, r7
 613              		.cfi_def_cfa_register 13
 614              		@ sp needed
 615 0142 80BD     		pop	{r7, pc}
 616              	.L27:
 617              		.align	2
 618              	.L26:
 619 0144 00000000 		.word	CapSense_widgetNumber
 620 0148 00000000 		.word	CapSense_noiseThreshold
 621 014c 00000000 		.word	CapSense_sensorRaw
 622 0150 00000000 		.word	CapSense_rawFilterData1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 21


 623 0154 00000000 		.word	CapSense_sensorBaseline
 624 0158 00000000 		.word	CapSense_lowBaselineResetCnt
 625 015c 00000000 		.word	CapSense_sensorBaselineLow
 626 0160 00000000 		.word	CapSense_sensorSignal
 627              		.cfi_endproc
 628              	.LFE4:
 629              		.size	CapSense_UpdateSensorBaseline, .-CapSense_UpdateSensorBaseline
 630              		.section	.text.CapSense_UpdateEnabledBaselines,"ax",%progbits
 631              		.align	2
 632              		.global	CapSense_UpdateEnabledBaselines
 633              		.thumb
 634              		.thumb_func
 635              		.type	CapSense_UpdateEnabledBaselines, %function
 636              	CapSense_UpdateEnabledBaselines:
 637              	.LFB5:
 510:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 511:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 512:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 513:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_UpdateEnabledBaselines
 514:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 515:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 516:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 517:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Checks CapSense_sensorEnableMask[] array and calls the 
 518:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_UpdateSensorBaseline function to update the baselines 
 519:Generated_Source\PSoC5/CapSense_CSHL.c **** *  for enabled sensors.
 520:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 521:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 522:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 523:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 524:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 525:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 526:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 527:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 528:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
 529:Generated_Source\PSoC5/CapSense_CSHL.c **** *  state.
 530:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
 531:Generated_Source\PSoC5/CapSense_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 532:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
 533:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 534:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 535:Generated_Source\PSoC5/CapSense_CSHL.c **** *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 536:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 537:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 538:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 539:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 540:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 541:Generated_Source\PSoC5/CapSense_CSHL.c ****  void CapSense_UpdateEnabledBaselines(void)
 542:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  
 543:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 638              		.loc 1 543 0
 639              		.cfi_startproc
 640              		@ args = 0, pretend = 0, frame = 8
 641              		@ frame_needed = 1, uses_anonymous_args = 0
 642 0000 80B5     		push	{r7, lr}
 643              		.cfi_def_cfa_offset 8
 644              		.cfi_offset 7, -8
 645              		.cfi_offset 14, -4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 22


 646 0002 82B0     		sub	sp, sp, #8
 647              		.cfi_def_cfa_offset 16
 648 0004 00AF     		add	r7, sp, #0
 649              		.cfi_def_cfa_register 7
 544:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 i;
 545:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos;
 546:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 enMask;
 547:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 548:Generated_Source\PSoC5/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 650              		.loc 1 548 0
 651 0006 0023     		movs	r3, #0
 652 0008 FB71     		strb	r3, [r7, #7]
 653 000a 18E0     		b	.L29
 654              	.L31:
 549:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 550:Generated_Source\PSoC5/CapSense_CSHL.c ****         pos = (i >> 3u);
 655              		.loc 1 550 0
 656 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 657 000e DB08     		lsrs	r3, r3, #3
 658 0010 BB71     		strb	r3, [r7, #6]
 551:Generated_Source\PSoC5/CapSense_CSHL.c ****         enMask = (uint8)(0x01u << (i & 0x07u));
 659              		.loc 1 551 0
 660 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 661 0014 03F00703 		and	r3, r3, #7
 662 0018 0122     		movs	r2, #1
 663 001a 02FA03F3 		lsl	r3, r2, r3
 664 001e 7B71     		strb	r3, [r7, #5]
 552:Generated_Source\PSoC5/CapSense_CSHL.c ****         if((CapSense_sensorEnableMask[pos] & enMask) != 0u)
 665              		.loc 1 552 0
 666 0020 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 667 0022 0A4A     		ldr	r2, .L32
 668 0024 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 669 0026 7B79     		ldrb	r3, [r7, #5]
 670 0028 1340     		ands	r3, r3, r2
 671 002a DBB2     		uxtb	r3, r3
 672 002c 002B     		cmp	r3, #0
 673 002e 03D0     		beq	.L30
 553:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 554:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_UpdateSensorBaseline(i);
 674              		.loc 1 554 0
 675 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 676 0032 1846     		mov	r0, r3
 677 0034 FFF7FEFF 		bl	CapSense_UpdateSensorBaseline
 678              	.L30:
 548:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 679              		.loc 1 548 0 discriminator 2
 680 0038 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 681 003a 0133     		adds	r3, r3, #1
 682 003c FB71     		strb	r3, [r7, #7]
 683              	.L29:
 548:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 684              		.loc 1 548 0 is_stmt 0 discriminator 1
 685 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 686 0040 0B2B     		cmp	r3, #11
 687 0042 E3D9     		bls	.L31
 555:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 556:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 23


 557:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 688              		.loc 1 557 0 is_stmt 1
 689 0044 00BF     		nop
 690 0046 0837     		adds	r7, r7, #8
 691              		.cfi_def_cfa_offset 8
 692 0048 BD46     		mov	sp, r7
 693              		.cfi_def_cfa_register 13
 694              		@ sp needed
 695 004a 80BD     		pop	{r7, pc}
 696              	.L33:
 697              		.align	2
 698              	.L32:
 699 004c 00000000 		.word	CapSense_sensorEnableMask
 700              		.cfi_endproc
 701              	.LFE5:
 702              		.size	CapSense_UpdateEnabledBaselines, .-CapSense_UpdateEnabledBaselines
 703              		.section	.text.CapSense_CheckIsSensorActive,"ax",%progbits
 704              		.align	2
 705              		.global	CapSense_CheckIsSensorActive
 706              		.thumb
 707              		.thumb_func
 708              		.type	CapSense_CheckIsSensorActive, %function
 709              	CapSense_CheckIsSensorActive:
 710              	.LFB6:
 558:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 559:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 560:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 561:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_CheckIsSensorActive
 562:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 563:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 564:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 565:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Compares the CapSense_SensorSignal[sensor] array element to finger
 566:Generated_Source\PSoC5/CapSense_CSHL.c **** *  threshold of widget it belongs to. The hysteresis and debounce are taken into 
 567:Generated_Source\PSoC5/CapSense_CSHL.c **** *  account. The hysteresis is added or subtracted from the finger threshold 
 568:Generated_Source\PSoC5/CapSense_CSHL.c **** *  based on whether the sensor is currently active. 
 569:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If the sensor is active, the threshold is lowered by the hysteresis amount.
 570:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If the sensor is inactive, the threshold is raised by the hysteresis amount.
 571:Generated_Source\PSoC5/CapSense_CSHL.c **** *  The debounce counter added to the sensor active transition.
 572:Generated_Source\PSoC5/CapSense_CSHL.c **** *  This function updates CapSense_SensorOnMask[] array element.
 573:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 574:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 575:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensor:  Sensor number.
 576:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 577:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 578:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Returns sensor state 1 if active, 0 if not active.
 579:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 580:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 581:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorSignal[]      - used to store diffence between 
 582:Generated_Source\PSoC5/CapSense_CSHL.c **** *  current value of raw data and previous value of baseline.
 583:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_debounceCounter[]   - used to store current debounce 
 584:Generated_Source\PSoC5/CapSense_CSHL.c **** *  counter of sensor. Widget which has this parameter are buttons, matrix 
 585:Generated_Source\PSoC5/CapSense_CSHL.c **** *  buttons, proximity, guard. All other widgets haven't debounce parameter
 586:Generated_Source\PSoC5/CapSense_CSHL.c **** *  and use the last element of this array with value 0 (it means no debounce).
 587:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorOnMask[] - used to store sensors on/off state.
 588:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorOnMask[0] contains the masked bits for sensors 
 589:Generated_Source\PSoC5/CapSense_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 590:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 24


 591:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 592:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 - sensor is inactive.
 593:Generated_Source\PSoC5/CapSense_CSHL.c **** *  1 - sensor is active.
 594:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 595:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 596:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 597:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 598:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 599:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_CheckIsSensorActive(uint8 sensor)
 600:Generated_Source\PSoC5/CapSense_CSHL.c ****                                   
 601:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 711              		.loc 1 601 0
 712              		.cfi_startproc
 713              		@ args = 0, pretend = 0, frame = 24
 714              		@ frame_needed = 1, uses_anonymous_args = 0
 715              		@ link register save eliminated.
 716 0000 80B4     		push	{r7}
 717              		.cfi_def_cfa_offset 4
 718              		.cfi_offset 7, -4
 719 0002 87B0     		sub	sp, sp, #28
 720              		.cfi_def_cfa_offset 32
 721 0004 00AF     		add	r7, sp, #0
 722              		.cfi_def_cfa_register 7
 723 0006 0346     		mov	r3, r0
 724 0008 FB71     		strb	r3, [r7, #7]
 602:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 debounceIndex;
 603:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Get On/Off mask */
 604:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos = (sensor >> 3u);
 725              		.loc 1 604 0
 726 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 727 000c DB08     		lsrs	r3, r3, #3
 728 000e FB75     		strb	r3, [r7, #23]
 605:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 onMask = 0x01u << (sensor & 0x07u);
 729              		.loc 1 605 0
 730 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 731 0012 03F00703 		and	r3, r3, #7
 732 0016 0122     		movs	r2, #1
 733 0018 02FA03F3 		lsl	r3, r2, r3
 734 001c BB75     		strb	r3, [r7, #22]
 606:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Prepare to find debounce counter index */
 607:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 widget = CapSense_widgetNumber[sensor];
 735              		.loc 1 607 0
 736 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 737 0020 344A     		ldr	r2, .L43
 738 0022 D35C     		ldrb	r3, [r2, r3]
 739 0024 7B75     		strb	r3, [r7, #21]
 608:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 fingerThreshold = CapSense_fingerThreshold[widget];
 740              		.loc 1 608 0
 741 0026 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 742 0028 334A     		ldr	r2, .L43+4
 743 002a 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 744 002e 7B82     		strh	r3, [r7, #18]	@ movhi
 609:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 hysteresis = CapSense_hysteresis[widget];
 745              		.loc 1 609 0
 746 0030 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 747 0032 324A     		ldr	r2, .L43+8
 748 0034 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 25


 749 0038 3B82     		strh	r3, [r7, #16]	@ movhi
 610:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 debounce = CapSense_debounce[widget];
 750              		.loc 1 610 0
 751 003a 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 752 003c 304A     		ldr	r2, .L43+12
 753 003e D35C     		ldrb	r3, [r2, r3]
 754 0040 FB73     		strb	r3, [r7, #15]
 611:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 612:Generated_Source\PSoC5/CapSense_CSHL.c ****     debounceIndex = widget;
 755              		.loc 1 612 0
 756 0042 7B7D     		ldrb	r3, [r7, #21]
 757 0044 BB73     		strb	r3, [r7, #14]
 613:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 614:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 615:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Was on */
 616:Generated_Source\PSoC5/CapSense_CSHL.c ****     if (0u != (CapSense_sensorOnMask[pos] & onMask))
 758              		.loc 1 616 0
 759 0046 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 760 0048 2E4A     		ldr	r2, .L43+16
 761 004a D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 762 004c BB7D     		ldrb	r3, [r7, #22]
 763 004e 1340     		ands	r3, r3, r2
 764 0050 DBB2     		uxtb	r3, r3
 765 0052 002B     		cmp	r3, #0
 766 0054 19D0     		beq	.L35
 617:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 618:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Hysteresis minus */
 619:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (CapSense_sensorSignal[sensor] < (fingerThreshold - hysteresis))
 767              		.loc 1 619 0
 768 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 769 0058 2B4A     		ldr	r2, .L43+20
 770 005a 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 771 005e 1946     		mov	r1, r3
 772 0060 7A8A     		ldrh	r2, [r7, #18]
 773 0062 3B8A     		ldrh	r3, [r7, #16]
 774 0064 D31A     		subs	r3, r2, r3
 775 0066 9942     		cmp	r1, r3
 776 0068 33DA     		bge	.L37
 620:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 621:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_sensorOnMask[pos] &= (uint8)~onMask;
 777              		.loc 1 621 0
 778 006a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 779 006c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 780 006e 2549     		ldr	r1, .L43+16
 781 0070 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 782 0072 BA7D     		ldrb	r2, [r7, #22]
 783 0074 D243     		mvns	r2, r2
 784 0076 D2B2     		uxtb	r2, r2
 785 0078 0A40     		ands	r2, r2, r1
 786 007a D1B2     		uxtb	r1, r2
 787 007c 214A     		ldr	r2, .L43+16
 788 007e D154     		strb	r1, [r2, r3]
 622:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_debounceCounter[debounceIndex] = debounce; 
 789              		.loc 1 622 0
 790 0080 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 791 0082 2249     		ldr	r1, .L43+24
 792 0084 FA7B     		ldrb	r2, [r7, #15]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 26


 793 0086 CA54     		strb	r2, [r1, r3]
 794 0088 23E0     		b	.L37
 795              	.L35:
 623:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 624:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 625:Generated_Source\PSoC5/CapSense_CSHL.c ****     else    /* Was off */
 626:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 627:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Hysteresis plus */
 628:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (CapSense_sensorSignal[sensor] > (fingerThreshold + hysteresis))
 796              		.loc 1 628 0
 797 008a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 798 008c 1E4A     		ldr	r2, .L43+20
 799 008e 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 800 0092 1946     		mov	r1, r3
 801 0094 7A8A     		ldrh	r2, [r7, #18]
 802 0096 3B8A     		ldrh	r3, [r7, #16]
 803 0098 1344     		add	r3, r3, r2
 804 009a 9942     		cmp	r1, r3
 805 009c 15DD     		ble	.L38
 629:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 630:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Sensor active, decrement debounce counter */
 631:Generated_Source\PSoC5/CapSense_CSHL.c ****             if (CapSense_debounceCounter[debounceIndex] <= 1u)
 806              		.loc 1 631 0
 807 009e BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 808 00a0 1A4A     		ldr	r2, .L43+24
 809 00a2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 810 00a4 012B     		cmp	r3, #1
 811 00a6 08D8     		bhi	.L39
 632:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 633:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorOnMask[pos] |= onMask; 
 812              		.loc 1 633 0
 813 00a8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 814 00aa FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 815 00ac 1549     		ldr	r1, .L43+16
 816 00ae 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 817 00b0 BA7D     		ldrb	r2, [r7, #22]
 818 00b2 0A43     		orrs	r2, r2, r1
 819 00b4 D1B2     		uxtb	r1, r2
 820 00b6 134A     		ldr	r2, .L43+16
 821 00b8 D154     		strb	r1, [r2, r3]
 822              	.L39:
 634:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 635:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_debounceCounter[debounceIndex]--;
 823              		.loc 1 635 0
 824 00ba BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 825 00bc 134A     		ldr	r2, .L43+24
 826 00be D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 827 00c0 013A     		subs	r2, r2, #1
 828 00c2 D1B2     		uxtb	r1, r2
 829 00c4 114A     		ldr	r2, .L43+24
 830 00c6 D154     		strb	r1, [r2, r3]
 831 00c8 03E0     		b	.L37
 832              	.L38:
 636:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 637:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
 638:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 639:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Sensor inactive - reset Debounce counter */
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 27


 640:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_debounceCounter[debounceIndex] = debounce;
 833              		.loc 1 640 0
 834 00ca BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 835 00cc 0F49     		ldr	r1, .L43+24
 836 00ce FA7B     		ldrb	r2, [r7, #15]
 837 00d0 CA54     		strb	r2, [r1, r3]
 838              	.L37:
 641:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 642:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 643:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 644:Generated_Source\PSoC5/CapSense_CSHL.c ****     return (((CapSense_sensorOnMask[pos] & onMask) != 0u) ? 1u : 0u);
 839              		.loc 1 644 0
 840 00d2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 841 00d4 0B4A     		ldr	r2, .L43+16
 842 00d6 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 843 00d8 BB7D     		ldrb	r3, [r7, #22]
 844 00da 1340     		ands	r3, r3, r2
 845 00dc DBB2     		uxtb	r3, r3
 846 00de 002B     		cmp	r3, #0
 847 00e0 01D0     		beq	.L40
 848              		.loc 1 644 0 is_stmt 0 discriminator 1
 849 00e2 0123     		movs	r3, #1
 850 00e4 00E0     		b	.L41
 851              	.L40:
 852              		.loc 1 644 0 discriminator 2
 853 00e6 0023     		movs	r3, #0
 854              	.L41:
 645:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 855              		.loc 1 645 0 is_stmt 1 discriminator 4
 856 00e8 1846     		mov	r0, r3
 857 00ea 1C37     		adds	r7, r7, #28
 858              		.cfi_def_cfa_offset 4
 859 00ec BD46     		mov	sp, r7
 860              		.cfi_def_cfa_register 13
 861              		@ sp needed
 862 00ee 80BC     		pop	{r7}
 863              		.cfi_restore 7
 864              		.cfi_def_cfa_offset 0
 865 00f0 7047     		bx	lr
 866              	.L44:
 867 00f2 00BF     		.align	2
 868              	.L43:
 869 00f4 00000000 		.word	CapSense_widgetNumber
 870 00f8 00000000 		.word	CapSense_fingerThreshold
 871 00fc 00000000 		.word	CapSense_hysteresis
 872 0100 00000000 		.word	CapSense_debounce
 873 0104 00000000 		.word	CapSense_sensorOnMask
 874 0108 00000000 		.word	CapSense_sensorSignal
 875 010c 00000000 		.word	CapSense_debounceCounter
 876              		.cfi_endproc
 877              	.LFE6:
 878              		.size	CapSense_CheckIsSensorActive, .-CapSense_CheckIsSensorActive
 879              		.section	.text.CapSense_CheckIsWidgetActive,"ax",%progbits
 880              		.align	2
 881              		.global	CapSense_CheckIsWidgetActive
 882              		.thumb
 883              		.thumb_func
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 28


 884              		.type	CapSense_CheckIsWidgetActive, %function
 885              	CapSense_CheckIsWidgetActive:
 886              	.LFB7:
 646:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 647:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 648:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 649:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_CheckIsWidgetActive
 650:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 651:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 652:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 653:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Use function CapSense_CheckIsSensorActive() to update 
 654:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorOnMask[] for all sensors within the widget.
 655:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If one of sensors within widget is active the function return that widget is 
 656:Generated_Source\PSoC5/CapSense_CSHL.c **** *  active.
 657:Generated_Source\PSoC5/CapSense_CSHL.c **** *  The touch pad and matrix buttons widgets need to have active sensor within 
 658:Generated_Source\PSoC5/CapSense_CSHL.c **** *  col and row to return widget active status.
 659:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 660:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 661:Generated_Source\PSoC5/CapSense_CSHL.c **** *  widget:  widget number.
 662:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 663:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 664:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Returns widget sensor state 1 if one or more sensors within widget is/are 
 665:Generated_Source\PSoC5/CapSense_CSHL.c **** *  active, 0 if all sensors within widget are inactive.
 666:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 667:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 668:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 669:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 670:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 671:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_CheckIsWidgetActive(uint8 widget)
 672:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  
 673:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 887              		.loc 1 673 0
 888              		.cfi_startproc
 889              		@ args = 0, pretend = 0, frame = 16
 890              		@ frame_needed = 1, uses_anonymous_args = 0
 891 0000 80B5     		push	{r7, lr}
 892              		.cfi_def_cfa_offset 8
 893              		.cfi_offset 7, -8
 894              		.cfi_offset 14, -4
 895 0002 84B0     		sub	sp, sp, #16
 896              		.cfi_def_cfa_offset 24
 897 0004 00AF     		add	r7, sp, #0
 898              		.cfi_def_cfa_register 7
 899 0006 0346     		mov	r3, r0
 900 0008 FB71     		strb	r3, [r7, #7]
 674:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 rawIndex = CapSense_rawDataIndex[widget];
 901              		.loc 1 674 0
 902 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 903 000c 0F4A     		ldr	r2, .L49
 904 000e D35C     		ldrb	r3, [r2, r3]
 905 0010 FB73     		strb	r3, [r7, #15]
 675:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 906              		.loc 1 675 0
 907 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 908 0014 0E4A     		ldr	r2, .L49+4
 909 0016 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 910 0018 FB7B     		ldrb	r3, [r7, #15]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 29


 911 001a 1344     		add	r3, r3, r2
 912 001c 7B73     		strb	r3, [r7, #13]
 676:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 state = 0u;
 913              		.loc 1 676 0
 914 001e 0023     		movs	r3, #0
 915 0020 BB73     		strb	r3, [r7, #14]
 916              	.L47:
 677:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 678:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Check all sensors of the widget */
 679:Generated_Source\PSoC5/CapSense_CSHL.c ****     do
 680:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 681:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(CapSense_CheckIsSensorActive(rawIndex) != 0u)
 917              		.loc 1 681 0
 918 0022 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 919 0024 1846     		mov	r0, r3
 920 0026 FFF7FEFF 		bl	CapSense_CheckIsSensorActive
 921 002a 0346     		mov	r3, r0
 922 002c 002B     		cmp	r3, #0
 923 002e 01D0     		beq	.L46
 682:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 683:Generated_Source\PSoC5/CapSense_CSHL.c ****             state = CapSense_SENSOR_1_IS_ACTIVE;
 924              		.loc 1 683 0
 925 0030 0123     		movs	r3, #1
 926 0032 BB73     		strb	r3, [r7, #14]
 927              	.L46:
 684:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 685:Generated_Source\PSoC5/CapSense_CSHL.c ****         rawIndex++;
 928              		.loc 1 685 0
 929 0034 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 930 0036 0133     		adds	r3, r3, #1
 931 0038 FB73     		strb	r3, [r7, #15]
 686:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 687:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(rawIndex < numberOfSensors);
 932              		.loc 1 687 0
 933 003a FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 934 003c 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 935 003e 9A42     		cmp	r2, r3
 936 0040 EFD3     		bcc	.L47
 688:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 689:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 690:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 691:Generated_Source\PSoC5/CapSense_CSHL.c ****     return (state);
 937              		.loc 1 691 0
 938 0042 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 692:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 939              		.loc 1 692 0
 940 0044 1846     		mov	r0, r3
 941 0046 1037     		adds	r7, r7, #16
 942              		.cfi_def_cfa_offset 8
 943 0048 BD46     		mov	sp, r7
 944              		.cfi_def_cfa_register 13
 945              		@ sp needed
 946 004a 80BD     		pop	{r7, pc}
 947              	.L50:
 948              		.align	2
 949              	.L49:
 950 004c 00000000 		.word	CapSense_rawDataIndex
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 30


 951 0050 00000000 		.word	CapSense_numberOfSensors
 952              		.cfi_endproc
 953              	.LFE7:
 954              		.size	CapSense_CheckIsWidgetActive, .-CapSense_CheckIsWidgetActive
 955              		.section	.text.CapSense_CheckIsAnyWidgetActive,"ax",%progbits
 956              		.align	2
 957              		.global	CapSense_CheckIsAnyWidgetActive
 958              		.thumb
 959              		.thumb_func
 960              		.type	CapSense_CheckIsAnyWidgetActive, %function
 961              	CapSense_CheckIsAnyWidgetActive:
 962              	.LFB8:
 693:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 694:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 695:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 696:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_CheckIsAnyWidgetActive
 697:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 698:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 699:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 700:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Compares all sensors of the CapSense_signal[] array to their finger 
 701:Generated_Source\PSoC5/CapSense_CSHL.c **** *  threshold. Calls CapSense_CheckIsWidgetActive() for each widget so 
 702:Generated_Source\PSoC5/CapSense_CSHL.c **** *  the CapSense_SensorOnMask[] array is up to date after calling this 
 703:Generated_Source\PSoC5/CapSense_CSHL.c **** *  function.
 704:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 705:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 706:Generated_Source\PSoC5/CapSense_CSHL.c **** *  widget:  widget number.
 707:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 708:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 709:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Returns 1 if any widget is active, 0 none of widgets are active.
 710:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 711:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 712:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 713:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 714:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 715:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_CheckIsAnyWidgetActive(void)
 716:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  
 717:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 963              		.loc 1 717 0
 964              		.cfi_startproc
 965              		@ args = 0, pretend = 0, frame = 8
 966              		@ frame_needed = 1, uses_anonymous_args = 0
 967 0000 80B5     		push	{r7, lr}
 968              		.cfi_def_cfa_offset 8
 969              		.cfi_offset 7, -8
 970              		.cfi_offset 14, -4
 971 0002 82B0     		sub	sp, sp, #8
 972              		.cfi_def_cfa_offset 16
 973 0004 00AF     		add	r7, sp, #0
 974              		.cfi_def_cfa_register 7
 718:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 i;
 719:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 state = 0u;
 975              		.loc 1 719 0
 976 0006 0023     		movs	r3, #0
 977 0008 BB71     		strb	r3, [r7, #6]
 720:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 721:Generated_Source\PSoC5/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_WIDGET_COUNT; i++)
 978              		.loc 1 721 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 31


 979 000a 0023     		movs	r3, #0
 980 000c FB71     		strb	r3, [r7, #7]
 981 000e 0BE0     		b	.L52
 982              	.L54:
 722:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 723:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (CapSense_CheckIsWidgetActive(i) != 0u)
 983              		.loc 1 723 0
 984 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 985 0012 1846     		mov	r0, r3
 986 0014 FFF7FEFF 		bl	CapSense_CheckIsWidgetActive
 987 0018 0346     		mov	r3, r0
 988 001a 002B     		cmp	r3, #0
 989 001c 01D0     		beq	.L53
 724:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 725:Generated_Source\PSoC5/CapSense_CSHL.c ****             state = CapSense_WIDGET_IS_ACTIVE;
 990              		.loc 1 725 0
 991 001e 0123     		movs	r3, #1
 992 0020 BB71     		strb	r3, [r7, #6]
 993              	.L53:
 721:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 994              		.loc 1 721 0 discriminator 2
 995 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 996 0024 0133     		adds	r3, r3, #1
 997 0026 FB71     		strb	r3, [r7, #7]
 998              	.L52:
 721:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 999              		.loc 1 721 0 is_stmt 0 discriminator 1
 1000 0028 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1001 002a 0B2B     		cmp	r3, #11
 1002 002c F0D9     		bls	.L54
 726:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 727:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 728:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 729:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 730:Generated_Source\PSoC5/CapSense_CSHL.c ****     return (state);
 1003              		.loc 1 730 0 is_stmt 1
 1004 002e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 731:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 1005              		.loc 1 731 0
 1006 0030 1846     		mov	r0, r3
 1007 0032 0837     		adds	r7, r7, #8
 1008              		.cfi_def_cfa_offset 8
 1009 0034 BD46     		mov	sp, r7
 1010              		.cfi_def_cfa_register 13
 1011              		@ sp needed
 1012 0036 80BD     		pop	{r7, pc}
 1013              		.cfi_endproc
 1014              	.LFE8:
 1015              		.size	CapSense_CheckIsAnyWidgetActive, .-CapSense_CheckIsAnyWidgetActive
 1016              		.section	.text.CapSense_EnableWidget,"ax",%progbits
 1017              		.align	2
 1018              		.global	CapSense_EnableWidget
 1019              		.thumb
 1020              		.thumb_func
 1021              		.type	CapSense_EnableWidget, %function
 1022              	CapSense_EnableWidget:
 1023              	.LFB9:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 32


 732:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 733:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 734:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 735:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_EnableWidget
 736:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 737:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 738:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 739:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Enable all widget elements (sensors) to scanning process.
 740:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 741:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 742:Generated_Source\PSoC5/CapSense_CSHL.c **** *  widget:  widget number.
 743:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 744:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 745:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 746:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 747:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 748:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
 749:Generated_Source\PSoC5/CapSense_CSHL.c **** *  state.
 750:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
 751:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 752:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
 753:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 754:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 755:Generated_Source\PSoC5/CapSense_CSHL.c **** *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 756:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 757:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 758:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 759:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 760:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 761:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_EnableWidget(uint8 widget)
 762:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    
 763:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 1024              		.loc 1 763 0
 1025              		.cfi_startproc
 1026              		@ args = 0, pretend = 0, frame = 16
 1027              		@ frame_needed = 1, uses_anonymous_args = 0
 1028              		@ link register save eliminated.
 1029 0000 80B4     		push	{r7}
 1030              		.cfi_def_cfa_offset 4
 1031              		.cfi_offset 7, -4
 1032 0002 85B0     		sub	sp, sp, #20
 1033              		.cfi_def_cfa_offset 24
 1034 0004 00AF     		add	r7, sp, #0
 1035              		.cfi_def_cfa_register 7
 1036 0006 0346     		mov	r3, r0
 1037 0008 FB71     		strb	r3, [r7, #7]
 764:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos;
 765:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 enMask;
 766:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 rawIndex = CapSense_rawDataIndex[widget];
 1038              		.loc 1 766 0
 1039 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1040 000c 134A     		ldr	r2, .L58
 1041 000e D35C     		ldrb	r3, [r2, r3]
 1042 0010 FB73     		strb	r3, [r7, #15]
 767:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 1043              		.loc 1 767 0
 1044 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 33


 1045 0014 124A     		ldr	r2, .L58+4
 1046 0016 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1047 0018 FB7B     		ldrb	r3, [r7, #15]
 1048 001a 1344     		add	r3, r3, r2
 1049 001c BB73     		strb	r3, [r7, #14]
 1050              	.L57:
 768:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 769:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Enable all sensors of the widget */
 770:Generated_Source\PSoC5/CapSense_CSHL.c ****     do
 771:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 772:Generated_Source\PSoC5/CapSense_CSHL.c ****         pos = (rawIndex >> 3u);
 1051              		.loc 1 772 0 discriminator 1
 1052 001e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1053 0020 DB08     		lsrs	r3, r3, #3
 1054 0022 7B73     		strb	r3, [r7, #13]
 773:Generated_Source\PSoC5/CapSense_CSHL.c ****         enMask = 0x01u << (rawIndex & 0x07u);
 1055              		.loc 1 773 0 discriminator 1
 1056 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1057 0026 03F00703 		and	r3, r3, #7
 1058 002a 0122     		movs	r2, #1
 1059 002c 02FA03F3 		lsl	r3, r2, r3
 1060 0030 3B73     		strb	r3, [r7, #12]
 774:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 775:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_sensorEnableMask[pos] |= enMask;
 1061              		.loc 1 775 0 discriminator 1
 1062 0032 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1063 0034 7A7B     		ldrb	r2, [r7, #13]	@ zero_extendqisi2
 1064 0036 0B49     		ldr	r1, .L58+8
 1065 0038 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 1066 003a 3A7B     		ldrb	r2, [r7, #12]
 1067 003c 0A43     		orrs	r2, r2, r1
 1068 003e D1B2     		uxtb	r1, r2
 1069 0040 084A     		ldr	r2, .L58+8
 1070 0042 D154     		strb	r1, [r2, r3]
 776:Generated_Source\PSoC5/CapSense_CSHL.c ****         rawIndex++;
 1071              		.loc 1 776 0 discriminator 1
 1072 0044 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1073 0046 0133     		adds	r3, r3, #1
 1074 0048 FB73     		strb	r3, [r7, #15]
 777:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 778:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(rawIndex < numberOfSensors);
 1075              		.loc 1 778 0 discriminator 1
 1076 004a FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1077 004c BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1078 004e 9A42     		cmp	r2, r3
 1079 0050 E5D3     		bcc	.L57
 779:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 780:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 781:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 1080              		.loc 1 781 0
 1081 0052 00BF     		nop
 1082 0054 1437     		adds	r7, r7, #20
 1083              		.cfi_def_cfa_offset 4
 1084 0056 BD46     		mov	sp, r7
 1085              		.cfi_def_cfa_register 13
 1086              		@ sp needed
 1087 0058 80BC     		pop	{r7}
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 34


 1088              		.cfi_restore 7
 1089              		.cfi_def_cfa_offset 0
 1090 005a 7047     		bx	lr
 1091              	.L59:
 1092              		.align	2
 1093              	.L58:
 1094 005c 00000000 		.word	CapSense_rawDataIndex
 1095 0060 00000000 		.word	CapSense_numberOfSensors
 1096 0064 00000000 		.word	CapSense_sensorEnableMask
 1097              		.cfi_endproc
 1098              	.LFE9:
 1099              		.size	CapSense_EnableWidget, .-CapSense_EnableWidget
 1100              		.section	.text.CapSense_DisableWidget,"ax",%progbits
 1101              		.align	2
 1102              		.global	CapSense_DisableWidget
 1103              		.thumb
 1104              		.thumb_func
 1105              		.type	CapSense_DisableWidget, %function
 1106              	CapSense_DisableWidget:
 1107              	.LFB10:
 782:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 783:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 784:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 785:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_DisableWidget
 786:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 787:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 788:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 789:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Disable all widget elements (sensors) from scanning process.
 790:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 791:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 792:Generated_Source\PSoC5/CapSense_CSHL.c **** *  widget:  widget number.
 793:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 794:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 795:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 796:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 797:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 798:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
 799:Generated_Source\PSoC5/CapSense_CSHL.c **** *  state.
 800:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
 801:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 802:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
 803:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 804:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 805:Generated_Source\PSoC5/CapSense_CSHL.c **** *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 806:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 807:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 808:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 809:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 810:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 811:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_DisableWidget(uint8 widget)
 812:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     
 813:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 1108              		.loc 1 813 0
 1109              		.cfi_startproc
 1110              		@ args = 0, pretend = 0, frame = 16
 1111              		@ frame_needed = 1, uses_anonymous_args = 0
 1112              		@ link register save eliminated.
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 35


 1113 0000 80B4     		push	{r7}
 1114              		.cfi_def_cfa_offset 4
 1115              		.cfi_offset 7, -4
 1116 0002 85B0     		sub	sp, sp, #20
 1117              		.cfi_def_cfa_offset 24
 1118 0004 00AF     		add	r7, sp, #0
 1119              		.cfi_def_cfa_register 7
 1120 0006 0346     		mov	r3, r0
 1121 0008 FB71     		strb	r3, [r7, #7]
 814:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos;
 815:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 enMask;
 816:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 rawIndex = CapSense_rawDataIndex[widget];
 1122              		.loc 1 816 0
 1123 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1124 000c 144A     		ldr	r2, .L62
 1125 000e D35C     		ldrb	r3, [r2, r3]
 1126 0010 FB73     		strb	r3, [r7, #15]
 817:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 1127              		.loc 1 817 0
 1128 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1129 0014 134A     		ldr	r2, .L62+4
 1130 0016 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1131 0018 FB7B     		ldrb	r3, [r7, #15]
 1132 001a 1344     		add	r3, r3, r2
 1133 001c BB73     		strb	r3, [r7, #14]
 1134              	.L61:
 818:Generated_Source\PSoC5/CapSense_CSHL.c ****    
 819:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Disable all sensors of the widget */
 820:Generated_Source\PSoC5/CapSense_CSHL.c ****     do
 821:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 822:Generated_Source\PSoC5/CapSense_CSHL.c ****         pos = (rawIndex >> 3u);
 1135              		.loc 1 822 0 discriminator 1
 1136 001e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1137 0020 DB08     		lsrs	r3, r3, #3
 1138 0022 7B73     		strb	r3, [r7, #13]
 823:Generated_Source\PSoC5/CapSense_CSHL.c ****         enMask = 0x01u << (rawIndex & 0x07u);
 1139              		.loc 1 823 0 discriminator 1
 1140 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1141 0026 03F00703 		and	r3, r3, #7
 1142 002a 0122     		movs	r2, #1
 1143 002c 02FA03F3 		lsl	r3, r2, r3
 1144 0030 3B73     		strb	r3, [r7, #12]
 824:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 825:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_sensorEnableMask[pos] &= (uint8)~enMask;
 1145              		.loc 1 825 0 discriminator 1
 1146 0032 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1147 0034 7A7B     		ldrb	r2, [r7, #13]	@ zero_extendqisi2
 1148 0036 0C49     		ldr	r1, .L62+8
 1149 0038 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 1150 003a 3A7B     		ldrb	r2, [r7, #12]
 1151 003c D243     		mvns	r2, r2
 1152 003e D2B2     		uxtb	r2, r2
 1153 0040 0A40     		ands	r2, r2, r1
 1154 0042 D1B2     		uxtb	r1, r2
 1155 0044 084A     		ldr	r2, .L62+8
 1156 0046 D154     		strb	r1, [r2, r3]
 826:Generated_Source\PSoC5/CapSense_CSHL.c ****         rawIndex++;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 36


 1157              		.loc 1 826 0 discriminator 1
 1158 0048 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1159 004a 0133     		adds	r3, r3, #1
 1160 004c FB73     		strb	r3, [r7, #15]
 827:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 828:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(rawIndex < numberOfSensors);
 1161              		.loc 1 828 0 discriminator 1
 1162 004e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1163 0050 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1164 0052 9A42     		cmp	r2, r3
 1165 0054 E3D3     		bcc	.L61
 829:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 830:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 831:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 1166              		.loc 1 831 0
 1167 0056 00BF     		nop
 1168 0058 1437     		adds	r7, r7, #20
 1169              		.cfi_def_cfa_offset 4
 1170 005a BD46     		mov	sp, r7
 1171              		.cfi_def_cfa_register 13
 1172              		@ sp needed
 1173 005c 80BC     		pop	{r7}
 1174              		.cfi_restore 7
 1175              		.cfi_def_cfa_offset 0
 1176 005e 7047     		bx	lr
 1177              	.L63:
 1178              		.align	2
 1179              	.L62:
 1180 0060 00000000 		.word	CapSense_rawDataIndex
 1181 0064 00000000 		.word	CapSense_numberOfSensors
 1182 0068 00000000 		.word	CapSense_sensorEnableMask
 1183              		.cfi_endproc
 1184              	.LFE10:
 1185              		.size	CapSense_DisableWidget, .-CapSense_DisableWidget
 1186              		.section	.text.CapSense_IIR2Filter,"ax",%progbits
 1187              		.align	2
 1188              		.global	CapSense_IIR2Filter
 1189              		.thumb
 1190              		.thumb_func
 1191              		.type	CapSense_IIR2Filter, %function
 1192              	CapSense_IIR2Filter:
 1193              	.LFB11:
 832:Generated_Source\PSoC5/CapSense_CSHL.c **** #if(CapSense_TOTAL_CENTROIDS_COUNT)
 833:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
 834:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_FindMaximum
 835:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
 836:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
 837:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
 838:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Finds index of maximum element within defined centroid. Checks 
 839:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  CapSense_SensorSignal[] within defined cenrtoid and 
 840:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  returns index of maximum element. The values below finger threshold are 
 841:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  ignored.
 842:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The centrod defines by offset of first element and number of elements - count.
 843:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The diplexed centroid requires at least consecutive two elements above
 844:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  FingerThreshold to find index of maximum element.
 845:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
 846:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 37


 847:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  offset:  Start index of cetroid in CapSense_sensorSignal[] array.
 848:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  count:   number of elements within centroid.
 849:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  fingerThreshold:  Finger threshould.
 850:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  diplex:   pointer to diplex table.
 851:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
 852:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
 853:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns index of maximum element within defined centroid.
 854:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If index of maximum element doesn't find the 0xFF returns.
 855:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
 856:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
 857:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_IS_DIPLEX_SLIDER)
 858:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 CapSense_FindMaximum(uint8 offset, uint8 count, uint16 fingerThreshold, const uint8 C
 859:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                       
 860:Generated_Source\PSoC5/CapSense_CSHL.c ****     #else 
 861:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 CapSense_FindMaximum(uint8 offset, uint8 count, uint16 fingerThreshold)
 862:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                       
 863:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif /* (CapSense_IS_DIPLEX_SLIDER) */
 864:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 865:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 i;
 866:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)        
 867:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 curPos = 0u;
 868:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* No centroid at the Start */
 869:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 curCntrdSize = 0u;
 870:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 curCtrdStartPos = 0xFFu;
 871:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* The biggset centroid is zero */
 872:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 biggestCtrdSize = 0u;
 873:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 biggestCtrdStartPos = 0u;
 874:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
 875:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maximum = 0xFFu;
 876:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 temp = 0u;
 877:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 *startOfSlider = &CapSense_sensorSignal[offset]; 
 878:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 879:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)        
 880:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(diplex != 0u)
 881:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 882:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Initialize */
 883:Generated_Source\PSoC5/CapSense_CSHL.c ****                 i = 0u;
 884:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
 885:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Make slider x2 as Diplexed */
 886:Generated_Source\PSoC5/CapSense_CSHL.c ****                 count <<= 1u;
 887:Generated_Source\PSoC5/CapSense_CSHL.c ****                 while(1u)
 888:Generated_Source\PSoC5/CapSense_CSHL.c ****                 { 
 889:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (startOfSlider[curPos] > 0u)    /* Looking for centroids */
 890:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
 891:Generated_Source\PSoC5/CapSense_CSHL.c ****                         if (curCtrdStartPos == 0xFFu)
 892:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
 893:Generated_Source\PSoC5/CapSense_CSHL.c ****                             /* Start of centroid */
 894:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCtrdStartPos = i;
 895:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCntrdSize++;
 896:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
 897:Generated_Source\PSoC5/CapSense_CSHL.c ****                         else
 898:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
 899:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCntrdSize++;
 900:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
 901:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
 902:Generated_Source\PSoC5/CapSense_CSHL.c ****                     else   /* Select the bigest and indicate zero start */
 903:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {          
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 38


 904:Generated_Source\PSoC5/CapSense_CSHL.c ****                         if(curCntrdSize > 0u)
 905:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
 906:Generated_Source\PSoC5/CapSense_CSHL.c ****                             /* We are in the end of current */
 907:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if(curCntrdSize > biggestCtrdSize)
 908:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
 909:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 biggestCtrdSize = curCntrdSize;
 910:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 biggestCtrdStartPos = curCtrdStartPos;
 911:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
 912:Generated_Source\PSoC5/CapSense_CSHL.c ****                             
 913:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCntrdSize = 0u;
 914:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCtrdStartPos = 0xFFu;
 915:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
 916:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
 917:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
 918:Generated_Source\PSoC5/CapSense_CSHL.c ****                     i++; 
 919:Generated_Source\PSoC5/CapSense_CSHL.c ****                     curPos = diplex[i];
 920:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if(i == count)
 921:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
 922:Generated_Source\PSoC5/CapSense_CSHL.c ****                         break;
 923:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }            
 924:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
 925:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
 926:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Find the biggest centroid if two are the same size, last one wins
 927:Generated_Source\PSoC5/CapSense_CSHL.c ****                        We are in the end of current */
 928:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (curCntrdSize >= biggestCtrdSize) 
 929:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
 930:Generated_Source\PSoC5/CapSense_CSHL.c ****                     biggestCtrdSize = curCntrdSize;
 931:Generated_Source\PSoC5/CapSense_CSHL.c ****                     biggestCtrdStartPos = curCtrdStartPos;
 932:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
 933:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 934:Generated_Source\PSoC5/CapSense_CSHL.c ****             else
 935:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 936:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Without diplexing */ 
 937:Generated_Source\PSoC5/CapSense_CSHL.c ****                 biggestCtrdSize = count;
 938:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 939:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
 940:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 941:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Check centroid size */
 942:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (CapSense_IS_NON_DIPLEX_SLIDER)
 943:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if((biggestCtrdSize >= 2u) || ((biggestCtrdSize == 1u) && (diplex == 0u)))
 944:Generated_Source\PSoC5/CapSense_CSHL.c ****             #else                    
 945:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if(biggestCtrdSize >= 2u)
 946:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (CapSense_IS_NON_DIPLEX_SLIDER) */
 947:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
 948:Generated_Source\PSoC5/CapSense_CSHL.c ****                     for (i = biggestCtrdStartPos; i < (biggestCtrdStartPos + biggestCtrdSize); i++)
 949:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
 950:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER)
 951:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (diplex == 0u)
 952:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
 953:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 curPos = i;
 954:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
 955:Generated_Source\PSoC5/CapSense_CSHL.c ****                             else
 956:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
 957:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 curPos = diplex[i];
 958:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }                    
 959:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #elif (CapSense_IS_DIPLEX_SLIDER)                    
 960:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curPos = diplex[i];                    
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 39


 961:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER) */
 962:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Looking for the grater element within centroid */
 963:Generated_Source\PSoC5/CapSense_CSHL.c ****                         if(startOfSlider[curPos] > fingerThreshold)
 964:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
 965:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if(startOfSlider[curPos] > temp)
 966:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
 967:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 maximum = i;
 968:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 temp = startOfSlider[curPos];
 969:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
 970:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
 971:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
 972:Generated_Source\PSoC5/CapSense_CSHL.c ****                 } 
 973:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
 974:Generated_Source\PSoC5/CapSense_CSHL.c ****             for (i = 0u; i < count; i++)
 975:Generated_Source\PSoC5/CapSense_CSHL.c ****             {                      
 976:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Looking for the grater element within centroid */
 977:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if(startOfSlider[i] > fingerThreshold)
 978:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
 979:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if(startOfSlider[i] > temp)
 980:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
 981:Generated_Source\PSoC5/CapSense_CSHL.c ****                         maximum = i;
 982:Generated_Source\PSoC5/CapSense_CSHL.c ****                         temp = startOfSlider[i];
 983:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
 984:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
 985:Generated_Source\PSoC5/CapSense_CSHL.c ****             }    
 986:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
 987:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (maximum);
 988:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 989:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 990:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 991:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
 992:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_CalcCentroid
 993:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
 994:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
 995:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
 996:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns position value calculated accoring index of maximum element and API
 997:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  resolution.
 998:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
 999:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1000:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  type:  widget type.
1001:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  diplex:  pointer to diplex table.
1002:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  maximum:  Index of maximum element within centroid.
1003:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  offset:   Start index of cetroid in CapSense_SensorSignal[] array.
1004:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  count:    Number of elements within centroid.
1005:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  resolution:  multiplicator calculated according to centroid type and
1006:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  API resolution.
1007:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  noiseThreshold:  Noise threshould.
1008:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
1009:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1010:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns position value of the slider.
1011:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
1012:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1013:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Reentrant:
1014:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  No.
1015:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1016:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1017:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 CapSense_CalcCentroid(uint8 maximum, uint8 offset, 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 40


1018:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         uint8 count, uint16 resolution, uint16 noiseThreshold)
1019:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                    
1020:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1021:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_TOUCH_PADS_COUNT > 0u))
1022:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posPrev = 0u;
1023:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posNext = 0u;
1024:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT>0u) || (CapSense_TOTAL_TOUCH_PADS_COUNT>0u)
1025:Generated_Source\PSoC5/CapSense_CSHL.c ****                
1026:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)                
1027:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 pos;
1028:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1029:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1030:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Helps while centroid calulation */
1031:Generated_Source\PSoC5/CapSense_CSHL.c ****         static uint16 CapSense_centroid[3u];
1032:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1033:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 position;
1034:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint32 numerator;
1035:Generated_Source\PSoC5/CapSense_CSHL.c ****         int32 denominator;
1036:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 *startOfSlider = &CapSense_sensorSignal[offset];
1037:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
1038:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_ADD_SLIDER_TYPE)
1039:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(type == CapSense_TYPE_RADIAL_SLIDER)
1040:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1041:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_ADD_SLIDER_TYPE) */
1042:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1043:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)                
1044:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Copy Signal for found centriod */
1045:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_centroid[CapSense_POS] = startOfSlider[maximum];
1046:Generated_Source\PSoC5/CapSense_CSHL.c ****                  
1047:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Check borders for ROTARY Slider */
1048:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (maximum == 0u)                   /* Start of centroid */
1049:Generated_Source\PSoC5/CapSense_CSHL.c ****                 { 
1050:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[count - 1u];
1051:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[1u];
1052:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1053:Generated_Source\PSoC5/CapSense_CSHL.c ****                 else if (maximum == (count - 1u))    /* End of centroid */
1054:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1055:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[maximum - 1u];
1056:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[0u];
1057:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1058:Generated_Source\PSoC5/CapSense_CSHL.c ****                 else                                /* Not first Not last */
1059:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1060:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[maximum - 1u];
1061:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[maximum + 1u];
1062:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1063:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1064:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1065:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_ADD_SLIDER_TYPE)
1066:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1067:Generated_Source\PSoC5/CapSense_CSHL.c ****             else
1068:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1069:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_ADD_SLIDER_TYPE) */
1070:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1071:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_TOUCH_PADS_COUNT > 0
1072:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #if (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER)                   
1073:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Calculate next and previous near to maximum */
1074:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if(diplex == 0u)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 41


1075:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1076:Generated_Source\PSoC5/CapSense_CSHL.c ****                         pos     = maximum;
1077:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posPrev = maximum - 1u;
1078:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posNext = maximum + 1u; 
1079:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1080:Generated_Source\PSoC5/CapSense_CSHL.c ****                     else
1081:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1082:Generated_Source\PSoC5/CapSense_CSHL.c ****                         pos     = diplex[maximum];
1083:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posPrev = diplex[maximum - 1u];
1084:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posNext = diplex[maximum + 1u];
1085:Generated_Source\PSoC5/CapSense_CSHL.c ****                         count <<= 1u;
1086:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }                    
1087:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #elif (CapSense_IS_DIPLEX_SLIDER)
1088:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Calculate next and previous near to maximum */
1089:Generated_Source\PSoC5/CapSense_CSHL.c ****                     pos     = diplex[maximum];
1090:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posPrev = diplex[maximum - 1u];
1091:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posNext = diplex[maximum + 1u];
1092:Generated_Source\PSoC5/CapSense_CSHL.c ****                     count <<= 1u;                    
1093:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #else                    
1094:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Calculate next and previous near to maximum */
1095:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (maximum >= 1u)
1096:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1097:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posPrev = maximum - 1u;
1098:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1099:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posNext = maximum + 1u; 
1100:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #endif /* (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER) */
1101:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
1102:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Copy Signal for found centriod */
1103:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #if (CapSense_IS_DIPLEX_SLIDER)
1104:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS] = startOfSlider[pos];
1105:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #else
1106:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS] = startOfSlider[maximum];
1107:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1108:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
1109:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Check borders for LINEAR Slider */
1110:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (maximum == 0u)                   /* Start of centroid */
1111:Generated_Source\PSoC5/CapSense_CSHL.c ****                 { 
1112:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = 0u;
1113:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[posNext];
1114:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1115:Generated_Source\PSoC5/CapSense_CSHL.c ****                 else if (maximum == ((count) - 1u)) /* End of centroid */
1116:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1117:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[posPrev];
1118:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = 0u;
1119:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1120:Generated_Source\PSoC5/CapSense_CSHL.c ****                 else                                /* Not first Not last */
1121:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1122:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[posPrev];
1123:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[posNext];
1124:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1125:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT>0u)||(CapSense_TOTAL_TOUCH_PADS_COUNT>0
1126:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1127:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_ADD_SLIDER_TYPE)
1128:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1129:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_ADD_SLIDER_TYPE) */
1130:Generated_Source\PSoC5/CapSense_CSHL.c ****     
1131:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Subtract noiseThreshold */
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 42


1132:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(CapSense_centroid[CapSense_POS_PREV] > noiseThreshold)
1133:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1134:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_PREV] -= noiseThreshold;
1135:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1136:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
1137:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1138:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_PREV] = 0u;
1139:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1140:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1141:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Maximum always grater than fingerThreshold, so grate than noiseThreshold */
1142:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_centroid[CapSense_POS] -= noiseThreshold;
1143:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1144:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Subtract noiseThreshold */
1145:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(CapSense_centroid[CapSense_POS_NEXT] > noiseThreshold)
1146:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1147:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_NEXT] -= noiseThreshold;
1148:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1149:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
1150:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1151:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_NEXT] = 0u;
1152:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1153:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1154:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1155:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Si+1 - Si-1 */
1156:Generated_Source\PSoC5/CapSense_CSHL.c ****         numerator = (uint32) CapSense_centroid[CapSense_POS_NEXT] -
1157:Generated_Source\PSoC5/CapSense_CSHL.c ****                     (uint32) CapSense_centroid[CapSense_POS_PREV];
1158:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1159:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Si+1 + Si + Si-1 */
1160:Generated_Source\PSoC5/CapSense_CSHL.c ****         denominator = (int32) CapSense_centroid[CapSense_POS_PREV] + 
1161:Generated_Source\PSoC5/CapSense_CSHL.c ****                       (int32) CapSense_centroid[CapSense_POS] + 
1162:Generated_Source\PSoC5/CapSense_CSHL.c ****                       (int32) CapSense_centroid[CapSense_POS_NEXT];
1163:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1164:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* (numerator/denominator) + maximum */
1165:Generated_Source\PSoC5/CapSense_CSHL.c ****         denominator = (((int32)(uint32)((uint32)numerator << 8u)/denominator) + (int32)(uint32)((ui
1166:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1167:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if(CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
1168:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Only required for RADIAL Slider */
1169:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(denominator < 0)
1170:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1171:Generated_Source\PSoC5/CapSense_CSHL.c ****                 denominator += (int32)((uint16)((uint16) count << 8u));
1172:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1173:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1174:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1175:Generated_Source\PSoC5/CapSense_CSHL.c ****         denominator *= (int16)resolution;
1176:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1177:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Round the relust and put it to uint8 */
1178:Generated_Source\PSoC5/CapSense_CSHL.c ****         position = ((uint8) HI16((uint32)denominator + CapSense_CENTROID_ROUND_VALUE));
1179:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1180:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (position);
1181:Generated_Source\PSoC5/CapSense_CSHL.c ****     }    
1182:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* (CapSense_TOTAL_CENTROIDS_COUNT) */
1183:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1184:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1185:Generated_Source\PSoC5/CapSense_CSHL.c **** #if(CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u)
1186:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1187:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_GetCentroidPos
1188:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 43


1189:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1190:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1191:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Checks the CapSense_Signal[ ] array for a centroid within
1192:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  slider specified range. The centroid position is calculated to the resolution
1193:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  specified in the CapSense customizer. The position filters are applied to the
1194:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  result if enabled.
1195:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1196:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1197:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  widget:  Widget number.
1198:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  For every linear slider widget there are defines in this format:
1199:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  #define CapSense_LS__"widget_name"            5
1200:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
1201:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1202:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns position value of the linear slider.
1203:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1204:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Side Effects:
1205:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If any sensor within the slider widget is active, the function returns values
1206:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  from zero to the API resolution value set in the CapSense customizer. If no
1207:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  sensors are active, the function returns 0xFFFF. If an error occurs during
1208:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  execution of the centroid/diplexing algorithm, the function returns 0xFFFF.
1209:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  There are no checks of widget type argument provided to this function.
1210:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The unproper widget type provided will cause unexpected position calculations.
1211:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1212:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Note:
1213:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If noise counts on the slider segments are greater than the noise
1214:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  threshold, this subroutine may generate a false centroid result. The noise
1215:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  threshold should be set carefully (high enough above the noise level) so
1216:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  that noise will not generate a false centroid.
1217:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1218:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Reentrant:
1219:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  No.
1220:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1221:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1222:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_GetCentroidPos(uint8 widget) 
1223:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1224:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1225:Generated_Source\PSoC5/CapSense_CSHL.c ****             const uint8 CYCODE *diplex;
1226:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1227:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
1228:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
1229:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posIndex;
1230:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 firstTimeIndex = CapSense_posFiltersData[widget];
1231:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posFiltersMask = CapSense_posFiltersMask[widget];  
1232:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1233:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1234:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1235:Generated_Source\PSoC5/CapSense_CSHL.c ****              (0u != (CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1236:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 tempPos;
1237:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1238:Generated_Source\PSoC5/CapSense_CSHL.c ****                *   (0u != (CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1239:Generated_Source\PSoC5/CapSense_CSHL.c ****                */
1240:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1241:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maximum;
1242:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 position;
1243:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 offset = CapSense_rawDataIndex[widget];
1244:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 count = CapSense_numberOfSensors[widget];
1245:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 44


1246:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1247:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(widget < CapSense_TOTAL_DIPLEXED_SLIDERS_COUNT)
1248:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1249:Generated_Source\PSoC5/CapSense_CSHL.c ****                 maximum = CapSense_diplexTable[widget];
1250:Generated_Source\PSoC5/CapSense_CSHL.c ****                 diplex = &CapSense_diplexTable[maximum];
1251:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1252:Generated_Source\PSoC5/CapSense_CSHL.c ****             else
1253:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1254:Generated_Source\PSoC5/CapSense_CSHL.c ****                 diplex = 0u;
1255:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1256:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1257:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1258:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Find Maximum within centroid */      
1259:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)        
1260:Generated_Source\PSoC5/CapSense_CSHL.c ****             maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], diplex)
1261:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
1262:Generated_Source\PSoC5/CapSense_CSHL.c ****             maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
1263:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1264:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1265:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (maximum != 0xFFu)
1266:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1267:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Calculate centroid */
1268:Generated_Source\PSoC5/CapSense_CSHL.c ****             position = (uint16) CapSense_CalcCentroid(maximum, 
1269:Generated_Source\PSoC5/CapSense_CSHL.c ****                          offset, count, CapSense_centroidMult[widget], CapSense_noiseThreshold[widg
1270:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1271:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
1272:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Check if this linear slider has enabled filters */
1273:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1274:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1275:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Caluclate position to store filters data */
1276:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posIndex  = firstTimeIndex + 1u;
1277:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
1278:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (0u == CapSense_posFiltersData[firstTimeIndex])
1279:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1280:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Init filters */
1281:Generated_Source\PSoC5/CapSense_CSHL.c ****                         CapSense_posFiltersData[posIndex] = (uint8) position;
1282:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if ((0u != (CapSense_MEDIAN_FILTER & \
1283:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1284:Generated_Source\PSoC5/CapSense_CSHL.c ****                              (0u != (CapSense_AVERAGING_FILTER & \
1285:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1286:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1287:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER)) || 
1288:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
1289:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1290:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] = (uint8) position;
1291:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1292:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
1293:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1294:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *   (0u != (CapSense_AVERAGING_FILTER & \
1295:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1296:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1297:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
1298:Generated_Source\PSoC5/CapSense_CSHL.c ****                         CapSense_posFiltersData[firstTimeIndex] = 1u;
1299:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1300:Generated_Source\PSoC5/CapSense_CSHL.c ****                     else
1301:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1302:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Do filtering */
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 45


1303:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MA
1304:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
1305:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1306:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1307:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_MedianFilter(position,
1308:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1309:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1310:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] =
1311:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
1312:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1313:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1314:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /*(0u != (CapSense_MEDIAN_FILTER &
1315:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *         CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1316:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1317:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1318:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if(0u!=(CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MA
1319:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) 
1320:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1321:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1322:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_AveragingFilter(position,
1323:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1324:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1325:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex+1u]=CapSense_posFiltersData[posInd
1326:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1327:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1328:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_AVERAGING_FILTER & \
1329:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1330:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1331:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1332:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR2_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK
1333:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR2_FILTER)) 
1334:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1335:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_IIR2Filter(position,
1336:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1337:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1338:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1339:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR2_FILTER & \
1340:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1341:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1342:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1343:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR4_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK
1344:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
1345:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1346:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_IIR4Filter(position,
1347:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1348:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1349:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }                                
1350:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR4_FILTER & \
1351:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1352:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1353:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1354:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_JITTER_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MA
1355:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
1356:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1357:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_JitterFilter(position,
1358:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1359:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 46


1360:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1361:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_JITTER_FILTER & \
1362:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1363:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1364:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1365:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1366:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1367:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1368:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1369:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
1370:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1371:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* The maximum wasn't found */
1372:Generated_Source\PSoC5/CapSense_CSHL.c ****             position = 0xFFFFu;
1373:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1374:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if(0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
1375:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Reset the filters */
1376:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if(0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1377:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1378:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_posFiltersData[firstTimeIndex] = 0u;
1379:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1380:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1381:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1382:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1383:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1384:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (position);
1385:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1386:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* (CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) */
1387:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1388:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1389:Generated_Source\PSoC5/CapSense_CSHL.c **** #if(CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
1390:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1391:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_GetRadialCentroidPos
1392:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1393:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1394:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1395:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Checks the CapSense_Signal[ ] array for a centroid within
1396:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  slider specified range. The centroid position is calculated to the resolution
1397:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  specified in the CapSense customizer. The position filters are applied to the
1398:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  result if enabled.
1399:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1400:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1401:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  widget:  Widget number.
1402:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  For every radial slider widget there are defines in this format:
1403:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  #define CapSense_RS_"widget_name"            5
1404:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
1405:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1406:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns position value of the radial slider.
1407:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1408:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Side Effects:
1409:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If any sensor within the slider widget is active, the function returns values
1410:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  from zero to the API resolution value set in the CapSense customizer. If no
1411:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  sensors are active, the function returns 0xFFFF.
1412:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  There are no checks of widget type argument provided to this function.
1413:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The unproper widget type provided will cause unexpected position calculations.
1414:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1415:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Note:
1416:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If noise counts on the slider segments are greater than the noise
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 47


1417:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  threshold, this subroutine may generate a false centroid result. The noise
1418:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  threshold should be set carefully (high enough above the noise level) so 
1419:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  that noise will not generate a false centroid.
1420:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1421:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1422:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Reentrant:
1423:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  No.
1424:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1425:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1426:Generated_Source\PSoC5/CapSense_CSHL.c ****      uint16 CapSense_GetRadialCentroidPos(uint8 widget)
1427:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                       
1428:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1429:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
1430:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posIndex;
1431:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 firstTimeIndex = CapSense_posFiltersData[widget];
1432:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posFiltersMask = CapSense_posFiltersMask[widget]; 
1433:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
1434:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1435:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1436:Generated_Source\PSoC5/CapSense_CSHL.c ****              (0u != (CapSense_AVERAGING_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1437:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 tempPos;
1438:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1439:Generated_Source\PSoC5/CapSense_CSHL.c ****                *   (0u != (CapSense_AVERAGING_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1440:Generated_Source\PSoC5/CapSense_CSHL.c ****                */
1441:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1442:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maximum;
1443:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 position;
1444:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 offset = CapSense_rawDataIndex[widget];
1445:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 count = CapSense_numberOfSensors[widget];
1446:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1447:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Find Maximum within centroid */        
1448:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1449:Generated_Source\PSoC5/CapSense_CSHL.c ****             maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], 0u);
1450:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
1451:Generated_Source\PSoC5/CapSense_CSHL.c ****             maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
1452:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1453:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1454:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (maximum != 0xFFu)
1455:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1456:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Calculate centroid */
1457:Generated_Source\PSoC5/CapSense_CSHL.c ****             position = (uint16) CapSense_CalcCentroid(maximum, 
1458:Generated_Source\PSoC5/CapSense_CSHL.c ****                          offset, count, CapSense_centroidMult[widget], CapSense_noiseThreshold[widg
1459:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1460:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
1461:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Check if this Radial slider has enabled filters */
1462:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1463:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1464:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Caluclate position to store filters data */
1465:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posIndex  = firstTimeIndex + 1u;
1466:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
1467:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (0u == CapSense_posFiltersData[firstTimeIndex])
1468:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1469:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Init filters */
1470:Generated_Source\PSoC5/CapSense_CSHL.c ****                         CapSense_posFiltersData[posIndex] = (uint8) position;
1471:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if ((0u != (CapSense_MEDIAN_FILTER & \
1472:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1473:Generated_Source\PSoC5/CapSense_CSHL.c ****                              (0u != (CapSense_AVERAGING_FILTER & \
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 48


1474:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1475:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1476:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))  || 
1477:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
1478:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1479:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] = (uint8) position;
1480:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1481:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
1482:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1483:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *   (0u != (CapSense_AVERAGING_FILTER & \
1484:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1485:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1486:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
1487:Generated_Source\PSoC5/CapSense_CSHL.c ****                         CapSense_posFiltersData[firstTimeIndex] = 1u;
1488:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1489:Generated_Source\PSoC5/CapSense_CSHL.c ****                     else
1490:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1491:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Do filtering */
1492:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MA
1493:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
1494:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1495:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1496:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_MedianFilter(position,
1497:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                         CapSense_posFiltersData[pos
1498:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                         CapSense_posFiltersData[pos
1499:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] = 
1500:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                               CapSense_posFiltersDa
1501:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1502:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1503:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_MEDIAN_FILTER & 
1504:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1505:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1506:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1507:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_AVERAGING_FILTER & \
1508:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1509:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER))
1510:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1511:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1512:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_AveragingFilter(position, 
1513:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posI
1514:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posI
1515:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex+1u]= CapSense_posFiltersData[posIn
1516:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1517:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1518:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_AVERAGING_FILTER & \
1519:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1520:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1521:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1522:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR2_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK
1523:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR2_FILTER))
1524:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1525:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_IIR2Filter(position,
1526:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1527:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1528:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1529:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR2_FILTER & 
1530:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 49


1531:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1532:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1533:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR4_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK
1534:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
1535:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1536:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_IIR4Filter(position,
1537:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1538:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1539:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1540:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR4_FILTER & 
1541:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1542:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1543:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1544:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_JITTER_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MA
1545:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
1546:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1547:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_JitterFilter(position, 
1548:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                          CapSense_posFiltersData[po
1549:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1550:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1551:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_JITTER_FILTER &
1552:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1553:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1554:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1555:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1556:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
1557:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1558:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1559:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
1560:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1561:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* The maximum didn't find */
1562:Generated_Source\PSoC5/CapSense_CSHL.c ****             position = 0xFFFFu;
1563:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1564:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
1565:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Reset the filters */
1566:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if((posFiltersMask & CapSense_ANY_POS_FILTER) != 0u)
1567:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1568:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_posFiltersData[firstTimeIndex] = 0u;
1569:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1570:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
1571:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1572:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1573:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (position);
1574:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1575:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif
1576:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1577:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1578:Generated_Source\PSoC5/CapSense_CSHL.c **** #if(CapSense_TOTAL_TOUCH_PADS_COUNT > 0u)
1579:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1580:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_GetTouchCentroidPos
1581:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1582:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1583:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1584:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If a finger is present on touch pad, this function calculates the X and Y
1585:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  position of the finger by calculating the centroids within touch pad specified
1586:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  range. The X and Y positions are calculated to the API resolutions set in the
1587:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  CapSense customizer. Returns a 1 if a finger is on the touchpad.
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 50


1588:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The position filter is applied to the result if enabled.
1589:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  This function is available only if a touch pad is defined by the CapSense
1590:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  customizer.
1591:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1592:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1593:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  widget:  Widget number. 
1594:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  For every touchpad widget there are defines in this format:
1595:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  #define CapSense_TP_"widget_name"            5
1596:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1597:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  pos:     Pointer to the array of two uint16 elements, where result
1598:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  result of calculation of X and Y position are stored.
1599:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  pos[0u]  - position of X
1600:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  pos[1u]  - position of Y
1601:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1602:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1603:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns a 1 if a finger is on the touch pad, 0 - if not.
1604:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1605:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Side Effects:
1606:Generated_Source\PSoC5/CapSense_CSHL.c ****     *   There are no checks of widget type argument provided to this function.
1607:Generated_Source\PSoC5/CapSense_CSHL.c ****     *   The unproper widget type provided will cause unexpected position
1608:Generated_Source\PSoC5/CapSense_CSHL.c ****     *   calculations.
1609:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1610:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Reentrant:
1611:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  No.
1612:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1613:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1614:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 CapSense_GetTouchCentroidPos(uint8 widget, uint16* pos)
1615:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                    
1616:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1617:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
1618:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posXIndex;
1619:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posYIndex;
1620:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 firstTimeIndex = CapSense_posFiltersData[widget];
1621:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posFiltersMask = CapSense_posFiltersMask[widget];
1622:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
1623:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1624:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
1625:Generated_Source\PSoC5/CapSense_CSHL.c ****              (0u != (CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
1626:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint16 tempPos;
1627:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
1628:Generated_Source\PSoC5/CapSense_CSHL.c ****                *   (0u != (CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
1629:Generated_Source\PSoC5/CapSense_CSHL.c ****                */
1630:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1631:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maxX;
1632:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maxY;
1633:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 posX;
1634:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 posY;
1635:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 touch = 0u;
1636:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 offset = CapSense_rawDataIndex[widget];
1637:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 count = CapSense_numberOfSensors[widget];
1638:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1639:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Find Maximum within X centroid */
1640:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1641:Generated_Source\PSoC5/CapSense_CSHL.c ****             maxX = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], 0u);
1642:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
1643:Generated_Source\PSoC5/CapSense_CSHL.c ****             maxX = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
1644:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 51


1645:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1646:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (maxX != 0xFFu)
1647:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1648:Generated_Source\PSoC5/CapSense_CSHL.c ****             offset = CapSense_rawDataIndex[widget + 1u];
1649:Generated_Source\PSoC5/CapSense_CSHL.c ****             count = CapSense_numberOfSensors[widget + 1u];
1650:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1651:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Find Maximum within Y centroid */
1652:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (CapSense_IS_DIPLEX_SLIDER)
1653:Generated_Source\PSoC5/CapSense_CSHL.c ****                 maxY = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget + 1u], 0
1654:Generated_Source\PSoC5/CapSense_CSHL.c ****             #else
1655:Generated_Source\PSoC5/CapSense_CSHL.c ****                 maxY = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget + 1u]);
1656:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1657:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1658:Generated_Source\PSoC5/CapSense_CSHL.c ****             if (maxY != 0xFFu)
1659:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1660:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* X and Y maximums are found = true touch */
1661:Generated_Source\PSoC5/CapSense_CSHL.c ****                 touch = 1u;
1662:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
1663:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Calculate Y centroid */
1664:Generated_Source\PSoC5/CapSense_CSHL.c ****                 posY = CapSense_CalcCentroid(maxY, offset, count, 
1665:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_centroidMult[widget + 1u], CapSense_noiseThreshold[widget + 1u
1666:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
1667:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Calculate X centroid */
1668:Generated_Source\PSoC5/CapSense_CSHL.c ****                 offset = CapSense_rawDataIndex[widget];
1669:Generated_Source\PSoC5/CapSense_CSHL.c ****                 count = CapSense_numberOfSensors[widget];
1670:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
1671:Generated_Source\PSoC5/CapSense_CSHL.c ****                 posX = CapSense_CalcCentroid(maxX, offset, count, 
1672:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_centroidMult[widget],CapSense_noiseThreshold[widget]);
1673:Generated_Source\PSoC5/CapSense_CSHL.c ****     
1674:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
1675:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Check if this TP has enabled filters */
1676:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1677:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1678:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Caluclate position to store filters data */
1679:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posXIndex  = firstTimeIndex + 1u;
1680:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posYIndex  = CapSense_posFiltersData[widget + 1u];
1681:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
1682:Generated_Source\PSoC5/CapSense_CSHL.c ****                         if (0u == CapSense_posFiltersData[firstTimeIndex])
1683:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
1684:Generated_Source\PSoC5/CapSense_CSHL.c ****                             /* Init filters */
1685:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_posFiltersData[posXIndex] = posX;
1686:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_posFiltersData[posYIndex] = posY;
1687:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1688:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if((0u != (CapSense_MEDIAN_FILTER & \
1689:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         CapSense_TOUCH_PADS_POS_FILTERS_MASK))|| \
1690:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 (0u != (CapSense_AVERAGING_FILTER & \
1691:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
1692:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1693:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER)) || 
1694:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
1695:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1696:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex + 1u] = posX;
1697:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex + 1u] = posY;
1698:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1699:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
1700:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
1701:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *    (0u != (CapSense_AVERAGING_FILTER & \
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 52


1702:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *            CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
1703:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1704:Generated_Source\PSoC5/CapSense_CSHL.c ****                             
1705:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_posFiltersData[firstTimeIndex] = 1u;
1706:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
1707:Generated_Source\PSoC5/CapSense_CSHL.c ****                         else
1708:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
1709:Generated_Source\PSoC5/CapSense_CSHL.c ****                             /* Do filtering */
1710:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if (0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MA
1711:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
1712:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1713:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     tempPos = posX;
1714:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_MedianFilter(posX,
1715:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posXI
1716:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posXI
1717:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex + 1u] = 
1718:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
1719:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = tempPos;
1720:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     
1721:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     tempPos = posY;
1722:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_MedianFilter(posY,
1723:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posY
1724:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posY
1725:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex + 1u] = 
1726:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
1727:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = tempPos;
1728:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1729:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 
1730:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_MEDIAN_FILTER & \
1731:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *          CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1732:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1733:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1734:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if(0u !=(CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_M
1735:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER))
1736:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1737:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     tempPos = posX;
1738:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_AveragingFilter(posX,
1739:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posX
1740:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posX
1741:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex + 1u] = 
1742:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
1743:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = tempPos;
1744:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     
1745:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     tempPos = posY;
1746:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_AveragingFilter(posY, 
1747:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posYI
1748:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posYI
1749:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex + 1u] = 
1750:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
1751:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = tempPos;
1752:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1753:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1754:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_AVERAGING_FILTER & \
1755:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1756:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1757:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1758:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if (0u != (CapSense_IIR2_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 53


1759:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_IIR2_FILTER))
1760:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1761:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_IIR2Filter(posX, 
1762:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                            CapSense_posFiltersData[
1763:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = posX;
1764:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     
1765:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_IIR2Filter(posY, 
1766:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
1767:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = posY;
1768:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1769:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 
1770:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_IIR2_FILTER & \
1771:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *          CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1772:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1773:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1774:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if (0u != (CapSense_IIR4_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK
1775:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
1776:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1777:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_IIR4Filter((uint16)posX,
1778:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1779:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = posX;
1780:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1781:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_IIR4Filter((uint16)posY,
1782:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1783:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = posY;
1784:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1785:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 
1786:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_IIR4_FILTER & \
1787:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1788:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1789:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1790:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if (0u != (CapSense_JITTER_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MA
1791:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
1792:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     {
1793:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         posX = (uint8) CapSense_JitterFilter(posX, 
1794:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
1795:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         CapSense_posFiltersData[posXIndex] = posX;
1796:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         
1797:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         posY = (uint8) CapSense_JitterFilter(posY, 
1798:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
1799:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         CapSense_posFiltersData[posYIndex] = posY;
1800:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     }
1801:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_JITTER_FILTER & \
1802:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1803:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1804:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
1805:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1806:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
1807:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1808:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Save positions */
1809:Generated_Source\PSoC5/CapSense_CSHL.c ****                 pos[0u] = posX;
1810:Generated_Source\PSoC5/CapSense_CSHL.c ****                 pos[1u] = posY;
1811:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1812:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1813:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1814:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
1815:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(touch == 0u)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 54


1816:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1817:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Reset the filters */
1818:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if ((posFiltersMask & CapSense_ANY_POS_FILTER) != 0u)
1819:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1820:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_posFiltersData[firstTimeIndex] = 0u;
1821:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1822:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1823:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
1824:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1825:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (touch);
1826:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1827:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* (CapSense_TOTAL_TOUCH_PADS_COUNT > 0u) */
1828:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1829:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1830:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
1831:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_POS_FILTERS_MASK & CapSense_MEDIAN_FILTER) )
1832:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1833:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_MedianFilter
1834:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1835:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1836:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1837:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Median filter function. 
1838:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The median filter looks at the three most recent samples and reports the 
1839:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  median value.
1840:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1841:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1842:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x1:  Current value.
1843:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x2:  Previous value.
1844:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x3:  Before previous value.
1845:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1846:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1847:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns filtered value.
1848:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1849:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1850:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_MedianFilter(uint16 x1, uint16 x2, uint16 x3)
1851:Generated_Source\PSoC5/CapSense_CSHL.c ****                                          
1852:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1853:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 tmp;
1854:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1855:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (x1 > x2)
1856:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1857:Generated_Source\PSoC5/CapSense_CSHL.c ****             tmp = x2;
1858:Generated_Source\PSoC5/CapSense_CSHL.c ****             x2 = x1;
1859:Generated_Source\PSoC5/CapSense_CSHL.c ****             x1 = tmp;
1860:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1861:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1862:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (x2 > x3)
1863:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1864:Generated_Source\PSoC5/CapSense_CSHL.c ****             x2 = x3;
1865:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1866:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1867:Generated_Source\PSoC5/CapSense_CSHL.c ****         return ((x1 > x2) ? x1 : x2);
1868:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1869:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
1870:Generated_Source\PSoC5/CapSense_CSHL.c ****        *    (CapSense_POS_FILTERS_MASK & CapSense_MEDIAN_FILTER) )
1871:Generated_Source\PSoC5/CapSense_CSHL.c ****        */
1872:Generated_Source\PSoC5/CapSense_CSHL.c **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 55


1873:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1874:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) | \
1875:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_POS_FILTERS_MASK & CapSense_AVERAGING_FILTER) )
1876:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1877:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_AveragingFilter
1878:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1879:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1880:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1881:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Averaging filter function.
1882:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The averaging filter looks at the three most recent samples of position and
1883:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  reports the averaging value.
1884:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1885:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1886:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x1:  Current value.
1887:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x2:  Previous value.
1888:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x3:  Before previous value.
1889:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1890:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1891:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns filtered value.
1892:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1893:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1894:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_AveragingFilter(uint16 x1, uint16 x2, uint16 x3)
1895:Generated_Source\PSoC5/CapSense_CSHL.c ****                                             
1896:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1897:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint32 tmp = ((uint32)x1 + (uint32)x2 + (uint32)x3) / 3u;
1898:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1899:Generated_Source\PSoC5/CapSense_CSHL.c ****         return ((uint16) tmp);
1900:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1901:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) | \
1902:Generated_Source\PSoC5/CapSense_CSHL.c ****        *    (CapSense_POS_FILTERS_MASK & CapSense_AVERAGING_FILTER) )
1903:Generated_Source\PSoC5/CapSense_CSHL.c ****        */
1904:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1905:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1906:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) | \
1907:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_POS_FILTERS_MASK & CapSense_IIR2_FILTER) )
1908:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1909:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_IIR2Filter
1910:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1911:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1912:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1913:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  IIR1/2 filter function. IIR1/2 = 1/2current + 1/2previous.
1914:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1915:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1916:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x1:  Current value.
1917:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x2:  Previous value.
1918:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1919:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1920:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns filtered value.
1921:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1922:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1923:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_IIR2Filter(uint16 x1, uint16 x2)
1924:Generated_Source\PSoC5/CapSense_CSHL.c ****                                        
1925:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 1194              		.loc 1 1925 0
 1195              		.cfi_startproc
 1196              		@ args = 0, pretend = 0, frame = 16
 1197              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 56


 1198              		@ link register save eliminated.
 1199 0000 80B4     		push	{r7}
 1200              		.cfi_def_cfa_offset 4
 1201              		.cfi_offset 7, -4
 1202 0002 85B0     		sub	sp, sp, #20
 1203              		.cfi_def_cfa_offset 24
 1204 0004 00AF     		add	r7, sp, #0
 1205              		.cfi_def_cfa_register 7
 1206 0006 0346     		mov	r3, r0
 1207 0008 0A46     		mov	r2, r1
 1208 000a FB80     		strh	r3, [r7, #6]	@ movhi
 1209 000c 1346     		mov	r3, r2	@ movhi
 1210 000e BB80     		strh	r3, [r7, #4]	@ movhi
1926:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint32 tmp;
1927:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1928:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* IIR = 1/2 Current Value+ 1/2 Previous Value */
1929:Generated_Source\PSoC5/CapSense_CSHL.c ****         tmp = (uint32)x1 + (uint32)x2;
 1211              		.loc 1 1929 0
 1212 0010 FA88     		ldrh	r2, [r7, #6]
 1213 0012 BB88     		ldrh	r3, [r7, #4]
 1214 0014 1344     		add	r3, r3, r2
 1215 0016 FB60     		str	r3, [r7, #12]
1930:Generated_Source\PSoC5/CapSense_CSHL.c ****         tmp >>= 1u;
 1216              		.loc 1 1930 0
 1217 0018 FB68     		ldr	r3, [r7, #12]
 1218 001a 5B08     		lsrs	r3, r3, #1
 1219 001c FB60     		str	r3, [r7, #12]
1931:Generated_Source\PSoC5/CapSense_CSHL.c ****     
1932:Generated_Source\PSoC5/CapSense_CSHL.c ****         return ((uint16) tmp);
 1220              		.loc 1 1932 0
 1221 001e FB68     		ldr	r3, [r7, #12]
 1222 0020 9BB2     		uxth	r3, r3
1933:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 1223              		.loc 1 1933 0
 1224 0022 1846     		mov	r0, r3
 1225 0024 1437     		adds	r7, r7, #20
 1226              		.cfi_def_cfa_offset 4
 1227 0026 BD46     		mov	sp, r7
 1228              		.cfi_def_cfa_register 13
 1229              		@ sp needed
 1230 0028 80BC     		pop	{r7}
 1231              		.cfi_restore 7
 1232              		.cfi_def_cfa_offset 0
 1233 002a 7047     		bx	lr
 1234              		.cfi_endproc
 1235              	.LFE11:
 1236              		.size	CapSense_IIR2Filter, .-CapSense_IIR2Filter
 1237              		.text
 1238              	.Letext0:
 1239              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 1240              		.file 3 "Generated_Source\\PSoC5\\CapSense.h"
 1241              		.file 4 "Generated_Source\\PSoC5\\CapSense_CSHL.h"
 1242              		.section	.debug_info,"",%progbits
 1243              	.Ldebug_info0:
 1244 0000 AE050000 		.4byte	0x5ae
 1245 0004 0400     		.2byte	0x4
 1246 0006 00000000 		.4byte	.Ldebug_abbrev0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 57


 1247 000a 04       		.byte	0x4
 1248 000b 01       		.uleb128 0x1
 1249 000c 51000000 		.4byte	.LASF60
 1250 0010 0C       		.byte	0xc
 1251 0011 D8040000 		.4byte	.LASF61
 1252 0015 9A010000 		.4byte	.LASF62
 1253 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1254 001d 00000000 		.4byte	0
 1255 0021 00000000 		.4byte	.Ldebug_line0
 1256 0025 02       		.uleb128 0x2
 1257 0026 01       		.byte	0x1
 1258 0027 06       		.byte	0x6
 1259 0028 5E010000 		.4byte	.LASF0
 1260 002c 02       		.uleb128 0x2
 1261 002d 01       		.byte	0x1
 1262 002e 08       		.byte	0x8
 1263 002f 17040000 		.4byte	.LASF1
 1264 0033 02       		.uleb128 0x2
 1265 0034 02       		.byte	0x2
 1266 0035 05       		.byte	0x5
 1267 0036 54040000 		.4byte	.LASF2
 1268 003a 02       		.uleb128 0x2
 1269 003b 02       		.byte	0x2
 1270 003c 07       		.byte	0x7
 1271 003d DA020000 		.4byte	.LASF3
 1272 0041 02       		.uleb128 0x2
 1273 0042 04       		.byte	0x4
 1274 0043 05       		.byte	0x5
 1275 0044 18020000 		.4byte	.LASF4
 1276 0048 02       		.uleb128 0x2
 1277 0049 04       		.byte	0x4
 1278 004a 07       		.byte	0x7
 1279 004b 97020000 		.4byte	.LASF5
 1280 004f 02       		.uleb128 0x2
 1281 0050 08       		.byte	0x8
 1282 0051 05       		.byte	0x5
 1283 0052 50010000 		.4byte	.LASF6
 1284 0056 02       		.uleb128 0x2
 1285 0057 08       		.byte	0x8
 1286 0058 07       		.byte	0x7
 1287 0059 DF000000 		.4byte	.LASF7
 1288 005d 03       		.uleb128 0x3
 1289 005e 04       		.byte	0x4
 1290 005f 05       		.byte	0x5
 1291 0060 696E7400 		.ascii	"int\000"
 1292 0064 02       		.uleb128 0x2
 1293 0065 04       		.byte	0x4
 1294 0066 07       		.byte	0x7
 1295 0067 8A020000 		.4byte	.LASF8
 1296 006b 04       		.uleb128 0x4
 1297 006c 41020000 		.4byte	.LASF9
 1298 0070 02       		.byte	0x2
 1299 0071 E401     		.2byte	0x1e4
 1300 0073 2C000000 		.4byte	0x2c
 1301 0077 04       		.uleb128 0x4
 1302 0078 00000000 		.4byte	.LASF10
 1303 007c 02       		.byte	0x2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 58


 1304 007d E501     		.2byte	0x1e5
 1305 007f 3A000000 		.4byte	0x3a
 1306 0083 04       		.uleb128 0x4
 1307 0084 64020000 		.4byte	.LASF11
 1308 0088 02       		.byte	0x2
 1309 0089 E601     		.2byte	0x1e6
 1310 008b 48000000 		.4byte	0x48
 1311 008f 02       		.uleb128 0x2
 1312 0090 04       		.byte	0x4
 1313 0091 04       		.byte	0x4
 1314 0092 F4030000 		.4byte	.LASF12
 1315 0096 02       		.uleb128 0x2
 1316 0097 08       		.byte	0x8
 1317 0098 04       		.byte	0x4
 1318 0099 47020000 		.4byte	.LASF13
 1319 009d 02       		.uleb128 0x2
 1320 009e 01       		.byte	0x1
 1321 009f 08       		.byte	0x8
 1322 00a0 C5040000 		.4byte	.LASF14
 1323 00a4 02       		.uleb128 0x2
 1324 00a5 08       		.byte	0x8
 1325 00a6 04       		.byte	0x4
 1326 00a7 59030000 		.4byte	.LASF15
 1327 00ab 02       		.uleb128 0x2
 1328 00ac 04       		.byte	0x4
 1329 00ad 07       		.byte	0x7
 1330 00ae 3A030000 		.4byte	.LASF16
 1331 00b2 05       		.uleb128 0x5
 1332 00b3 6C040000 		.4byte	.LASF17
 1333 00b7 01       		.byte	0x1
 1334 00b8 8F       		.byte	0x8f
 1335 00b9 00000000 		.4byte	.LFB0
 1336 00bd 7C000000 		.4byte	.LFE0-.LFB0
 1337 00c1 01       		.uleb128 0x1
 1338 00c2 9C       		.byte	0x9c
 1339 00c3 E4000000 		.4byte	0xe4
 1340 00c7 06       		.uleb128 0x6
 1341 00c8 ED020000 		.4byte	.LASF19
 1342 00cc 01       		.byte	0x1
 1343 00cd 8F       		.byte	0x8f
 1344 00ce 6B000000 		.4byte	0x6b
 1345 00d2 02       		.uleb128 0x2
 1346 00d3 91       		.byte	0x91
 1347 00d4 6F       		.sleb128 -17
 1348 00d5 07       		.uleb128 0x7
 1349 00d6 5E040000 		.4byte	.LASF21
 1350 00da 01       		.byte	0x1
 1351 00db 93       		.byte	0x93
 1352 00dc 6B000000 		.4byte	0x6b
 1353 00e0 02       		.uleb128 0x2
 1354 00e1 91       		.byte	0x91
 1355 00e2 77       		.sleb128 -9
 1356 00e3 00       		.byte	0
 1357 00e4 08       		.uleb128 0x8
 1358 00e5 65030000 		.4byte	.LASF18
 1359 00e9 01       		.byte	0x1
 1360 00ea D8       		.byte	0xd8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 59


 1361 00eb 00000000 		.4byte	.LFB1
 1362 00ef 2E000000 		.4byte	.LFE1-.LFB1
 1363 00f3 01       		.uleb128 0x1
 1364 00f4 9C       		.byte	0x9c
 1365 00f5 08010000 		.4byte	0x108
 1366 00f9 06       		.uleb128 0x6
 1367 00fa ED020000 		.4byte	.LASF19
 1368 00fe 01       		.byte	0x1
 1369 00ff D8       		.byte	0xd8
 1370 0100 6B000000 		.4byte	0x6b
 1371 0104 02       		.uleb128 0x2
 1372 0105 91       		.byte	0x91
 1373 0106 77       		.sleb128 -9
 1374 0107 00       		.byte	0
 1375 0108 09       		.uleb128 0x9
 1376 0109 25040000 		.4byte	.LASF20
 1377 010d 01       		.byte	0x1
 1378 010e 0C01     		.2byte	0x10c
 1379 0110 00000000 		.4byte	.LFB2
 1380 0114 28000000 		.4byte	.LFE2-.LFB2
 1381 0118 01       		.uleb128 0x1
 1382 0119 9C       		.byte	0x9c
 1383 011a 2C010000 		.4byte	0x12c
 1384 011e 0A       		.uleb128 0xa
 1385 011f 6900     		.ascii	"i\000"
 1386 0121 01       		.byte	0x1
 1387 0122 0F01     		.2byte	0x10f
 1388 0124 6B000000 		.4byte	0x6b
 1389 0128 02       		.uleb128 0x2
 1390 0129 91       		.byte	0x91
 1391 012a 77       		.sleb128 -9
 1392 012b 00       		.byte	0
 1393 012c 09       		.uleb128 0x9
 1394 012d 0C010000 		.4byte	.LASF22
 1395 0131 01       		.byte	0x1
 1396 0132 2D01     		.2byte	0x12d
 1397 0134 00000000 		.4byte	.LFB3
 1398 0138 70000000 		.4byte	.LFE3-.LFB3
 1399 013c 01       		.uleb128 0x1
 1400 013d 9C       		.byte	0x9c
 1401 013e 6E010000 		.4byte	0x16e
 1402 0142 0A       		.uleb128 0xa
 1403 0143 6900     		.ascii	"i\000"
 1404 0145 01       		.byte	0x1
 1405 0146 3001     		.2byte	0x130
 1406 0148 6B000000 		.4byte	0x6b
 1407 014c 02       		.uleb128 0x2
 1408 014d 91       		.byte	0x91
 1409 014e 77       		.sleb128 -9
 1410 014f 0A       		.uleb128 0xa
 1411 0150 706F7300 		.ascii	"pos\000"
 1412 0154 01       		.byte	0x1
 1413 0155 3101     		.2byte	0x131
 1414 0157 6B000000 		.4byte	0x6b
 1415 015b 02       		.uleb128 0x2
 1416 015c 91       		.byte	0x91
 1417 015d 76       		.sleb128 -10
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 60


 1418 015e 0B       		.uleb128 0xb
 1419 015f A4030000 		.4byte	.LASF23
 1420 0163 01       		.byte	0x1
 1421 0164 3201     		.2byte	0x132
 1422 0166 6B000000 		.4byte	0x6b
 1423 016a 02       		.uleb128 0x2
 1424 016b 91       		.byte	0x91
 1425 016c 75       		.sleb128 -11
 1426 016d 00       		.byte	0
 1427 016e 09       		.uleb128 0x9
 1428 016f 0E030000 		.4byte	.LASF24
 1429 0173 01       		.byte	0x1
 1430 0174 7001     		.2byte	0x170
 1431 0176 00000000 		.4byte	.LFB4
 1432 017a 64010000 		.4byte	.LFE4-.LFB4
 1433 017e 01       		.uleb128 0x1
 1434 017f 9C       		.byte	0x9c
 1435 0180 DF010000 		.4byte	0x1df
 1436 0184 0C       		.uleb128 0xc
 1437 0185 ED020000 		.4byte	.LASF19
 1438 0189 01       		.byte	0x1
 1439 018a 7001     		.2byte	0x170
 1440 018c 6B000000 		.4byte	0x6b
 1441 0190 02       		.uleb128 0x2
 1442 0191 91       		.byte	0x91
 1443 0192 67       		.sleb128 -25
 1444 0193 0B       		.uleb128 0xb
 1445 0194 2C030000 		.4byte	.LASF25
 1446 0198 01       		.byte	0x1
 1447 0199 7301     		.2byte	0x173
 1448 019b 83000000 		.4byte	0x83
 1449 019f 02       		.uleb128 0x2
 1450 01a0 91       		.byte	0x91
 1451 01a1 6C       		.sleb128 -20
 1452 01a2 0B       		.uleb128 0xb
 1453 01a3 2B050000 		.4byte	.LASF26
 1454 01a7 01       		.byte	0x1
 1455 01a8 7401     		.2byte	0x174
 1456 01aa 77000000 		.4byte	0x77
 1457 01ae 02       		.uleb128 0x2
 1458 01af 91       		.byte	0x91
 1459 01b0 76       		.sleb128 -10
 1460 01b1 0B       		.uleb128 0xb
 1461 01b2 07000000 		.4byte	.LASF27
 1462 01b6 01       		.byte	0x1
 1463 01b7 7501     		.2byte	0x175
 1464 01b9 77000000 		.4byte	0x77
 1465 01bd 02       		.uleb128 0x2
 1466 01be 91       		.byte	0x91
 1467 01bf 70       		.sleb128 -16
 1468 01c0 0B       		.uleb128 0xb
 1469 01c1 5E040000 		.4byte	.LASF21
 1470 01c5 01       		.byte	0x1
 1471 01c6 7601     		.2byte	0x176
 1472 01c8 6B000000 		.4byte	0x6b
 1473 01cc 02       		.uleb128 0x2
 1474 01cd 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 61


 1475 01ce 75       		.sleb128 -11
 1476 01cf 0B       		.uleb128 0xb
 1477 01d0 45040000 		.4byte	.LASF28
 1478 01d4 01       		.byte	0x1
 1479 01d5 7701     		.2byte	0x177
 1480 01d7 77000000 		.4byte	0x77
 1481 01db 02       		.uleb128 0x2
 1482 01dc 91       		.byte	0x91
 1483 01dd 72       		.sleb128 -14
 1484 01de 00       		.byte	0
 1485 01df 09       		.uleb128 0x9
 1486 01e0 30010000 		.4byte	.LASF29
 1487 01e4 01       		.byte	0x1
 1488 01e5 1D02     		.2byte	0x21d
 1489 01e7 00000000 		.4byte	.LFB5
 1490 01eb 50000000 		.4byte	.LFE5-.LFB5
 1491 01ef 01       		.uleb128 0x1
 1492 01f0 9C       		.byte	0x9c
 1493 01f1 21020000 		.4byte	0x221
 1494 01f5 0A       		.uleb128 0xa
 1495 01f6 6900     		.ascii	"i\000"
 1496 01f8 01       		.byte	0x1
 1497 01f9 2002     		.2byte	0x220
 1498 01fb 6B000000 		.4byte	0x6b
 1499 01ff 02       		.uleb128 0x2
 1500 0200 91       		.byte	0x91
 1501 0201 77       		.sleb128 -9
 1502 0202 0A       		.uleb128 0xa
 1503 0203 706F7300 		.ascii	"pos\000"
 1504 0207 01       		.byte	0x1
 1505 0208 2102     		.2byte	0x221
 1506 020a 6B000000 		.4byte	0x6b
 1507 020e 02       		.uleb128 0x2
 1508 020f 91       		.byte	0x91
 1509 0210 76       		.sleb128 -10
 1510 0211 0B       		.uleb128 0xb
 1511 0212 A4030000 		.4byte	.LASF23
 1512 0216 01       		.byte	0x1
 1513 0217 2202     		.2byte	0x222
 1514 0219 6B000000 		.4byte	0x6b
 1515 021d 02       		.uleb128 0x2
 1516 021e 91       		.byte	0x91
 1517 021f 75       		.sleb128 -11
 1518 0220 00       		.byte	0
 1519 0221 0D       		.uleb128 0xd
 1520 0222 87030000 		.4byte	.LASF35
 1521 0226 01       		.byte	0x1
 1522 0227 5702     		.2byte	0x257
 1523 0229 6B000000 		.4byte	0x6b
 1524 022d 00000000 		.4byte	.LFB6
 1525 0231 10010000 		.4byte	.LFE6-.LFB6
 1526 0235 01       		.uleb128 0x1
 1527 0236 9C       		.byte	0x9c
 1528 0237 B4020000 		.4byte	0x2b4
 1529 023b 0C       		.uleb128 0xc
 1530 023c ED020000 		.4byte	.LASF19
 1531 0240 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 62


 1532 0241 5702     		.2byte	0x257
 1533 0243 6B000000 		.4byte	0x6b
 1534 0247 02       		.uleb128 0x2
 1535 0248 91       		.byte	0x91
 1536 0249 67       		.sleb128 -25
 1537 024a 0B       		.uleb128 0xb
 1538 024b CA040000 		.4byte	.LASF30
 1539 024f 01       		.byte	0x1
 1540 0250 5A02     		.2byte	0x25a
 1541 0252 6B000000 		.4byte	0x6b
 1542 0256 02       		.uleb128 0x2
 1543 0257 91       		.byte	0x91
 1544 0258 6E       		.sleb128 -18
 1545 0259 0A       		.uleb128 0xa
 1546 025a 706F7300 		.ascii	"pos\000"
 1547 025e 01       		.byte	0x1
 1548 025f 5C02     		.2byte	0x25c
 1549 0261 6B000000 		.4byte	0x6b
 1550 0265 02       		.uleb128 0x2
 1551 0266 91       		.byte	0x91
 1552 0267 77       		.sleb128 -9
 1553 0268 0B       		.uleb128 0xb
 1554 0269 65040000 		.4byte	.LASF31
 1555 026d 01       		.byte	0x1
 1556 026e 5D02     		.2byte	0x25d
 1557 0270 6B000000 		.4byte	0x6b
 1558 0274 02       		.uleb128 0x2
 1559 0275 91       		.byte	0x91
 1560 0276 76       		.sleb128 -10
 1561 0277 0B       		.uleb128 0xb
 1562 0278 5E040000 		.4byte	.LASF21
 1563 027c 01       		.byte	0x1
 1564 027d 5F02     		.2byte	0x25f
 1565 027f 6B000000 		.4byte	0x6b
 1566 0283 02       		.uleb128 0x2
 1567 0284 91       		.byte	0x91
 1568 0285 75       		.sleb128 -11
 1569 0286 0B       		.uleb128 0xb
 1570 0287 41000000 		.4byte	.LASF32
 1571 028b 01       		.byte	0x1
 1572 028c 6002     		.2byte	0x260
 1573 028e 77000000 		.4byte	0x77
 1574 0292 02       		.uleb128 0x2
 1575 0293 91       		.byte	0x91
 1576 0294 72       		.sleb128 -14
 1577 0295 0B       		.uleb128 0xb
 1578 0296 6B020000 		.4byte	.LASF33
 1579 029a 01       		.byte	0x1
 1580 029b 6102     		.2byte	0x261
 1581 029d 77000000 		.4byte	0x77
 1582 02a1 02       		.uleb128 0x2
 1583 02a2 91       		.byte	0x91
 1584 02a3 70       		.sleb128 -16
 1585 02a4 0B       		.uleb128 0xb
 1586 02a5 31030000 		.4byte	.LASF34
 1587 02a9 01       		.byte	0x1
 1588 02aa 6202     		.2byte	0x262
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 63


 1589 02ac 6B000000 		.4byte	0x6b
 1590 02b0 02       		.uleb128 0x2
 1591 02b1 91       		.byte	0x91
 1592 02b2 6F       		.sleb128 -17
 1593 02b3 00       		.byte	0
 1594 02b4 0E       		.uleb128 0xe
 1595 02b5 FA030000 		.4byte	.LASF36
 1596 02b9 01       		.byte	0x1
 1597 02ba 9F02     		.2byte	0x29f
 1598 02bc 6B000000 		.4byte	0x6b
 1599 02c0 00000000 		.4byte	.LFB7
 1600 02c4 54000000 		.4byte	.LFE7-.LFB7
 1601 02c8 01       		.uleb128 0x1
 1602 02c9 9C       		.byte	0x9c
 1603 02ca 0B030000 		.4byte	0x30b
 1604 02ce 0C       		.uleb128 0xc
 1605 02cf 5E040000 		.4byte	.LASF21
 1606 02d3 01       		.byte	0x1
 1607 02d4 9F02     		.2byte	0x29f
 1608 02d6 6B000000 		.4byte	0x6b
 1609 02da 02       		.uleb128 0x2
 1610 02db 91       		.byte	0x91
 1611 02dc 6F       		.sleb128 -17
 1612 02dd 0B       		.uleb128 0xb
 1613 02de 81010000 		.4byte	.LASF37
 1614 02e2 01       		.byte	0x1
 1615 02e3 A202     		.2byte	0x2a2
 1616 02e5 6B000000 		.4byte	0x6b
 1617 02e9 02       		.uleb128 0x2
 1618 02ea 91       		.byte	0x91
 1619 02eb 77       		.sleb128 -9
 1620 02ec 0B       		.uleb128 0xb
 1621 02ed 8A010000 		.4byte	.LASF38
 1622 02f1 01       		.byte	0x1
 1623 02f2 A302     		.2byte	0x2a3
 1624 02f4 6B000000 		.4byte	0x6b
 1625 02f8 02       		.uleb128 0x2
 1626 02f9 91       		.byte	0x91
 1627 02fa 75       		.sleb128 -11
 1628 02fb 0B       		.uleb128 0xb
 1629 02fc 12020000 		.4byte	.LASF39
 1630 0300 01       		.byte	0x1
 1631 0301 A402     		.2byte	0x2a4
 1632 0303 6B000000 		.4byte	0x6b
 1633 0307 02       		.uleb128 0x2
 1634 0308 91       		.byte	0x91
 1635 0309 76       		.sleb128 -10
 1636 030a 00       		.byte	0
 1637 030b 0E       		.uleb128 0xe
 1638 030c 21020000 		.4byte	.LASF40
 1639 0310 01       		.byte	0x1
 1640 0311 CB02     		.2byte	0x2cb
 1641 0313 6B000000 		.4byte	0x6b
 1642 0317 00000000 		.4byte	.LFB8
 1643 031b 38000000 		.4byte	.LFE8-.LFB8
 1644 031f 01       		.uleb128 0x1
 1645 0320 9C       		.byte	0x9c
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 64


 1646 0321 42030000 		.4byte	0x342
 1647 0325 0A       		.uleb128 0xa
 1648 0326 6900     		.ascii	"i\000"
 1649 0328 01       		.byte	0x1
 1650 0329 CE02     		.2byte	0x2ce
 1651 032b 6B000000 		.4byte	0x6b
 1652 032f 02       		.uleb128 0x2
 1653 0330 91       		.byte	0x91
 1654 0331 77       		.sleb128 -9
 1655 0332 0B       		.uleb128 0xb
 1656 0333 12020000 		.4byte	.LASF39
 1657 0337 01       		.byte	0x1
 1658 0338 CF02     		.2byte	0x2cf
 1659 033a 6B000000 		.4byte	0x6b
 1660 033e 02       		.uleb128 0x2
 1661 033f 91       		.byte	0x91
 1662 0340 76       		.sleb128 -10
 1663 0341 00       		.byte	0
 1664 0342 0F       		.uleb128 0xf
 1665 0343 43030000 		.4byte	.LASF41
 1666 0347 01       		.byte	0x1
 1667 0348 F902     		.2byte	0x2f9
 1668 034a 00000000 		.4byte	.LFB9
 1669 034e 68000000 		.4byte	.LFE9-.LFB9
 1670 0352 01       		.uleb128 0x1
 1671 0353 9C       		.byte	0x9c
 1672 0354 A4030000 		.4byte	0x3a4
 1673 0358 0C       		.uleb128 0xc
 1674 0359 5E040000 		.4byte	.LASF21
 1675 035d 01       		.byte	0x1
 1676 035e F902     		.2byte	0x2f9
 1677 0360 6B000000 		.4byte	0x6b
 1678 0364 02       		.uleb128 0x2
 1679 0365 91       		.byte	0x91
 1680 0366 6F       		.sleb128 -17
 1681 0367 0A       		.uleb128 0xa
 1682 0368 706F7300 		.ascii	"pos\000"
 1683 036c 01       		.byte	0x1
 1684 036d FC02     		.2byte	0x2fc
 1685 036f 6B000000 		.4byte	0x6b
 1686 0373 02       		.uleb128 0x2
 1687 0374 91       		.byte	0x91
 1688 0375 75       		.sleb128 -11
 1689 0376 0B       		.uleb128 0xb
 1690 0377 A4030000 		.4byte	.LASF23
 1691 037b 01       		.byte	0x1
 1692 037c FD02     		.2byte	0x2fd
 1693 037e 6B000000 		.4byte	0x6b
 1694 0382 02       		.uleb128 0x2
 1695 0383 91       		.byte	0x91
 1696 0384 74       		.sleb128 -12
 1697 0385 0B       		.uleb128 0xb
 1698 0386 81010000 		.4byte	.LASF37
 1699 038a 01       		.byte	0x1
 1700 038b FE02     		.2byte	0x2fe
 1701 038d 6B000000 		.4byte	0x6b
 1702 0391 02       		.uleb128 0x2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 65


 1703 0392 91       		.byte	0x91
 1704 0393 77       		.sleb128 -9
 1705 0394 0B       		.uleb128 0xb
 1706 0395 8A010000 		.4byte	.LASF38
 1707 0399 01       		.byte	0x1
 1708 039a FF02     		.2byte	0x2ff
 1709 039c 6B000000 		.4byte	0x6b
 1710 03a0 02       		.uleb128 0x2
 1711 03a1 91       		.byte	0x91
 1712 03a2 76       		.sleb128 -10
 1713 03a3 00       		.byte	0
 1714 03a4 0F       		.uleb128 0xf
 1715 03a5 6A010000 		.4byte	.LASF42
 1716 03a9 01       		.byte	0x1
 1717 03aa 2B03     		.2byte	0x32b
 1718 03ac 00000000 		.4byte	.LFB10
 1719 03b0 6C000000 		.4byte	.LFE10-.LFB10
 1720 03b4 01       		.uleb128 0x1
 1721 03b5 9C       		.byte	0x9c
 1722 03b6 06040000 		.4byte	0x406
 1723 03ba 0C       		.uleb128 0xc
 1724 03bb 5E040000 		.4byte	.LASF21
 1725 03bf 01       		.byte	0x1
 1726 03c0 2B03     		.2byte	0x32b
 1727 03c2 6B000000 		.4byte	0x6b
 1728 03c6 02       		.uleb128 0x2
 1729 03c7 91       		.byte	0x91
 1730 03c8 6F       		.sleb128 -17
 1731 03c9 0A       		.uleb128 0xa
 1732 03ca 706F7300 		.ascii	"pos\000"
 1733 03ce 01       		.byte	0x1
 1734 03cf 2E03     		.2byte	0x32e
 1735 03d1 6B000000 		.4byte	0x6b
 1736 03d5 02       		.uleb128 0x2
 1737 03d6 91       		.byte	0x91
 1738 03d7 75       		.sleb128 -11
 1739 03d8 0B       		.uleb128 0xb
 1740 03d9 A4030000 		.4byte	.LASF23
 1741 03dd 01       		.byte	0x1
 1742 03de 2F03     		.2byte	0x32f
 1743 03e0 6B000000 		.4byte	0x6b
 1744 03e4 02       		.uleb128 0x2
 1745 03e5 91       		.byte	0x91
 1746 03e6 74       		.sleb128 -12
 1747 03e7 0B       		.uleb128 0xb
 1748 03e8 81010000 		.4byte	.LASF37
 1749 03ec 01       		.byte	0x1
 1750 03ed 3003     		.2byte	0x330
 1751 03ef 6B000000 		.4byte	0x6b
 1752 03f3 02       		.uleb128 0x2
 1753 03f4 91       		.byte	0x91
 1754 03f5 77       		.sleb128 -9
 1755 03f6 0B       		.uleb128 0xb
 1756 03f7 8A010000 		.4byte	.LASF38
 1757 03fb 01       		.byte	0x1
 1758 03fc 3103     		.2byte	0x331
 1759 03fe 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 66


 1760 0402 02       		.uleb128 0x2
 1761 0403 91       		.byte	0x91
 1762 0404 76       		.sleb128 -10
 1763 0405 00       		.byte	0
 1764 0406 0D       		.uleb128 0xd
 1765 0407 76020000 		.4byte	.LASF43
 1766 040b 01       		.byte	0x1
 1767 040c 8307     		.2byte	0x783
 1768 040e 77000000 		.4byte	0x77
 1769 0412 00000000 		.4byte	.LFB11
 1770 0416 2C000000 		.4byte	.LFE11-.LFB11
 1771 041a 01       		.uleb128 0x1
 1772 041b 9C       		.byte	0x9c
 1773 041c 4C040000 		.4byte	0x44c
 1774 0420 10       		.uleb128 0x10
 1775 0421 783100   		.ascii	"x1\000"
 1776 0424 01       		.byte	0x1
 1777 0425 8307     		.2byte	0x783
 1778 0427 77000000 		.4byte	0x77
 1779 042b 02       		.uleb128 0x2
 1780 042c 91       		.byte	0x91
 1781 042d 6E       		.sleb128 -18
 1782 042e 10       		.uleb128 0x10
 1783 042f 783200   		.ascii	"x2\000"
 1784 0432 01       		.byte	0x1
 1785 0433 8307     		.2byte	0x783
 1786 0435 77000000 		.4byte	0x77
 1787 0439 02       		.uleb128 0x2
 1788 043a 91       		.byte	0x91
 1789 043b 6C       		.sleb128 -20
 1790 043c 0A       		.uleb128 0xa
 1791 043d 746D7000 		.ascii	"tmp\000"
 1792 0441 01       		.byte	0x1
 1793 0442 8607     		.2byte	0x786
 1794 0444 83000000 		.4byte	0x83
 1795 0448 02       		.uleb128 0x2
 1796 0449 91       		.byte	0x91
 1797 044a 74       		.sleb128 -12
 1798 044b 00       		.byte	0
 1799 044c 11       		.uleb128 0x11
 1800 044d 77000000 		.4byte	0x77
 1801 0451 5C040000 		.4byte	0x45c
 1802 0455 12       		.uleb128 0x12
 1803 0456 AB000000 		.4byte	0xab
 1804 045a 0B       		.byte	0xb
 1805 045b 00       		.byte	0
 1806 045c 13       		.uleb128 0x13
 1807 045d FF040000 		.4byte	.LASF44
 1808 0461 03       		.byte	0x3
 1809 0462 C402     		.2byte	0x2c4
 1810 0464 4C040000 		.4byte	0x44c
 1811 0468 14       		.uleb128 0x14
 1812 0469 DC030000 		.4byte	.LASF45
 1813 046d 01       		.byte	0x1
 1814 046e 21       		.byte	0x21
 1815 046f 4C040000 		.4byte	0x44c
 1816 0473 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 67


 1817 0474 03       		.byte	0x3
 1818 0475 00000000 		.4byte	CapSense_rawFilterData1
 1819 0479 11       		.uleb128 0x11
 1820 047a 6B000000 		.4byte	0x6b
 1821 047e 89040000 		.4byte	0x489
 1822 0482 12       		.uleb128 0x12
 1823 0483 AB000000 		.4byte	0xab
 1824 0487 01       		.byte	0x1
 1825 0488 00       		.byte	0
 1826 0489 13       		.uleb128 0x13
 1827 048a F4020000 		.4byte	.LASF46
 1828 048e 04       		.byte	0x4
 1829 048f 0E01     		.2byte	0x10e
 1830 0491 79040000 		.4byte	0x479
 1831 0495 11       		.uleb128 0x11
 1832 0496 A5040000 		.4byte	0x4a5
 1833 049a A5040000 		.4byte	0x4a5
 1834 049e 12       		.uleb128 0x12
 1835 049f AB000000 		.4byte	0xab
 1836 04a3 0B       		.byte	0xb
 1837 04a4 00       		.byte	0
 1838 04a5 15       		.uleb128 0x15
 1839 04a6 6B000000 		.4byte	0x6b
 1840 04aa 13       		.uleb128 0x13
 1841 04ab 4E020000 		.4byte	.LASF47
 1842 04af 04       		.byte	0x4
 1843 04b0 0F01     		.2byte	0x10f
 1844 04b2 B6040000 		.4byte	0x4b6
 1845 04b6 15       		.uleb128 0x15
 1846 04b7 95040000 		.4byte	0x495
 1847 04bb 14       		.uleb128 0x14
 1848 04bc AD040000 		.4byte	.LASF48
 1849 04c0 01       		.byte	0x1
 1850 04c1 29       		.byte	0x29
 1851 04c2 4C040000 		.4byte	0x44c
 1852 04c6 05       		.uleb128 0x5
 1853 04c7 03       		.byte	0x3
 1854 04c8 00000000 		.4byte	CapSense_sensorBaseline
 1855 04cc 11       		.uleb128 0x11
 1856 04cd 6B000000 		.4byte	0x6b
 1857 04d1 DC040000 		.4byte	0x4dc
 1858 04d5 12       		.uleb128 0x12
 1859 04d6 AB000000 		.4byte	0xab
 1860 04da 0B       		.byte	0xb
 1861 04db 00       		.byte	0
 1862 04dc 14       		.uleb128 0x14
 1863 04dd A9020000 		.4byte	.LASF49
 1864 04e1 01       		.byte	0x1
 1865 04e2 2A       		.byte	0x2a
 1866 04e3 CC040000 		.4byte	0x4cc
 1867 04e7 05       		.uleb128 0x5
 1868 04e8 03       		.byte	0x3
 1869 04e9 00000000 		.4byte	CapSense_sensorBaselineLow
 1870 04ed 14       		.uleb128 0x14
 1871 04ee F6000000 		.4byte	.LASF50
 1872 04f2 01       		.byte	0x1
 1873 04f3 2B       		.byte	0x2b
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 68


 1874 04f4 4C040000 		.4byte	0x44c
 1875 04f8 05       		.uleb128 0x5
 1876 04f9 03       		.byte	0x3
 1877 04fa 00000000 		.4byte	CapSense_sensorSignal
 1878 04fe 14       		.uleb128 0x14
 1879 04ff 2B000000 		.4byte	.LASF51
 1880 0503 01       		.byte	0x1
 1881 0504 2C       		.byte	0x2c
 1882 0505 79040000 		.4byte	0x479
 1883 0509 05       		.uleb128 0x5
 1884 050a 03       		.byte	0x3
 1885 050b 00000000 		.4byte	CapSense_sensorOnMask
 1886 050f 14       		.uleb128 0x14
 1887 0510 7E040000 		.4byte	.LASF52
 1888 0514 01       		.byte	0x1
 1889 0515 2E       		.byte	0x2e
 1890 0516 CC040000 		.4byte	0x4cc
 1891 051a 05       		.uleb128 0x5
 1892 051b 03       		.byte	0x3
 1893 051c 00000000 		.4byte	CapSense_lowBaselineResetCnt
 1894 0520 14       		.uleb128 0x14
 1895 0521 C3030000 		.4byte	.LASF53
 1896 0525 01       		.byte	0x1
 1897 0526 30       		.byte	0x30
 1898 0527 4C040000 		.4byte	0x44c
 1899 052b 05       		.uleb128 0x5
 1900 052c 03       		.byte	0x3
 1901 052d 00000000 		.4byte	CapSense_fingerThreshold
 1902 0531 14       		.uleb128 0x14
 1903 0532 AB030000 		.4byte	.LASF54
 1904 0536 01       		.byte	0x1
 1905 0537 34       		.byte	0x34
 1906 0538 4C040000 		.4byte	0x44c
 1907 053c 05       		.uleb128 0x5
 1908 053d 03       		.byte	0x3
 1909 053e 00000000 		.4byte	CapSense_noiseThreshold
 1910 0542 14       		.uleb128 0x14
 1911 0543 17000000 		.4byte	.LASF55
 1912 0547 01       		.byte	0x1
 1913 0548 38       		.byte	0x38
 1914 0549 4C040000 		.4byte	0x44c
 1915 054d 05       		.uleb128 0x5
 1916 054e 03       		.byte	0x3
 1917 054f 00000000 		.4byte	CapSense_hysteresis
 1918 0553 14       		.uleb128 0x14
 1919 0554 9B040000 		.4byte	.LASF56
 1920 0558 01       		.byte	0x1
 1921 0559 3C       		.byte	0x3c
 1922 055a CC040000 		.4byte	0x4cc
 1923 055e 05       		.uleb128 0x5
 1924 055f 03       		.byte	0x3
 1925 0560 00000000 		.4byte	CapSense_debounce
 1926 0564 11       		.uleb128 0x11
 1927 0565 6B000000 		.4byte	0x6b
 1928 0569 74050000 		.4byte	0x574
 1929 056d 12       		.uleb128 0x12
 1930 056e AB000000 		.4byte	0xab
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 69


 1931 0572 0C       		.byte	0xc
 1932 0573 00       		.byte	0
 1933 0574 14       		.uleb128 0x14
 1934 0575 12050000 		.4byte	.LASF57
 1935 0579 01       		.byte	0x1
 1936 057a 40       		.byte	0x40
 1937 057b 64050000 		.4byte	0x564
 1938 057f 05       		.uleb128 0x5
 1939 0580 03       		.byte	0x3
 1940 0581 00000000 		.4byte	CapSense_debounceCounter
 1941 0585 14       		.uleb128 0x14
 1942 0586 C4020000 		.4byte	.LASF58
 1943 058a 01       		.byte	0x1
 1944 058b 44       		.byte	0x44
 1945 058c 96050000 		.4byte	0x596
 1946 0590 05       		.uleb128 0x5
 1947 0591 03       		.byte	0x3
 1948 0592 00000000 		.4byte	CapSense_rawDataIndex
 1949 0596 15       		.uleb128 0x15
 1950 0597 95040000 		.4byte	0x495
 1951 059b 14       		.uleb128 0x14
 1952 059c 33050000 		.4byte	.LASF59
 1953 05a0 01       		.byte	0x1
 1954 05a1 54       		.byte	0x54
 1955 05a2 AC050000 		.4byte	0x5ac
 1956 05a6 05       		.uleb128 0x5
 1957 05a7 03       		.byte	0x3
 1958 05a8 00000000 		.4byte	CapSense_numberOfSensors
 1959 05ac 15       		.uleb128 0x15
 1960 05ad 95040000 		.4byte	0x495
 1961 05b1 00       		.byte	0
 1962              		.section	.debug_abbrev,"",%progbits
 1963              	.Ldebug_abbrev0:
 1964 0000 01       		.uleb128 0x1
 1965 0001 11       		.uleb128 0x11
 1966 0002 01       		.byte	0x1
 1967 0003 25       		.uleb128 0x25
 1968 0004 0E       		.uleb128 0xe
 1969 0005 13       		.uleb128 0x13
 1970 0006 0B       		.uleb128 0xb
 1971 0007 03       		.uleb128 0x3
 1972 0008 0E       		.uleb128 0xe
 1973 0009 1B       		.uleb128 0x1b
 1974 000a 0E       		.uleb128 0xe
 1975 000b 55       		.uleb128 0x55
 1976 000c 17       		.uleb128 0x17
 1977 000d 11       		.uleb128 0x11
 1978 000e 01       		.uleb128 0x1
 1979 000f 10       		.uleb128 0x10
 1980 0010 17       		.uleb128 0x17
 1981 0011 00       		.byte	0
 1982 0012 00       		.byte	0
 1983 0013 02       		.uleb128 0x2
 1984 0014 24       		.uleb128 0x24
 1985 0015 00       		.byte	0
 1986 0016 0B       		.uleb128 0xb
 1987 0017 0B       		.uleb128 0xb
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 70


 1988 0018 3E       		.uleb128 0x3e
 1989 0019 0B       		.uleb128 0xb
 1990 001a 03       		.uleb128 0x3
 1991 001b 0E       		.uleb128 0xe
 1992 001c 00       		.byte	0
 1993 001d 00       		.byte	0
 1994 001e 03       		.uleb128 0x3
 1995 001f 24       		.uleb128 0x24
 1996 0020 00       		.byte	0
 1997 0021 0B       		.uleb128 0xb
 1998 0022 0B       		.uleb128 0xb
 1999 0023 3E       		.uleb128 0x3e
 2000 0024 0B       		.uleb128 0xb
 2001 0025 03       		.uleb128 0x3
 2002 0026 08       		.uleb128 0x8
 2003 0027 00       		.byte	0
 2004 0028 00       		.byte	0
 2005 0029 04       		.uleb128 0x4
 2006 002a 16       		.uleb128 0x16
 2007 002b 00       		.byte	0
 2008 002c 03       		.uleb128 0x3
 2009 002d 0E       		.uleb128 0xe
 2010 002e 3A       		.uleb128 0x3a
 2011 002f 0B       		.uleb128 0xb
 2012 0030 3B       		.uleb128 0x3b
 2013 0031 05       		.uleb128 0x5
 2014 0032 49       		.uleb128 0x49
 2015 0033 13       		.uleb128 0x13
 2016 0034 00       		.byte	0
 2017 0035 00       		.byte	0
 2018 0036 05       		.uleb128 0x5
 2019 0037 2E       		.uleb128 0x2e
 2020 0038 01       		.byte	0x1
 2021 0039 3F       		.uleb128 0x3f
 2022 003a 19       		.uleb128 0x19
 2023 003b 03       		.uleb128 0x3
 2024 003c 0E       		.uleb128 0xe
 2025 003d 3A       		.uleb128 0x3a
 2026 003e 0B       		.uleb128 0xb
 2027 003f 3B       		.uleb128 0x3b
 2028 0040 0B       		.uleb128 0xb
 2029 0041 27       		.uleb128 0x27
 2030 0042 19       		.uleb128 0x19
 2031 0043 11       		.uleb128 0x11
 2032 0044 01       		.uleb128 0x1
 2033 0045 12       		.uleb128 0x12
 2034 0046 06       		.uleb128 0x6
 2035 0047 40       		.uleb128 0x40
 2036 0048 18       		.uleb128 0x18
 2037 0049 9742     		.uleb128 0x2117
 2038 004b 19       		.uleb128 0x19
 2039 004c 01       		.uleb128 0x1
 2040 004d 13       		.uleb128 0x13
 2041 004e 00       		.byte	0
 2042 004f 00       		.byte	0
 2043 0050 06       		.uleb128 0x6
 2044 0051 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 71


 2045 0052 00       		.byte	0
 2046 0053 03       		.uleb128 0x3
 2047 0054 0E       		.uleb128 0xe
 2048 0055 3A       		.uleb128 0x3a
 2049 0056 0B       		.uleb128 0xb
 2050 0057 3B       		.uleb128 0x3b
 2051 0058 0B       		.uleb128 0xb
 2052 0059 49       		.uleb128 0x49
 2053 005a 13       		.uleb128 0x13
 2054 005b 02       		.uleb128 0x2
 2055 005c 18       		.uleb128 0x18
 2056 005d 00       		.byte	0
 2057 005e 00       		.byte	0
 2058 005f 07       		.uleb128 0x7
 2059 0060 34       		.uleb128 0x34
 2060 0061 00       		.byte	0
 2061 0062 03       		.uleb128 0x3
 2062 0063 0E       		.uleb128 0xe
 2063 0064 3A       		.uleb128 0x3a
 2064 0065 0B       		.uleb128 0xb
 2065 0066 3B       		.uleb128 0x3b
 2066 0067 0B       		.uleb128 0xb
 2067 0068 49       		.uleb128 0x49
 2068 0069 13       		.uleb128 0x13
 2069 006a 02       		.uleb128 0x2
 2070 006b 18       		.uleb128 0x18
 2071 006c 00       		.byte	0
 2072 006d 00       		.byte	0
 2073 006e 08       		.uleb128 0x8
 2074 006f 2E       		.uleb128 0x2e
 2075 0070 01       		.byte	0x1
 2076 0071 3F       		.uleb128 0x3f
 2077 0072 19       		.uleb128 0x19
 2078 0073 03       		.uleb128 0x3
 2079 0074 0E       		.uleb128 0xe
 2080 0075 3A       		.uleb128 0x3a
 2081 0076 0B       		.uleb128 0xb
 2082 0077 3B       		.uleb128 0x3b
 2083 0078 0B       		.uleb128 0xb
 2084 0079 27       		.uleb128 0x27
 2085 007a 19       		.uleb128 0x19
 2086 007b 11       		.uleb128 0x11
 2087 007c 01       		.uleb128 0x1
 2088 007d 12       		.uleb128 0x12
 2089 007e 06       		.uleb128 0x6
 2090 007f 40       		.uleb128 0x40
 2091 0080 18       		.uleb128 0x18
 2092 0081 9642     		.uleb128 0x2116
 2093 0083 19       		.uleb128 0x19
 2094 0084 01       		.uleb128 0x1
 2095 0085 13       		.uleb128 0x13
 2096 0086 00       		.byte	0
 2097 0087 00       		.byte	0
 2098 0088 09       		.uleb128 0x9
 2099 0089 2E       		.uleb128 0x2e
 2100 008a 01       		.byte	0x1
 2101 008b 3F       		.uleb128 0x3f
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 72


 2102 008c 19       		.uleb128 0x19
 2103 008d 03       		.uleb128 0x3
 2104 008e 0E       		.uleb128 0xe
 2105 008f 3A       		.uleb128 0x3a
 2106 0090 0B       		.uleb128 0xb
 2107 0091 3B       		.uleb128 0x3b
 2108 0092 05       		.uleb128 0x5
 2109 0093 27       		.uleb128 0x27
 2110 0094 19       		.uleb128 0x19
 2111 0095 11       		.uleb128 0x11
 2112 0096 01       		.uleb128 0x1
 2113 0097 12       		.uleb128 0x12
 2114 0098 06       		.uleb128 0x6
 2115 0099 40       		.uleb128 0x40
 2116 009a 18       		.uleb128 0x18
 2117 009b 9642     		.uleb128 0x2116
 2118 009d 19       		.uleb128 0x19
 2119 009e 01       		.uleb128 0x1
 2120 009f 13       		.uleb128 0x13
 2121 00a0 00       		.byte	0
 2122 00a1 00       		.byte	0
 2123 00a2 0A       		.uleb128 0xa
 2124 00a3 34       		.uleb128 0x34
 2125 00a4 00       		.byte	0
 2126 00a5 03       		.uleb128 0x3
 2127 00a6 08       		.uleb128 0x8
 2128 00a7 3A       		.uleb128 0x3a
 2129 00a8 0B       		.uleb128 0xb
 2130 00a9 3B       		.uleb128 0x3b
 2131 00aa 05       		.uleb128 0x5
 2132 00ab 49       		.uleb128 0x49
 2133 00ac 13       		.uleb128 0x13
 2134 00ad 02       		.uleb128 0x2
 2135 00ae 18       		.uleb128 0x18
 2136 00af 00       		.byte	0
 2137 00b0 00       		.byte	0
 2138 00b1 0B       		.uleb128 0xb
 2139 00b2 34       		.uleb128 0x34
 2140 00b3 00       		.byte	0
 2141 00b4 03       		.uleb128 0x3
 2142 00b5 0E       		.uleb128 0xe
 2143 00b6 3A       		.uleb128 0x3a
 2144 00b7 0B       		.uleb128 0xb
 2145 00b8 3B       		.uleb128 0x3b
 2146 00b9 05       		.uleb128 0x5
 2147 00ba 49       		.uleb128 0x49
 2148 00bb 13       		.uleb128 0x13
 2149 00bc 02       		.uleb128 0x2
 2150 00bd 18       		.uleb128 0x18
 2151 00be 00       		.byte	0
 2152 00bf 00       		.byte	0
 2153 00c0 0C       		.uleb128 0xc
 2154 00c1 05       		.uleb128 0x5
 2155 00c2 00       		.byte	0
 2156 00c3 03       		.uleb128 0x3
 2157 00c4 0E       		.uleb128 0xe
 2158 00c5 3A       		.uleb128 0x3a
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 73


 2159 00c6 0B       		.uleb128 0xb
 2160 00c7 3B       		.uleb128 0x3b
 2161 00c8 05       		.uleb128 0x5
 2162 00c9 49       		.uleb128 0x49
 2163 00ca 13       		.uleb128 0x13
 2164 00cb 02       		.uleb128 0x2
 2165 00cc 18       		.uleb128 0x18
 2166 00cd 00       		.byte	0
 2167 00ce 00       		.byte	0
 2168 00cf 0D       		.uleb128 0xd
 2169 00d0 2E       		.uleb128 0x2e
 2170 00d1 01       		.byte	0x1
 2171 00d2 3F       		.uleb128 0x3f
 2172 00d3 19       		.uleb128 0x19
 2173 00d4 03       		.uleb128 0x3
 2174 00d5 0E       		.uleb128 0xe
 2175 00d6 3A       		.uleb128 0x3a
 2176 00d7 0B       		.uleb128 0xb
 2177 00d8 3B       		.uleb128 0x3b
 2178 00d9 05       		.uleb128 0x5
 2179 00da 27       		.uleb128 0x27
 2180 00db 19       		.uleb128 0x19
 2181 00dc 49       		.uleb128 0x49
 2182 00dd 13       		.uleb128 0x13
 2183 00de 11       		.uleb128 0x11
 2184 00df 01       		.uleb128 0x1
 2185 00e0 12       		.uleb128 0x12
 2186 00e1 06       		.uleb128 0x6
 2187 00e2 40       		.uleb128 0x40
 2188 00e3 18       		.uleb128 0x18
 2189 00e4 9742     		.uleb128 0x2117
 2190 00e6 19       		.uleb128 0x19
 2191 00e7 01       		.uleb128 0x1
 2192 00e8 13       		.uleb128 0x13
 2193 00e9 00       		.byte	0
 2194 00ea 00       		.byte	0
 2195 00eb 0E       		.uleb128 0xe
 2196 00ec 2E       		.uleb128 0x2e
 2197 00ed 01       		.byte	0x1
 2198 00ee 3F       		.uleb128 0x3f
 2199 00ef 19       		.uleb128 0x19
 2200 00f0 03       		.uleb128 0x3
 2201 00f1 0E       		.uleb128 0xe
 2202 00f2 3A       		.uleb128 0x3a
 2203 00f3 0B       		.uleb128 0xb
 2204 00f4 3B       		.uleb128 0x3b
 2205 00f5 05       		.uleb128 0x5
 2206 00f6 27       		.uleb128 0x27
 2207 00f7 19       		.uleb128 0x19
 2208 00f8 49       		.uleb128 0x49
 2209 00f9 13       		.uleb128 0x13
 2210 00fa 11       		.uleb128 0x11
 2211 00fb 01       		.uleb128 0x1
 2212 00fc 12       		.uleb128 0x12
 2213 00fd 06       		.uleb128 0x6
 2214 00fe 40       		.uleb128 0x40
 2215 00ff 18       		.uleb128 0x18
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 74


 2216 0100 9642     		.uleb128 0x2116
 2217 0102 19       		.uleb128 0x19
 2218 0103 01       		.uleb128 0x1
 2219 0104 13       		.uleb128 0x13
 2220 0105 00       		.byte	0
 2221 0106 00       		.byte	0
 2222 0107 0F       		.uleb128 0xf
 2223 0108 2E       		.uleb128 0x2e
 2224 0109 01       		.byte	0x1
 2225 010a 3F       		.uleb128 0x3f
 2226 010b 19       		.uleb128 0x19
 2227 010c 03       		.uleb128 0x3
 2228 010d 0E       		.uleb128 0xe
 2229 010e 3A       		.uleb128 0x3a
 2230 010f 0B       		.uleb128 0xb
 2231 0110 3B       		.uleb128 0x3b
 2232 0111 05       		.uleb128 0x5
 2233 0112 27       		.uleb128 0x27
 2234 0113 19       		.uleb128 0x19
 2235 0114 11       		.uleb128 0x11
 2236 0115 01       		.uleb128 0x1
 2237 0116 12       		.uleb128 0x12
 2238 0117 06       		.uleb128 0x6
 2239 0118 40       		.uleb128 0x40
 2240 0119 18       		.uleb128 0x18
 2241 011a 9742     		.uleb128 0x2117
 2242 011c 19       		.uleb128 0x19
 2243 011d 01       		.uleb128 0x1
 2244 011e 13       		.uleb128 0x13
 2245 011f 00       		.byte	0
 2246 0120 00       		.byte	0
 2247 0121 10       		.uleb128 0x10
 2248 0122 05       		.uleb128 0x5
 2249 0123 00       		.byte	0
 2250 0124 03       		.uleb128 0x3
 2251 0125 08       		.uleb128 0x8
 2252 0126 3A       		.uleb128 0x3a
 2253 0127 0B       		.uleb128 0xb
 2254 0128 3B       		.uleb128 0x3b
 2255 0129 05       		.uleb128 0x5
 2256 012a 49       		.uleb128 0x49
 2257 012b 13       		.uleb128 0x13
 2258 012c 02       		.uleb128 0x2
 2259 012d 18       		.uleb128 0x18
 2260 012e 00       		.byte	0
 2261 012f 00       		.byte	0
 2262 0130 11       		.uleb128 0x11
 2263 0131 01       		.uleb128 0x1
 2264 0132 01       		.byte	0x1
 2265 0133 49       		.uleb128 0x49
 2266 0134 13       		.uleb128 0x13
 2267 0135 01       		.uleb128 0x1
 2268 0136 13       		.uleb128 0x13
 2269 0137 00       		.byte	0
 2270 0138 00       		.byte	0
 2271 0139 12       		.uleb128 0x12
 2272 013a 21       		.uleb128 0x21
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 75


 2273 013b 00       		.byte	0
 2274 013c 49       		.uleb128 0x49
 2275 013d 13       		.uleb128 0x13
 2276 013e 2F       		.uleb128 0x2f
 2277 013f 0B       		.uleb128 0xb
 2278 0140 00       		.byte	0
 2279 0141 00       		.byte	0
 2280 0142 13       		.uleb128 0x13
 2281 0143 34       		.uleb128 0x34
 2282 0144 00       		.byte	0
 2283 0145 03       		.uleb128 0x3
 2284 0146 0E       		.uleb128 0xe
 2285 0147 3A       		.uleb128 0x3a
 2286 0148 0B       		.uleb128 0xb
 2287 0149 3B       		.uleb128 0x3b
 2288 014a 05       		.uleb128 0x5
 2289 014b 49       		.uleb128 0x49
 2290 014c 13       		.uleb128 0x13
 2291 014d 3F       		.uleb128 0x3f
 2292 014e 19       		.uleb128 0x19
 2293 014f 3C       		.uleb128 0x3c
 2294 0150 19       		.uleb128 0x19
 2295 0151 00       		.byte	0
 2296 0152 00       		.byte	0
 2297 0153 14       		.uleb128 0x14
 2298 0154 34       		.uleb128 0x34
 2299 0155 00       		.byte	0
 2300 0156 03       		.uleb128 0x3
 2301 0157 0E       		.uleb128 0xe
 2302 0158 3A       		.uleb128 0x3a
 2303 0159 0B       		.uleb128 0xb
 2304 015a 3B       		.uleb128 0x3b
 2305 015b 0B       		.uleb128 0xb
 2306 015c 49       		.uleb128 0x49
 2307 015d 13       		.uleb128 0x13
 2308 015e 3F       		.uleb128 0x3f
 2309 015f 19       		.uleb128 0x19
 2310 0160 02       		.uleb128 0x2
 2311 0161 18       		.uleb128 0x18
 2312 0162 00       		.byte	0
 2313 0163 00       		.byte	0
 2314 0164 15       		.uleb128 0x15
 2315 0165 26       		.uleb128 0x26
 2316 0166 00       		.byte	0
 2317 0167 49       		.uleb128 0x49
 2318 0168 13       		.uleb128 0x13
 2319 0169 00       		.byte	0
 2320 016a 00       		.byte	0
 2321 016b 00       		.byte	0
 2322              		.section	.debug_aranges,"",%progbits
 2323 0000 74000000 		.4byte	0x74
 2324 0004 0200     		.2byte	0x2
 2325 0006 00000000 		.4byte	.Ldebug_info0
 2326 000a 04       		.byte	0x4
 2327 000b 00       		.byte	0
 2328 000c 0000     		.2byte	0
 2329 000e 0000     		.2byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 76


 2330 0010 00000000 		.4byte	.LFB0
 2331 0014 7C000000 		.4byte	.LFE0-.LFB0
 2332 0018 00000000 		.4byte	.LFB1
 2333 001c 2E000000 		.4byte	.LFE1-.LFB1
 2334 0020 00000000 		.4byte	.LFB2
 2335 0024 28000000 		.4byte	.LFE2-.LFB2
 2336 0028 00000000 		.4byte	.LFB3
 2337 002c 70000000 		.4byte	.LFE3-.LFB3
 2338 0030 00000000 		.4byte	.LFB4
 2339 0034 64010000 		.4byte	.LFE4-.LFB4
 2340 0038 00000000 		.4byte	.LFB5
 2341 003c 50000000 		.4byte	.LFE5-.LFB5
 2342 0040 00000000 		.4byte	.LFB6
 2343 0044 10010000 		.4byte	.LFE6-.LFB6
 2344 0048 00000000 		.4byte	.LFB7
 2345 004c 54000000 		.4byte	.LFE7-.LFB7
 2346 0050 00000000 		.4byte	.LFB8
 2347 0054 38000000 		.4byte	.LFE8-.LFB8
 2348 0058 00000000 		.4byte	.LFB9
 2349 005c 68000000 		.4byte	.LFE9-.LFB9
 2350 0060 00000000 		.4byte	.LFB10
 2351 0064 6C000000 		.4byte	.LFE10-.LFB10
 2352 0068 00000000 		.4byte	.LFB11
 2353 006c 2C000000 		.4byte	.LFE11-.LFB11
 2354 0070 00000000 		.4byte	0
 2355 0074 00000000 		.4byte	0
 2356              		.section	.debug_ranges,"",%progbits
 2357              	.Ldebug_ranges0:
 2358 0000 00000000 		.4byte	.LFB0
 2359 0004 7C000000 		.4byte	.LFE0
 2360 0008 00000000 		.4byte	.LFB1
 2361 000c 2E000000 		.4byte	.LFE1
 2362 0010 00000000 		.4byte	.LFB2
 2363 0014 28000000 		.4byte	.LFE2
 2364 0018 00000000 		.4byte	.LFB3
 2365 001c 70000000 		.4byte	.LFE3
 2366 0020 00000000 		.4byte	.LFB4
 2367 0024 64010000 		.4byte	.LFE4
 2368 0028 00000000 		.4byte	.LFB5
 2369 002c 50000000 		.4byte	.LFE5
 2370 0030 00000000 		.4byte	.LFB6
 2371 0034 10010000 		.4byte	.LFE6
 2372 0038 00000000 		.4byte	.LFB7
 2373 003c 54000000 		.4byte	.LFE7
 2374 0040 00000000 		.4byte	.LFB8
 2375 0044 38000000 		.4byte	.LFE8
 2376 0048 00000000 		.4byte	.LFB9
 2377 004c 68000000 		.4byte	.LFE9
 2378 0050 00000000 		.4byte	.LFB10
 2379 0054 6C000000 		.4byte	.LFE10
 2380 0058 00000000 		.4byte	.LFB11
 2381 005c 2C000000 		.4byte	.LFE11
 2382 0060 00000000 		.4byte	0
 2383 0064 00000000 		.4byte	0
 2384              		.section	.debug_line,"",%progbits
 2385              	.Ldebug_line0:
 2386 0000 50020000 		.section	.debug_str,"MS",%progbits,1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 77


 2386      02006B00 
 2386      00000201 
 2386      FB0E0D00 
 2386      01010101 
 2387              	.LASF10:
 2388 0000 75696E74 		.ascii	"uint16\000"
 2388      313600
 2389              	.LASF27:
 2390 0007 66696C74 		.ascii	"filteredRawData\000"
 2390      65726564 
 2390      52617744 
 2390      61746100 
 2391              	.LASF55:
 2392 0017 43617053 		.ascii	"CapSense_hysteresis\000"
 2392      656E7365 
 2392      5F687973 
 2392      74657265 
 2392      73697300 
 2393              	.LASF51:
 2394 002b 43617053 		.ascii	"CapSense_sensorOnMask\000"
 2394      656E7365 
 2394      5F73656E 
 2394      736F724F 
 2394      6E4D6173 
 2395              	.LASF32:
 2396 0041 66696E67 		.ascii	"fingerThreshold\000"
 2396      65725468 
 2396      72657368 
 2396      6F6C6400 
 2397              	.LASF60:
 2398 0051 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2398      43313120 
 2398      352E342E 
 2398      31203230 
 2398      31363036 
 2399 0084 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2399      20726576 
 2399      6973696F 
 2399      6E203233 
 2399      37373135 
 2400 00b7 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2400      66756E63 
 2400      74696F6E 
 2400      2D736563 
 2400      74696F6E 
 2401              	.LASF7:
 2402 00df 6C6F6E67 		.ascii	"long long unsigned int\000"
 2402      206C6F6E 
 2402      6720756E 
 2402      7369676E 
 2402      65642069 
 2403              	.LASF50:
 2404 00f6 43617053 		.ascii	"CapSense_sensorSignal\000"
 2404      656E7365 
 2404      5F73656E 
 2404      736F7253 
 2404      69676E61 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 78


 2405              	.LASF22:
 2406 010c 43617053 		.ascii	"CapSense_InitializeEnabledBaselines\000"
 2406      656E7365 
 2406      5F496E69 
 2406      7469616C 
 2406      697A6545 
 2407              	.LASF29:
 2408 0130 43617053 		.ascii	"CapSense_UpdateEnabledBaselines\000"
 2408      656E7365 
 2408      5F557064 
 2408      61746545 
 2408      6E61626C 
 2409              	.LASF6:
 2410 0150 6C6F6E67 		.ascii	"long long int\000"
 2410      206C6F6E 
 2410      6720696E 
 2410      7400
 2411              	.LASF0:
 2412 015e 7369676E 		.ascii	"signed char\000"
 2412      65642063 
 2412      68617200 
 2413              	.LASF42:
 2414 016a 43617053 		.ascii	"CapSense_DisableWidget\000"
 2414      656E7365 
 2414      5F446973 
 2414      61626C65 
 2414      57696467 
 2415              	.LASF37:
 2416 0181 72617749 		.ascii	"rawIndex\000"
 2416      6E646578 
 2416      00
 2417              	.LASF38:
 2418 018a 6E756D62 		.ascii	"numberOfSensors\000"
 2418      65724F66 
 2418      53656E73 
 2418      6F727300 
 2419              	.LASF62:
 2420 019a 433A5C55 		.ascii	"C:\\Users\\JeffSnyder\\dev\\Electrosteel_embedded\\"
 2420      73657273 
 2420      5C4A6566 
 2420      66536E79 
 2420      6465725C 
 2421 01c8 50534F43 		.ascii	"PSOC5_electrosteel_stringsensors - Copy\\CE210514_P"
 2421      355F656C 
 2421      65637472 
 2421      6F737465 
 2421      656C5F73 
 2422 01fa 534F4333 		.ascii	"SOC3_5_Thermistor.cydsn\000"
 2422      5F355F54 
 2422      6865726D 
 2422      6973746F 
 2422      722E6379 
 2423              	.LASF39:
 2424 0212 73746174 		.ascii	"state\000"
 2424      6500
 2425              	.LASF4:
 2426 0218 6C6F6E67 		.ascii	"long int\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 79


 2426      20696E74 
 2426      00
 2427              	.LASF40:
 2428 0221 43617053 		.ascii	"CapSense_CheckIsAnyWidgetActive\000"
 2428      656E7365 
 2428      5F436865 
 2428      636B4973 
 2428      416E7957 
 2429              	.LASF9:
 2430 0241 75696E74 		.ascii	"uint8\000"
 2430      3800
 2431              	.LASF13:
 2432 0247 646F7562 		.ascii	"double\000"
 2432      6C6500
 2433              	.LASF47:
 2434 024e 43617053 		.ascii	"CapSense_widgetNumber\000"
 2434      656E7365 
 2434      5F776964 
 2434      6765744E 
 2434      756D6265 
 2435              	.LASF11:
 2436 0264 75696E74 		.ascii	"uint32\000"
 2436      333200
 2437              	.LASF33:
 2438 026b 68797374 		.ascii	"hysteresis\000"
 2438      65726573 
 2438      697300
 2439              	.LASF43:
 2440 0276 43617053 		.ascii	"CapSense_IIR2Filter\000"
 2440      656E7365 
 2440      5F494952 
 2440      3246696C 
 2440      74657200 
 2441              	.LASF8:
 2442 028a 756E7369 		.ascii	"unsigned int\000"
 2442      676E6564 
 2442      20696E74 
 2442      00
 2443              	.LASF5:
 2444 0297 6C6F6E67 		.ascii	"long unsigned int\000"
 2444      20756E73 
 2444      69676E65 
 2444      6420696E 
 2444      7400
 2445              	.LASF49:
 2446 02a9 43617053 		.ascii	"CapSense_sensorBaselineLow\000"
 2446      656E7365 
 2446      5F73656E 
 2446      736F7242 
 2446      6173656C 
 2447              	.LASF58:
 2448 02c4 43617053 		.ascii	"CapSense_rawDataIndex\000"
 2448      656E7365 
 2448      5F726177 
 2448      44617461 
 2448      496E6465 
 2449              	.LASF3:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 80


 2450 02da 73686F72 		.ascii	"short unsigned int\000"
 2450      7420756E 
 2450      7369676E 
 2450      65642069 
 2450      6E7400
 2451              	.LASF19:
 2452 02ed 73656E73 		.ascii	"sensor\000"
 2452      6F7200
 2453              	.LASF46:
 2454 02f4 43617053 		.ascii	"CapSense_sensorEnableMask\000"
 2454      656E7365 
 2454      5F73656E 
 2454      736F7245 
 2454      6E61626C 
 2455              	.LASF24:
 2456 030e 43617053 		.ascii	"CapSense_UpdateSensorBaseline\000"
 2456      656E7365 
 2456      5F557064 
 2456      61746553 
 2456      656E736F 
 2457              	.LASF25:
 2458 032c 63616C63 		.ascii	"calc\000"
 2458      00
 2459              	.LASF34:
 2460 0331 6465626F 		.ascii	"debounce\000"
 2460      756E6365 
 2460      00
 2461              	.LASF16:
 2462 033a 73697A65 		.ascii	"sizetype\000"
 2462      74797065 
 2462      00
 2463              	.LASF41:
 2464 0343 43617053 		.ascii	"CapSense_EnableWidget\000"
 2464      656E7365 
 2464      5F456E61 
 2464      626C6557 
 2464      69646765 
 2465              	.LASF15:
 2466 0359 6C6F6E67 		.ascii	"long double\000"
 2466      20646F75 
 2466      626C6500 
 2467              	.LASF18:
 2468 0365 43617053 		.ascii	"CapSense_InitializeSensorBaseline\000"
 2468      656E7365 
 2468      5F496E69 
 2468      7469616C 
 2468      697A6553 
 2469              	.LASF35:
 2470 0387 43617053 		.ascii	"CapSense_CheckIsSensorActive\000"
 2470      656E7365 
 2470      5F436865 
 2470      636B4973 
 2470      53656E73 
 2471              	.LASF23:
 2472 03a4 656E4D61 		.ascii	"enMask\000"
 2472      736B00
 2473              	.LASF54:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 81


 2474 03ab 43617053 		.ascii	"CapSense_noiseThreshold\000"
 2474      656E7365 
 2474      5F6E6F69 
 2474      73655468 
 2474      72657368 
 2475              	.LASF53:
 2476 03c3 43617053 		.ascii	"CapSense_fingerThreshold\000"
 2476      656E7365 
 2476      5F66696E 
 2476      67657254 
 2476      68726573 
 2477              	.LASF45:
 2478 03dc 43617053 		.ascii	"CapSense_rawFilterData1\000"
 2478      656E7365 
 2478      5F726177 
 2478      46696C74 
 2478      65724461 
 2479              	.LASF12:
 2480 03f4 666C6F61 		.ascii	"float\000"
 2480      7400
 2481              	.LASF36:
 2482 03fa 43617053 		.ascii	"CapSense_CheckIsWidgetActive\000"
 2482      656E7365 
 2482      5F436865 
 2482      636B4973 
 2482      57696467 
 2483              	.LASF1:
 2484 0417 756E7369 		.ascii	"unsigned char\000"
 2484      676E6564 
 2484      20636861 
 2484      7200
 2485              	.LASF20:
 2486 0425 43617053 		.ascii	"CapSense_InitializeAllBaselines\000"
 2486      656E7365 
 2486      5F496E69 
 2486      7469616C 
 2486      697A6541 
 2487              	.LASF28:
 2488 0445 6E6F6973 		.ascii	"noiseThreshold\000"
 2488      65546872 
 2488      6573686F 
 2488      6C6400
 2489              	.LASF2:
 2490 0454 73686F72 		.ascii	"short int\000"
 2490      7420696E 
 2490      7400
 2491              	.LASF21:
 2492 045e 77696467 		.ascii	"widget\000"
 2492      657400
 2493              	.LASF31:
 2494 0465 6F6E4D61 		.ascii	"onMask\000"
 2494      736B00
 2495              	.LASF17:
 2496 046c 43617053 		.ascii	"CapSense_BaseInit\000"
 2496      656E7365 
 2496      5F426173 
 2496      65496E69 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccUgGjwK.s 			page 82


 2496      7400
 2497              	.LASF52:
 2498 047e 43617053 		.ascii	"CapSense_lowBaselineResetCnt\000"
 2498      656E7365 
 2498      5F6C6F77 
 2498      42617365 
 2498      6C696E65 
 2499              	.LASF56:
 2500 049b 43617053 		.ascii	"CapSense_debounce\000"
 2500      656E7365 
 2500      5F646562 
 2500      6F756E63 
 2500      6500
 2501              	.LASF48:
 2502 04ad 43617053 		.ascii	"CapSense_sensorBaseline\000"
 2502      656E7365 
 2502      5F73656E 
 2502      736F7242 
 2502      6173656C 
 2503              	.LASF14:
 2504 04c5 63686172 		.ascii	"char\000"
 2504      00
 2505              	.LASF30:
 2506 04ca 6465626F 		.ascii	"debounceIndex\000"
 2506      756E6365 
 2506      496E6465 
 2506      7800
 2507              	.LASF61:
 2508 04d8 47656E65 		.ascii	"Generated_Source\\PSoC5\\CapSense_CSHL.c\000"
 2508      72617465 
 2508      645F536F 
 2508      75726365 
 2508      5C50536F 
 2509              	.LASF44:
 2510 04ff 43617053 		.ascii	"CapSense_sensorRaw\000"
 2510      656E7365 
 2510      5F73656E 
 2510      736F7252 
 2510      617700
 2511              	.LASF57:
 2512 0512 43617053 		.ascii	"CapSense_debounceCounter\000"
 2512      656E7365 
 2512      5F646562 
 2512      6F756E63 
 2512      65436F75 
 2513              	.LASF26:
 2514 052b 74656D70 		.ascii	"tempRaw\000"
 2514      52617700 
 2515              	.LASF59:
 2516 0533 43617053 		.ascii	"CapSense_numberOfSensors\000"
 2516      656E7365 
 2516      5F6E756D 
 2516      6265724F 
 2516      6653656E 
 2517              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
